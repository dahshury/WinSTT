"""UI Layout Ports (Domain Layer).

Framework-agnostic ports for layout validation, creation, arrangement,
responsive behavior, optimization, progress tracking, and logging used by
application use cases. Adapters live in presentation/infrastructure layers.
"""

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Protocol

if TYPE_CHECKING:
    from src.domain.ui_coordination.value_objects.ui_layout import (
        ComponentRole,
        SetupPhase,
    )
    from src.domain.window_management.value_objects import LayoutType


class LayoutValidationServiceProtocol(Protocol):
    def validate_layout_type_compatibility(self, parent: Any, layout_type: LayoutType) -> list[str]: ...
    def validate_component_constraints(self, component: Any, constraints: Any) -> list[str]: ...
    def validate_layout_hierarchy(self, component_infos: list[Any]) -> list[str]: ...
    def validate_responsive_configuration(self, config: Any) -> list[str]: ...


class LayoutFactoryServiceProtocol(Protocol):
    def create_layout(self, layout_type: LayoutType, parent: Any) -> Any: ...
    def configure_layout_properties(self, layout: Any, constraints: Any) -> bool: ...
    def clone_layout(self, source_layout: Any, new_parent: Any) -> Any: ...


class ComponentArrangementServiceProtocol(Protocol):
    def add_component_to_layout(self, layout: Any, component: Any, constraints: Any, role: ComponentRole) -> bool: ...
    def remove_component_from_layout(self, layout: Any, component: Any) -> bool: ...
    def rearrange_components(self, layout: Any, arrangement_map: dict[ComponentRole, int]) -> bool: ...
    def update_component_constraints(self, layout: Any, component: Any, constraints: Any) -> bool: ...


class ResponsiveLayoutServiceProtocol(Protocol):
    def setup_responsive_behavior(self, parent: Any, config: Any) -> bool: ...
    def detect_current_breakpoint(self, parent: Any, breakpoints: dict[str, int]) -> str: ...
    def apply_breakpoint_layout(self, parent: Any, breakpoint_name: str, config: Any) -> bool: ...
    def register_resize_handler(self, parent: Any, handler: Any) -> bool: ...


class LayoutOptimizationServiceProtocol(Protocol):
    def optimize_layout_performance(self, layout: Any) -> dict[str, Any]: ...
    def calculate_optimal_sizes(self, layout: Any, components: list[Any]) -> dict[Any, tuple[int, int]]: ...
    def validate_layout_efficiency(self, layout: Any) -> list[str]: ...


class ProgressTrackingServiceProtocol(Protocol):
    def start_progress_session(self, session_id: str, total_phases: int) -> None: ...
    def update_progress(self, session_id: str, phase: SetupPhase, percentage: float) -> None: ...
    def complete_progress_session(self, session_id: str) -> None: ...


class LoggerServiceProtocol(Protocol):
    def log_info(self, message: str, context: dict[str, Any] | None = None) -> None: ...
    def log_warning(self, message: str, context: dict[str, Any] | None = None) -> None: ...
    def log_error(self, message: str, context: dict[str, Any] | None = None) -> None: ...


