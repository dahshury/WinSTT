src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:182:13: TRY300 Consider moving this statement to an `else` block
    |
180 |                     )
181 |
182 |             return response
    |             ^^^^^^^^^^^^^^^ TRY300
183 |
184 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:184:16: BLE001 Do not catch blind exception: `Exception`
    |
182 |             return response
183 |
184 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
185 |             return self._create_error_response(f"Window activation failed: {e!s}", response, e)
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:233:16: BLE001 Do not catch blind exception: `Exception`
    |
231 |             return windows[0] if windows else None
232 |
233 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
234 |             if self.logger:
235 |                 self.logger.warning("Window search failed: %s", e)
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:260:24: BLE001 Do not catch blind exception: `Exception`
    |
258 |                         return True
259 |
260 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
261 |                     if self.logger:
262 |                         self.logger.debug("Activation attempt %d with %s failed: %s", attempt + 1, method.value, e)
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:262:101: E501 Line too long (115 > 100)
    |
260 |                 except Exception as e:
261 |                     if self.logger:
262 |                         self.logger.debug("Activation attempt %d with %s failed: %s", attempt + 1, method.value, e)
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
263 |                     response.warnings.append(f"{method.value} attempt {attempt + 1} error: {e!s}")
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:268:101: E501 Line too long (121 > 100)
    |
267 |     def _activate_with_method(self,
268 |     method: ActivationMethod, config: ActivationConfiguration, window_info: WindowInfo, response: ActivateWindowResponse,
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^ E501
269 |     ) -> bool:
270 |         """Activate window using specific method."""
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:290:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
288 |           try:
289 |               # Restore if minimized
290 | /             if config.restore_if_minimized and window_info.state == WindowState.MINIMIZED:
291 | |                 if not self.window_activator.restore_window(window_info.handle):
    | |________________________________________________________________________________^ SIM102
292 |                       return False
    |
    = help: Combine `if` statements using `and`

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:299:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
298 |               # Bring to foreground
299 | /             if config.bring_to_foreground:
300 | |                 if not self.window_activator.bring_to_foreground(window_info.handle):
    | |_____________________________________________________________________________________^ SIM102
301 |                       return False
    |
    = help: Combine `if` statements using `and`

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:304:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
303 |               # Focus the window
304 | /             if config.focus_window:
305 | |                 if not self.window_activator.focus_window(window_info.handle):
    | |______________________________________________________________________________^ SIM102
306 |                       return False
    |
    = help: Combine `if` statements using `and`

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:312:13: TRY300 Consider moving this statement to an `else` block
    |
310 |                 self.window_activator.flash_window(window_info.handle, config.flash_count)
311 |
312 |             return True
    |             ^^^^^^^^^^^ TRY300
313 |
314 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:314:16: BLE001 Do not catch blind exception: `Exception`
    |
312 |             return True
313 |
314 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
315 |             response.warnings.append(f"Win32 activation error: {e!s}")
316 |             return False
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:329:13: TRY300 Consider moving this statement to an `else` block
    |
327 |                 success = self.window_activator.bring_to_foreground(window_info.handle)
328 |
329 |             return success
    |             ^^^^^^^^^^^^^^ TRY300
330 |
331 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:331:16: BLE001 Do not catch blind exception: `Exception`
    |
329 |             return success
330 |
331 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
332 |             response.warnings.append(f"Qt activation error: {e!s}",
333 |     )
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:337:5: ARG002 Unused method argument: `config`
    |
336 |     def _activate_via_system_tray(self,
337 |     config: ActivationConfiguration, window_info: WindowInfo, response: ActivateWindowResponse,
    |     ^^^^^^ ARG002
338 |     ) -> bool:
339 |         """Activate window via system tray."""
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:350:16: BLE001 Do not catch blind exception: `Exception`
    |
348 |             return self.window_activator.activate_window(window_info.handle)
349 |
350 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
351 |             response.warnings.append(f"System tray activation error: {e!s}")
352 |             return False
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:355:5: ARG002 Unused method argument: `config`
    |
354 |     def _activate_via_keyboard(self,
355 |     config: ActivationConfiguration, window_info: WindowInfo, response: ActivateWindowResponse,
    |     ^^^^^^ ARG002
356 |     ) -> bool:
357 |         """Activate window using keyboard shortcut."""
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:374:13: TRY300 Consider moving this statement to an `else` block
    |
372 |                         return True
373 |
374 |             return False
    |             ^^^^^^^^^^^^ TRY300
375 |
376 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:376:16: BLE001 Do not catch blind exception: `Exception`
    |
374 |             return False
375 |
376 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
377 |             response.warnings.append(f"Keyboard activation error: {e!s}")
378 |             return False
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:381:5: ARG002 Unused method argument: `config`
    |
380 |     def _activate_via_force_foreground(self,
381 |     config: ActivationConfiguration, window_info: WindowInfo, response: ActivateWindowResponse,
    |     ^^^^^^ ARG002
382 |     ) -> bool:
383 |         """Force window to foreground using aggressive methods."""
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:398:24: BLE001 Do not catch blind exception: `Exception`
    |
396 |                     if not method():
397 |                         success = False
398 |                 except Exception:
    |                        ^^^^^^^^^ BLE001
399 |                     success = False
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:401:13: TRY300 Consider moving this statement to an `else` block
    |
399 |                     success = False
400 |
401 |             return success
    |             ^^^^^^^^^^^^^^ TRY300
402 |
403 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:403:16: BLE001 Do not catch blind exception: `Exception`
    |
401 |             return success
402 |
403 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
404 |             response.warnings.append(f"Force foreground error: {e!s}")
405 |             return False
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:425:39: G004 Logging statement uses f-string
    |
423 |         if self.logger:
424 |             if exception:
425 |                 self.logger.exception(f"Window activation error: {error_message}")
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
426 |             else:
427 |                 self.logger.error("Window activation error: {error_message}")
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:446:13: TRY300 Consider moving this statement to an `else` block
    |
444 |                 windows.extend(self.window_finder.find_by_class(identifier))
445 |
446 |             return windows
    |             ^^^^^^^^^^^^^^ TRY300
447 |
448 |         except Exception:
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:448:16: BLE001 Do not catch blind exception: `Exception`
    |
446 |             return windows
447 |
448 |         except Exception:
    |                ^^^^^^^^^ BLE001
449 |             if self.logger:
450 |                 self.logger.warning("Window search failed: {e!s}")
    |

src_refactored\application\application_lifecycle\use_cases\activate_window_use_case.py:458:16: BLE001 Do not catch blind exception: `Exception`
    |
456 |         try:
457 |             return self.window_finder.find_by_handle(handle)
458 |         except Exception:
    |                ^^^^^^^^^ BLE001
459 |             if self.logger:
460 |                 self.logger.warning("Failed to get window info: {e!s}")
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:168:13: TRY300 Consider moving this statement to an `else` block
    |
166 |                     self.logger.warning("Failed to activate existing window")
167 |
168 |             return response
    |             ^^^^^^^^^^^^^^^ TRY300
169 |
170 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:170:16: BLE001 Do not catch blind exception: `Exception`
    |
168 |             return response
169 |
170 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
171 |             return self._create_error_response(f"Single instance check failed: {e!s}", response, e)
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:173:101: E501 Line too long (105 > 100)
    |
171 |             return self._create_error_response(f"Single instance check failed: {e!s}", response, e)
172 |
173 |     def _check_instance(self, request: CheckSingleInstanceRequest, response: CheckSingleInstanceResponse,
    |                                                                                                     ^^^^^ E501
174 |     ) -> bool:
175 |         """Check if this is the first instance."""
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:187:101: E501 Line too long (107 > 100)
    |
185 |         return True  # Default to allowing instance
186 |
187 |     def _check_via_socket(self, config: SingleInstanceConfiguration, response: CheckSingleInstanceResponse,
    |                                                                                                     ^^^^^^^ E501
188 |     ) -> bool:
189 |         """Check instance using socket binding."""
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:201:13: TRY300 Consider moving this statement to an `else` block
    |
199 |                 response.lock_resource = sock
200 |                 return True
201 |             return False
    |             ^^^^^^^^^^^^ TRY300
202 |
203 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:203:16: BLE001 Do not catch blind exception: `Exception`
    |
201 |             return False
202 |
203 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
204 |             if self.logger:
205 |                 self.logger.warning("Socket binding check failed: {e!s}")
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:209:101: E501 Line too long (110 > 100)
    |
207 |             return True  # Default to allowing instance on error
208 |
209 |     def _check_via_file_lock(self, config: SingleInstanceConfiguration, response: CheckSingleInstanceResponse,
    |                                                                                                     ^^^^^^^^^^ E501
210 |     ) -> bool:
211 |         """Check instance using file lock."""
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:223:13: TRY300 Consider moving this statement to an `else` block
    |
221 |                 response.lock_resource = lock
222 |                 return True
223 |             return False
    |             ^^^^^^^^^^^^ TRY300
224 |
225 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:225:16: BLE001 Do not catch blind exception: `Exception`
    |
223 |             return False
224 |
225 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
226 |             if self.logger:
227 |                 self.logger.warning("File lock check failed: {e!s}")
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:231:101: E501 Line too long (108 > 100)
    |
229 |             return True  # Default to allowing instance on error
230 |
231 |     def _check_via_process(self, request: CheckSingleInstanceRequest, response: CheckSingleInstanceResponse,
    |                                                                                                     ^^^^^^^^ E501
232 |     ) -> bool:
233 |         """Check instance using process enumeration."""
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:247:16: BLE001 Do not catch blind exception: `Exception`
    |
245 |             return len(other_processes) == 0
246 |
247 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
248 |             if self.logger:
249 |                 self.logger.warning("Process check failed: {e!s}")
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:289:53: FBT003 Boolean positional value in function call
    |
287 |                 if success:
288 |                     if request.activation_callback:
289 |                         request.activation_callback(True)
    |                                                     ^^^^ FBT003
290 |                     return True
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:292:20: BLE001 Do not catch blind exception: `Exception`
    |
290 |                     return True
291 |
292 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
293 |                 if self.logger:
294 |                     self.logger.warning("Window activation attempt {attempt + 1} failed: {e!s}")
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:298:41: FBT003 Boolean positional value in function call
    |
297 |         if request.activation_callback:
298 |             request.activation_callback(False,
    |                                         ^^^^^ FBT003
299 |     )
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:314:16: BLE001 Do not catch blind exception: `Exception`
    |
312 |             return self.window_activator.bring_to_foreground(window_handle)
313 |
314 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
315 |             response.warnings.append(f"Win32 activation error: {e!s}")
316 |             return False
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:324:16: BLE001 Do not catch blind exception: `Exception`
    |
322 |             return self.window_activator.activate_window(window_handle)
323 |
324 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
325 |             response.warnings.append(f"Qt activation error: {e!s}")
326 |             return False
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:342:16: BLE001 Do not catch blind exception: `Exception`
    |
340 |                     self.logger.info("Instance checking resources cleaned up")
341 |
342 |         except Exception:
    |                ^^^^^^^^^ BLE001
343 |             if self.logger:
344 |                 self.logger.warning("Cleanup error: {e!s}")
    |

src_refactored\application\application_lifecycle\use_cases\check_single_instance_use_case.py:358:39: G004 Logging statement uses f-string
    |
356 |         if self.logger:
357 |             if exception:
358 |                 self.logger.exception(f"Single instance check error: {error_message}")
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
359 |             else:
360 |                 self.logger.error("Single instance check error: {error_message}")
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:101:9: N802 Function name `processEvents` should be lowercase
    |
 99 |         ...
100 |
101 |     def processEvents(self,
    |         ^^^^^^^^^^^^^ N802
102 |     ) -> None:
103 |         """Process pending events."""
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:140:101: E501 Line too long (105 > 100)
    |
139 |             # Phase 1: Save State
140 |             self._update_progress(request, 10, "Saving application state...", ShutdownPhase.SAVING_STATE)
    |                                                                                                     ^^^^^ E501
141 |             success = self._save_application_state(request, response)
142 |             if not success and request.reason == ShutdownReason.CRITICAL_ERROR:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:146:101: E501 Line too long (101 > 100)
    |
145 |             # Phase 2: Stop Workers
146 |             self._update_progress(request, 30, "Stopping workers...", ShutdownPhase.STOPPING_WORKERS)
    |                                                                                                     ^ E501
147 |             success = self._stop_workers(request, response)
148 |             if not success:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:152:101: E501 Line too long (108 > 100)
    |
151 |             # Phase 3: Clean Resources
152 |             self._update_progress(request, 60, "Cleaning up resources...", ShutdownPhase.CLEANING_RESOURCES)
    |                                                                                                     ^^^^^^^^ E501
153 |             success = self._cleanup_resources(request, response)
154 |             if not success:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:158:101: E501 Line too long (107 > 100)
    |
157 |             # Phase 4: Close Connections
158 |             self._update_progress(request, 80, "Closing connections...", ShutdownPhase.CLOSING_CONNECTIONS)
    |                                                                                                     ^^^^^^^ E501
159 |             success = self._close_connections(request, response)
160 |             if not success:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:179:13: TRY300 Consider moving this statement to an `else` block
    |
177 |                 self.logger.info("Application shutdown completed: {response.result.value}")
178 |
179 |             return response
    |             ^^^^^^^^^^^^^^^ TRY300
180 |
181 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:181:16: BLE001 Do not catch blind exception: `Exception`
    |
179 |             return response
180 |
181 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
182 |             return self._create_error_response(f"Unexpected shutdown error: {e!s}", response, e)
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:201:13: TRY300 Consider moving this statement to an `else` block
    |
199 |                 return True
200 |             response.cleanup_errors.append("Failed to save application state")
201 |             return False
    |             ^^^^^^^^^^^^ TRY300
202 |
203 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:203:16: BLE001 Do not catch blind exception: `Exception`
    |
201 |             return False
202 |
203 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
204 |             if request.error_callback:
205 |                 request.error_callback("State saving failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:209:101: E501 Line too long (103 > 100)
    |
207 |             return False
208 |
209 |     def _stop_workers(self, request: ShutdownApplicationRequest, response: ShutdownApplicationResponse,
    |                                                                                                     ^^^ E501
210 |     ) -> bool:
211 |         """Stop all running workers."""
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:220:34: G004 Logging statement uses f-string
    |
219 |             if self.logger:
220 |                 self.logger.info(f"Stopping {len(active_workers)} active workers")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
221 |
222 |             success = self.worker_manager.stop_all_workers(
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:233:13: TRY300 Consider moving this statement to an `else` block
    |
231 |                 return True
232 |             response.cleanup_errors.append("Some workers failed to stop")
233 |             return False
    |             ^^^^^^^^^^^^ TRY300
234 |
235 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:235:16: BLE001 Do not catch blind exception: `Exception`
    |
233 |             return False
234 |
235 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
236 |             if request.error_callback:
237 |                 request.error_callback("Worker stopping failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:241:101: E501 Line too long (108 > 100)
    |
239 |             return False
240 |
241 |     def _cleanup_resources(self, request: ShutdownApplicationRequest, response: ShutdownApplicationResponse,
    |                                                                                                     ^^^^^^^^ E501
242 |     ) -> bool:
243 |         """Cleanup application resources."""
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:253:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
252 |               # Cleanup temporary files if requested
253 | /             if request.configuration.cleanup_temp_files:
254 | |                 if not self.resource_manager.cleanup_temp_files():
    | |__________________________________________________________________^ SIM102
255 |                       response.cleanup_errors.append("Temporary file cleanup failed")
256 |                       success = False
    |
    = help: Combine `if` statements using `and`

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:263:13: TRY300 Consider moving this statement to an `else` block
    |
261 |                     self.logger.info("Resources cleaned up successfully")
262 |
263 |             return success
    |             ^^^^^^^^^^^^^^ TRY300
264 |
265 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:265:16: BLE001 Do not catch blind exception: `Exception`
    |
263 |             return success
264 |
265 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
266 |             if request.error_callback:
267 |                 request.error_callback("Resource cleanup failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:271:101: E501 Line too long (108 > 100)
    |
269 |             return False
270 |
271 |     def _close_connections(self, request: ShutdownApplicationRequest, response: ShutdownApplicationResponse,
    |                                                                                                     ^^^^^^^^ E501
272 |     ) -> bool:
273 |         """Close network connections and sockets."""
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:283:13: TRY300 Consider moving this statement to an `else` block
    |
281 |                 return True
282 |             response.cleanup_errors.append("Connection closure failed")
283 |             return False
    |             ^^^^^^^^^^^^ TRY300
284 |
285 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:285:16: BLE001 Do not catch blind exception: `Exception`
    |
283 |             return False
284 |
285 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
286 |             if request.error_callback:
287 |                 request.error_callback("Connection closure failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:291:101: E501 Line too long (108 > 100)
    |
289 |             return False
290 |
291 |     def _finalize_shutdown(self, request: ShutdownApplicationRequest, response: ShutdownApplicationResponse,
    |                                                                                                     ^^^^^^^^ E501
292 |     ) -> bool:
293 |         """Finalize the shutdown process."""
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:310:13: TRY300 Consider moving this statement to an `else` block
    |
308 |                 self.logger.info("Shutdown finalized with exit code: {response.exit_code}")
309 |
310 |             return True
    |             ^^^^^^^^^^^ TRY300
311 |
312 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:312:16: BLE001 Do not catch blind exception: `Exception`
    |
310 |             return True
311 |
312 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
313 |             if request.error_callback:
314 |                 request.error_callback("Shutdown finalization failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:319:5: ARG002 Unused method argument: `request`
    |
318 |     def _force_immediate_shutdown(self,
319 |     request: ShutdownApplicationRequest, response: ShutdownApplicationResponse,
    |     ^^^^^^^ ARG002
320 |     ) -> ShutdownApplicationResponse:
321 |         """Force immediate shutdown without graceful cleanup."""
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:338:13: TRY300 Consider moving this statement to an `else` block
    |
336 |             response.warnings.append("Forced immediate shutdown - cleanup may be incomplete")
337 |
338 |             return response
    |             ^^^^^^^^^^^^^^^ TRY300
339 |
340 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:340:16: BLE001 Do not catch blind exception: `Exception`
    |
338 |             return response
339 |
340 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
341 |             return self._create_error_response(f"Force shutdown failed: {e!s}", response, e)
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:369:39: G004 Logging statement uses f-string
    |
367 |         if self.logger:
368 |             if exception:
369 |                 self.logger.exception(f"Shutdown error: {error_message}")
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
370 |             else:
371 |                 self.logger.error("Shutdown error: {error_message}")
    |

src_refactored\application\application_lifecycle\use_cases\shutdown_application_use_case.py:392:16: BLE001 Do not catch blind exception: `Exception`
    |
390 |             sys.exit(1)
391 |
392 |         except Exception:
    |                ^^^^^^^^^ BLE001
393 |             # Last resort
394 |             sys.exit(1)
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:114:9: PLR0911 Too many return statements (7 > 6)
    |
112 |         self.current_phase = StartupPhase.ENVIRONMENT_SETUP
113 |
114 |     def execute(self, request: StartupApplicationRequest,
    |         ^^^^^^^ PLR0911
115 |     ) -> StartupApplicationResponse:
116 |         """Execute the startup application use case."""
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:124:101: E501 Line too long (107 > 100)
    |
122 |         try:
123 |             # Phase 1: Environment Setup
124 |             self._update_progress(request, 10, "Setting up environment...", StartupPhase.ENVIRONMENT_SETUP)
    |                                                                                                     ^^^^^^^ E501
125 |             success = self._setup_environment(request, response)
126 |             if not success:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:136:101: E501 Line too long (108 > 100)
    |
135 |             # Phase 3: Warnings Suppression
136 |             self._update_progress(request, 30, "Suppressing warnings...", StartupPhase.WARNINGS_SUPPRESSION)
    |                                                                                                     ^^^^^^^^ E501
137 |             success = self._suppress_warnings(request, response)
138 |             if not success:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:142:101: E501 Line too long (114 > 100)
    |
141 |             # Phase 4: Framework Initialization
142 |             self._update_progress(request, 50, "Initializing framework...", StartupPhase.FRAMEWORK_INITIALIZATION)
    |                                                                                                     ^^^^^^^^^^^^^^ E501
143 |             success = self._initialize_framework(request, response)
144 |             if not success:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:148:101: E501 Line too long (119 > 100)
    |
147 |             # Phase 5: Single Instance Check
148 |             self._update_progress(request, 70, "Checking for existing instance...", StartupPhase.SINGLE_INSTANCE_CHECK)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^ E501
149 |             is_running = self._check_single_instance(request, response)
150 |             if is_running:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:155:101: E501 Line too long (103 > 100)
    |
154 |             # Phase 6: Window Creation
155 |             self._update_progress(request, 90, "Creating main window...", StartupPhase.WINDOW_CREATION)
    |                                                                                                     ^^^ E501
156 |             success = self._create_main_window(request, response)
157 |             if not success:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:166:13: TRY300 Consider moving this statement to an `else` block
    |
164 |             response.completed_phases.append(StartupPhase.APPLICATION_READY)
165 |
166 |             return response
    |             ^^^^^^^^^^^^^^^ TRY300
167 |
168 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:168:16: BLE001 Do not catch blind exception: `Exception`
    |
166 |             return response
167 |
168 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
169 |             return self._create_error_response(f"Unexpected startup error: {e!s}", response, e)
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:171:101: E501 Line too long (106 > 100)
    |
169 |             return self._create_error_response(f"Unexpected startup error: {e!s}", response, e)
170 |
171 |     def _setup_environment(self, request: StartupApplicationRequest, response: StartupApplicationResponse,
    |                                                                                                     ^^^^^^ E501
172 |     ) -> bool:
173 |         """Setup environment variables and configuration."""
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:183:13: TRY300 Consider moving this statement to an `else` block
    |
181 |                 return True
182 |
183 |             return False
    |             ^^^^^^^^^^^^ TRY300
184 |
185 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:185:16: BLE001 Do not catch blind exception: `Exception`
    |
183 |             return False
184 |
185 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
186 |             if request.error_callback:
187 |                 request.error_callback("Environment setup failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:190:101: E501 Line too long (102 > 100)
    |
188 |             return False
189 |
190 |     def _setup_logging(self, request: StartupApplicationRequest, response: StartupApplicationResponse,
    |                                                                                                     ^^ E501
191 |     ) -> bool:
192 |         """Setup application logging."""
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:207:13: TRY300 Consider moving this statement to an `else` block
    |
205 |                 return True
206 |
207 |             return False
    |             ^^^^^^^^^^^^ TRY300
208 |
209 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:209:16: BLE001 Do not catch blind exception: `Exception`
    |
207 |             return False
208 |
209 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
210 |             if request.error_callback:
211 |                 request.error_callback("Logging setup failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:214:101: E501 Line too long (106 > 100)
    |
212 |             return False
213 |
214 |     def _suppress_warnings(self, request: StartupApplicationRequest, response: StartupApplicationResponse,
    |                                                                                                     ^^^^^^ E501
215 |     ) -> bool:
216 |         """Suppress application warnings."""
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:227:13: TRY300 Consider moving this statement to an `else` block
    |
225 |             response.completed_phases.append(StartupPhase.WARNINGS_SUPPRESSION,
226 |     )
227 |             return True
    |             ^^^^^^^^^^^ TRY300
228 |
229 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:229:16: BLE001 Do not catch blind exception: `Exception`
    |
227 |             return True
228 |
229 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
230 |             if request.error_callback:
231 |                 request.error_callback("Warning suppression failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:234:101: E501 Line too long (109 > 100)
    |
232 |             return False
233 |
234 |     def _initialize_framework(self, request: StartupApplicationRequest, response: StartupApplicationResponse,
    |                                                                                                     ^^^^^^^^^ E501
235 |     ) -> bool:
236 |         """Initialize the application framework (PyQt)."""
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:250:13: TRY300 Consider moving this statement to an `else` block
    |
248 |                 return True
249 |
250 |             return False
    |             ^^^^^^^^^^^^ TRY300
251 |
252 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:252:16: BLE001 Do not catch blind exception: `Exception`
    |
250 |             return False
251 |
252 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
253 |             if request.error_callback:
254 |                 request.error_callback("Framework initialization failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:257:101: E501 Line too long (110 > 100)
    |
255 |             return False
256 |
257 |     def _check_single_instance(self, request: StartupApplicationRequest, response: StartupApplicationResponse,
    |                                                                                                     ^^^^^^^^^^ E501
258 |     ) -> bool:
259 |         """Check if application is already running."""
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:281:13: TRY300 Consider moving this statement to an `else` block
    |
280 |             response.completed_phases.append(StartupPhase.SINGLE_INSTANCE_CHECK)
281 |             return False  # No other instance running
    |             ^^^^^^^^^^^^ TRY300
282 |
283 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:283:16: BLE001 Do not catch blind exception: `Exception`
    |
281 |             return False  # No other instance running
282 |
283 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
284 |             if request.error_callback:
285 |                 request.error_callback("Single instance check failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:291:101: E501 Line too long (107 > 100)
    |
289 |             return False
290 |
291 |     def _create_main_window(self, request: StartupApplicationRequest, response: StartupApplicationResponse,
    |                                                                                                     ^^^^^^^ E501
292 |     ) -> bool:
293 |         """Create and setup the main window."""
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:307:13: TRY300 Consider moving this statement to an `else` block
    |
305 |                 return True
306 |
307 |             return False
    |             ^^^^^^^^^^^^ TRY300
308 |
309 |         except Exception as e:
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:309:16: BLE001 Do not catch blind exception: `Exception`
    |
307 |             return False
308 |
309 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
310 |             if request.error_callback:
311 |                 request.error_callback("Window creation failed", e)
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:339:43: G004 Logging statement uses f-string
    |
337 |         if response.logger:
338 |             if exception:
339 |                 response.logger.exception(f"Startup error: {error_message}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
340 |             else:
341 |                 response.logger.error("Startup error: {error_message}")
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:351:9: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    |
349 |       def cleanup(self) -> None:
350 |           """Cleanup startup resources."""
351 | /         try:
352 | |             self.single_instance_service.cleanup()
353 | |         except Exception:
354 | |             pass  # Ignore cleanup errors
    | |________________^ SIM105
    |
    = help: Replace with `contextlib.suppress(Exception)`

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:353:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
351 |           try:
352 |               self.single_instance_service.cleanup()
353 | /         except Exception:
354 | |             pass  # Ignore cleanup errors
    | |________________^ S110
    |

src_refactored\application\application_lifecycle\use_cases\startup_application_use_case.py:353:16: BLE001 Do not catch blind exception: `Exception`
    |
351 |         try:
352 |             self.single_instance_service.cleanup()
353 |         except Exception:
    |                ^^^^^^^^^ BLE001
354 |             pass  # Ignore cleanup errors
    |

src_refactored\application\audio_recording\use_cases\configure_audio_use_case.py:79:21: SyntaxError: Expected ',', found string
   |
77 |                         error_message="Cannot configure audio while recording is in progress",
78 |                     )
79 |                     "Cannot configure audio during recording",
   |                     ^
80 |                 )
   |

src_refactored\application\audio_recording\use_cases\configure_audio_use_case.py:91:101: E501 Line too long (110 > 100)
   |
89 |                 "audio_format": request.audio_format or current_config.audio_format,
90 |                 "chunk_size": request.chunk_size or current_config.chunk_size,
91 |                 "device_id": request.device_id if request.device_id is not None else current_config.device_id,
   |                                                                                                     ^^^^^^^^^^ E501
92 |             }
   |

src_refactored\application\audio_recording\use_cases\configure_audio_use_case.py:104:21: SyntaxError: Expected ',', found FStringStart
    |
102 |                         error_message=f"Invalid configuration parameters: {e!s}",
103 |                     )
104 |                     f"Invalid configuration: {e!s}",
    |                     ^
105 |                 )
    |

src_refactored\application\audio_recording\use_cases\configure_audio_use_case.py:125:29: SyntaxError: Expected ',', found name
    |
123 |     f"Device validation failed: {device_validation.error}",),
124 |                             )
125 |                             device_validation.error,
    |                             ^
126 |                         )
    |

src_refactored\application\audio_recording\use_cases\configure_audio_use_case.py:141:41: SyntaxError: Expected an expression or a ')'
    |
139 |             config_result = self._audio_recorder.configure(new_configuration)
140 |
141 |             if config_result.is_failure(,
    |                                         ^
142 |     ):
143 |                 if self._error_callback_service:
    |

src_refactored\application\audio_recording\use_cases\configure_audio_use_case.py:154:21: SyntaxError: Expected ',', found name
    |
152 |                         error_message=config_result.error,
153 |                     )
154 |                     config_result.error,
    |                     ^
155 |                 )
    |

src_refactored\application\audio_recording\use_cases\configure_audio_use_case.py:172:29: SyntaxError: Expected ',', found name
    |
170 |                                 error_message=f"Configuration test failed: {test_result.error}",
171 |                             )
172 |                             test_result.error,
    |                             ^
173 |                         )
174 |                 except Exception as e:
    |

src_refactored\application\audio_recording\use_cases\configure_audio_use_case.py:203:17: SyntaxError: Expected ',', found name
    |
201 |                     error_message=error_msg,
202 |                 )
203 |                 error_msg,
    |                 ^
204 |             )
    |

src_refactored\application\audio_recording\use_cases\get_recording_status_use_case.py:84:55: SyntaxError: Expected an expression or a ')'
   |
82 |             metrics = None
83 |             if request.include_metrics:
84 |                 metrics = self._get_recording_metrics(,
   |                                                       ^
85 |     )
   |

src_refactored\application\audio_recording\use_cases\get_recording_status_use_case.py:108:17: SyntaxError: Expected ',', found name
    |
106 |                     error_message=error_msg,
107 |                 )
108 |                 error_msg,
    |                 ^
109 |             )
    |

src_refactored\application\audio_recording\use_cases\get_recording_status_use_case.py:123:64: SyntaxError: Expected an expression or a ')'
    |
121 |             if start_time and self._audio_recorder.get_state() == RecordingState.RECORDING:
122 |                 duration = time.time() - start_time
123 |             elif start_time and self._audio_recorder.get_state(,
    |                                                                ^
124 |     ) == RecordingState.STOPPED:
125 |                 # For stopped recordings, try to get the actual duration
    |

src_refactored\application\audio_recording\use_cases\get_recording_status_use_case.py:137:63: SyntaxError: Expected an expression or a ')'
    |
135 |                 try:
136 |                     detailed_metrics = self._metrics_service.get_current_metrics(
137 |                         self._audio_recorder.get_recording_id(,
    |                                                               ^
138 |     ),
139 |                     )
    |

src_refactored\application\audio_recording\use_cases\pause_recording_use_case.py:80:21: SyntaxError: Expected ',', found name
   |
78 |                         error_message=error_msg,
79 |                     )
80 |                     error_msg,
   |                     ^
81 |                 )
   |

src_refactored\application\audio_recording\use_cases\pause_recording_use_case.py:98:65: SyntaxError: Expected an expression or a ')'
   |
96 |                 try:
97 |                     save_result = self._audio_recorder.save_partial_recording()
98 |                     partial_data_saved = save_result.is_success(,
   |                                                                 ^
99 |     )
   |

src_refactored\application\audio_recording\use_cases\pause_recording_use_case.py:127:21: SyntaxError: Expected ',', found name
    |
125 |                         error_message=pause_result.error,
126 |                     )
127 |                     pause_result.error,
    |                     ^
128 |                 )
    |

src_refactored\application\audio_recording\use_cases\pause_recording_use_case.py:167:17: SyntaxError: Expected ',', found name
    |
165 |                     error_message=error_msg,
166 |                 )
167 |                 error_msg,
    |                 ^
168 |             )
    |

src_refactored\application\audio_recording\use_cases\resume_recording_use_case.py:84:21: SyntaxError: Expected ',', found name
   |
82 |                         error_message=error_msg,
83 |                     )
84 |                     error_msg,
   |                     ^
85 |                 )
   |

src_refactored\application\audio_recording\use_cases\resume_recording_use_case.py:104:73: SyntaxError: Expected an expression or a ')'
    |
102 |                 try:
103 |                     validation_result = self._audio_recorder.validate_recording_continuity()
104 |                     continuity_validated = validation_result.is_success(,
    |                                                                         ^
105 |     )
    |

src_refactored\application\audio_recording\use_cases\resume_recording_use_case.py:110:101: E501 Line too long (101 > 100)
    |
108 |                         if self._error_callback_service:
109 |                             self._error_callback_service.notify_warning(
110 |                                 f"Recording continuity validation failed: {validation_result.error}",
    |                                                                                                     ^ E501
111 |                             )
    |

src_refactored\application\audio_recording\use_cases\resume_recording_use_case.py:137:21: SyntaxError: Expected ',', found name
    |
135 |                         error_message=resume_result.error,
136 |                     )
137 |                     resume_result.error,
    |                     ^
138 |                 )
    |

src_refactored\application\audio_recording\use_cases\resume_recording_use_case.py:188:17: SyntaxError: Expected ',', found name
    |
186 |                     error_message=error_msg,
187 |                 )
188 |                 error_msg,
    |                 ^
189 |             )
    |

src_refactored\application\audio_recording\use_cases\start_recording_use_case.py:76:21: SyntaxError: Expected ',', found string
   |
74 |                         error_message="Recording is already in progress",
75 |                     )
76 |                     "Recording already in progress",
   |                     ^
77 |                 )
   |

src_refactored\application\audio_recording\use_cases\start_recording_use_case.py:82:45: SyntaxError: Expected an expression or a ')'
   |
80 |             if request.configuration:
81 |                 config_result = self._audio_recorder.configure(request.configuration)
82 |                 if config_result.is_failure(,
   |                                             ^
83 |     ):
84 |                     return Result.failure(
   |

src_refactored\application\audio_recording\use_cases\start_recording_use_case.py:89:25: SyntaxError: Expected ',', found name
   |
87 |                             error_message=f"Configuration failed: {config_result.error}",
88 |                         )
89 |                         config_result.error,
   |                         ^
90 |                     )
   |

src_refactored\application\audio_recording\use_cases\start_recording_use_case.py:108:21: SyntaxError: Expected ',', found name
    |
106 |                         error_message=start_result.error,
107 |                     )
108 |                     start_result.error,
    |                     ^
109 |                 )
    |

src_refactored\application\audio_recording\use_cases\start_recording_use_case.py:146:17: SyntaxError: Expected ',', found name
    |
144 |                     error_message=error_msg,
145 |                 )
146 |                 error_msg,
    |                 ^
147 |             )
    |

src_refactored\application\audio_recording\use_cases\start_recording_use_case.py:162:17: SyntaxError: Expected ',', found name
    |
160 |                     error_message=error_msg,
161 |                 )
162 |                 error_msg,
    |                 ^
163 |             )
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:77:21: SyntaxError: Expected ',', found string
   |
75 |                         error_message="No recording in progress",
76 |                     )
77 |                     "No recording in progress",
   |                     ^
78 |                 )
   |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:98:21: SyntaxError: Expected ',', found name
   |
96 |                         error_message=stop_result.error,
97 |                     )
98 |                     stop_result.error,
   |                     ^
99 |                 )
   |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:123:2: SyntaxError: unindent does not match any outer indentation level
    |
121 |             if not request.force_stop and duration < min_duration:
122 |                 error_msg
123 |  = (
    |  ^
124 |     f"Recording too short ({duration:.2f} seconds). Minimum duration is {min_duration} seconds.")
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:126:1: SyntaxError: Unexpected indentation
    |
124 |     f"Recording too short ({duration:.2f} seconds). Minimum duration is {min_duration} seconds.")
125 |
126 |                 if self._error_callback_service:
    | ^
127 |                     self._error_callback_service.notify_warning(error_msg,
128 |     )
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:137:22: COM812 Trailing comma missing
    |
135 |                         was_too_short=True,
136 |                         error_message=error_msg,
137 |                     )
    |                      ^ COM812
138 |                 )
    |
    = help: Add trailing comma

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:141:1: SyntaxError: unindent does not match any outer indentation level
    |
140 |             # Get audio data if requested
141 |             audio_data = None
    | ^
142 |             if request.save_recording:
143 |                 try:
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:142:1: SyntaxError: Unexpected indentation
    |
140 |             # Get audio data if requested
141 |             audio_data = None
142 |             if request.save_recording:
    | ^
143 |                 try:
144 |                     audio_data_result = self._audio_recorder.get_audio_data()
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:145:53: SyntaxError: Expected an expression or a ')'
    |
143 |                 try:
144 |                     audio_data_result = self._audio_recorder.get_audio_data()
145 |                     if audio_data_result.is_success(,
    |                                                     ^
146 |     ):
147 |                         audio_data = audio_data_result.value
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:160:66: COM812 Trailing comma missing
    |
158 |                                 duration=duration,
159 | error_message = (
160 |     f"Failed to retrieve audio data: {audio_data_result.error}",)
    |                                                                  ^ COM812
161 |                             )
162 |                             audio_data_result.error,
    |
    = help: Add trailing comma

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:162:29: SyntaxError: Expected ',', found name
    |
160 |     f"Failed to retrieve audio data: {audio_data_result.error}",)
161 |                             )
162 |                             audio_data_result.error,
    |                             ^
163 |                         )
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:179:25: SyntaxError: Expected ',', found name
    |
177 |                             error_message=error_msg,
178 |                         )
179 |                         error_msg,
    |                         ^
180 |                     )
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:202:18: COM812 Trailing comma missing
    |
200 |                     duration=duration,
201 |                     audio_data=audio_data,
202 |                 )
    |                  ^ COM812
203 |             )
    |
    = help: Add trailing comma

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:205:1: SyntaxError: unindent does not match any outer indentation level
    |
203 |             )
204 |
205 |         except Exception as e:
    | ^
206 |             # Handle unexpected errors
207 |             error_msg = f"Unexpected error stopping recording: {e!s}"
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:205:9: SyntaxError: Expected a statement
    |
203 |             )
204 |
205 |         except Exception as e:
    |         ^
206 |             # Handle unexpected errors
207 |             error_msg = f"Unexpected error stopping recording: {e!s}"
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:205:26: SyntaxError: Expected a statement
    |
203 |             )
204 |
205 |         except Exception as e:
    |                          ^
206 |             # Handle unexpected errors
207 |             error_msg = f"Unexpected error stopping recording: {e!s}"
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:205:31: SyntaxError: Expected an expression
    |
203 |             )
204 |
205 |         except Exception as e:
    |                               ^
206 |             # Handle unexpected errors
207 |             error_msg = f"Unexpected error stopping recording: {e!s}"
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:207:1: SyntaxError: Unexpected indentation
    |
205 |         except Exception as e:
206 |             # Handle unexpected errors
207 |             error_msg = f"Unexpected error stopping recording: {e!s}"
    | ^
208 |             if self._error_callback_service:
209 |                 self._error_callback_service.notify_error(
    |

src_refactored\application\audio_recording\use_cases\stop_recording_use_case.py:218:17: SyntaxError: Expected ',', found name
    |
216 |                     error_message=error_msg,
217 |                 )
218 |                 error_msg,
    |                 ^
219 |             )
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:454:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
452 |                         request.audio_data, request.configuration.target_rms, original_rms,
453 |                     )
454 | scaling_applied = (
    | ^
455 |     request.configuration.target_rms / original_rms if original_rms > 0 else 0.0)
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:457:1: SyntaxError: Unexpected indentation
    |
455 |     request.configuration.target_rms / original_rms if original_rms > 0 else 0.0)
456 |
457 |                 elif request.configuration.method == NormalizationMethod.PEAK_BASED:
    | ^
458 |                     normalized_data = self._normalization_service.normalize_peak_based(
459 |                         request.audio_data, request.configuration.target_peak, original_peak,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:457:17: SyntaxError: Expected a statement
    |
455 |     request.configuration.target_rms / original_rms if original_rms > 0 else 0.0)
456 |
457 |                 elif request.configuration.method == NormalizationMethod.PEAK_BASED:
    |                 ^
458 |                     normalized_data = self._normalization_service.normalize_peak_based(
459 |                         request.audio_data, request.configuration.target_peak, original_peak,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:457:22: SyntaxError: Invalid annotated assignment target
    |
455 |     request.configuration.target_rms / original_rms if original_rms > 0 else 0.0)
456 |
457 |                 elif request.configuration.method == NormalizationMethod.PEAK_BASED:
    |                      ^
458 |                     normalized_data = self._normalization_service.normalize_peak_based(
459 |                         request.audio_data, request.configuration.target_peak, original_peak,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:457:85: SyntaxError: Expected an expression
    |
455 |     request.configuration.target_rms / original_rms if original_rms > 0 else 0.0)
456 |
457 |                 elif request.configuration.method == NormalizationMethod.PEAK_BASED:
    |                                                                                     ^
458 |                     normalized_data = self._normalization_service.normalize_peak_based(
459 |                         request.audio_data, request.configuration.target_peak, original_peak,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:458:1: SyntaxError: Unexpected indentation
    |
457 |                 elif request.configuration.method == NormalizationMethod.PEAK_BASED:
458 |                     normalized_data = self._normalization_service.normalize_peak_based(
    | ^
459 |                         request.audio_data, request.configuration.target_peak, original_peak,
460 |                     )
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:461:1: SyntaxError: Expected a statement
    |
459 |                         request.audio_data, request.configuration.target_peak, original_peak,
460 |                     )
461 | scaling_applied = (
    | ^
462 |     request.configuration.target_peak / original_peak if original_peak > 0 else 0.0)
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:464:1: SyntaxError: Unexpected indentation
    |
462 |     request.configuration.target_peak / original_peak if original_peak > 0 else 0.0)
463 |
464 |                 elif request.configuration.method == NormalizationMethod.Z_SCORE:
    | ^
465 |                     normalized_data = self._normalization_service.apply_z_score_normalization(
466 |                         request.audio_data,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:464:17: SyntaxError: Expected a statement
    |
462 |     request.configuration.target_peak / original_peak if original_peak > 0 else 0.0)
463 |
464 |                 elif request.configuration.method == NormalizationMethod.Z_SCORE:
    |                 ^
465 |                     normalized_data = self._normalization_service.apply_z_score_normalization(
466 |                         request.audio_data,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:464:22: SyntaxError: Invalid annotated assignment target
    |
462 |     request.configuration.target_peak / original_peak if original_peak > 0 else 0.0)
463 |
464 |                 elif request.configuration.method == NormalizationMethod.Z_SCORE:
    |                      ^
465 |                     normalized_data = self._normalization_service.apply_z_score_normalization(
466 |                         request.audio_data,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:464:82: SyntaxError: Expected an expression
    |
462 |     request.configuration.target_peak / original_peak if original_peak > 0 else 0.0)
463 |
464 |                 elif request.configuration.method == NormalizationMethod.Z_SCORE:
    |                                                                                  ^
465 |                     normalized_data = self._normalization_service.apply_z_score_normalization(
466 |                         request.audio_data,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:465:1: SyntaxError: Unexpected indentation
    |
464 |                 elif request.configuration.method == NormalizationMethod.Z_SCORE:
465 |                     normalized_data = self._normalization_service.apply_z_score_normalization(
    | ^
466 |                         request.audio_data,
467 |                     )
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:470:17: SyntaxError: Expected a statement
    |
468 |                     scaling_applied = 1.0 / original_std if original_std > 0 else 0.0
469 |
470 |                 elif request.configuration.method == NormalizationMethod.MIN_MAX:
    |                 ^
471 |                     normalized_data = self._normalization_service.apply_min_max_normalization(
472 |                         request.audio_data, -1.0, 1.0,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:470:22: SyntaxError: Invalid annotated assignment target
    |
468 |                     scaling_applied = 1.0 / original_std if original_std > 0 else 0.0
469 |
470 |                 elif request.configuration.method == NormalizationMethod.MIN_MAX:
    |                      ^
471 |                     normalized_data = self._normalization_service.apply_min_max_normalization(
472 |                         request.audio_data, -1.0, 1.0,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:470:82: SyntaxError: Expected an expression
    |
468 |                     scaling_applied = 1.0 / original_std if original_std > 0 else 0.0
469 |
470 |                 elif request.configuration.method == NormalizationMethod.MIN_MAX:
    |                                                                                  ^
471 |                     normalized_data = self._normalization_service.apply_min_max_normalization(
472 |                         request.audio_data, -1.0, 1.0,
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:471:1: SyntaxError: Unexpected indentation
    |
470 |                 elif request.configuration.method == NormalizationMethod.MIN_MAX:
471 |                     normalized_data = self._normalization_service.apply_min_max_normalization(
    | ^
472 |                         request.audio_data, -1.0, 1.0,
473 |                     )
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:477:17: SyntaxError: Expected a statement
    |
475 |                     scaling_applied = 2.0 / data_range if data_range > 0 else 0.0
476 |
477 |                 else:
    |                 ^
478 |                     # Default to speech optimized
479 |                     normalized_data = self._normalization_service.normalize_for_speech(
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:477:21: SyntaxError: Expected a statement
    |
475 |                     scaling_applied = 2.0 / data_range if data_range > 0 else 0.0
476 |
477 |                 else:
    |                     ^
478 |                     # Default to speech optimized
479 |                     normalized_data = self._normalization_service.normalize_for_speech(
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:477:22: SyntaxError: Expected a statement
    |
475 |                     scaling_applied = 2.0 / data_range if data_range > 0 else 0.0
476 |
477 |                 else:
    |                      ^
478 |                     # Default to speech optimized
479 |                     normalized_data = self._normalization_service.normalize_for_speech(
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:479:1: SyntaxError: Unexpected indentation
    |
477 |                 else:
478 |                     # Default to speech optimized
479 |                     normalized_data = self._normalization_service.normalize_for_speech(
    | ^
480 |                         request.audio_data, request.configuration.scaling_factor,
481 |                     )
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:484:13: SyntaxError: unindent does not match any outer indentation level
    |
482 |                     scaling_applied = request.configuration.scaling_factor
483 |
484 |             except Exception as e:
    |             ^
485 |                 error_message = f"Failed to apply normalization: {e!s}"
486 |                 self._logger_service.log_error("Normalization failed", error=str(e))
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:484:30: SyntaxError: Expected a statement
    |
482 |                     scaling_applied = request.configuration.scaling_factor
483 |
484 |             except Exception as e:
    |                              ^
485 |                 error_message = f"Failed to apply normalization: {e!s}"
486 |                 self._logger_service.log_error("Normalization failed", error=str(e))
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:484:35: SyntaxError: Expected an expression
    |
482 |                     scaling_applied = request.configuration.scaling_factor
483 |
484 |             except Exception as e:
    |                                   ^
485 |                 error_message = f"Failed to apply normalization: {e!s}"
486 |                 self._logger_service.log_error("Normalization failed", error=str(e))
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:485:1: SyntaxError: Unexpected indentation
    |
484 |             except Exception as e:
485 |                 error_message = f"Failed to apply normalization: {e!s}"
    | ^
486 |                 self._logger_service.log_error("Normalization failed", error=str(e))
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:498:1: SyntaxError: unindent does not match any outer indentation level
    |
497 |             # Phase 5: Apply clipping if enabled
498 |             clipping_occurred = False
    | ^
499 |             if request.configuration.enable_clipping:
500 |                 self._logger_service.log_debug(
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:499:1: SyntaxError: Unexpected indentation
    |
497 |             # Phase 5: Apply clipping if enabled
498 |             clipping_occurred = False
499 |             if request.configuration.enable_clipping:
    | ^
500 |                 self._logger_service.log_debug(
501 |                     "Applying clipping",
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:580:1: SyntaxError: unindent does not match any outer indentation level
    |
578 |             )
579 |
580 |         except Exception as e:
    | ^
581 |             error_message = f"Error normalizing audio: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:580:9: SyntaxError: Expected a statement
    |
578 |             )
579 |
580 |         except Exception as e:
    |         ^
581 |             error_message = f"Error normalizing audio: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:580:26: SyntaxError: Expected a statement
    |
578 |             )
579 |
580 |         except Exception as e:
    |                          ^
581 |             error_message = f"Error normalizing audio: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:580:31: SyntaxError: Expected an expression
    |
578 |             )
579 |
580 |         except Exception as e:
    |                               ^
581 |             error_message = f"Error normalizing audio: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:581:1: SyntaxError: Unexpected indentation
    |
580 |         except Exception as e:
581 |             error_message = f"Error normalizing audio: {e!s}"
    | ^
582 |
583 |             self._logger_service.log_error(
    |

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:586:29: COM812 Trailing comma missing
    |
584 |                 "Audio normalization failed",
585 |                 phase=NormalizationPhase.ERROR_HANDLING.value,
586 |                 error=str(e)
    |                             ^ COM812
587 |             )
    |
    = help: Add trailing comma

src_refactored\application\audio_visualization\use_cases\normalize_audio_use_case.py:596:14: SyntaxError: Expected a statement
    |
594 |                 processing_time=time.time() - start_time,
595 |                 error_message=error_message,
596 |             )
    |              ^
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:342:101: E501 Line too long (103 > 100)
    |
340 |                     request.progress_callback("Validating data...", 20.0)
341 |
342 |                 if not self._validation_service.validate_raw_data(request.raw_data, request.data_type):
    |                                                                                                     ^^^ E501
343 |                     error_message = "Invalid audio data provided"
344 |                     self._logger_service.log_error("Audio data validation failed")
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:400:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
399 |                 # Apply normalization based on method
400 | if request.configuration.normalization_method = (
    | ^
401 |     = NormalizationMethod.SPEECH_OPTIMIZED:)
402 |                     normalized_data = self._normalization_service.normalize_for_speech(
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:400:47: SyntaxError: Expected ':', found '='
    |
399 |                 # Apply normalization based on method
400 | if request.configuration.normalization_method = (
    |                                               ^
401 |     = NormalizationMethod.SPEECH_OPTIMIZED:)
402 |                     normalized_data = self._normalization_service.normalize_for_speech(
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:401:5: SyntaxError: Expected an expression
    |
399 |                 # Apply normalization based on method
400 | if request.configuration.normalization_method = (
401 |     = NormalizationMethod.SPEECH_OPTIMIZED:)
    |     ^
402 |                     normalized_data = self._normalization_service.normalize_for_speech(
403 |                         numpy_data, request.configuration.scaling_factor,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:401:43: SyntaxError: Expected a statement
    |
399 |                 # Apply normalization based on method
400 | if request.configuration.normalization_method = (
401 |     = NormalizationMethod.SPEECH_OPTIMIZED:)
    |                                           ^
402 |                     normalized_data = self._normalization_service.normalize_for_speech(
403 |                         numpy_data, request.configuration.scaling_factor,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:401:44: SyntaxError: Expected a statement
    |
399 |                 # Apply normalization based on method
400 | if request.configuration.normalization_method = (
401 |     = NormalizationMethod.SPEECH_OPTIMIZED:)
    |                                            ^
402 |                     normalized_data = self._normalization_service.normalize_for_speech(
403 |                         numpy_data, request.configuration.scaling_factor,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:401:45: SyntaxError: Expected a statement
    |
399 |                 # Apply normalization based on method
400 | if request.configuration.normalization_method = (
401 |     = NormalizationMethod.SPEECH_OPTIMIZED:)
    |                                             ^
402 |                     normalized_data = self._normalization_service.normalize_for_speech(
403 |                         numpy_data, request.configuration.scaling_factor,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:402:1: SyntaxError: Unexpected indentation
    |
400 | if request.configuration.normalization_method = (
401 |     = NormalizationMethod.SPEECH_OPTIMIZED:)
402 |                     normalized_data = self._normalization_service.normalize_for_speech(
    | ^
403 |                         numpy_data, request.configuration.scaling_factor,
404 |                     )
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:405:1: SyntaxError: unindent does not match any outer indentation level
    |
403 |                         numpy_data, request.configuration.scaling_factor,
404 |                     )
405 |                 elif request.configuration.normalization_method == NormalizationMethod.RMS_BASED:
    | ^
406 |                     normalized_data = self._normalization_service.normalize_rms_based(numpy_data,
407 |     )
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:405:17: SyntaxError: Expected a statement
    |
403 |                         numpy_data, request.configuration.scaling_factor,
404 |                     )
405 |                 elif request.configuration.normalization_method == NormalizationMethod.RMS_BASED:
    |                 ^
406 |                     normalized_data = self._normalization_service.normalize_rms_based(numpy_data,
407 |     )
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:405:22: SyntaxError: Invalid annotated assignment target
    |
403 |                         numpy_data, request.configuration.scaling_factor,
404 |                     )
405 |                 elif request.configuration.normalization_method == NormalizationMethod.RMS_BASED:
    |                      ^
406 |                     normalized_data = self._normalization_service.normalize_rms_based(numpy_data,
407 |     )
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:405:98: SyntaxError: Expected an expression
    |
403 |                         numpy_data, request.configuration.scaling_factor,
404 |                     )
405 |                 elif request.configuration.normalization_method == NormalizationMethod.RMS_BASED:
    |                                                                                                  ^
406 |                     normalized_data = self._normalization_service.normalize_rms_based(numpy_data,
407 |     )
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:406:1: SyntaxError: Unexpected indentation
    |
404 |                     )
405 |                 elif request.configuration.normalization_method == NormalizationMethod.RMS_BASED:
406 |                     normalized_data = self._normalization_service.normalize_rms_based(numpy_data,
    | ^
407 |     )
408 |                 elif request.configuration.normalization_method == NormalizationMethod.PEAK_BASED:
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:408:1: SyntaxError: unindent does not match any outer indentation level
    |
406 |                     normalized_data = self._normalization_service.normalize_rms_based(numpy_data,
407 |     )
408 |                 elif request.configuration.normalization_method == NormalizationMethod.PEAK_BASED:
    | ^
409 |                     normalized_data = self._normalization_service.normalize_peak_based(
410 |                         numpy_data, request.configuration.max_amplitude,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:408:17: SyntaxError: Expected a statement
    |
406 |                     normalized_data = self._normalization_service.normalize_rms_based(numpy_data,
407 |     )
408 |                 elif request.configuration.normalization_method == NormalizationMethod.PEAK_BASED:
    |                 ^
409 |                     normalized_data = self._normalization_service.normalize_peak_based(
410 |                         numpy_data, request.configuration.max_amplitude,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:408:22: SyntaxError: Invalid annotated assignment target
    |
406 |                     normalized_data = self._normalization_service.normalize_rms_based(numpy_data,
407 |     )
408 |                 elif request.configuration.normalization_method == NormalizationMethod.PEAK_BASED:
    |                      ^
409 |                     normalized_data = self._normalization_service.normalize_peak_based(
410 |                         numpy_data, request.configuration.max_amplitude,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:408:99: SyntaxError: Expected an expression
    |
406 |                     normalized_data = self._normalization_service.normalize_rms_based(numpy_data,
407 |     )
408 |                 elif request.configuration.normalization_method == NormalizationMethod.PEAK_BASED:
    |                                                                                                   ^
409 |                     normalized_data = self._normalization_service.normalize_peak_based(
410 |                         numpy_data, request.configuration.max_amplitude,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:409:1: SyntaxError: Unexpected indentation
    |
407 |     )
408 |                 elif request.configuration.normalization_method == NormalizationMethod.PEAK_BASED:
409 |                     normalized_data = self._normalization_service.normalize_peak_based(
    | ^
410 |                         numpy_data, request.configuration.max_amplitude,
411 |                     )
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:412:1: SyntaxError: unindent does not match any outer indentation level
    |
410 |                         numpy_data, request.configuration.max_amplitude,
411 |                     )
412 |                 else:
    | ^
413 |                     # Default to speech optimized
414 |                     normalized_data = self._normalization_service.normalize_for_speech(
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:412:17: SyntaxError: Expected a statement
    |
410 |                         numpy_data, request.configuration.max_amplitude,
411 |                     )
412 |                 else:
    |                 ^
413 |                     # Default to speech optimized
414 |                     normalized_data = self._normalization_service.normalize_for_speech(
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:412:21: SyntaxError: Expected a statement
    |
410 |                         numpy_data, request.configuration.max_amplitude,
411 |                     )
412 |                 else:
    |                     ^
413 |                     # Default to speech optimized
414 |                     normalized_data = self._normalization_service.normalize_for_speech(
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:412:22: SyntaxError: Expected a statement
    |
410 |                         numpy_data, request.configuration.max_amplitude,
411 |                     )
412 |                 else:
    |                      ^
413 |                     # Default to speech optimized
414 |                     normalized_data = self._normalization_service.normalize_for_speech(
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:414:1: SyntaxError: Unexpected indentation
    |
412 |                 else:
413 |                     # Default to speech optimized
414 |                     normalized_data = self._normalization_service.normalize_for_speech(
    | ^
415 |                         numpy_data, request.configuration.scaling_factor,
416 |                     )
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:419:1: SyntaxError: unindent does not match any outer indentation level
    |
418 |                 # Apply clipping if enabled
419 |                 if request.configuration.enable_clipping:
    | ^
420 |                     normalized_data = np.clip(
421 |                         normalized_data,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:427:1: SyntaxError: unindent does not match any outer indentation level
    |
426 |                 # Apply centering if enabled
427 |                 if request.configuration.enable_centering:
    | ^
428 |                     normalized_data = normalized_data - np.mean(normalized_data,
429 |     )
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:431:1: SyntaxError: unindent does not match any outer indentation level
    |
429 |     )
430 |
431 |             except Exception as e:
    | ^
432 |                 error_message = f"Failed to normalize audio data: {e!s}"
433 |                 self._logger_service.log_error("Audio normalization failed", error=str(e))
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:431:13: SyntaxError: Expected a statement
    |
429 |     )
430 |
431 |             except Exception as e:
    |             ^
432 |                 error_message = f"Failed to normalize audio data: {e!s}"
433 |                 self._logger_service.log_error("Audio normalization failed", error=str(e))
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:431:30: SyntaxError: Expected a statement
    |
429 |     )
430 |
431 |             except Exception as e:
    |                              ^
432 |                 error_message = f"Failed to normalize audio data: {e!s}"
433 |                 self._logger_service.log_error("Audio normalization failed", error=str(e))
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:431:35: SyntaxError: Expected an expression
    |
429 |     )
430 |
431 |             except Exception as e:
    |                                   ^
432 |                 error_message = f"Failed to normalize audio data: {e!s}"
433 |                 self._logger_service.log_error("Audio normalization failed", error=str(e))
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:432:1: SyntaxError: Unexpected indentation
    |
431 |             except Exception as e:
432 |                 error_message = f"Failed to normalize audio data: {e!s}"
    | ^
433 |                 self._logger_service.log_error("Audio normalization failed", error=str(e))
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:445:1: SyntaxError: unindent does not match any outer indentation level
    |
444 |             # Phase 5: Update buffer
445 |             self._logger_service.log_debug(
    | ^
446 |                 "Updating audio buffer",
447 |                 phase=ProcessingPhase.UPDATING_BUFFER.value,
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:450:1: SyntaxError: Unexpected indentation
    |
448 |             )
449 |
450 |             if request.progress_callback:
    | ^
451 |                 request.progress_callback("Updating buffer...", 80.0)
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:526:17: SyntaxError: Expected ',', found name
    |
524 |                 processed_data=processed_data,
525 |                 buffer_size=self._buffer_service.get_buffer_size()
526 |                 signal_emitted=signal_emitted,
    |                 ^
527 |                 processing_time=processing_time,
528 |             )
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:530:1: SyntaxError: unindent does not match any outer indentation level
    |
528 |             )
529 |
530 |         except Exception as e:
    | ^
531 |             error_message = f"Error processing audio data: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:530:9: SyntaxError: Expected a statement
    |
528 |             )
529 |
530 |         except Exception as e:
    |         ^
531 |             error_message = f"Error processing audio data: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:530:26: SyntaxError: Expected a statement
    |
528 |             )
529 |
530 |         except Exception as e:
    |                          ^
531 |             error_message = f"Error processing audio data: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:530:31: SyntaxError: Expected an expression
    |
528 |             )
529 |
530 |         except Exception as e:
    |                               ^
531 |             error_message = f"Error processing audio data: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:531:1: SyntaxError: Unexpected indentation
    |
530 |         except Exception as e:
531 |             error_message = f"Error processing audio data: {e!s}"
    | ^
532 |
533 |             self._logger_service.log_error(
    |

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:536:29: COM812 Trailing comma missing
    |
534 |                 "Audio data processing failed",
535 |                 phase=ProcessingPhase.ERROR_HANDLING.value,
536 |                 error=str(e)
    |                             ^ COM812
537 |             )
    |
    = help: Add trailing comma

src_refactored\application\audio_visualization\use_cases\process_audio_data_use_case.py:546:14: SyntaxError: Expected dedent, found end of file
    |
544 |                 processing_time=time.time() - start_time,
545 |                 error_message=error_message,
546 |             )
    |              ^
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:21:101: E501 Line too long (101 > 100)
   |
19 |     from collections.abc import Callable
20 |
21 |     from src_refactored.domain.audio_visualization.value_objects.visualization_configuration import \
   |                                                                                                     ^ E501
22 |     (
23 |         VisualizationConfiguration,
   |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:260:41: SyntaxError: Expected an expression
    |
258 |             if self._visualization_state_service.is_visualization_active():
259 |                 current_processor = self._visualization_state_service.get_current_processor()
260 |                 if current_processor and
    |                                         ^
261 |     self._audio_processor_service.is_processor_running(current_processor):
262 |                     self._logger_service.log_info("Visualization is already running")
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:261:5: SyntaxError: Expected `except` or `finally` after `try` block
    |
259 |                 current_processor = self._visualization_state_service.get_current_processor()
260 |                 if current_processor and
261 |     self._audio_processor_service.is_processor_running(current_processor):
    |     ^
262 |                     self._logger_service.log_info("Visualization is already running")
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:261:75: SyntaxError: Expected an expression
    |
259 |                 current_processor = self._visualization_state_service.get_current_processor()
260 |                 if current_processor and
261 |     self._audio_processor_service.is_processor_running(current_processor):
    |                                                                           ^
262 |                     self._logger_service.log_info("Visualization is already running")
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:262:1: SyntaxError: Unexpected indentation
    |
260 |                 if current_processor and
261 |     self._audio_processor_service.is_processor_running(current_processor):
262 |                     self._logger_service.log_info("Visualization is already running")
    | ^
263 |
264 |                     if request.completion_callback:
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:276:1: SyntaxError: unindent does not match any outer indentation level
    |
275 |             # Phase 3: Validate audio device if configured
276 |             if request.configuration.validate_audio_device:
    | ^
277 |                 if request.progress_callback:
278 |                     request.progress_callback("Validating audio device...", 20.0)
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:294:13: SyntaxError: unindent does not match any outer indentation level
    |
293 |             # Phase 4: Create audio processor
294 |             self._logger_service.log_info(
    |             ^
295 |                 "Creating audio processor",
296 |                 phase=StartPhase.CREATING_PROCESSOR.value,
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:300:1: SyntaxError: Unexpected indentation
    |
298 |             )
299 |
300 |             if request.progress_callback:
    | ^
301 |                 request.progress_callback("Creating audio processor...", 40.0)
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:417:1: SyntaxError: unindent does not match any outer indentation level
    |
415 |             )
416 |
417 |         except Exception as e:
    | ^
418 |             error_message = f"Error starting visualization: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:417:9: SyntaxError: Expected a statement
    |
415 |             )
416 |
417 |         except Exception as e:
    |         ^
418 |             error_message = f"Error starting visualization: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:417:26: SyntaxError: Expected a statement
    |
415 |             )
416 |
417 |         except Exception as e:
    |                          ^
418 |             error_message = f"Error starting visualization: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:417:31: SyntaxError: Expected an expression
    |
415 |             )
416 |
417 |         except Exception as e:
    |                               ^
418 |             error_message = f"Error starting visualization: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:418:1: SyntaxError: Unexpected indentation
    |
417 |         except Exception as e:
418 |             error_message = f"Error starting visualization: {e!s}"
    | ^
419 |
420 |             self._logger_service.log_error(
    |

src_refactored\application\audio_visualization\use_cases\start_visualization_use_case.py:423:29: COM812 Trailing comma missing
    |
421 |                 "Visualization startup failed",
422 |                 phase=StartPhase.ERROR_HANDLING.value,
423 |                 error=str(e)
    |                             ^ COM812
424 |             )
    |
    = help: Add trailing comma

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:21:101: E501 Line too long (101 > 100)
   |
19 |     from collections.abc import Callable
20 |
21 |     from src_refactored.domain.audio_visualization.value_objects.visualization_configuration import \
   |                                                                                                     ^ E501
22 |     (
23 |         VisualizationStopConfiguration,
   |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:295:101: E501 Line too long (107 > 100)
    |
293 |             current_processor = self._visualization_state_service.get_current_processor()
294 |             if not current_processor:
295 |                 self._logger_service.log_warning("No current processor found, but visualization is active")
    |                                                                                                     ^^^^^^^ E501
296 |                 # Continue with deactivation
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:347:101: E501 Line too long (103 > 100)
    |
345 |                     # If graceful stop failed and force_stop_on_timeout is enabled
346 |                     if not processor_stopped and request.configuration.force_stop_on_timeout:
347 |                         self._logger_service.log_warning("Graceful stop failed, attempting force stop")
    |                                                                                                     ^^^ E501
348 |                         processor_stopped = self._audio_processor_service.force_stop_processor(
349 |                             current_processor,
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:407:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
405 |                 response.resources_cleaned = resources_cleaned
406 |
407 | if not resources_cleaned and request.configuration.shutdown_strategy = (
    | ^
408 |     = ShutdownStrategy.FORCE:)
409 |                     self._logger_service.log_warning("Attempting force cleanup")
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:407:70: SyntaxError: Expected ':', found '='
    |
405 |                 response.resources_cleaned = resources_cleaned
406 |
407 | if not resources_cleaned and request.configuration.shutdown_strategy = (
    |                                                                      ^
408 |     = ShutdownStrategy.FORCE:)
409 |                     self._logger_service.log_warning("Attempting force cleanup")
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:408:5: SyntaxError: Expected an expression
    |
407 | if not resources_cleaned and request.configuration.shutdown_strategy = (
408 |     = ShutdownStrategy.FORCE:)
    |     ^
409 |                     self._logger_service.log_warning("Attempting force cleanup")
410 |                     force_cleaned = self._resource_cleanup_service.force_cleanup_all()
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:408:29: SyntaxError: Expected a statement
    |
407 | if not resources_cleaned and request.configuration.shutdown_strategy = (
408 |     = ShutdownStrategy.FORCE:)
    |                             ^
409 |                     self._logger_service.log_warning("Attempting force cleanup")
410 |                     force_cleaned = self._resource_cleanup_service.force_cleanup_all()
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:408:30: SyntaxError: Expected a statement
    |
407 | if not resources_cleaned and request.configuration.shutdown_strategy = (
408 |     = ShutdownStrategy.FORCE:)
    |                              ^
409 |                     self._logger_service.log_warning("Attempting force cleanup")
410 |                     force_cleaned = self._resource_cleanup_service.force_cleanup_all()
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:408:31: SyntaxError: Expected a statement
    |
407 | if not resources_cleaned and request.configuration.shutdown_strategy = (
408 |     = ShutdownStrategy.FORCE:)
    |                               ^
409 |                     self._logger_service.log_warning("Attempting force cleanup")
410 |                     force_cleaned = self._resource_cleanup_service.force_cleanup_all()
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:409:1: SyntaxError: Unexpected indentation
    |
407 | if not resources_cleaned and request.configuration.shutdown_strategy = (
408 |     = ShutdownStrategy.FORCE:)
409 |                     self._logger_service.log_warning("Attempting force cleanup")
    | ^
410 |                     force_cleaned = self._resource_cleanup_service.force_cleanup_all()
411 |                     if force_cleaned:
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:417:13: SyntaxError: unindent does not match any outer indentation level
    |
416 |             # Phase 6: Deactivate visualization
417 |             self._logger_service.log_info(
    |             ^
418 |                 "Deactivating visualization",
419 |                 phase=StopPhase.DEACTIVATING_VISUALIZATION.value,
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:422:1: SyntaxError: Unexpected indentation
    |
420 |             )
421 |
422 |             if request.progress_callback:
    | ^
423 |                 request.progress_callback("Deactivating visualization...", 90.0)
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:449:54: COM812 Trailing comma missing
    |
447 |                 shutdown_time=shutdown_time,
448 |                 strategy=request.configuration.shutdown_strategy.value,
449 |                 warnings_count=len(response.warnings)
    |                                                      ^ COM812
450 |             )
    |
    = help: Add trailing comma

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:454:1: SyntaxError: unindent does not match any outer indentation level
    |
452 |             return response
453 |
454 |         except Exception as e:
    | ^
455 |             error_message = f"Error stopping visualization: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:454:9: SyntaxError: Expected a statement
    |
452 |             return response
453 |
454 |         except Exception as e:
    |         ^
455 |             error_message = f"Error stopping visualization: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:454:26: SyntaxError: Expected a statement
    |
452 |             return response
453 |
454 |         except Exception as e:
    |                          ^
455 |             error_message = f"Error stopping visualization: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:454:31: SyntaxError: Expected an expression
    |
452 |             return response
453 |
454 |         except Exception as e:
    |                               ^
455 |             error_message = f"Error stopping visualization: {e!s}"
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:455:1: SyntaxError: Unexpected indentation
    |
454 |         except Exception as e:
455 |             error_message = f"Error stopping visualization: {e!s}"
    | ^
456 |
457 |             self._logger_service.log_error(
    |

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:460:29: COM812 Trailing comma missing
    |
458 |                 "Visualization shutdown failed",
459 |                 phase=StopPhase.ERROR_HANDLING.value,
460 |                 error=str(e)
    |                             ^ COM812
461 |             )
    |
    = help: Add trailing comma

src_refactored\application\audio_visualization\use_cases\stop_visualization_use_case.py:470:28: SyntaxError: Expected a statement
    |
468 |             response.shutdown_time = time.time() - start_time
469 |
470 |             return response
    |                            ^
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:225:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
223 |                     response.cache_hit = True
224 |                     response.result = LoadResult.SUCCESS
225 | response.load_duration_ms = (
    | ^
226 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:229:1: SyntaxError: Unexpected indentation
    |
228 |                     # Still create user preferences from cached config
229 |                     prefs_result = self._factory.create_user_preferences(response.loaded_config)
    | ^
230 |                     if prefs_result.is_success:
231 |                         response.user_preferences = prefs_result.value
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:238:1: SyntaxError: unindent does not match any outer indentation level
    |
237 |             # Phase 2: Locate configuration sources
238 |             if not self._update_progress(request.progress_callback, LoadPhase.LOCATING_SOURCE, 15):
    | ^
239 |                 response.result = LoadResult.CANCELLED
240 |                 return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:242:1: SyntaxError: unindent does not match any outer indentation level
    |
240 |                 return response
241 |
242 |             config_locations = self._prepare_configuration_locations(request)
    | ^
243 |
244 |             # Phase 3: Read configuration data
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:245:1: SyntaxError: Unexpected indentation
    |
244 |             # Phase 3: Read configuration data
245 |             if not self._update_progress(request.progress_callback, LoadPhase.READING_DATA, 30):
    | ^
246 |                 response.result = LoadResult.CANCELLED
247 |                 return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:252:48: SyntaxError: f-string: unterminated string
    |
250 |             if not config_data_result.is_success:
251 |                 if request.configuration.fallback_to_defaults:
252 |                     self._logger.log_warning(f"Failed to load configuration,
    |                                                ^
253 |                     using defaults: {config_data_result.error_message}")
254 |                     config_data = self._factory.get_default_configuration()
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:252:77: SyntaxError: Expected FStringEnd, found newline
    |
250 |             if not config_data_result.is_success:
251 |                 if request.configuration.fallback_to_defaults:
252 |                     self._logger.log_warning(f"Failed to load configuration,
    |                                                                             ^
253 |                     using defaults: {config_data_result.error_message}")
254 |                     config_data = self._factory.get_default_configuration()
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:253:27: SyntaxError: Expected ',', found name
    |
251 |                 if request.configuration.fallback_to_defaults:
252 |                     self._logger.log_warning(f"Failed to load configuration,
253 |                     using defaults: {config_data_result.error_message}")
    |                           ^
254 |                     config_data = self._factory.get_default_configuration()
255 |                     response.fallback_values_used = config_data.copy()
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:253:35: SyntaxError: Expected ',', found ':'
    |
251 |                 if request.configuration.fallback_to_defaults:
252 |                     self._logger.log_warning(f"Failed to load configuration,
253 |                     using defaults: {config_data_result.error_message}")
    |                                   ^
254 |                     config_data = self._factory.get_default_configuration()
255 |                     response.fallback_values_used = config_data.copy()
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:253:71: SyntaxError: missing closing quote in string literal
    |
251 |                 if request.configuration.fallback_to_defaults:
252 |                     self._logger.log_warning(f"Failed to load configuration,
253 |                     using defaults: {config_data_result.error_message}")
    |                                                                       ^
254 |                     config_data = self._factory.get_default_configuration()
255 |                     response.fallback_values_used = config_data.copy()
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:253:73: SyntaxError: Expected ',', found newline
    |
251 |                 if request.configuration.fallback_to_defaults:
252 |                     self._logger.log_warning(f"Failed to load configuration,
253 |                     using defaults: {config_data_result.error_message}")
    |                                                                         ^
254 |                     config_data = self._factory.get_default_configuration()
255 |                     response.fallback_values_used = config_data.copy()
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:254:76: SyntaxError: Expected ',', found newline
    |
252 |                     self._logger.log_warning(f"Failed to load configuration,
253 |                     using defaults: {config_data_result.error_message}")
254 |                     config_data = self._factory.get_default_configuration()
    |                                                                            ^
255 |                     response.fallback_values_used = config_data.copy()
256 |                     response.result = LoadResult.FALLBACK_USED
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:255:21: SyntaxError: Expected a parameter name
    |
253 |                     using defaults: {config_data_result.error_message}")
254 |                     config_data = self._factory.get_default_configuration()
255 |                     response.fallback_values_used = config_data.copy()
    |                     ^
256 |                     response.result = LoadResult.FALLBACK_USED
257 |                 else:
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:255:71: SyntaxError: Expected ',', found newline
    |
253 |                     using defaults: {config_data_result.error_message}")
254 |                     config_data = self._factory.get_default_configuration()
255 |                     response.fallback_values_used = config_data.copy()
    |                                                                       ^
256 |                     response.result = LoadResult.FALLBACK_USED
257 |                 else:
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:256:21: SyntaxError: Expected a parameter name
    |
254 |                     config_data = self._factory.get_default_configuration()
255 |                     response.fallback_values_used = config_data.copy()
256 |                     response.result = LoadResult.FALLBACK_USED
    |                     ^
257 |                 else:
258 |                     response.error_message = config_data_result.error_message
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:256:21: SyntaxError: Duplicate keyword argument ""
    |
254 |                     config_data = self._factory.get_default_configuration()
255 |                     response.fallback_values_used = config_data.copy()
256 |                     response.result = LoadResult.FALLBACK_USED
    |                     ^
257 |                 else:
258 |                     response.error_message = config_data_result.error_message
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:256:63: SyntaxError: Expected ',', found newline
    |
254 |                     config_data = self._factory.get_default_configuration()
255 |                     response.fallback_values_used = config_data.copy()
256 |                     response.result = LoadResult.FALLBACK_USED
    |                                                               ^
257 |                 else:
258 |                     response.error_message = config_data_result.error_message
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:257:17: SyntaxError: Expected ')', found dedent
    |
255 |                     response.fallback_values_used = config_data.copy()
256 |                     response.result = LoadResult.FALLBACK_USED
257 |                 else:
    |                 ^
258 |                     response.error_message = config_data_result.error_message
259 |                     return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:284:101: E501 Line too long (101 > 100)
    |
283 |             # Phase 5: Validate configuration
284 |             if not self._update_progress(request.progress_callback, LoadPhase.VALIDATING_CONFIG, 70):
    |                                                                                                     ^ E501
285 |                 response.result = LoadResult.CANCELLED
286 |                 return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:293:22: SyntaxError: Expected an indented block after `else` clause
    |
291 |                 if validation_result.is_success:
292 |                     response.validation_warnings = validation_result.value
293 |                 else:
    |                      ^
294 | response.error_message = (
295 |     f"Configuration validation failed: {validation_result.error_message}")
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:296:1: SyntaxError: Unexpected indentation
    |
294 | response.error_message = (
295 |     f"Configuration validation failed: {validation_result.error_message}")
296 |                     if not request.configuration.fallback_to_defaults:
    | ^
297 |                         response.result = LoadResult.VALIDATION_FAILED
298 |                         return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:301:13: SyntaxError: unindent does not match any outer indentation level
    |
300 |             # Phase 6: Apply defaults for missing values
301 |             if not self._update_progress(request.progress_callback, LoadPhase.APPLYING_DEFAULTS, 85):
    |             ^
302 |                 response.result = LoadResult.CANCELLED
303 |                 return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:301:101: E501 Line too long (101 > 100)
    |
300 |             # Phase 6: Apply defaults for missing values
301 |             if not self._update_progress(request.progress_callback, LoadPhase.APPLYING_DEFAULTS, 85):
    |                                                                                                     ^ E501
302 |                 response.result = LoadResult.CANCELLED
303 |                 return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:305:1: SyntaxError: unindent does not match any outer indentation level
    |
303 |                 return response
304 |
305 |             default_config = self._factory.get_default_configuration()
    | ^
306 |             final_config_result = self._factory.merge_configurations(
307 |                 default_config,
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:306:1: SyntaxError: Unexpected indentation
    |
305 |             default_config = self._factory.get_default_configuration()
306 |             final_config_result = self._factory.merge_configurations(
    | ^
307 |                 default_config,
308 |                 config_data,
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:312:51: SyntaxError: Expected an indented block after `if` statement
    |
310 |             )
311 |
312 |             if not final_config_result.is_success:
    |                                                   ^
313 | response.error_message = (
314 |     f"Failed to merge with defaults: {final_config_result.error_message}")
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:315:1: SyntaxError: Unexpected indentation
    |
313 | response.error_message = (
314 |     f"Failed to merge with defaults: {final_config_result.error_message}")
315 |                 return response
    | ^
316 |
317 |             final_config = final_config_result.value
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:317:1: SyntaxError: unindent does not match any outer indentation level
    |
315 |                 return response
316 |
317 |             final_config = final_config_result.value
    | ^
318 |
319 |             # Phase 7: Create user preferences
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:320:1: SyntaxError: Unexpected indentation
    |
319 |             # Phase 7: Create user preferences
320 |             prefs_result = self._factory.create_user_preferences(final_config)
    | ^
321 |             if not prefs_result.is_success:
322 | response.error_message = (
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:321:44: SyntaxError: Expected an indented block after `if` statement
    |
319 |             # Phase 7: Create user preferences
320 |             prefs_result = self._factory.create_user_preferences(final_config)
321 |             if not prefs_result.is_success:
    |                                            ^
322 | response.error_message = (
323 |     f"Failed to create user preferences: {prefs_result.error_message}")
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:322:1: SyntaxError: Expected a statement
    |
320 |             prefs_result = self._factory.create_user_preferences(final_config)
321 |             if not prefs_result.is_success:
322 | response.error_message = (
    | ^
323 |     f"Failed to create user preferences: {prefs_result.error_message}")
324 |                 return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:324:1: SyntaxError: Unexpected indentation
    |
322 | response.error_message = (
323 |     f"Failed to create user preferences: {prefs_result.error_message}")
324 |                 return response
    | ^
325 |
326 |             # Phase 8: Finalize
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:327:1: SyntaxError: unindent does not match any outer indentation level
    |
326 |             # Phase 8: Finalize
327 |             if not self._update_progress(request.progress_callback, LoadPhase.FINALIZING, 95):
    | ^
328 |                 response.result = LoadResult.CANCELLED
329 |                 return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:332:1: SyntaxError: unindent does not match any outer indentation level
    |
331 |             # Cache the configuration if enabled
332 |             if request.configuration.cache_loaded_config:
    | ^
333 |                 cache_result = self._cache.cache_config(cache_key, final_config)
334 |                 if not cache_result.is_success:
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:335:101: E501 Line too long (101 > 100)
    |
333 |                 cache_result = self._cache.cache_config(cache_key, final_config)
334 |                 if not cache_result.is_success:
335 |                     response.validation_warnings.append(f"Failed to cache configuration: {cache_resu\
    |                                                                                                     ^ E501
336 |     lt.error_message}")
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:336:5: SyntaxError: f-string: expecting '}'
    |
334 |                 if not cache_result.is_success:
335 |                     response.validation_warnings.append(f"Failed to cache configuration: {cache_resu\
336 |     lt.error_message}")
    |     ^
337 |
338 |             # Phase 9: Complete
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:336:7: SyntaxError: Expected ',', found FStringMiddle
    |
334 |                 if not cache_result.is_success:
335 |                     response.validation_warnings.append(f"Failed to cache configuration: {cache_resu\
336 |     lt.error_message}")
    |       ^
337 |
338 |             # Phase 9: Complete
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:336:21: SyntaxError: f-string: single '}' is not allowed
    |
334 |                 if not cache_result.is_success:
335 |                     response.validation_warnings.append(f"Failed to cache configuration: {cache_resu\
336 |     lt.error_message}")
    |                     ^
337 |
338 |             # Phase 9: Complete
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:336:22: SyntaxError: Expected ',', found FStringEnd
    |
334 |                 if not cache_result.is_success:
335 |                     response.validation_warnings.append(f"Failed to cache configuration: {cache_resu\
336 |     lt.error_message}")
    |                      ^
337 |
338 |             # Phase 9: Complete
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:339:13: SyntaxError: unindent does not match any outer indentation level
    |
338 |             # Phase 9: Complete
339 |             if not self._update_progress(request.progress_callback, LoadPhase.COMPLETED, 100):
    |             ^
340 |                 response.result = LoadResult.CANCELLED
341 |                 return response
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:344:1: SyntaxError: unindent does not match any outer indentation level
    |
343 |             # Set success response
344 |             if response.result != LoadResult.FALLBACK_USED:
    | ^
345 |                 response.result
346 |  = (
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:346:1: SyntaxError: unindent does not match any outer indentation level
    |
344 |             if response.result != LoadResult.FALLBACK_USED:
345 |                 response.result
346 |  = (
    | ^
347 |     LoadResult.SUCCESS if not response.validation_warnings else LoadResult.PARTIAL_SUCCESS)
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:346:2: SyntaxError: Expected a statement
    |
344 |             if response.result != LoadResult.FALLBACK_USED:
345 |                 response.result
346 |  = (
    |  ^
347 |     LoadResult.SUCCESS if not response.validation_warnings else LoadResult.PARTIAL_SUCCESS)
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:349:1: SyntaxError: Unexpected indentation
    |
347 |     LoadResult.SUCCESS if not response.validation_warnings else LoadResult.PARTIAL_SUCCESS)
348 |
349 |             response.loaded_config = final_config
    | ^
350 |             response.user_preferences = prefs_result.value
351 |             response.load_duration_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000)
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:356:17: SyntaxError: Expected ',', found string
    |
354 |             response.metadata = {
355 |                 "load_timestamp": start_time.isoformat()
356 |                 "sources_attempted": len(config_locations)
    |                 ^
357 |                 "sources_successful": len(response.sources_used)
358 |                 "cache_enabled": request.configuration.cache_loaded_config,
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:357:17: SyntaxError: Expected ',', found string
    |
355 |                 "load_timestamp": start_time.isoformat()
356 |                 "sources_attempted": len(config_locations)
357 |                 "sources_successful": len(response.sources_used)
    |                 ^
358 |                 "cache_enabled": request.configuration.cache_loaded_config,
359 |                 "validation_enabled": request.configuration.validate_after_load,
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:358:17: SyntaxError: Expected ',', found string
    |
356 |                 "sources_attempted": len(config_locations)
357 |                 "sources_successful": len(response.sources_used)
358 |                 "cache_enabled": request.configuration.cache_loaded_config,
    |                 ^
359 |                 "validation_enabled": request.configuration.validate_after_load,
360 |                 "environment_included": request.include_environment,
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:368:17: SyntaxError: Expected ',', found name
    |
366 |                 result=response.result.value,
367 |                 sources_used=len(response.sources_used)
368 |                 warnings=len(response.validation_warnings)
    |                 ^
369 |                 duration_ms=response.load_duration_ms,
370 |                 cache_hit=response.cache_hit,
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:369:17: SyntaxError: Expected ',', found name
    |
367 |                 sources_used=len(response.sources_used)
368 |                 warnings=len(response.validation_warnings)
369 |                 duration_ms=response.load_duration_ms,
    |                 ^
370 |                 cache_hit=response.cache_hit,
371 |             )
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:373:1: SyntaxError: unindent does not match any outer indentation level
    |
371 |             )
372 |
373 |         except Exception as e:
    | ^
374 |             self._logger.log_error(f"Unexpected error during configuration load: {e!s}")
375 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:373:9: SyntaxError: Expected a statement
    |
371 |             )
372 |
373 |         except Exception as e:
    |         ^
374 |             self._logger.log_error(f"Unexpected error during configuration load: {e!s}")
375 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:373:26: SyntaxError: Expected a statement
    |
371 |             )
372 |
373 |         except Exception as e:
    |                          ^
374 |             self._logger.log_error(f"Unexpected error during configuration load: {e!s}")
375 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:373:31: SyntaxError: Expected an expression
    |
371 |             )
372 |
373 |         except Exception as e:
    |                               ^
374 |             self._logger.log_error(f"Unexpected error during configuration load: {e!s}")
375 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:374:1: SyntaxError: Unexpected indentation
    |
373 |         except Exception as e:
374 |             self._logger.log_error(f"Unexpected error during configuration load: {e!s}")
    | ^
375 |             response.error_message = f"Unexpected error: {e!s}"
376 |             response.result = LoadResult.FAILED
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:378:1: SyntaxError: unindent does not match any outer indentation level
    |
376 |             response.result = LoadResult.FAILED
377 |
378 |         return response
    | ^
379 |
380 |     def _prepare_configuration_locations(self, request: LoadConfigurationRequest,
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:380:1: SyntaxError: Unexpected indentation
    |
378 |         return response
379 |
380 |     def _prepare_configuration_locations(self, request: LoadConfigurationRequest,
    | ^
381 |     ) -> list[ConfigurationLocation]:
382 |         """Prepare list of configuration locations to try"""
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:390:17: SyntaxError: Expected ',', found name
    |
388 |                 source=ConfigurationSource.FILE,
389 |                 path=FilePath("settings.json")
390 |                 priority=1,
    |                 ^
391 |             ))
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:426:101: E501 Line too long (101 > 100)
    |
424 |                         sources_used.append(location.source)
425 |                     else:
426 |                         self._logger.log_warning(f"Failed to merge config from {location.source}: {m\
    |                                                                                                     ^ E501
427 |     erge_result.error_message}")
428 |                 else:
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:427:5: SyntaxError: f-string: expecting '}'
    |
425 |                     else:
426 |                         self._logger.log_warning(f"Failed to merge config from {location.source}: {m\
427 |     erge_result.error_message}")
    |     ^
428 |                 else:
429 |                     self._logger.log_warning(f"Failed to load config from {location.source}: {config\
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:427:16: SyntaxError: Expected ',', found FStringMiddle
    |
425 |                     else:
426 |                         self._logger.log_warning(f"Failed to merge config from {location.source}: {m\
427 |     erge_result.error_message}")
    |                ^
428 |                 else:
429 |                     self._logger.log_warning(f"Failed to load config from {location.source}: {config\
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:427:30: SyntaxError: f-string: single '}' is not allowed
    |
425 |                     else:
426 |                         self._logger.log_warning(f"Failed to merge config from {location.source}: {m\
427 |     erge_result.error_message}")
    |                              ^
428 |                 else:
429 |                     self._logger.log_warning(f"Failed to load config from {location.source}: {config\
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:427:31: SyntaxError: Expected ',', found FStringEnd
    |
425 |                     else:
426 |                         self._logger.log_warning(f"Failed to merge config from {location.source}: {m\
427 |     erge_result.error_message}")
    |                               ^
428 |                 else:
429 |                     self._logger.log_warning(f"Failed to load config from {location.source}: {config\
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:429:101: E501 Line too long (101 > 100)
    |
427 |     erge_result.error_message}")
428 |                 else:
429 |                     self._logger.log_warning(f"Failed to load config from {location.source}: {config\
    |                                                                                                     ^ E501
430 |     _result.error_message}")
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:430:5: SyntaxError: f-string: expecting '}'
    |
428 |                 else:
429 |                     self._logger.log_warning(f"Failed to load config from {location.source}: {config\
430 |     _result.error_message}")
    |     ^
431 |
432 |             except Exception as e:
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:430:12: SyntaxError: Expected ',', found FStringMiddle
    |
428 |                 else:
429 |                     self._logger.log_warning(f"Failed to load config from {location.source}: {config\
430 |     _result.error_message}")
    |            ^
431 |
432 |             except Exception as e:
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:430:26: SyntaxError: f-string: single '}' is not allowed
    |
428 |                 else:
429 |                     self._logger.log_warning(f"Failed to load config from {location.source}: {config\
430 |     _result.error_message}")
    |                          ^
431 |
432 |             except Exception as e:
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:430:27: SyntaxError: Expected ',', found FStringEnd
    |
428 |                 else:
429 |                     self._logger.log_warning(f"Failed to load config from {location.source}: {config\
430 |     _result.error_message}")
    |                           ^
431 |
432 |             except Exception as e:
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:453:101: E501 Line too long (101 > 100)
    |
451 |                 file_path = root_result.value / location.path.value
452 |             else:
453 |                 return Result.failure(f"Could not resolve project root: {root_result.error_message}"\
    |                                                                                                     ^ E501
454 |     )
455 |         else:
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:476:13: SyntaxError: Expected ',', found name
    |
474 |             "config",
475 |             str(request.include_environment)
476 |             str(request.include_user_overrides)
    |             ^
477 |             str(len(request.configuration.locations)),
478 |         ]
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:477:13: SyntaxError: Expected ',', found name
    |
475 |             str(request.include_environment)
476 |             str(request.include_user_overrides)
477 |             str(len(request.configuration.locations)),
    |             ^
478 |         ]
479 |         return "_".join(key_parts)
    |

src_refactored\application\configuration\use_cases\load_configuration_use_case.py:490:20: SyntaxError: Expected dedent, found end of file
    |
488 |                 phase=phase.value,
489 |             )
490 |         return True
    |                    ^
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:260:2: SyntaxError: unindent does not match any outer indentation level
    |
258 |                 if estimated_size > max_size_bytes:
259 |                     response.error_message
260 |  = (
    |  ^
261 |     f"Estimated file size ({estimated_size} bytes) exceeds limit ({max_size_bytes} bytes)")
262 |                     return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:262:1: SyntaxError: Unexpected indentation
    |
260 |  = (
261 |     f"Estimated file size ({estimated_size} bytes) exceeds limit ({max_size_bytes} bytes)")
262 |                     return response
    | ^
263 |
264 |                 # Check available disk space
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:266:74: COM819 Trailing comma prohibited
    |
264 |                 # Check available disk space
265 | available_space_result = (
266 |     self._file_system.get_available_space(request.save_config.target_path,)
    |                                                                          ^ COM819
267 |     )
268 |                 if available_space_result.is_success and available_space_result.value < estimated_size *
    |
    = help: Remove trailing comma

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:268:1: SyntaxError: Unexpected indentation
    |
266 |     self._file_system.get_available_space(request.save_config.target_path,)
267 |     )
268 |                 if available_space_result.is_success and available_space_result.value < estimated_size *
    | ^
269 |     2:
270 |                     response.error_message = "Insufficient disk space"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:268:101: E501 Line too long (104 > 100)
    |
266 |     self._file_system.get_available_space(request.save_config.target_path,)
267 |     )
268 |                 if available_space_result.is_success and available_space_result.value < estimated_size *
    |                                                                                                     ^^^^ E501
269 |     2:
270 |                     response.error_message = "Insufficient disk space"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:268:105: SyntaxError: Expected an expression
    |
266 |     self._file_system.get_available_space(request.save_config.target_path,)
267 |     )
268 |                 if available_space_result.is_success and available_space_result.value < estimated_size *
    |                                                                                                         ^
269 |     2:
270 |                     response.error_message = "Insufficient disk space"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:269:1: SyntaxError: unindent does not match any outer indentation level
    |
267 |     )
268 |                 if available_space_result.is_success and available_space_result.value < estimated_size *
269 |     2:
    | ^
270 |                     response.error_message = "Insufficient disk space"
271 |                     response.result = SaveResult.DISK_FULL
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:269:5: SyntaxError: Invalid annotated assignment target
    |
267 |     )
268 |                 if available_space_result.is_success and available_space_result.value < estimated_size *
269 |     2:
    |     ^
270 |                     response.error_message = "Insufficient disk space"
271 |                     response.result = SaveResult.DISK_FULL
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:269:7: SyntaxError: Expected an expression
    |
267 |     )
268 |                 if available_space_result.is_success and available_space_result.value < estimated_size *
269 |     2:
    |       ^
270 |                     response.error_message = "Insufficient disk space"
271 |                     response.result = SaveResult.DISK_FULL
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:270:1: SyntaxError: Unexpected indentation
    |
268 |                 if available_space_result.is_success and available_space_result.value < estimated_size *
269 |     2:
270 |                     response.error_message = "Insufficient disk space"
    | ^
271 |                     response.result = SaveResult.DISK_FULL
272 |                     return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:275:1: SyntaxError: unindent does not match any outer indentation level
    |
274 |             # Phase 2: Validate configuration data
275 |             if not self._update_progress(request.progress_callback, SavePhase.VALIDATING_CONFIGURATION, 10):
    | ^
276 |                 response.result = SaveResult.CANCELLED
277 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:275:101: E501 Line too long (108 > 100)
    |
274 |             # Phase 2: Validate configuration data
275 |             if not self._update_progress(request.progress_callback, SavePhase.VALIDATING_CONFIGURATION, 10):
    |                                                                                                     ^^^^^^^^ E501
276 |                 response.result = SaveResult.CANCELLED
277 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:279:1: SyntaxError: unindent does not match any outer indentation level
    |
277 |                 return response
278 |
279 |             if request.save_config.validate_before_save:
    | ^
280 | validation_result = (
281 |     self._validation.validate_configuration_data(request.configuration_data,)
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:280:1: SyntaxError: Expected an indented block after `if` statement
    |
279 |             if request.save_config.validate_before_save:
280 | validation_result = (
    | ^
281 |     self._validation.validate_configuration_data(request.configuration_data,)
282 |     )
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:281:76: COM819 Trailing comma prohibited
    |
279 |             if request.save_config.validate_before_save:
280 | validation_result = (
281 |     self._validation.validate_configuration_data(request.configuration_data,)
    |                                                                            ^ COM819
282 |     )
283 |                 if not validation_result.is_success:
    |
    = help: Remove trailing comma

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:283:1: SyntaxError: Unexpected indentation
    |
281 |     self._validation.validate_configuration_data(request.configuration_data,)
282 |     )
283 |                 if not validation_result.is_success:
    | ^
284 | response.error_message = (
285 |     f"Configuration validation failed: {validation_result.error_message}")
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:283:53: SyntaxError: Expected an indented block after `if` statement
    |
281 |     self._validation.validate_configuration_data(request.configuration_data,)
282 |     )
283 |                 if not validation_result.is_success:
    |                                                     ^
284 | response.error_message = (
285 |     f"Configuration validation failed: {validation_result.error_message}")
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:286:1: SyntaxError: Unexpected indentation
    |
284 | response.error_message = (
285 |     f"Configuration validation failed: {validation_result.error_message}")
286 |                     response.result = SaveResult.VALIDATION_FAILED
    | ^
287 |                     return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:290:1: SyntaxError: unindent does not match any outer indentation level
    |
289 |             # Phase 3: Prepare data
290 |             if not self._update_progress(request.progress_callback, SavePhase.PREPARING_DATA, 20):
    | ^
291 |                 response.result = SaveResult.CANCELLED
292 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:295:1: SyntaxError: unindent does not match any outer indentation level
    |
294 |             # Sanitize sensitive data if requested
295 |             data_to_save = request.configuration_data
    | ^
296 |             if request.save_config.exclude_sensitive_data:
297 |                 sanitize_result = self._validation.sanitize_sensitive_data(data_to_save)
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:296:1: SyntaxError: Unexpected indentation
    |
294 |             # Sanitize sensitive data if requested
295 |             data_to_save = request.configuration_data
296 |             if request.save_config.exclude_sensitive_data:
    | ^
297 |                 sanitize_result = self._validation.sanitize_sensitive_data(data_to_save)
298 |                 if sanitize_result.is_success:
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:303:101: E501 Line too long (126 > 100)
    |
301 |                         response.validation_warnings.append("Sensitive data was excluded from save")
302 |                 else:
303 |                     response.validation_warnings.append(f"Failed to sanitize sensitive data: {sanitize_result.error_message}",
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
304 |     )
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:307:53: SyntaxError: Expected an indented block after `if` statement
    |
306 |             # Add metadata if requested
307 |             if request.save_config.include_metadata:
    |                                                     ^
308 | metadata = (
309 |     self._metadata.create_save_metadata(request.save_config, len(str(data_to_save))))
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:310:1: SyntaxError: Unexpected indentation
    |
308 | metadata = (
309 |     self._metadata.create_save_metadata(request.save_config, len(str(data_to_save))))
310 |                 data_to_save = {
    | ^
311 |                     "_metadata": metadata,
312 |                     "configuration": data_to_save,
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:316:1: SyntaxError: unindent does not match any outer indentation level
    |
315 |             # Phase 4: Create backup
316 |             backup_path = None
    | ^
317 |             if request.save_config.create_backup and
318 |     self._file_system.file_exists(request.save_config.target_path):
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:317:1: SyntaxError: Unexpected indentation
    |
315 |             # Phase 4: Create backup
316 |             backup_path = None
317 |             if request.save_config.create_backup and
    | ^
318 |     self._file_system.file_exists(request.save_config.target_path):
319 |                 if not self._update_progress(request.progress_callback, SavePhase.CREATING_BACKUP, 30):
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:317:53: SyntaxError: Expected an expression
    |
315 |             # Phase 4: Create backup
316 |             backup_path = None
317 |             if request.save_config.create_backup and
    |                                                     ^
318 |     self._file_system.file_exists(request.save_config.target_path):
319 |                 if not self._update_progress(request.progress_callback, SavePhase.CREATING_BACKUP, 30):
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:318:1: SyntaxError: unindent does not match any outer indentation level
    |
316 |             backup_path = None
317 |             if request.save_config.create_backup and
318 |     self._file_system.file_exists(request.save_config.target_path):
    | ^
319 |                 if not self._update_progress(request.progress_callback, SavePhase.CREATING_BACKUP, 30):
320 |                     response.result = SaveResult.CANCELLED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:318:5: SyntaxError: Invalid annotated assignment target
    |
316 |             backup_path = None
317 |             if request.save_config.create_backup and
318 |     self._file_system.file_exists(request.save_config.target_path):
    |     ^
319 |                 if not self._update_progress(request.progress_callback, SavePhase.CREATING_BACKUP, 30):
320 |                     response.result = SaveResult.CANCELLED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:318:68: SyntaxError: Expected an expression
    |
316 |             backup_path = None
317 |             if request.save_config.create_backup and
318 |     self._file_system.file_exists(request.save_config.target_path):
    |                                                                    ^
319 |                 if not self._update_progress(request.progress_callback, SavePhase.CREATING_BACKUP, 30):
320 |                     response.result = SaveResult.CANCELLED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:319:1: SyntaxError: Unexpected indentation
    |
317 |             if request.save_config.create_backup and
318 |     self._file_system.file_exists(request.save_config.target_path):
319 |                 if not self._update_progress(request.progress_callback, SavePhase.CREATING_BACKUP, 30):
    | ^
320 |                     response.result = SaveResult.CANCELLED
321 |                     return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:319:101: E501 Line too long (103 > 100)
    |
317 |             if request.save_config.create_backup and
318 |     self._file_system.file_exists(request.save_config.target_path):
319 |                 if not self._update_progress(request.progress_callback, SavePhase.CREATING_BACKUP, 30):
    |                                                                                                     ^^^ E501
320 |                     response.result = SaveResult.CANCELLED
321 |                     return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:323:1: SyntaxError: Expected a statement
    |
321 |                     return response
322 |
323 | backup_path = (
    | ^
324 |     f"{request.save_config.target_path}{request.save_config.backup_suffix}")
325 | backup_result = (
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:327:1: SyntaxError: Unexpected indentation
    |
325 | backup_result = (
326 |     self._file_system.copy_file(request.save_config.target_path, backup_path))
327 |                 if backup_result.is_success:
    | ^
328 |                     response.backup_path = backup_path
329 |                     self._logger.log_info(f"Configuration backup created: {backup_path}")
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:331:101: E501 Line too long (101 > 100)
    |
329 |                     self._logger.log_info(f"Configuration backup created: {backup_path}")
330 |                 else:
331 |                     response.validation_warnings.append(f"Failed to create backup: {backup_result.er\
    |                                                                                                     ^ E501
332 |     ror_message}")
333 |                     if request.save_config.strategy == SaveStrategy.ATOMIC:
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:332:5: SyntaxError: f-string: expecting '}'
    |
330 |                 else:
331 |                     response.validation_warnings.append(f"Failed to create backup: {backup_result.er\
332 |     ror_message}")
    |     ^
333 |                     if request.save_config.strategy == SaveStrategy.ATOMIC:
334 |                         response.error_message = "Backup creation failed for atomic save strategy"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:332:16: SyntaxError: f-string: single '}' is not allowed
    |
330 |                 else:
331 |                     response.validation_warnings.append(f"Failed to create backup: {backup_result.er\
332 |     ror_message}")
    |                ^
333 |                     if request.save_config.strategy == SaveStrategy.ATOMIC:
334 |                         response.error_message = "Backup creation failed for atomic save strategy"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:332:17: SyntaxError: Expected ',', found FStringEnd
    |
330 |                 else:
331 |                     response.validation_warnings.append(f"Failed to create backup: {backup_result.er\
332 |     ror_message}")
    |                 ^
333 |                     if request.save_config.strategy == SaveStrategy.ATOMIC:
334 |                         response.error_message = "Backup creation failed for atomic save strategy"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:339:13: SyntaxError: unindent does not match any outer indentation level
    |
338 |             # Phase 5: Serialize data
339 |             if not self._update_progress(request.progress_callback, SavePhase.SERIALIZING_DATA, 50):
    |             ^
340 |                 response.result = SaveResult.CANCELLED
341 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:343:1: SyntaxError: unindent does not match any outer indentation level
    |
341 |                 return response
342 |
343 |             serialized_data = self._serialize_data(data_to_save, request.save_config)
    | ^
344 |             if not serialized_data.is_success:
345 |                 response.error_message = f"Serialization failed: {serialized_data.error_message}"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:344:1: SyntaxError: Unexpected indentation
    |
343 |             serialized_data = self._serialize_data(data_to_save, request.save_config)
344 |             if not serialized_data.is_success:
    | ^
345 |                 response.error_message = f"Serialization failed: {serialized_data.error_message}"
346 |                 response.result = SaveResult.SERIALIZATION_FAILED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:361:101: E501 Line too long (111 > 100)
    |
359 |                     response.compression_ratio = len(final_data) / original_size
360 |                 else:
361 |                     response.validation_warnings.append(f"Compression failed: {compress_result.error_message}",
    |                                                                                                     ^^^^^^^^^^^ E501
362 |     )
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:370:1: SyntaxError: Unexpected indentation
    |
368 | encrypt_result = (
369 |     self._serialization.encrypt_data(final_data, request.save_config.encryption_key))
370 |                 if encrypt_result.is_success:
    | ^
371 |                     final_data = encrypt_result.value
372 |                 else:
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:373:101: E501 Line too long (109 > 100)
    |
371 |                     final_data = encrypt_result.value
372 |                 else:
373 |                     response.validation_warnings.append(f"Encryption failed: {encrypt_result.error_message}",
    |                                                                                                     ^^^^^^^^^ E501
374 |     )
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:377:13: SyntaxError: unindent does not match any outer indentation level
    |
376 |             # Phase 6: Write to storage
377 |             if not self._update_progress(request.progress_callback, SavePhase.WRITING_TO_STORAGE, 70):
    |             ^
378 |                 response.result = SaveResult.CANCELLED
379 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:377:101: E501 Line too long (102 > 100)
    |
376 |             # Phase 6: Write to storage
377 |             if not self._update_progress(request.progress_callback, SavePhase.WRITING_TO_STORAGE, 70):
    |                                                                                                     ^^ E501
378 |                 response.result = SaveResult.CANCELLED
379 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:382:1: SyntaxError: unindent does not match any outer indentation level
    |
381 |             # Ensure target directory exists
382 |             import os
    | ^
383 |             target_dir = os.path.dirname(request.save_config.target_path)
384 |             if target_dir:
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:383:1: SyntaxError: Unexpected indentation
    |
381 |             # Ensure target directory exists
382 |             import os
383 |             target_dir = os.path.dirname(request.save_config.target_path)
    | ^
384 |             if target_dir:
385 |                 dir_result = self._file_system.create_directory(target_dir,
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:387:46: SyntaxError: Expected an indented block after `if` statement
    |
385 |                 dir_result = self._file_system.create_directory(target_dir,
386 |     )
387 |                 if not dir_result.is_success:
    |                                              ^
388 | response.error_message = (
389 |     f"Failed to create target directory: {dir_result.error_message}")
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:390:1: SyntaxError: Unexpected indentation
    |
388 | response.error_message = (
389 |     f"Failed to create target directory: {dir_result.error_message}")
390 |                     return response
    | ^
391 |
392 |             # Write data based on strategy
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:393:1: SyntaxError: unindent does not match any outer indentation level
    |
392 |             # Write data based on strategy
393 |             write_result = self._write_data_with_strategy(
    | ^
394 |                 final_data, request.save_config.target_path, request.save_config.strategy,
395 |             )
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:396:1: SyntaxError: Unexpected indentation
    |
394 |                 final_data, request.save_config.target_path, request.save_config.strategy,
395 |             )
396 |             if not write_result.is_success:
    | ^
397 |                 response.error_message = f"Write operation failed: {write_result.error_message}"
398 |                 response.result = SaveResult.WRITE_FAILED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:400:88: SyntaxError: Expected an indented block after `if` statement
    |
398 |                 response.result = SaveResult.WRITE_FAILED
399 |                 # Try to restore backup if atomic strategy failed
400 |                 if backup_path and request.save_config.strategy == SaveStrategy.ATOMIC:
    |                                                                                        ^
401 | restore_result = (
402 |     self._file_system.copy_file(backup_path, request.save_config.target_path))
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:401:1: SyntaxError: Expected a statement
    |
399 |                 # Try to restore backup if atomic strategy failed
400 |                 if backup_path and request.save_config.strategy == SaveStrategy.ATOMIC:
401 | restore_result = (
    | ^
402 |     self._file_system.copy_file(backup_path, request.save_config.target_path))
403 |                     if not restore_result.is_success:
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:403:1: SyntaxError: Unexpected indentation
    |
401 | restore_result = (
402 |     self._file_system.copy_file(backup_path, request.save_config.target_path))
403 |                     if not restore_result.is_success:
    | ^
404 |                         response.validation_warnings.append(f"Failed to restore backup: {restore_res\
405 |     ult.error_message}")
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:404:101: E501 Line too long (101 > 100)
    |
402 |     self._file_system.copy_file(backup_path, request.save_config.target_path))
403 |                     if not restore_result.is_success:
404 |                         response.validation_warnings.append(f"Failed to restore backup: {restore_res\
    |                                                                                                     ^ E501
405 |     ult.error_message}")
406 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:405:5: SyntaxError: f-string: expecting '}'
    |
403 |                     if not restore_result.is_success:
404 |                         response.validation_warnings.append(f"Failed to restore backup: {restore_res\
405 |     ult.error_message}")
    |     ^
406 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:405:8: SyntaxError: Expected ',', found FStringMiddle
    |
403 |                     if not restore_result.is_success:
404 |                         response.validation_warnings.append(f"Failed to restore backup: {restore_res\
405 |     ult.error_message}")
    |        ^
406 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:405:22: SyntaxError: f-string: single '}' is not allowed
    |
403 |                     if not restore_result.is_success:
404 |                         response.validation_warnings.append(f"Failed to restore backup: {restore_res\
405 |     ult.error_message}")
    |                      ^
406 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:405:23: SyntaxError: Expected ',', found FStringEnd
    |
403 |                     if not restore_result.is_success:
404 |                         response.validation_warnings.append(f"Failed to restore backup: {restore_res\
405 |     ult.error_message}")
    |                       ^
406 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:406:17: SyntaxError: unindent does not match any outer indentation level
    |
404 |                         response.validation_warnings.append(f"Failed to restore backup: {restore_res\
405 |     ult.error_message}")
406 |                 return response
    |                 ^
407 |
408 |             response.saved_path = request.save_config.target_path
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:408:1: SyntaxError: Unexpected indentation
    |
406 |                 return response
407 |
408 |             response.saved_path = request.save_config.target_path
    | ^
409 |
410 |             # Phase 7: Verify save
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:419:101: E501 Line too long (101 > 100)
    |
417 |                 data_to_save, request.save_config)
418 |                 if not verify_result.is_success:
419 |                     response.validation_warnings.append(f"Save verification failed: {verify_result.e\
    |                                                                                                     ^ E501
420 |     rror_message}")
421 |                     response.result = SaveResult.VERIFICATION_FAILED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:420:5: SyntaxError: f-string: expecting '}'
    |
418 |                 if not verify_result.is_success:
419 |                     response.validation_warnings.append(f"Save verification failed: {verify_result.e\
420 |     rror_message}")
    |     ^
421 |                     response.result = SaveResult.VERIFICATION_FAILED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:420:17: SyntaxError: f-string: single '}' is not allowed
    |
418 |                 if not verify_result.is_success:
419 |                     response.validation_warnings.append(f"Save verification failed: {verify_result.e\
420 |     rror_message}")
    |                 ^
421 |                     response.result = SaveResult.VERIFICATION_FAILED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:420:18: SyntaxError: Expected ',', found FStringEnd
    |
418 |                 if not verify_result.is_success:
419 |                     response.validation_warnings.append(f"Save verification failed: {verify_result.e\
420 |     rror_message}")
    |                  ^
421 |                     response.result = SaveResult.VERIFICATION_FAILED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:424:101: E501 Line too long (101 > 100)
    |
423 |             # Phase 8: Update metadata
424 |             if not self._update_progress(request.progress_callback, SavePhase.UPDATING_METADATA, 90):
    |                                                                                                     ^ E501
425 |                 response.result = SaveResult.CANCELLED
426 |                 return response
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:436:17: SyntaxError: Expected ',', found string
    |
434 |             save_metadata = {
435 |                 "timestamp": start_time.isoformat()
436 |                 "source": request.source_description,
    |                 ^
437 |                 "format": request.save_config.format.value,
438 |                 "strategy": request.save_config.strategy.value,
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:445:1: SyntaxError: Expected a statement
    |
443 |             }
444 |
445 | history_result = (
    | ^
446 |     self._metadata.update_save_history(request.save_config.target_path, save_metadata))
447 |             if not history_result.is_success:
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:447:1: SyntaxError: Unexpected indentation
    |
445 | history_result = (
446 |     self._metadata.update_save_history(request.save_config.target_path, save_metadata))
447 |             if not history_result.is_success:
    | ^
448 |                 response.validation_warnings.append(f"Failed to update save history: {history_result\
449 |     .error_message}")
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:448:101: E501 Line too long (101 > 100)
    |
446 |     self._metadata.update_save_history(request.save_config.target_path, save_metadata))
447 |             if not history_result.is_success:
448 |                 response.validation_warnings.append(f"Failed to update save history: {history_result\
    |                                                                                                     ^ E501
449 |     .error_message}")
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:475:17: SyntaxError: Expected ',', found string
    |
473 |             response.metadata = {
474 |                 "save_timestamp": start_time.isoformat()
475 |                 "target_path": request.save_config.target_path,
    |                 ^
476 |                 "source_description": request.source_description,
477 |                 "validation_performed": request.save_config.validate_before_save,
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:496:1: SyntaxError: unindent does not match any outer indentation level
    |
494 |             )
495 |
496 |         except Exception as e:
    | ^
497 |             self._logger.log_error(f"Unexpected error during configuration save: {e!s}")
498 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:496:9: SyntaxError: Expected a statement
    |
494 |             )
495 |
496 |         except Exception as e:
    |         ^
497 |             self._logger.log_error(f"Unexpected error during configuration save: {e!s}")
498 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:496:26: SyntaxError: Expected a statement
    |
494 |             )
495 |
496 |         except Exception as e:
    |                          ^
497 |             self._logger.log_error(f"Unexpected error during configuration save: {e!s}")
498 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:496:31: SyntaxError: Expected an expression
    |
494 |             )
495 |
496 |         except Exception as e:
    |                               ^
497 |             self._logger.log_error(f"Unexpected error during configuration save: {e!s}")
498 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:497:1: SyntaxError: Unexpected indentation
    |
496 |         except Exception as e:
497 |             self._logger.log_error(f"Unexpected error during configuration save: {e!s}")
    | ^
498 |             response.error_message = f"Unexpected error: {e!s}"
499 |             response.result = SaveResult.FAILED
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:501:1: SyntaxError: unindent does not match any outer indentation level
    |
499 |             response.result = SaveResult.FAILED
500 |
501 |         return response
    | ^
502 |
503 |     def _serialize_data(self, data: dict[str, Any], config: SaveConfiguration,
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:503:1: SyntaxError: Unexpected indentation
    |
501 |         return response
502 |
503 |     def _serialize_data(self, data: dict[str, Any], config: SaveConfiguration,
    | ^
504 |     ) -> Result[bytes | str]:
505 |         """Serialize data according to the specified format"""
    |

src_refactored\application\configuration\use_cases\save_configuration_use_case.py:599:20: SyntaxError: Expected a statement
    |
597 |                 phase=phase.value,
598 |             )
599 |         return True
    |                    ^
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:218:2: SyntaxError: unindent does not match any outer indentation level
    |
216 |             # Determine what needs to be updated
217 |             enabled_to_update
218 |  = (
    |  ^
219 |     request.update.enabled if request.update.enabled is not None else request.current_enabled)
220 |             model_to_update = request.update.model_name or request.current_model
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:220:1: SyntaxError: Unexpected indentation
    |
218 |  = (
219 |     request.update.enabled if request.update.enabled is not None else request.current_enabled)
220 |             model_to_update = request.update.model_name or request.current_model
    | ^
221 | quantization_to_update = (
222 |     request.update.quantization_level or request.current_quantization)
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:223:1: SyntaxError: Unexpected indentation
    |
221 | quantization_to_update = (
222 |     request.update.quantization_level or request.current_quantization)
223 |             prompt_to_update = request.update.prompt or request.current_prompt
    | ^
224 |
225 |             # If LLM is being disabled, handle that case
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:230:37: SyntaxError: Expected an expression
    |
229 |             # If LLM is enabled, ensure we have all required parameters
230 |             if enabled_to_update and
    |                                     ^
231 |     (not model_to_update or not quantization_to_update or not prompt_to_update):
232 | response.error_message = (
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:231:1: SyntaxError: unindent does not match any outer indentation level
    |
229 |             # If LLM is enabled, ensure we have all required parameters
230 |             if enabled_to_update and
231 |     (not model_to_update or not quantization_to_update or not prompt_to_update):
    | ^
232 | response.error_message = (
233 |     "Model, quantization, and prompt must be specified when LLM is enabled")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:231:6: SyntaxError: Invalid annotated assignment target
    |
229 |             # If LLM is enabled, ensure we have all required parameters
230 |             if enabled_to_update and
231 |     (not model_to_update or not quantization_to_update or not prompt_to_update):
    |      ^
232 | response.error_message = (
233 |     "Model, quantization, and prompt must be specified when LLM is enabled")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:231:81: SyntaxError: Expected an expression
    |
229 |             # If LLM is enabled, ensure we have all required parameters
230 |             if enabled_to_update and
231 |     (not model_to_update or not quantization_to_update or not prompt_to_update):
    |                                                                                 ^
232 | response.error_message = (
233 |     "Model, quantization, and prompt must be specified when LLM is enabled")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:234:1: SyntaxError: Unexpected indentation
    |
232 | response.error_message = (
233 |     "Model, quantization, and prompt must be specified when LLM is enabled")
234 |                 return response
    | ^
235 |
236 |             # Phase 2: Validate model
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:237:1: SyntaxError: unindent does not match any outer indentation level
    |
236 |             # Phase 2: Validate model
237 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.VALIDATING_MODEL, 10):
    | ^
238 |                 response.result = LLMUpdateResult.CANCELLED
239 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:237:101: E501 Line too long (105 > 100)
    |
236 |             # Phase 2: Validate model
237 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.VALIDATING_MODEL, 10):
    |                                                                                                     ^^^^^ E501
238 |                 response.result = LLMUpdateResult.CANCELLED
239 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:241:1: SyntaxError: unindent does not match any outer indentation level
    |
239 |                 return response
240 |
241 |             if enabled_to_update and request.update.validate_compatibility:
    | ^
242 |                 model_validation = self._llm_validation.validate_llm_model_name(model_to_update,
243 |     )
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:250:13: SyntaxError: unindent does not match any outer indentation level
    |
249 |             # Phase 3: Validate quantization
250 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.VALIDATING_QUANTIZATION, 20):
    |             ^
251 |                 response.result = LLMUpdateResult.CANCELLED
252 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:250:101: E501 Line too long (112 > 100)
    |
249 |             # Phase 3: Validate quantization
250 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.VALIDATING_QUANTIZATION, 20):
    |                                                                                                     ^^^^^^^^^^^^ E501
251 |                 response.result = LLMUpdateResult.CANCELLED
252 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:254:1: SyntaxError: unindent does not match any outer indentation level
    |
252 |                 return response
253 |
254 |             if enabled_to_update and request.update.validate_compatibility:
    | ^
255 | quantization_validation = (
256 |     self._llm_validation.validate_llm_quantization_level(quantization_to_update,)
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:255:1: SyntaxError: Expected an indented block after `if` statement
    |
254 |             if enabled_to_update and request.update.validate_compatibility:
255 | quantization_validation = (
    | ^
256 |     self._llm_validation.validate_llm_quantization_level(quantization_to_update,)
257 |     )
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:256:80: COM819 Trailing comma prohibited
    |
254 |             if enabled_to_update and request.update.validate_compatibility:
255 | quantization_validation = (
256 |     self._llm_validation.validate_llm_quantization_level(quantization_to_update,)
    |                                                                                ^ COM819
257 |     )
258 |                 if not quantization_validation.is_success:
    |
    = help: Remove trailing comma

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:258:1: SyntaxError: Unexpected indentation
    |
256 |     self._llm_validation.validate_llm_quantization_level(quantization_to_update,)
257 |     )
258 |                 if not quantization_validation.is_success:
    | ^
259 | response.error_message = (
260 |     f"Invalid LLM quantization: {quantization_validation.error_message}")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:258:59: SyntaxError: Expected an indented block after `if` statement
    |
256 |     self._llm_validation.validate_llm_quantization_level(quantization_to_update,)
257 |     )
258 |                 if not quantization_validation.is_success:
    |                                                           ^
259 | response.error_message = (
260 |     f"Invalid LLM quantization: {quantization_validation.error_message}")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:261:1: SyntaxError: Unexpected indentation
    |
259 | response.error_message = (
260 |     f"Invalid LLM quantization: {quantization_validation.error_message}")
261 |                     response.result = LLMUpdateResult.QUANTIZATION_NOT_SUPPORTED
    | ^
262 |                     return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:265:1: SyntaxError: unindent does not match any outer indentation level
    |
264 |                 # Check model-quantization compatibility
265 |                 compatibility_result = self._llm_validation.check_llm_compatibility(model_to_update,
    | ^
266 |                 quantization_to_update)
267 |                 if compatibility_result.is_success:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:267:1: SyntaxError: Unexpected indentation
    |
265 |                 compatibility_result = self._llm_validation.check_llm_compatibility(model_to_update,
266 |                 quantization_to_update)
267 |                 if compatibility_result.is_success:
    | ^
268 |                     response.compatibility_check = compatibility_result.value
269 |                     if compatibility_result.value == LLMCompatibility.INCOMPATIBLE:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:271:2: SyntaxError: unindent does not match any outer indentation level
    |
269 |                     if compatibility_result.value == LLMCompatibility.INCOMPATIBLE:
270 |                         response.error_message
271 |  = (
    |  ^
272 |     f"LLM model {model_to_update.value} is incompatible with quantization {quantization_to_update.value}")
273 |                         response.result = LLMUpdateResult.VALIDATION_FAILED
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:272:101: E501 Line too long (106 > 100)
    |
270 |                         response.error_message
271 |  = (
272 |     f"LLM model {model_to_update.value} is incompatible with quantization {quantization_to_update.value}")
    |                                                                                                     ^^^^^^ E501
273 |                         response.result = LLMUpdateResult.VALIDATION_FAILED
274 |                         return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:273:1: SyntaxError: Unexpected indentation
    |
271 |  = (
272 |     f"LLM model {model_to_update.value} is incompatible with quantization {quantization_to_update.value}")
273 |                         response.result = LLMUpdateResult.VALIDATION_FAILED
    | ^
274 |                         return response
275 |                     if compatibility_result.value == LLMCompatibility.PARTIALLY_COMPATIBLE:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:275:1: SyntaxError: unindent does not match any outer indentation level
    |
273 |                         response.result = LLMUpdateResult.VALIDATION_FAILED
274 |                         return response
275 |                     if compatibility_result.value == LLMCompatibility.PARTIALLY_COMPATIBLE:
    | ^
276 |                         response.warnings.append(f"LLM model {model_to_update.value} has limited com\
277 |     patibility with quantization {quantization_to_update.value}")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:276:101: E501 Line too long (101 > 100)
    |
274 |                         return response
275 |                     if compatibility_result.value == LLMCompatibility.PARTIALLY_COMPATIBLE:
276 |                         response.warnings.append(f"LLM model {model_to_update.value} has limited com\
    |                                                                                                     ^ E501
277 |     patibility with quantization {quantization_to_update.value}")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:280:1: SyntaxError: unindent does not match any outer indentation level
    |
279 |             # Phase 4: Validate prompt
280 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.VALIDATING_PROMPT, 30):
    | ^
281 |                 response.result = LLMUpdateResult.CANCELLED
282 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:280:101: E501 Line too long (106 > 100)
    |
279 |             # Phase 4: Validate prompt
280 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.VALIDATING_PROMPT, 30):
    |                                                                                                     ^^^^^^ E501
281 |                 response.result = LLMUpdateResult.CANCELLED
282 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:284:1: SyntaxError: unindent does not match any outer indentation level
    |
282 |                 return response
283 |
284 |             if enabled_to_update and prompt_to_update:
    | ^
285 |                 prompt_validation = self._llm_validation.validate_llm_prompt(prompt_to_update)
286 |                 if not prompt_validation.is_success:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:286:53: SyntaxError: Expected an indented block after `if` statement
    |
284 |             if enabled_to_update and prompt_to_update:
285 |                 prompt_validation = self._llm_validation.validate_llm_prompt(prompt_to_update)
286 |                 if not prompt_validation.is_success:
    |                                                     ^
287 | response.error_message = (
288 |     f"Invalid LLM prompt: {prompt_validation.error_message}")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:289:1: SyntaxError: Unexpected indentation
    |
287 | response.error_message = (
288 |     f"Invalid LLM prompt: {prompt_validation.error_message}")
289 |                     response.result = LLMUpdateResult.PROMPT_INVALID
    | ^
290 |                     return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:293:1: SyntaxError: unindent does not match any outer indentation level
    |
292 |             # Phase 5: Backup current configuration
293 |             backup_path = None
    | ^
294 |             if request.update.backup_current_config:
295 |                 backup_result = self._llm_configuration.backup_configuration()
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:294:1: SyntaxError: Unexpected indentation
    |
292 |             # Phase 5: Backup current configuration
293 |             backup_path = None
294 |             if request.update.backup_current_config:
    | ^
295 |                 backup_result = self._llm_configuration.backup_configuration()
296 |                 if backup_result.is_success:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:300:101: E501 Line too long (110 > 100)
    |
298 |                     response.backup_config_path = backup_path
299 |                 else:
300 |                     response.warnings.append(f"Failed to backup configuration: {backup_result.error_message}",
    |                                                                                                     ^^^^^^^^^^ E501
301 |     )
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:304:101: E501 Line too long (112 > 100)
    |
303 |             # Phase 6: Stop current worker if needed
304 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.STOPPING_CURRENT_WORKER, 40):
    |                                                                                                     ^^^^^^^^^^^^ E501
305 |                 response.result = LLMUpdateResult.CANCELLED
306 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:312:101: E501 Line too long (111 > 100)
    |
310 |                 stop_result = self._llm_worker_management.stop_current_llm_worker()
311 |                 if not stop_result.is_success:
312 |                     response.warnings.append(f"Failed to stop current LLM worker: {stop_result.error_message}",
    |                                                                                                     ^^^^^^^^^^^ E501
313 |     )
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:316:101: E501 Line too long (111 > 100)
    |
315 |             # Phase 7: Update configuration
316 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.UPDATING_CONFIGURATION, 55):
    |                                                                                                     ^^^^^^^^^^^ E501
317 |                 response.result = LLMUpdateResult.CANCELLED
318 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:323:52: SyntaxError: Expected an indented block after `if` statement
    |
321 |                 enabled_to_update, model_to_update, quantization_to_update, prompt_to_update,
322 |             )
323 |             if not config_update_result.is_success:
    |                                                    ^
324 | response.error_message = (
325 |     f"Failed to update LLM configuration: {config_update_result.error_message}")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:327:1: SyntaxError: Unexpected indentation
    |
325 |     f"Failed to update LLM configuration: {config_update_result.error_message}")
326 |                 # Try to restore backup if available
327 |                 if backup_path:
    | ^
328 |                     restore_result = self._llm_configuration.restore_configuration(backup_path)
329 |                     if not restore_result.is_success:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:330:101: E501 Line too long (109 > 100)
    |
328 |                     restore_result = self._llm_configuration.restore_configuration(backup_path)
329 |                     if not restore_result.is_success:
330 |                         response.warnings.append(f"Failed to restore backup: {restore_result.error_message}",
    |                                                                                                     ^^^^^^^^^ E501
331 |     )
332 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:335:1: SyntaxError: unindent does not match any outer indentation level
    |
334 |             # Phase 8: Save configuration
335 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.SAVING_CONFIGURATION, 70):
    | ^
336 |                 response.result = LLMUpdateResult.CANCELLED
337 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:335:101: E501 Line too long (109 > 100)
    |
334 |             # Phase 8: Save configuration
335 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.SAVING_CONFIGURATION, 70):
    |                                                                                                     ^^^^^^^^^ E501
336 |                 response.result = LLMUpdateResult.CANCELLED
337 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:339:1: SyntaxError: unindent does not match any outer indentation level
    |
337 |                 return response
338 |
339 |             if request.update.save_to_persistent_config:
    | ^
340 |                 save_result = self._llm_configuration.save_configuration()
341 |                 if save_result.is_success:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:344:101: E501 Line too long (106 > 100)
    |
342 |                     response.configuration_saved = True
343 |                 else:
344 |                     response.warnings.append(f"Failed to save configuration: {save_result.error_message}",
    |                                                                                                     ^^^^^^ E501
345 |     )
346 |                     response.result = LLMUpdateResult.CONFIGURATION_SAVE_FAILED
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:349:13: SyntaxError: unindent does not match any outer indentation level
    |
348 |             # Phase 9: Restart worker if enabled
349 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.RESTARTING_WORKER, 85):
    |             ^
350 |                 response.result = LLMUpdateResult.CANCELLED
351 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:349:101: E501 Line too long (106 > 100)
    |
348 |             # Phase 9: Restart worker if enabled
349 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.RESTARTING_WORKER, 85):
    |                                                                                                     ^^^^^^ E501
350 |                 response.result = LLMUpdateResult.CANCELLED
351 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:353:1: SyntaxError: unindent does not match any outer indentation level
    |
351 |                 return response
352 |
353 |             if enabled_to_update and request.update.force_restart_worker:
    | ^
354 |                 worker_start_result = self._llm_worker_management.start_llm_worker_with_config(
355 |                     model_to_update, quantization_to_update, prompt_to_update,
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:359:22: SyntaxError: Expected an indented block after `else` clause
    |
357 |                 if worker_start_result.is_success:
358 |                     response.worker_restarted = True
359 |                 else:
    |                      ^
360 | response.error_message = (
361 |     f"Failed to restart LLM worker: {worker_start_result.error_message}")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:362:1: SyntaxError: Unexpected indentation
    |
360 | response.error_message = (
361 |     f"Failed to restart LLM worker: {worker_start_result.error_message}")
362 |                     response.result = LLMUpdateResult.WORKER_RESTART_FAILED
    | ^
363 |                     # Try to restore backup if available
364 |                     if backup_path:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:372:101: E501 Line too long (112 > 100)
    |
370 |     ):
371 |                                 self._llm_worker_management.start_llm_worker_with_config(
372 |                                     request.current_model, request.current_quantization, request.current_prompt,
    |                                                                                                     ^^^^^^^^^^^^ E501
373 |                                 )
374 |                     return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:377:1: SyntaxError: unindent does not match any outer indentation level
    |
376 |             # Phase 10: Verify update
377 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.VERIFYING_UPDATE, 95):
    | ^
378 |                 response.result = LLMUpdateResult.CANCELLED
379 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:377:101: E501 Line too long (105 > 100)
    |
376 |             # Phase 10: Verify update
377 |             if not self._update_progress(request.progress_callback, LLMUpdatePhase.VERIFYING_UPDATE, 95):
    |                                                                                                     ^^^^^ E501
378 |                 response.result = LLMUpdateResult.CANCELLED
379 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:382:1: SyntaxError: unindent does not match any outer indentation level
    |
381 |             # Verify the configuration was applied
382 |             current_config_result = self._llm_configuration.get_current_llm_config()
    | ^
383 |             if current_config_result.is_success:
384 |                 current_config = current_config_result.value
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:383:1: SyntaxError: Unexpected indentation
    |
381 |             # Verify the configuration was applied
382 |             current_config_result = self._llm_configuration.get_current_llm_config()
383 |             if current_config_result.is_success:
    | ^
384 |                 current_config = current_config_result.value
385 |                 if (current_config.get("llm_enabled") == enabled_to_update and
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:410:1: SyntaxError: Unexpected indentation
    |
409 |             # Add metadata
410 |             response.metadata = {
    | ^
411 |                 "update_timestamp": start_time.isoformat()
412 |                 "enabled_changed": request.update.enabled is not None,
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:412:17: SyntaxError: Expected ',', found string
    |
410 |             response.metadata = {
411 |                 "update_timestamp": start_time.isoformat()
412 |                 "enabled_changed": request.update.enabled is not None,
    |                 ^
413 |                 "model_changed": request.update.model_name is not None,
414 |                 "quantization_changed": request.update.quantization_level is not None,
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:429:17: SyntaxError: Expected ',', found name
    |
427 | updated_quantization = (
428 |     response.updated_quantization.value if response.updated_quantization else None,)
429 |                 worker_restarted=response.worker_restarted,
    |                 ^
430 |                 duration_ms=response.update_duration_ms,
431 |             )
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:433:1: SyntaxError: unindent does not match any outer indentation level
    |
431 |             )
432 |
433 |         except Exception as e:
    | ^
434 |             self._logger.log_error(f"Unexpected error during LLM configuration update: {e!s}")
435 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:433:9: SyntaxError: Expected a statement
    |
431 |             )
432 |
433 |         except Exception as e:
    |         ^
434 |             self._logger.log_error(f"Unexpected error during LLM configuration update: {e!s}")
435 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:433:26: SyntaxError: Expected a statement
    |
431 |             )
432 |
433 |         except Exception as e:
    |                          ^
434 |             self._logger.log_error(f"Unexpected error during LLM configuration update: {e!s}")
435 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:433:31: SyntaxError: Expected an expression
    |
431 |             )
432 |
433 |         except Exception as e:
    |                               ^
434 |             self._logger.log_error(f"Unexpected error during LLM configuration update: {e!s}")
435 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:434:1: SyntaxError: Unexpected indentation
    |
433 |         except Exception as e:
434 |             self._logger.log_error(f"Unexpected error during LLM configuration update: {e!s}")
    | ^
435 |             response.error_message = f"Unexpected error: {e!s}"
436 |             response.result = LLMUpdateResult.FAILED
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:438:1: SyntaxError: unindent does not match any outer indentation level
    |
436 |             response.result = LLMUpdateResult.FAILED
437 |
438 |         return response
    | ^
439 |
440 |     def _handle_llm_disable(self,
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:440:1: SyntaxError: Unexpected indentation
    |
438 |         return response
439 |
440 |     def _handle_llm_disable(self,
    | ^
441 |     request: UpdateLLMConfigRequest, response: UpdateLLMConfigResponse, start_time: datetime,
442 |     ) -> UpdateLLMConfigResponse:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:449:101: E501 Line too long (101 > 100)
    |
447 |                 disable_result = self._llm_worker_management.disable_llm_worker()
448 |                 if not disable_result.is_success:
449 |                     response.warnings.append(f"Failed to disable LLM worker: {disable_result.error_m\
    |                                                                                                     ^ E501
450 |     essage}")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:450:5: SyntaxError: f-string: expecting '}'
    |
448 |                 if not disable_result.is_success:
449 |                     response.warnings.append(f"Failed to disable LLM worker: {disable_result.error_m\
450 |     essage}")
    |     ^
451 |
452 |             # Update configuration
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:450:11: SyntaxError: f-string: single '}' is not allowed
    |
448 |                 if not disable_result.is_success:
449 |                     response.warnings.append(f"Failed to disable LLM worker: {disable_result.error_m\
450 |     essage}")
    |           ^
451 |
452 |             # Update configuration
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:450:12: SyntaxError: Expected ',', found FStringEnd
    |
448 |                 if not disable_result.is_success:
449 |                     response.warnings.append(f"Failed to disable LLM worker: {disable_result.error_m\
450 |     essage}")
    |            ^
451 |
452 |             # Update configuration
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:456:1: SyntaxError: Unexpected indentation
    |
454 |             if not config_update_result.is_success:
455 |                 response.error_message
456 |                  =  f"Failed to disable LLM in configuration: {config_update_result.error_message}"
    | ^
457 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:456:18: SyntaxError: Expected a statement
    |
454 |             if not config_update_result.is_success:
455 |                 response.error_message
456 |                  =  f"Failed to disable LLM in configuration: {config_update_result.error_message}"
    |                  ^
457 |                 return response
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:460:13: SyntaxError: Expected `except` or `finally` after `try` block
    |
459 |             # Save configuration if requested
460 |             if request.update.save_to_persistent_config:
    |             ^
461 |                 save_result = self._llm_configuration.save_configuration()
462 |                 if save_result.is_success:
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:465:101: E501 Line too long (101 > 100)
    |
463 |                     response.configuration_saved = True
464 |                 else:
465 |                     response.warnings.append(f"Failed to save configuration: {save_result.error_mess\
    |                                                                                                     ^ E501
466 |     age}")
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:466:5: SyntaxError: f-string: expecting '}'
    |
464 |                 else:
465 |                     response.warnings.append(f"Failed to save configuration: {save_result.error_mess\
466 |     age}")
    |     ^
467 |
468 |             response.updated_enabled = False
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:466:8: SyntaxError: f-string: single '}' is not allowed
    |
464 |                 else:
465 |                     response.warnings.append(f"Failed to save configuration: {save_result.error_mess\
466 |     age}")
    |        ^
467 |
468 |             response.updated_enabled = False
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:466:9: SyntaxError: Expected ',', found FStringEnd
    |
464 |                 else:
465 |                     response.warnings.append(f"Failed to save configuration: {save_result.error_mess\
466 |     age}")
    |         ^
467 |
468 |             response.updated_enabled = False
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:473:1: SyntaxError: Unexpected indentation
    |
471 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
472 |
473 |             self._logger.log_info("LLM disabled successfully",
    | ^
474 |     )
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:476:1: SyntaxError: unindent does not match any outer indentation level
    |
474 |     )
475 |
476 |         except Exception as e:
    | ^
477 |             response.error_message = f"Error disabling LLM: {e!s}"
478 |             response.result = LLMUpdateResult.FAILED
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:476:9: SyntaxError: Expected a statement
    |
474 |     )
475 |
476 |         except Exception as e:
    |         ^
477 |             response.error_message = f"Error disabling LLM: {e!s}"
478 |             response.result = LLMUpdateResult.FAILED
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:476:26: SyntaxError: Expected a statement
    |
474 |     )
475 |
476 |         except Exception as e:
    |                          ^
477 |             response.error_message = f"Error disabling LLM: {e!s}"
478 |             response.result = LLMUpdateResult.FAILED
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:476:31: SyntaxError: Expected an expression
    |
474 |     )
475 |
476 |         except Exception as e:
    |                               ^
477 |             response.error_message = f"Error disabling LLM: {e!s}"
478 |             response.result = LLMUpdateResult.FAILED
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:477:1: SyntaxError: Unexpected indentation
    |
476 |         except Exception as e:
477 |             response.error_message = f"Error disabling LLM: {e!s}"
    | ^
478 |             response.result = LLMUpdateResult.FAILED
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:480:1: SyntaxError: unindent does not match any outer indentation level
    |
478 |             response.result = LLMUpdateResult.FAILED
479 |
480 |         return response
    | ^
481 |
482 |     def _update_progress(self, callback: ProgressCallback | None, phase: LLMUpdatePhase, percentage: int,
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:482:1: SyntaxError: Unexpected indentation
    |
480 |         return response
481 |
482 |     def _update_progress(self, callback: ProgressCallback | None, phase: LLMUpdatePhase, percentage: int,
    | ^
483 |     ) -> bool:
484 |         """Update progress and check for cancellation"""
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:482:101: E501 Line too long (105 > 100)
    |
480 |         return response
481 |
482 |     def _update_progress(self, callback: ProgressCallback | None, phase: LLMUpdatePhase, percentage: int,
    |                                                                                                     ^^^^^ E501
483 |     ) -> bool:
484 |         """Update progress and check for cancellation"""
    |

src_refactored\application\configuration\use_cases\update_llm_config_use_case.py:491:20: SyntaxError: Expected dedent, found end of file
    |
489 |                 phase=phase.value,
490 |             )
491 |         return True
    |                    ^
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:195:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
193 |             # Determine what needs to be updated
194 |             model_to_update = request.update.model_name or request.current_model
195 | quantization_to_update = (
    | ^
196 |     request.update.quantization_level or request.current_quantization)
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:198:1: SyntaxError: Unexpected indentation
    |
196 |     request.update.quantization_level or request.current_quantization)
197 |
198 |             if not model_to_update or not quantization_to_update:
    | ^
199 |                 response.error_message = "Both model and quantization must be specified"
200 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:203:101: E501 Line too long (102 > 100)
    |
202 |             # Phase 2: Validate model
203 |             if not self._update_progress(request.progress_callback, UpdatePhase.VALIDATING_MODEL, 10):
    |                                                                                                     ^^ E501
204 |                 response.result = UpdateResult.CANCELLED
205 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:216:101: E501 Line too long (109 > 100)
    |
215 |             # Phase 3: Validate quantization
216 |             if not self._update_progress(request.progress_callback, UpdatePhase.VALIDATING_QUANTIZATION, 20):
    |                                                                                                     ^^^^^^^^^ E501
217 |                 response.result = UpdateResult.CANCELLED
218 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:220:54: SyntaxError: Expected an indented block after `if` statement
    |
218 |                 return response
219 |
220 |             if request.update.validate_compatibility:
    |                                                      ^
221 | quantization_validation = (
222 |     self._model_validation.validate_quantization_level(quantization_to_update)
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:221:1: SyntaxError: Expected a statement
    |
220 |             if request.update.validate_compatibility:
221 | quantization_validation = (
    | ^
222 |     self._model_validation.validate_quantization_level(quantization_to_update)
223 |     )
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:224:1: SyntaxError: Unexpected indentation
    |
222 |     self._model_validation.validate_quantization_level(quantization_to_update)
223 |     )
224 |                 if not quantization_validation.is_success:
    | ^
225 | response.error_message = (
226 |     f"Invalid quantization: {quantization_validation.error_message}")
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:224:59: SyntaxError: Expected an indented block after `if` statement
    |
222 |     self._model_validation.validate_quantization_level(quantization_to_update)
223 |     )
224 |                 if not quantization_validation.is_success:
    |                                                           ^
225 | response.error_message = (
226 |     f"Invalid quantization: {quantization_validation.error_message}")
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:225:1: SyntaxError: Expected a statement
    |
223 |     )
224 |                 if not quantization_validation.is_success:
225 | response.error_message = (
    | ^
226 |     f"Invalid quantization: {quantization_validation.error_message}")
227 |                     response.result = UpdateResult.QUANTIZATION_NOT_SUPPORTED
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:227:1: SyntaxError: Unexpected indentation
    |
225 | response.error_message = (
226 |     f"Invalid quantization: {quantization_validation.error_message}")
227 |                     response.result = UpdateResult.QUANTIZATION_NOT_SUPPORTED
    | ^
228 |                     return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:231:1: SyntaxError: Expected a statement
    |
230 |                 # Check model-quantization compatibility
231 | compatibility_result = (
    | ^
232 |     self._model_validation.check_model_compatibility(model_to_update)
233 |                 quantization_to_update)
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:233:17: SyntaxError: Expected ')', found name
    |
231 | compatibility_result = (
232 |     self._model_validation.check_model_compatibility(model_to_update)
233 |                 quantization_to_update)
    |                 ^
234 |                 if compatibility_result.is_success:
235 |                     response.compatibility_check = compatibility_result.value
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:233:39: SyntaxError: Expected a statement
    |
231 | compatibility_result = (
232 |     self._model_validation.check_model_compatibility(model_to_update)
233 |                 quantization_to_update)
    |                                       ^
234 |                 if compatibility_result.is_success:
235 |                     response.compatibility_check = compatibility_result.value
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:233:40: SyntaxError: Expected a statement
    |
231 | compatibility_result = (
232 |     self._model_validation.check_model_compatibility(model_to_update)
233 |                 quantization_to_update)
    |                                        ^
234 |                 if compatibility_result.is_success:
235 |                     response.compatibility_check = compatibility_result.value
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:234:1: SyntaxError: Unexpected indentation
    |
232 |     self._model_validation.check_model_compatibility(model_to_update)
233 |                 quantization_to_update)
234 |                 if compatibility_result.is_success:
    | ^
235 |                     response.compatibility_check = compatibility_result.value
236 |                     if compatibility_result.value == ModelCompatibility.INCOMPATIBLE:
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:238:2: SyntaxError: unindent does not match any outer indentation level
    |
236 |                     if compatibility_result.value == ModelCompatibility.INCOMPATIBLE:
237 |                         response.error_message
238 |  = (
    |  ^
239 |     f"Model {model_to_update.value} is incompatible with quantization {quantization_to_update.value}")
240 |                         response.result = UpdateResult.VALIDATION_FAILED
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:239:101: E501 Line too long (102 > 100)
    |
237 |                         response.error_message
238 |  = (
239 |     f"Model {model_to_update.value} is incompatible with quantization {quantization_to_update.value}")
    |                                                                                                     ^^ E501
240 |                         response.result = UpdateResult.VALIDATION_FAILED
241 |                         return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:240:1: SyntaxError: Unexpected indentation
    |
238 |  = (
239 |     f"Model {model_to_update.value} is incompatible with quantization {quantization_to_update.value}")
240 |                         response.result = UpdateResult.VALIDATION_FAILED
    | ^
241 |                         return response
242 |                     if compatibility_result.value == ModelCompatibility.PARTIALLY_COMPATIBLE:
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:242:1: SyntaxError: unindent does not match any outer indentation level
    |
240 |                         response.result = UpdateResult.VALIDATION_FAILED
241 |                         return response
242 |                     if compatibility_result.value == ModelCompatibility.PARTIALLY_COMPATIBLE:
    | ^
243 |                         response.warnings.append(f"Model {model_to_update.value} has limited compati\
244 |     bility with quantization {quantization_to_update.value}")
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:243:101: E501 Line too long (101 > 100)
    |
241 |                         return response
242 |                     if compatibility_result.value == ModelCompatibility.PARTIALLY_COMPATIBLE:
243 |                         response.warnings.append(f"Model {model_to_update.value} has limited compati\
    |                                                                                                     ^ E501
244 |     bility with quantization {quantization_to_update.value}")
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:247:1: SyntaxError: unindent does not match any outer indentation level
    |
246 |             # Phase 4: Backup current configuration
247 |             backup_path = None
    | ^
248 |             if request.update.backup_current_config:
249 |                 backup_result = self._configuration.backup_configuration()
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:248:1: SyntaxError: Unexpected indentation
    |
246 |             # Phase 4: Backup current configuration
247 |             backup_path = None
248 |             if request.update.backup_current_config:
    | ^
249 |                 backup_result = self._configuration.backup_configuration()
250 |                 if backup_result.is_success:
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:254:101: E501 Line too long (110 > 100)
    |
252 |                     response.backup_config_path = backup_path
253 |                 else:
254 |                     response.warnings.append(f"Failed to backup configuration: {backup_result.error_message}",
    |                                                                                                     ^^^^^^^^^^ E501
255 |     )
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:258:101: E501 Line too long (109 > 100)
    |
257 |             # Phase 5: Stop current worker if needed
258 |             if not self._update_progress(request.progress_callback, UpdatePhase.STOPPING_CURRENT_WORKER, 30):
    |                                                                                                     ^^^^^^^^^ E501
259 |                 response.result = UpdateResult.CANCELLED
260 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:266:101: E501 Line too long (107 > 100)
    |
264 |                 stop_result = self._worker_management.stop_current_worker()
265 |                 if not stop_result.is_success:
266 |                     response.warnings.append(f"Failed to stop current worker: {stop_result.error_message}",
    |                                                                                                     ^^^^^^^ E501
267 |     )
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:270:101: E501 Line too long (108 > 100)
    |
269 |             # Phase 6: Update configuration
270 |             if not self._update_progress(request.progress_callback, UpdatePhase.UPDATING_CONFIGURATION, 50):
    |                                                                                                     ^^^^^^^^ E501
271 |                 response.result = UpdateResult.CANCELLED
272 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:276:1: SyntaxError: Unexpected indentation
    |
274 | config_update_result = (
275 |     self._configuration.update_model_config(model_to_update, quantization_to_update))
276 |             if not config_update_result.is_success:
    | ^
277 | response.error_message = (
278 |     f"Failed to update configuration: {config_update_result.error_message}")
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:276:52: SyntaxError: Expected an indented block after `if` statement
    |
274 | config_update_result = (
275 |     self._configuration.update_model_config(model_to_update, quantization_to_update))
276 |             if not config_update_result.is_success:
    |                                                    ^
277 | response.error_message = (
278 |     f"Failed to update configuration: {config_update_result.error_message}")
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:277:1: SyntaxError: Expected a statement
    |
275 |     self._configuration.update_model_config(model_to_update, quantization_to_update))
276 |             if not config_update_result.is_success:
277 | response.error_message = (
    | ^
278 |     f"Failed to update configuration: {config_update_result.error_message}")
279 |                 # Try to restore backup if available
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:280:1: SyntaxError: Unexpected indentation
    |
278 |     f"Failed to update configuration: {config_update_result.error_message}")
279 |                 # Try to restore backup if available
280 |                 if backup_path:
    | ^
281 |                     restore_result = self._configuration.restore_configuration(backup_path)
282 |                     if not restore_result.is_success:
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:283:101: E501 Line too long (109 > 100)
    |
281 |                     restore_result = self._configuration.restore_configuration(backup_path)
282 |                     if not restore_result.is_success:
283 |                         response.warnings.append(f"Failed to restore backup: {restore_result.error_message}",
    |                                                                                                     ^^^^^^^^^ E501
284 |     )
285 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:288:1: SyntaxError: unindent does not match any outer indentation level
    |
287 |             # Phase 7: Save configuration
288 |             if not self._update_progress(request.progress_callback, UpdatePhase.SAVING_CONFIGURATION, 65):
    | ^
289 |                 response.result = UpdateResult.CANCELLED
290 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:288:101: E501 Line too long (106 > 100)
    |
287 |             # Phase 7: Save configuration
288 |             if not self._update_progress(request.progress_callback, UpdatePhase.SAVING_CONFIGURATION, 65):
    |                                                                                                     ^^^^^^ E501
289 |                 response.result = UpdateResult.CANCELLED
290 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:292:1: SyntaxError: unindent does not match any outer indentation level
    |
290 |                 return response
291 |
292 |             if request.update.save_to_persistent_config:
    | ^
293 |                 save_result = self._configuration.save_configuration()
294 |                 if save_result.is_success:
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:297:101: E501 Line too long (106 > 100)
    |
295 |                     response.configuration_saved = True
296 |                 else:
297 |                     response.warnings.append(f"Failed to save configuration: {save_result.error_message}",
    |                                                                                                     ^^^^^^ E501
298 |     )
299 |                     response.result = UpdateResult.CONFIGURATION_SAVE_FAILED
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:302:13: SyntaxError: unindent does not match any outer indentation level
    |
301 |             # Phase 8: Restart worker
302 |             if not self._update_progress(request.progress_callback, UpdatePhase.RESTARTING_WORKER, 80):
    |             ^
303 |                 response.result = UpdateResult.CANCELLED
304 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:302:101: E501 Line too long (103 > 100)
    |
301 |             # Phase 8: Restart worker
302 |             if not self._update_progress(request.progress_callback, UpdatePhase.RESTARTING_WORKER, 80):
    |                                                                                                     ^^^ E501
303 |                 response.result = UpdateResult.CANCELLED
304 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:306:1: SyntaxError: unindent does not match any outer indentation level
    |
304 |                 return response
305 |
306 |             if request.update.force_restart_worker:
    | ^
307 | worker_start_result = (
308 |     self._worker_management.start_worker_with_config(model_to_update,)
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:307:1: SyntaxError: Expected an indented block after `if` statement
    |
306 |             if request.update.force_restart_worker:
307 | worker_start_result = (
    | ^
308 |     self._worker_management.start_worker_with_config(model_to_update,)
309 |                 quantization_to_update)
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:308:69: COM819 Trailing comma prohibited
    |
306 |             if request.update.force_restart_worker:
307 | worker_start_result = (
308 |     self._worker_management.start_worker_with_config(model_to_update,)
    |                                                                     ^ COM819
309 |                 quantization_to_update)
310 |                 if worker_start_result.is_success:
    |
    = help: Remove trailing comma

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:309:17: SyntaxError: Expected ')', found name
    |
307 | worker_start_result = (
308 |     self._worker_management.start_worker_with_config(model_to_update,)
309 |                 quantization_to_update)
    |                 ^
310 |                 if worker_start_result.is_success:
311 |                     response.worker_restarted = True
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:309:39: SyntaxError: Expected a statement
    |
307 | worker_start_result = (
308 |     self._worker_management.start_worker_with_config(model_to_update,)
309 |                 quantization_to_update)
    |                                       ^
310 |                 if worker_start_result.is_success:
311 |                     response.worker_restarted = True
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:309:40: SyntaxError: Expected a statement
    |
307 | worker_start_result = (
308 |     self._worker_management.start_worker_with_config(model_to_update,)
309 |                 quantization_to_update)
    |                                        ^
310 |                 if worker_start_result.is_success:
311 |                     response.worker_restarted = True
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:310:1: SyntaxError: Unexpected indentation
    |
308 |     self._worker_management.start_worker_with_config(model_to_update,)
309 |                 quantization_to_update)
310 |                 if worker_start_result.is_success:
    | ^
311 |                     response.worker_restarted = True
312 |                 else:
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:312:22: SyntaxError: Expected an indented block after `else` clause
    |
310 |                 if worker_start_result.is_success:
311 |                     response.worker_restarted = True
312 |                 else:
    |                      ^
313 | response.error_message = (
314 |     f"Failed to restart worker: {worker_start_result.error_message}")
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:315:1: SyntaxError: Unexpected indentation
    |
313 | response.error_message = (
314 |     f"Failed to restart worker: {worker_start_result.error_message}")
315 |                     response.result = UpdateResult.WORKER_RESTART_FAILED
    | ^
316 |                     # Try to restore backup if available
317 |                     if backup_path:
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:328:1: SyntaxError: unindent does not match any outer indentation level
    |
327 |             # Phase 9: Verify update
328 |             if not self._update_progress(request.progress_callback, UpdatePhase.VERIFYING_UPDATE, 90):
    | ^
329 |                 response.result = UpdateResult.CANCELLED
330 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:328:101: E501 Line too long (102 > 100)
    |
327 |             # Phase 9: Verify update
328 |             if not self._update_progress(request.progress_callback, UpdatePhase.VERIFYING_UPDATE, 90):
    |                                                                                                     ^^ E501
329 |                 response.result = UpdateResult.CANCELLED
330 |                 return response
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:333:1: SyntaxError: unindent does not match any outer indentation level
    |
332 |             # Verify the configuration was applied
333 |             current_config_result = self._configuration.get_current_model_config()
    | ^
334 |             if current_config_result.is_success:
335 |                 current_config = current_config_result.value
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:334:1: SyntaxError: Unexpected indentation
    |
332 |             # Verify the configuration was applied
333 |             current_config_result = self._configuration.get_current_model_config()
334 |             if current_config_result.is_success:
    | ^
335 |                 current_config = current_config_result.value
336 |                 if (current_config.get("model") == model_to_update.value and
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:355:1: SyntaxError: Unexpected indentation
    |
354 |             # Add metadata
355 |             response.metadata = {
    | ^
356 |                 "update_timestamp": start_time.isoformat()
357 |                 "model_changed": request.update.model_name is not None,
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:357:17: SyntaxError: Expected ',', found string
    |
355 |             response.metadata = {
356 |                 "update_timestamp": start_time.isoformat()
357 |                 "model_changed": request.update.model_name is not None,
    |                 ^
358 |                 "quantization_changed": request.update.quantization_level is not None,
359 |                 "worker_was_running": worker_was_running,
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:371:17: SyntaxError: Expected ',', found name
    |
369 | updated_quantization = (
370 |     response.updated_quantization.value if response.updated_quantization else None,)
371 |                 worker_restarted=response.worker_restarted,
    |                 ^
372 |                 duration_ms=response.update_duration_ms,
373 |             )
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:375:1: SyntaxError: unindent does not match any outer indentation level
    |
373 |             )
374 |
375 |         except Exception as e:
    | ^
376 |             self._logger.log_error(f"Unexpected error during model configuration update: {e!s}")
377 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:375:9: SyntaxError: Expected a statement
    |
373 |             )
374 |
375 |         except Exception as e:
    |         ^
376 |             self._logger.log_error(f"Unexpected error during model configuration update: {e!s}")
377 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:375:26: SyntaxError: Expected a statement
    |
373 |             )
374 |
375 |         except Exception as e:
    |                          ^
376 |             self._logger.log_error(f"Unexpected error during model configuration update: {e!s}")
377 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:375:31: SyntaxError: Expected an expression
    |
373 |             )
374 |
375 |         except Exception as e:
    |                               ^
376 |             self._logger.log_error(f"Unexpected error during model configuration update: {e!s}")
377 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:376:1: SyntaxError: Unexpected indentation
    |
375 |         except Exception as e:
376 |             self._logger.log_error(f"Unexpected error during model configuration update: {e!s}")
    | ^
377 |             response.error_message = f"Unexpected error: {e!s}"
378 |             response.result = UpdateResult.FAILED
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:380:1: SyntaxError: unindent does not match any outer indentation level
    |
378 |             response.result = UpdateResult.FAILED
379 |
380 |         return response
    | ^
381 |
382 |     def _update_progress(self, callback: ProgressCallback | None, phase: UpdatePhase, percentage: int,
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:382:1: SyntaxError: Unexpected indentation
    |
380 |         return response
381 |
382 |     def _update_progress(self, callback: ProgressCallback | None, phase: UpdatePhase, percentage: int,
    | ^
383 |     ) -> bool:
384 |         """Update progress and check for cancellation"""
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:382:101: E501 Line too long (102 > 100)
    |
380 |         return response
381 |
382 |     def _update_progress(self, callback: ProgressCallback | None, phase: UpdatePhase, percentage: int,
    |                                                                                                     ^^ E501
383 |     ) -> bool:
384 |         """Update progress and check for cancellation"""
    |

src_refactored\application\configuration\use_cases\update_model_config_use_case.py:391:20: SyntaxError: Expected dedent, found end of file
    |
389 |                 phase=phase.value,
390 |             )
391 |         return True
    |                    ^
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:101:46: SyntaxError: Expected an expression or a ')'
    |
 99 |             self.style_updates = []
100 |         if self.timestamp is None:
101 |             self.timestamp = datetime.utcnow(,
    |                                              ^
102 |     )
103 |         if self.context_data is None:
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:219:23: SyntaxError: Expected ',', found ':'
    |
217 |     def set_geometry(self,
218 | window: Any, geometry_type: GeometryType, value: Any, animate: bool = (
219 |     False, duration_ms: int = 250),
    |                       ^
220 |     ) -> bool:
221 |         """Set geometry value with optional animation."""
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:219:29: SyntaxError: Expected ',', found '='
    |
217 |     def set_geometry(self,
218 | window: Any, geometry_type: GeometryType, value: Any, animate: bool = (
219 |     False, duration_ms: int = 250),
    |                             ^
220 |     ) -> bool:
221 |         """Set geometry value with optional animation."""
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:245:28: SyntaxError: Expected ',', found ':'
    |
243 |     def set_style(self,
244 | window: Any, style_type: StyleType, value: Any, merge: bool = (
245 |     True, apply_to_children: bool = False),
    |                            ^
246 |     ) -> bool:
247 |         """Set style value with merge and inheritance options."""
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:245:35: SyntaxError: Expected ',', found '='
    |
243 |     def set_style(self,
244 | window: Any, style_type: StyleType, value: Any, merge: bool = (
245 |     True, apply_to_children: bool = False),
    |                                   ^
246 |     ) -> bool:
247 |         """Set style value with merge and inheritance options."""
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:351:21: SyntaxError: Expected ',', found string
    |
349 |                 {
350 |                     "property_updates": len(request.property_updates)
351 |                     "geometry_updates": len(request.geometry_updates)
    |                     ^
352 |                     "style_updates": len(request.style_updates)
353 |                     "create_backup": request.create_backup,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:352:21: SyntaxError: Expected ',', found string
    |
350 |                     "property_updates": len(request.property_updates)
351 |                     "geometry_updates": len(request.geometry_updates)
352 |                     "style_updates": len(request.style_updates)
    |                     ^
353 |                     "create_backup": request.create_backup,
354 |                 },
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:353:21: SyntaxError: Expected ',', found string
    |
351 |                     "geometry_updates": len(request.geometry_updates)
352 |                     "style_updates": len(request.style_updates)
353 |                     "create_backup": request.create_backup,
    |                     ^
354 |                 },
355 |             )
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:374:54: SyntaxError: Expected an indented block after `if` statement
    |
373 |             for prop_update in request.property_updates:
374 |                 if prop_update.validate_before_apply:
    |                                                      ^
375 | errors = (
376 |     self.validation_service.validate_property_update(request.window, prop_update))
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:375:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
373 |             for prop_update in request.property_updates:
374 |                 if prop_update.validate_before_apply:
375 | errors = (
    | ^
376 |     self.validation_service.validate_property_update(request.window, prop_update))
377 |                     validation_errors.extend(errors)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:377:1: SyntaxError: Unexpected indentation
    |
375 | errors = (
376 |     self.validation_service.validate_property_update(request.window, prop_update))
377 |                     validation_errors.extend(errors)
    | ^
378 |
379 |             for geom_update in request.geometry_updates:
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:379:1: SyntaxError: unindent does not match any outer indentation level
    |
377 |                     validation_errors.extend(errors)
378 |
379 |             for geom_update in request.geometry_updates:
    | ^
380 |                 if geom_update.validate_constraints:
381 | errors = (
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:380:53: SyntaxError: Expected an indented block after `if` statement
    |
379 |             for geom_update in request.geometry_updates:
380 |                 if geom_update.validate_constraints:
    |                                                     ^
381 | errors = (
382 |     self.validation_service.validate_geometry_update(request.window, geom_update))
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:383:1: SyntaxError: Unexpected indentation
    |
381 | errors = (
382 |     self.validation_service.validate_geometry_update(request.window, geom_update))
383 |                     validation_errors.extend(errors)
    | ^
384 |
385 |             for style_update in request.style_updates:
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:385:1: SyntaxError: unindent does not match any outer indentation level
    |
383 |                     validation_errors.extend(errors)
384 |
385 |             for style_update in request.style_updates:
    | ^
386 |                 if style_update.validate_syntax:
387 | errors = (
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:386:49: SyntaxError: Expected an indented block after `if` statement
    |
385 |             for style_update in request.style_updates:
386 |                 if style_update.validate_syntax:
    |                                                 ^
387 | errors = (
388 |     self.validation_service.validate_style_update(request.window, style_update))
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:389:1: SyntaxError: Unexpected indentation
    |
387 | errors = (
388 |     self.validation_service.validate_style_update(request.window, style_update))
389 |                     validation_errors.extend(errors)
    | ^
390 |
391 |             if validation_errors and request.validate_all_changes:
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:391:1: SyntaxError: unindent does not match any outer indentation level
    |
389 |                     validation_errors.extend(errors)
390 |
391 |             if validation_errors and request.validate_all_changes:
    | ^
392 |                 return self._create_error_response(
393 |                     ConfigureResult.VALIDATION_ERROR,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:401:1: SyntaxError: unindent does not match any outer indentation level
    |
400 |             # Create backup if requested
401 |             backup = None
    | ^
402 |             if request.create_backup:
403 |                 try:
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:402:1: SyntaxError: Unexpected indentation
    |
400 |             # Create backup if requested
401 |             backup = None
402 |             if request.create_backup:
    | ^
403 |                 try:
404 |                     backup_id = f"config_backup_{start_time.timestamp(,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:404:71: SyntaxError: Expected an expression or a ')'
    |
402 |             if request.create_backup:
403 |                 try:
404 |                     backup_id = f"config_backup_{start_time.timestamp(,
    |                                                                       ^
405 |     )}"
406 | backup = (
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:406:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
404 |                     backup_id = f"config_backup_{start_time.timestamp(,
405 |     )}"
406 | backup = (
    | ^
407 |     self.backup_service.create_configuration_backup(request.window, backup_id))
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:409:1: SyntaxError: Unexpected indentation
    |
407 |     self.backup_service.create_configuration_backup(request.window, backup_id))
408 |
409 |                     if not self.backup_service.validate_backup_integrity(backup):
    | ^
410 |                         self.logger_service.log_warning(
411 |                             "Backup integrity validation failed",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:415:17: SyntaxError: unindent does not match any outer indentation level
    |
413 |                         )
414 |
415 |                 except Exception as e:
    |                 ^
416 |                     self.logger_service.log_warning(
417 |                         f"Failed to create configuration backup: {e!s}",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:415:34: SyntaxError: Expected a statement
    |
413 |                         )
414 |
415 |                 except Exception as e:
    |                                  ^
416 |                     self.logger_service.log_warning(
417 |                         f"Failed to create configuration backup: {e!s}",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:415:39: SyntaxError: Expected an expression
    |
413 |                         )
414 |
415 |                 except Exception as e:
    |                                       ^
416 |                     self.logger_service.log_warning(
417 |                         f"Failed to create configuration backup: {e!s}",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:416:1: SyntaxError: Unexpected indentation
    |
415 |                 except Exception as e:
416 |                     self.logger_service.log_warning(
    | ^
417 |                         f"Failed to create configuration backup: {e!s}",
418 |                         {"window": str(request.window)},
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:421:1: SyntaxError: unindent does not match any outer indentation level
    |
419 |                     )
420 |
421 |             update_results = []
    | ^
422 |             warnings = []
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:422:1: SyntaxError: Unexpected indentation
    |
421 |             update_results = []
422 |             warnings = []
    | ^
423 |
424 |             # Phase 3: Property Updates
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:429:48: SyntaxError: Expected an expression or a ')'
    |
427 |             property_failures = []
428 |             for prop_update in request.property_updates:
429 |                 update_start = datetime.utcnow(,
    |                                                ^
430 |     )
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:482:39: SyntaxError: Expected an indented block after `except` clause
    |
480 |                         ))
481 |
482 |                 except Exception as e:
    |                                       ^
483 | error_msg = (
484 |     f"Property update failed for {prop_update.property_type.value}: {e!s}")
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:483:1: SyntaxError: Expected a statement
    |
482 |                 except Exception as e:
483 | error_msg = (
    | ^
484 |     f"Property update failed for {prop_update.property_type.value}: {e!s}")
485 |                     property_failures.append(error_msg)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:485:1: SyntaxError: Unexpected indentation
    |
483 | error_msg = (
484 |     f"Property update failed for {prop_update.property_type.value}: {e!s}")
485 |                     property_failures.append(error_msg)
    | ^
486 |
487 |                     update_time = (datetime.utcnow() - update_start).total_seconds(,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:487:84: SyntaxError: Expected an expression or a ')'
    |
485 |                     property_failures.append(error_msg)
486 |
487 |                     update_time = (datetime.utcnow() - update_start).total_seconds(,
    |                                                                                    ^
488 |     ) * 1000
489 |                     update_results.append(UpdateResult(
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:498:1: SyntaxError: unindent does not match any outer indentation level
    |
497 |             # Phase 4: Geometry Updates
498 |             self.progress_service.update_progress(session_id, ConfigurePhase.GEOMETRY_UPDATE, 50.1)
    | ^
499 |
500 |             geometry_failures = []
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:500:1: SyntaxError: Unexpected indentation
    |
498 |             self.progress_service.update_progress(session_id, ConfigurePhase.GEOMETRY_UPDATE, 50.1)
499 |
500 |             geometry_failures = []
    | ^
501 |             for geom_update in request.geometry_updates:
502 |                 update_start = datetime.utcnow(,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:502:48: SyntaxError: Expected an expression or a ')'
    |
500 |             geometry_failures = []
501 |             for geom_update in request.geometry_updates:
502 |                 update_start = datetime.utcnow(,
    |                                                ^
503 |     )
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:518:27: SyntaxError: Expected an indented block after `if` statement
    |
516 |                             geom_update.geometry_type,
517 |                             geom_update.value,
518 |                         ):
    |                           ^
519 | error_msg = (
520 |     f"Geometry constraints validation failed for {geom_update.geometry_type.value}")
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:519:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
517 |                             geom_update.value,
518 |                         ):
519 | error_msg = (
    | ^
520 |     f"Geometry constraints validation failed for {geom_update.geometry_type.value}")
521 |                             geometry_failures.append(error_msg)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:521:1: SyntaxError: Unexpected indentation
    |
519 | error_msg = (
520 |     f"Geometry constraints validation failed for {geom_update.geometry_type.value}")
521 |                             geometry_failures.append(error_msg)
    | ^
522 |
523 |                             update_time = (datetime.utcnow() - update_start).total_seconds() * 1000
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:536:1: SyntaxError: unindent does not match any outer indentation level
    |
535 |                     # Apply geometry update
536 |                     success = self.geometry_service.set_geometry(
    | ^
537 |                         request.window,
538 |                         geom_update.geometry_type,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:544:1: SyntaxError: Unexpected indentation
    |
542 |                     )
543 |
544 |                     update_time = (datetime.utcnow() - update_start).total_seconds() * 1000
    | ^
545 |
546 |                     if success:
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:570:17: SyntaxError: unindent does not match any outer indentation level
    |
568 |                         ))
569 |
570 |                 except Exception as e:
    |                 ^
571 | error_msg = (
572 |     f"Geometry update failed for {geom_update.geometry_type.value}: {e!s}")
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:570:34: SyntaxError: Expected a statement
    |
568 |                         ))
569 |
570 |                 except Exception as e:
    |                                  ^
571 | error_msg = (
572 |     f"Geometry update failed for {geom_update.geometry_type.value}: {e!s}")
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:570:39: SyntaxError: Expected an expression
    |
568 |                         ))
569 |
570 |                 except Exception as e:
    |                                       ^
571 | error_msg = (
572 |     f"Geometry update failed for {geom_update.geometry_type.value}: {e!s}")
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:573:1: SyntaxError: Unexpected indentation
    |
571 | error_msg = (
572 |     f"Geometry update failed for {geom_update.geometry_type.value}: {e!s}")
573 |                     geometry_failures.append(error_msg)
    | ^
574 |
575 |                     update_time = (datetime.utcnow() - update_start).total_seconds(,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:575:84: SyntaxError: Expected an expression or a ')'
    |
573 |                     geometry_failures.append(error_msg)
574 |
575 |                     update_time = (datetime.utcnow() - update_start).total_seconds(,
    |                                                                                    ^
576 |     ) * 1000
577 |                     update_results.append(UpdateResult(
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:586:1: SyntaxError: unindent does not match any outer indentation level
    |
585 |             # Phase 5: Style Updates
586 |             self.progress_service.update_progress(session_id, ConfigurePhase.STYLE_UPDATE, 66.8)
    | ^
587 |
588 |             style_failures = []
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:588:1: SyntaxError: Unexpected indentation
    |
586 |             self.progress_service.update_progress(session_id, ConfigurePhase.STYLE_UPDATE, 66.8)
587 |
588 |             style_failures = []
    | ^
589 |             for style_update in request.style_updates:
590 |                 update_start = datetime.utcnow(,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:590:48: SyntaxError: Expected an expression or a ')'
    |
588 |             style_failures = []
589 |             for style_update in request.style_updates:
590 |                 update_start = datetime.utcnow(,
    |                                                ^
591 |     )
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:602:2: SyntaxError: unindent does not match any outer indentation level
    |
600 |                         if syntax_errors:
601 |                             error_msg
602 |  = (
    |  ^
603 |     f"Style syntax validation failed for {style_update.style_type.value}: {'; '.join(syntax_errors)}")
604 |                             style_failures.append(error_msg)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:603:101: E501 Line too long (102 > 100)
    |
601 |                             error_msg
602 |  = (
603 |     f"Style syntax validation failed for {style_update.style_type.value}: {'; '.join(syntax_errors)}")
    |                                                                                                     ^^ E501
604 |                             style_failures.append(error_msg)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:604:1: SyntaxError: Unexpected indentation
    |
602 |  = (
603 |     f"Style syntax validation failed for {style_update.style_type.value}: {'; '.join(syntax_errors)}")
604 |                             style_failures.append(error_msg)
    | ^
605 |
606 |                             update_time = (datetime.utcnow() - update_start).total_seconds(,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:606:92: SyntaxError: Expected an expression or a ')'
    |
604 |                             style_failures.append(error_msg)
605 |
606 |                             update_time = (datetime.utcnow() - update_start).total_seconds(,
    |                                                                                            ^
607 |     ) * 1000
608 |                             update_results.append(UpdateResult(
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:619:1: SyntaxError: unindent does not match any outer indentation level
    |
618 |                     # Backup current value
619 |                     old_value = self.style_service.backup_style(
    | ^
620 |                         request.window,
621 |                         style_update.style_type,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:625:1: SyntaxError: Unexpected indentation
    |
624 |                     # Apply style update
625 |                     success = self.style_service.set_style(
    | ^
626 |                         request.window,
627 |                         style_update.style_type,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:659:17: SyntaxError: unindent does not match any outer indentation level
    |
657 |                         ))
658 |
659 |                 except Exception as e:
    |                 ^
660 |                     error_msg = f"Style update failed for {style_update.style_type.value}: {e!s}"
661 |                     style_failures.append(error_msg)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:659:34: SyntaxError: Expected a statement
    |
657 |                         ))
658 |
659 |                 except Exception as e:
    |                                  ^
660 |                     error_msg = f"Style update failed for {style_update.style_type.value}: {e!s}"
661 |                     style_failures.append(error_msg)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:659:39: SyntaxError: Expected an expression
    |
657 |                         ))
658 |
659 |                 except Exception as e:
    |                                       ^
660 |                     error_msg = f"Style update failed for {style_update.style_type.value}: {e!s}"
661 |                     style_failures.append(error_msg)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:660:1: SyntaxError: Unexpected indentation
    |
659 |                 except Exception as e:
660 |                     error_msg = f"Style update failed for {style_update.style_type.value}: {e!s}"
    | ^
661 |                     style_failures.append(error_msg)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:663:84: SyntaxError: Expected an expression or a ')'
    |
661 |                     style_failures.append(error_msg)
662 |
663 |                     update_time = (datetime.utcnow() - update_start).total_seconds(,
    |                                                                                    ^
664 |     ) * 1000
665 |                     update_results.append(UpdateResult(
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:674:1: SyntaxError: unindent does not match any outer indentation level
    |
673 |             # Phase 6: Finalization
674 |             self.progress_service.update_progress(session_id, ConfigurePhase.FINALIZATION, 83.5)
    | ^
675 |
676 |             # Collect current state
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:677:1: SyntaxError: Unexpected indentation
    |
676 |             # Collect current state
677 |             current_properties = {}
    | ^
678 |             current_geometry = {}
679 |             current_styles = {}
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:683:61: SyntaxError: Expected an indented block after `for` statement
    |
681 |             try:
682 |                 # Get current properties
683 |                 for prop_update in request.property_updates:
    |                                                             ^
684 | current_properties[prop_update.property_type] = (
685 |     self.property_service.get_current_property()
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:684:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
682 |                 # Get current properties
683 |                 for prop_update in request.property_updates:
684 | current_properties[prop_update.property_type] = (
    | ^
685 |     self.property_service.get_current_property()
686 |                         request.window,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:686:25: SyntaxError: Expected ')', found name
    |
684 | current_properties[prop_update.property_type] = (
685 |     self.property_service.get_current_property()
686 |                         request.window,
    |                         ^
687 |                         prop_update.property_type,
688 |                     )
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:688:21: SyntaxError: Expected a statement
    |
686 |                         request.window,
687 |                         prop_update.property_type,
688 |                     )
    |                     ^
689 |
690 |                 # Get current geometry
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:688:22: SyntaxError: Expected a statement
    |
686 |                         request.window,
687 |                         prop_update.property_type,
688 |                     )
    |                      ^
689 |
690 |                 # Get current geometry
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:691:1: SyntaxError: Unexpected indentation
    |
690 |                 # Get current geometry
691 |                 for geom_update in request.geometry_updates:
    | ^
692 | current_geometry[geom_update.geometry_type] = (
693 |     self.geometry_service.get_current_geometry()
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:691:61: SyntaxError: Expected an indented block after `for` statement
    |
690 |                 # Get current geometry
691 |                 for geom_update in request.geometry_updates:
    |                                                             ^
692 | current_geometry[geom_update.geometry_type] = (
693 |     self.geometry_service.get_current_geometry()
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:692:1: SyntaxError: Expected a statement
    |
690 |                 # Get current geometry
691 |                 for geom_update in request.geometry_updates:
692 | current_geometry[geom_update.geometry_type] = (
    | ^
693 |     self.geometry_service.get_current_geometry()
694 |                         request.window,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:694:25: SyntaxError: Expected ')', found name
    |
692 | current_geometry[geom_update.geometry_type] = (
693 |     self.geometry_service.get_current_geometry()
694 |                         request.window,
    |                         ^
695 |                         geom_update.geometry_type,
696 |                     )
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:696:21: SyntaxError: Expected a statement
    |
694 |                         request.window,
695 |                         geom_update.geometry_type,
696 |                     )
    |                     ^
697 |
698 |                 # Get current styles
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:696:22: SyntaxError: Expected a statement
    |
694 |                         request.window,
695 |                         geom_update.geometry_type,
696 |                     )
    |                      ^
697 |
698 |                 # Get current styles
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:699:1: SyntaxError: Unexpected indentation
    |
698 |                 # Get current styles
699 |                 for style_update in request.style_updates:
    | ^
700 |                     current_styles[style_update.style_type] = self.style_service.get_current_style(
701 |                         request.window,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:705:13: SyntaxError: unindent does not match any outer indentation level
    |
703 |                     )
704 |
705 |             except Exception as e:
    |             ^
706 |                 self.logger_service.log_warning(
707 |                     f"Failed to collect current state: {e!s}",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:705:30: SyntaxError: Expected a statement
    |
703 |                     )
704 |
705 |             except Exception as e:
    |                              ^
706 |                 self.logger_service.log_warning(
707 |                     f"Failed to collect current state: {e!s}",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:705:35: SyntaxError: Expected an expression
    |
703 |                     )
704 |
705 |             except Exception as e:
    |                                   ^
706 |                 self.logger_service.log_warning(
707 |                     f"Failed to collect current state: {e!s}",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:706:1: SyntaxError: Unexpected indentation
    |
705 |             except Exception as e:
706 |                 self.logger_service.log_warning(
    | ^
707 |                     f"Failed to collect current state: {e!s}",
708 |                     {"window": str(request.window)},
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:712:1: SyntaxError: unindent does not match any outer indentation level
    |
711 |             # Create window state
712 |             window_state = WindowConfigurationState(
    | ^
713 |                 window=request.window,
714 |                 current_properties=current_properties,
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:719:17: SyntaxError: Expected ',', found name
    |
717 |                 backup=backup,
718 |                 last_update_time=datetime.utcnow()
719 |                 update_count=len(update_results)
    |                 ^
720 |             )
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:719:49: COM812 Trailing comma missing
    |
717 |                 backup=backup,
718 |                 last_update_time=datetime.utcnow()
719 |                 update_count=len(update_results)
    |                                                 ^ COM812
720 |             )
    |
    = help: Add trailing comma

src_refactored\application\main_window\use_cases\configure_window_use_case.py:722:1: SyntaxError: Unexpected indentation
    |
720 |             )
721 |
722 |             self.progress_service.update_progress(session_id, ConfigurePhase.FINALIZATION, 100.0)
    | ^
723 |             self.progress_service.complete_progress_session(session_id)
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:729:1: SyntaxError: Expected a statement
    |
727 |             # Determine result
728 |             total_failures = len(property_failures) + len(geometry_failures) + len(style_failures)
729 | total_updates = (
    | ^
730 |     len(request.property_updates) + len(request.geometry_updates) + len(request.style_updates))
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:732:1: SyntaxError: Unexpected indentation
    |
730 |     len(request.property_updates) + len(request.geometry_updates) + len(request.style_updates))
731 |
732 |             if total_failures == 0:
    | ^
733 |                 result = ConfigureResult.SUCCESS
734 |             elif property_failures and not geometry_failures and not style_failures:
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:775:1: SyntaxError: unindent does not match any outer indentation level
    |
773 |             )
774 |
775 |         except Exception as e:
    | ^
776 |             self.logger_service.log_error(
777 |                 "Unexpected error during window configuration",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:775:9: SyntaxError: Expected a statement
    |
773 |             )
774 |
775 |         except Exception as e:
    |         ^
776 |             self.logger_service.log_error(
777 |                 "Unexpected error during window configuration",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:775:26: SyntaxError: Expected a statement
    |
773 |             )
774 |
775 |         except Exception as e:
    |                          ^
776 |             self.logger_service.log_error(
777 |                 "Unexpected error during window configuration",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:775:31: SyntaxError: Expected an expression
    |
773 |             )
774 |
775 |         except Exception as e:
    |                               ^
776 |             self.logger_service.log_error(
777 |                 "Unexpected error during window configuration",
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:776:1: SyntaxError: Unexpected indentation
    |
775 |         except Exception as e:
776 |             self.logger_service.log_error(
    | ^
777 |                 "Unexpected error during window configuration",
778 |                 {"error": str(e)},
    |

src_refactored\application\main_window\use_cases\configure_window_use_case.py:789:1: SyntaxError: unindent does not match any outer indentation level
    |
787 |             )
788 |
789 |     def _create_error_response(
    | ^
790 |         self,
791 |         result: ConfigureResult,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:64:46: SyntaxError: Expected an expression or a ')'
   |
62 |     def __post_init__(self):
63 |         if self.timestamp is None:
64 |             self.timestamp = datetime.utcnow(,
   |                                              ^
65 |     )
66 |         if self.context_data is None:
   |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:282:101: E501 Line too long (113 > 100)
    |
280 |                 {
281 |                     "window_title": request.window_configuration.title,
282 |                     "window_size": f"{request.window_configuration.width}x{request.window_configuration.height}",
    |                                                                                                     ^^^^^^^^^^^^^ E501
283 |                     "component_count": len(request.component_configurations),
284 |                 },
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:288:101: E501 Line too long (109 > 100)
    |
287 |             # Phase 2: Configuration Validation
288 |             self.progress_service.update_progress(session_id, InitializePhase.CONFIGURATION_VALIDATION, 14.3)
    |                                                                                                     ^^^^^^^^^ E501
289 |
290 |             # Validate initialization request
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:302:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
301 |             # Validate window configuration
302 | window_errors = (
    | ^
303 |     self.validation_service.validate_window_configuration(request.window_configuration))
304 |             if window_errors:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:304:1: SyntaxError: Unexpected indentation
    |
302 | window_errors = (
303 |     self.validation_service.validate_window_configuration(request.window_configuration))
304 |             if window_errors:
    | ^
305 |                 return self._create_error_response(
306 |                     InitializeResult.CONFIGURATION_ERROR,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:384:23: SyntaxError: Expected an indented block after `if` statement
    |
382 |                         component_config.component_type,
383 |                         main_window,
384 |                     ):
    |                       ^
385 | error_msg = (
386 |     f"Component {component_config.component_type.value} is not compatible with main window")
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:385:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
383 |                         main_window,
384 |                     ):
385 | error_msg = (
    | ^
386 |     f"Component {component_config.component_type.value} is not compatible with main window")
387 |                         component_creation_errors.append(error_msg)
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:387:1: SyntaxError: Unexpected indentation
    |
385 | error_msg = (
386 |     f"Component {component_config.component_type.value} is not compatible with main window")
387 |                         component_creation_errors.append(error_msg)
    | ^
388 |                         continue
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:391:1: SyntaxError: unindent does not match any outer indentation level
    |
390 |                     # Create component
391 |                     component = self.component_factory_service.create_component(
    | ^
392 |                         component_config.component_type,
393 |                         component_config,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:397:1: SyntaxError: Unexpected indentation
    |
395 |                     )
396 |
397 |                     if component:
    | ^
398 |                         # Configure component
399 |                         config_success = self.component_factory_service.configure_component(
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:404:1: SyntaxError: Expected a statement
    |
402 |                         )
403 |
404 | initialized_components[component_config.component_type] = (
    | ^
405 |     InitializedComponent()
406 |                             component_type=component_config.component_type,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:406:29: SyntaxError: Expected ')', found name
    |
404 | initialized_components[component_config.component_type] = (
405 |     InitializedComponent()
406 |                             component_type=component_config.component_type,
    |                             ^
407 |                             widget=component,
408 |                             configuration=component_config,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:411:25: SyntaxError: Expected an assignment target
    |
409 |                             initialization_successful=config_success,
410 |                             error_message=None if config_success else "Configuration failed",
411 |                         )
    |                         ^
412 |
413 |                         if not config_success:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:413:1: SyntaxError: Unexpected indentation
    |
411 |                         )
412 |
413 |                         if not config_success:
    | ^
414 |                             self.logger_service.log_warning(
415 |                                 f"Component {component_config.component_type.value} created but configuration failed",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:415:101: E501 Line too long (118 > 100)
    |
413 |                         if not config_success:
414 |                             self.logger_service.log_warning(
415 |                                 f"Component {component_config.component_type.value} created but configuration failed",
    |                                                                                                     ^^^^^^^^^^^^^^^^^^ E501
416 |                                 {"component_type": component_config.component_type.value},
417 |                             )
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:418:21: SyntaxError: unindent does not match any outer indentation level
    |
416 |                                 {"component_type": component_config.component_type.value},
417 |                             )
418 |                     else:
    |                     ^
419 | error_msg = (
420 |     f"Failed to create component {component_config.component_type.value}")
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:418:25: SyntaxError: Expected a statement
    |
416 |                                 {"component_type": component_config.component_type.value},
417 |                             )
418 |                     else:
    |                         ^
419 | error_msg = (
420 |     f"Failed to create component {component_config.component_type.value}")
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:418:26: SyntaxError: Expected a statement
    |
416 |                                 {"component_type": component_config.component_type.value},
417 |                             )
418 |                     else:
    |                          ^
419 | error_msg = (
420 |     f"Failed to create component {component_config.component_type.value}")
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:421:1: SyntaxError: Unexpected indentation
    |
419 | error_msg = (
420 |     f"Failed to create component {component_config.component_type.value}")
421 |                         component_creation_errors.append(error_msg,
    | ^
422 |     )
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:424:1: SyntaxError: Expected a statement
    |
422 |     )
423 |
424 | initialized_components[component_config.component_type] = (
    | ^
425 |     InitializedComponent()
426 |                             component_type=component_config.component_type,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:426:29: SyntaxError: Expected ')', found name
    |
424 | initialized_components[component_config.component_type] = (
425 |     InitializedComponent()
426 |                             component_type=component_config.component_type,
    |                             ^
427 |                             widget=None,
428 |                             configuration=component_config,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:427:36: SyntaxError: Invalid assignment target
    |
425 |     InitializedComponent()
426 |                             component_type=component_config.component_type,
427 |                             widget=None,
    |                                    ^
428 |                             configuration=component_config,
429 |                             initialization_successful=False,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:429:55: SyntaxError: Invalid assignment target
    |
427 |                             widget=None,
428 |                             configuration=component_config,
429 |                             initialization_successful=False,
    |                                                       ^
430 |                             error_message="Component creation failed",
431 |                         )
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:431:25: SyntaxError: Expected an assignment target
    |
429 |                             initialization_successful=False,
430 |                             error_message="Component creation failed",
431 |                         )
    |                         ^
432 |
433 |                 except Exception as e:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:433:1: SyntaxError: Unexpected indentation
    |
431 |                         )
432 |
433 |                 except Exception as e:
    | ^
434 | error_msg = (
435 |     f"Component {component_config.component_type.value} initialization failed: {e!s}")
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:433:17: SyntaxError: Expected a statement
    |
431 |                         )
432 |
433 |                 except Exception as e:
    |                 ^
434 | error_msg = (
435 |     f"Component {component_config.component_type.value} initialization failed: {e!s}")
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:433:34: SyntaxError: Expected a statement
    |
431 |                         )
432 |
433 |                 except Exception as e:
    |                                  ^
434 | error_msg = (
435 |     f"Component {component_config.component_type.value} initialization failed: {e!s}")
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:433:39: SyntaxError: Expected an expression
    |
431 |                         )
432 |
433 |                 except Exception as e:
    |                                       ^
434 | error_msg = (
435 |     f"Component {component_config.component_type.value} initialization failed: {e!s}")
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:434:1: SyntaxError: Expected a statement
    |
433 |                 except Exception as e:
434 | error_msg = (
    | ^
435 |     f"Component {component_config.component_type.value} initialization failed: {e!s}")
436 |                     component_creation_errors.append(error_msg,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:436:1: SyntaxError: Unexpected indentation
    |
434 | error_msg = (
435 |     f"Component {component_config.component_type.value} initialization failed: {e!s}")
436 |                     component_creation_errors.append(error_msg,
    | ^
437 |     )
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:444:45: COM812 Trailing comma missing
    |
442 |                         configuration=component_config,
443 |                         initialization_successful=False,
444 |                         error_message=str(e)
    |                                             ^ COM812
445 |                     )
    |
    = help: Add trailing comma

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:448:1: SyntaxError: unindent does not match any outer indentation level
    |
447 |             # Check if critical components failed
448 |             if component_creation_errors:
    | ^
449 |                 self.logger_service.log_warning(
450 |                     "Some components failed to initialize",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:455:1: SyntaxError: unindent does not match any outer indentation level
    |
454 |             # Phase 5: Layout Configuration
455 |             self.progress_service.update_progress(session_id, InitializePhase.LAYOUT_CONFIGURATION, 57.2)
    | ^
456 |
457 |             layout_configured = False
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:455:101: E501 Line too long (105 > 100)
    |
454 |             # Phase 5: Layout Configuration
455 |             self.progress_service.update_progress(session_id, InitializePhase.LAYOUT_CONFIGURATION, 57.2)
    |                                                                                                     ^^^^^ E501
456 |
457 |             layout_configured = False
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:457:1: SyntaxError: Unexpected indentation
    |
455 |             self.progress_service.update_progress(session_id, InitializePhase.LAYOUT_CONFIGURATION, 57.2)
456 |
457 |             layout_configured = False
    | ^
458 |             try:
459 |                 # Get successfully created components
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:473:93: SyntaxError: Expected an indented block after `if` statement
    |
471 |                     for component_config in request.component_configurations:
472 |                         if (component_config.component_type in initialized_components and
473 |                             initialized_components[component_config.component_type].widget):
    |                                                                                             ^
474 |
475 | component = (
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:475:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
473 |                             initialized_components[component_config.component_type].widget):
474 |
475 | component = (
    | ^
476 |     initialized_components[component_config.component_type].widget)
477 |                             if not self.layout_service.configure_component_layout(
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:477:1: SyntaxError: Unexpected indentation
    |
475 | component = (
476 |     initialized_components[component_config.component_type].widget)
477 |                             if not self.layout_service.configure_component_layout(
    | ^
478 |                                 component,
479 |                                 component_config.layout_constraints,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:482:101: E501 Line too long (110 > 100)
    |
480 | …                     ):
481 | …                         self.logger_service.log_warning(
482 | …                             f"Failed to configure layout for {component_config.component_type.value}",
    |                                                                                               ^^^^^^^^^^ E501
483 | …                             {"component_type": component_config.component_type.value},
484 | …                         )
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:487:21: SyntaxError: unindent does not match any outer indentation level
    |
486 |                     # Validate layout integrity
487 |                     if not self.layout_service.validate_layout_integrity(main_window):
    |                     ^
488 |                         self.logger_service.log_warning(
489 |                             "Layout integrity validation failed",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:492:1: SyntaxError: unindent does not match any outer indentation level
    |
490 |                             {"window_title": request.window_configuration.title},
491 |                         )
492 |                 else:
    | ^
493 |                     self.logger_service.log_error(
494 |                         "Failed to setup main layout",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:492:17: SyntaxError: Expected a statement
    |
490 |                             {"window_title": request.window_configuration.title},
491 |                         )
492 |                 else:
    |                 ^
493 |                     self.logger_service.log_error(
494 |                         "Failed to setup main layout",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:492:21: SyntaxError: Expected a statement
    |
490 |                             {"window_title": request.window_configuration.title},
491 |                         )
492 |                 else:
    |                     ^
493 |                     self.logger_service.log_error(
494 |                         "Failed to setup main layout",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:492:22: SyntaxError: Expected a statement
    |
490 |                             {"window_title": request.window_configuration.title},
491 |                         )
492 |                 else:
    |                      ^
493 |                     self.logger_service.log_error(
494 |                         "Failed to setup main layout",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:493:1: SyntaxError: Unexpected indentation
    |
491 |                         )
492 |                 else:
493 |                     self.logger_service.log_error(
    | ^
494 |                         "Failed to setup main layout",
495 |                         {"window_title": request.window_configuration.title},
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:498:1: SyntaxError: unindent does not match any outer indentation level
    |
496 |                     )
497 |
498 |             except Exception as e:
    | ^
499 |                 return self._create_error_response(
500 |                     InitializeResult.LAYOUT_SETUP_FAILED,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:498:13: SyntaxError: Expected a statement
    |
496 |                     )
497 |
498 |             except Exception as e:
    |             ^
499 |                 return self._create_error_response(
500 |                     InitializeResult.LAYOUT_SETUP_FAILED,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:498:30: SyntaxError: Expected a statement
    |
496 |                     )
497 |
498 |             except Exception as e:
    |                              ^
499 |                 return self._create_error_response(
500 |                     InitializeResult.LAYOUT_SETUP_FAILED,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:498:35: SyntaxError: Expected an expression
    |
496 |                     )
497 |
498 |             except Exception as e:
    |                                   ^
499 |                 return self._create_error_response(
500 |                     InitializeResult.LAYOUT_SETUP_FAILED,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:499:1: SyntaxError: Unexpected indentation
    |
498 |             except Exception as e:
499 |                 return self._create_error_response(
    | ^
500 |                     InitializeResult.LAYOUT_SETUP_FAILED,
501 |                     InitializePhase.LAYOUT_CONFIGURATION,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:508:1: SyntaxError: unindent does not match any outer indentation level
    |
507 |             # Phase 6: Signal Connection
508 |             self.progress_service.update_progress(session_id, InitializePhase.SIGNAL_CONNECTION, 71.5)
    | ^
509 |
510 |             signals_connected = False
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:508:101: E501 Line too long (102 > 100)
    |
507 |             # Phase 6: Signal Connection
508 |             self.progress_service.update_progress(session_id, InitializePhase.SIGNAL_CONNECTION, 71.5)
    |                                                                                                     ^^ E501
509 |
510 |             signals_connected = False
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:510:1: SyntaxError: Unexpected indentation
    |
508 |             self.progress_service.update_progress(session_id, InitializePhase.SIGNAL_CONNECTION, 71.5)
509 |
510 |             signals_connected = False
    | ^
511 |             try:
512 |                 # Connect window signals
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:544:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
543 |                 # Validate signal connections
544 | signal_validation_errors = (
    | ^
545 |     self.signal_service.validate_signal_connections(main_window))
546 |                 if signal_validation_errors:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:546:1: SyntaxError: Unexpected indentation
    |
544 | signal_validation_errors = (
545 |     self.signal_service.validate_signal_connections(main_window))
546 |                 if signal_validation_errors:
    | ^
547 |                     self.logger_service.log_warning(
548 |                         "Signal connection validation issues",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:552:13: SyntaxError: unindent does not match any outer indentation level
    |
550 |                     )
551 |
552 |             except Exception as e:
    |             ^
553 |                 self.logger_service.log_error(
554 |                     f"Signal connection failed: {e!s}",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:552:30: SyntaxError: Expected a statement
    |
550 |                     )
551 |
552 |             except Exception as e:
    |                              ^
553 |                 self.logger_service.log_error(
554 |                     f"Signal connection failed: {e!s}",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:552:35: SyntaxError: Expected an expression
    |
550 |                     )
551 |
552 |             except Exception as e:
    |                                   ^
553 |                 self.logger_service.log_error(
554 |                     f"Signal connection failed: {e!s}",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:553:1: SyntaxError: Unexpected indentation
    |
552 |             except Exception as e:
553 |                 self.logger_service.log_error(
    | ^
554 |                     f"Signal connection failed: {e!s}",
555 |                     {"window_title": request.window_configuration.title},
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:559:1: SyntaxError: unindent does not match any outer indentation level
    |
558 |             # Phase 7: Finalization
559 |             self.progress_service.update_progress(session_id, InitializePhase.FINALIZATION, 85.8)
    | ^
560 |
561 |             # Create window state
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:562:1: SyntaxError: Unexpected indentation
    |
561 |             # Create window state
562 |             window_state = MainWindowState(
    | ^
563 |                 window=main_window,
564 |                 configuration=request.window_configuration,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:578:45: SyntaxError: Expected an expression
    |
577 |             # Determine result
578 |             if component_creation_errors and
    |                                             ^
579 |     not any(comp.initialization_successful for comp in initialized_components.values()):
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:579:1: SyntaxError: unindent does not match any outer indentation level
    |
577 |             # Determine result
578 |             if component_creation_errors and
579 |     not any(comp.initialization_successful for comp in initialized_components.values()):
    | ^
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
581 |             elif not layout_configured:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:579:5: SyntaxError: Invalid annotated assignment target
    |
577 |             # Determine result
578 |             if component_creation_errors and
579 |     not any(comp.initialization_successful for comp in initialized_components.values()):
    |     ^
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
581 |             elif not layout_configured:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:579:89: SyntaxError: Expected an expression
    |
577 |             # Determine result
578 |             if component_creation_errors and
579 |     not any(comp.initialization_successful for comp in initialized_components.values()):
    |                                                                                         ^
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
581 |             elif not layout_configured:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:580:1: SyntaxError: Unexpected indentation
    |
578 |             if component_creation_errors and
579 |     not any(comp.initialization_successful for comp in initialized_components.values()):
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
    | ^
581 |             elif not layout_configured:
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:581:1: SyntaxError: unindent does not match any outer indentation level
    |
579 |     not any(comp.initialization_successful for comp in initialized_components.values()):
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
581 |             elif not layout_configured:
    | ^
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
583 |             elif not signals_connected:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:581:13: SyntaxError: Expected a statement
    |
579 |     not any(comp.initialization_successful for comp in initialized_components.values()):
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
581 |             elif not layout_configured:
    |             ^
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
583 |             elif not signals_connected:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:581:18: SyntaxError: Invalid annotated assignment target
    |
579 |     not any(comp.initialization_successful for comp in initialized_components.values()):
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
581 |             elif not layout_configured:
    |                  ^
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
583 |             elif not signals_connected:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:581:40: SyntaxError: Expected an expression
    |
579 |     not any(comp.initialization_successful for comp in initialized_components.values()):
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
581 |             elif not layout_configured:
    |                                        ^
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
583 |             elif not signals_connected:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:582:1: SyntaxError: Unexpected indentation
    |
580 |                 result = InitializeResult.COMPONENT_INITIALIZATION_FAILED
581 |             elif not layout_configured:
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
    | ^
583 |             elif not signals_connected:
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:583:1: SyntaxError: unindent does not match any outer indentation level
    |
581 |             elif not layout_configured:
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
583 |             elif not signals_connected:
    | ^
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
585 |             else:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:583:13: SyntaxError: Expected a statement
    |
581 |             elif not layout_configured:
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
583 |             elif not signals_connected:
    |             ^
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
585 |             else:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:583:18: SyntaxError: Invalid annotated assignment target
    |
581 |             elif not layout_configured:
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
583 |             elif not signals_connected:
    |                  ^
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
585 |             else:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:583:40: SyntaxError: Expected an expression
    |
581 |             elif not layout_configured:
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
583 |             elif not signals_connected:
    |                                        ^
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
585 |             else:
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:584:1: SyntaxError: Unexpected indentation
    |
582 |                 result = InitializeResult.LAYOUT_SETUP_FAILED
583 |             elif not signals_connected:
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
    | ^
585 |             else:
586 |                 result = InitializeResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:585:1: SyntaxError: unindent does not match any outer indentation level
    |
583 |             elif not signals_connected:
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
585 |             else:
    | ^
586 |                 result = InitializeResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:585:13: SyntaxError: Expected a statement
    |
583 |             elif not signals_connected:
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
585 |             else:
    |             ^
586 |                 result = InitializeResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:585:17: SyntaxError: Expected a statement
    |
583 |             elif not signals_connected:
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
585 |             else:
    |                 ^
586 |                 result = InitializeResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:585:18: SyntaxError: Expected a statement
    |
583 |             elif not signals_connected:
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
585 |             else:
    |                  ^
586 |                 result = InitializeResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:586:1: SyntaxError: Unexpected indentation
    |
584 |                 result = InitializeResult.SIGNAL_CONNECTION_FAILED
585 |             else:
586 |                 result = InitializeResult.SUCCESS
    | ^
587 |
588 |             self.logger_service.log_info(
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:588:1: SyntaxError: unindent does not match any outer indentation level
    |
586 |                 result = InitializeResult.SUCCESS
587 |
588 |             self.logger_service.log_info(
    | ^
589 |                 "Main window initialization completed",
590 |                 {
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:594:101: E501 Line too long (104 > 100)
    |
592 |                     "result": result.value,
593 |                     "execution_time_ms": execution_time,
594 |                     "components_created": len([c for c in initialized_components.values() if c.widget]),
    |                                                                                                     ^^^^ E501
595 |                     "layout_configured": layout_configured,
596 |                     "signals_connected": signals_connected,
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:600:1: SyntaxError: Unexpected indentation
    |
598 |             )
599 |
600 |             warnings = component_creation_errors.copy()
    | ^
601 |             if not layout_configured:
602 |                 warnings.append("Layout configuration incomplete")
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:615:1: SyntaxError: unindent does not match any outer indentation level
    |
613 |             )
614 |
615 |         except Exception as e:
    | ^
616 |             self.logger_service.log_error(
617 |                 "Unexpected error during main window initialization",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:615:9: SyntaxError: Expected a statement
    |
613 |             )
614 |
615 |         except Exception as e:
    |         ^
616 |             self.logger_service.log_error(
617 |                 "Unexpected error during main window initialization",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:615:26: SyntaxError: Expected a statement
    |
613 |             )
614 |
615 |         except Exception as e:
    |                          ^
616 |             self.logger_service.log_error(
617 |                 "Unexpected error during main window initialization",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:615:31: SyntaxError: Expected an expression
    |
613 |             )
614 |
615 |         except Exception as e:
    |                               ^
616 |             self.logger_service.log_error(
617 |                 "Unexpected error during main window initialization",
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:616:1: SyntaxError: Unexpected indentation
    |
615 |         except Exception as e:
616 |             self.logger_service.log_error(
    | ^
617 |                 "Unexpected error during main window initialization",
618 |                 {"error": str(e)},
    |

src_refactored\application\main_window\use_cases\initialize_main_window_use_case.py:629:1: SyntaxError: unindent does not match any outer indentation level
    |
627 |             )
628 |
629 |     def _create_error_response(
    | ^
630 |         self,
631 |         result: InitializeResult,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:150:50: SyntaxError: Expected an expression or a ')'
    |
148 |     def __post_init__(self):
149 |         if self.creation_time is None:
150 |             self.creation_time = datetime.utcnow(,
    |                                                  ^
151 |     )
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:279:101: E501 Line too long (105 > 100)
    |
277 |         ...
278 |
279 |     def bind_data_to_visualization(self, widget: Any, data_source: Any, config: DataBindingConfiguration,
    |                                                                                                     ^^^^^ E501
280 |     ) -> bool:
281 |         """Bind data source to visualization widget."""
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:331:101: E501 Line too long (108 > 100)
    |
329 |     """Protocol for integration operations."""
330 |
331 |     def integrate_widget_into_container(self, widget: Any, container: Any, config: IntegrationConfiguration,
    |                                                                                                     ^^^^^^^^ E501
332 |     ) -> bool:
333 |         """Integrate widget into container."""
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:459:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
458 |             # Validate visualization configuration
459 | viz_errors = (
    | ^
460 |     self.validation_service.validate_visualization_config(request.visualization_config))
461 |             if viz_errors:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:461:1: SyntaxError: Unexpected indentation
    |
459 | viz_errors = (
460 |     self.validation_service.validate_visualization_config(request.visualization_config))
461 |             if viz_errors:
    | ^
462 |                 return self._create_error_response(
463 |                     IntegrateResult.VALIDATION_ERROR,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:471:1: SyntaxError: Expected a statement
    |
470 |             # Validate data binding configuration
471 | data_errors = (
    | ^
472 |     self.validation_service.validate_data_binding_config(request.data_binding_config))
473 |             if data_errors:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:473:1: SyntaxError: Unexpected indentation
    |
471 | data_errors = (
472 |     self.validation_service.validate_data_binding_config(request.data_binding_config))
473 |             if data_errors:
    | ^
474 |                 return self._create_error_response(
475 |                     IntegrateResult.VALIDATION_ERROR,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:483:1: SyntaxError: Expected a statement
    |
482 |             # Validate rendering configuration
483 | render_errors = (
    | ^
484 |     self.validation_service.validate_rendering_config(request.rendering_config))
485 |             if render_errors:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:485:1: SyntaxError: Unexpected indentation
    |
483 | render_errors = (
484 |     self.validation_service.validate_rendering_config(request.rendering_config))
485 |             if render_errors:
    | ^
486 |                 return self._create_error_response(
487 |                     IntegrateResult.VALIDATION_ERROR,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:509:101: E501 Line too long (106 > 100)
    |
508 |             # Phase 3: Visualization Creation
509 |             self.progress_service.update_progress(session_id, IntegratePhase.VISUALIZATION_CREATION, 25.0)
    |                                                                                                     ^^^^^^ E501
510 |
511 |             try:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:511:17: SyntaxError: Expected an indented block after `try` statement
    |
509 |             self.progress_service.update_progress(session_id, IntegratePhase.VISUALIZATION_CREATION, 25.0)
510 |
511 |             try:
    |                 ^
512 |                 # Check if visualization type is supported
513 | supported_types = (
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:513:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
511 |             try:
512 |                 # Check if visualization type is supported
513 | supported_types = (
    | ^
514 |     self.visualization_factory_service.get_supported_visualization_types())
515 |                 if request.visualization_config.visualization_type not in supported_types:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:515:1: SyntaxError: Unexpected indentation
    |
513 | supported_types = (
514 |     self.visualization_factory_service.get_supported_visualization_types())
515 |                 if request.visualization_config.visualization_type not in supported_types:
    | ^
516 |                     return self._create_error_response(
517 |                         IntegrateResult.VISUALIZATION_CREATION_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:520:101: E501 Line too long (116 > 100)
    |
518 |                         IntegratePhase.VISUALIZATION_CREATION,
519 |                         25.0,
520 |                         f"Visualization type {request.visualization_config.visualization_type.value} not supported",
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
521 |                         start_time,
522 |                     )
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:525:1: SyntaxError: Expected a statement
    |
524 |                 # Create visualization widget
525 | visualization_widget = (
    | ^
526 |     self.visualization_factory_service.create_visualization_widget()
527 |                     request.visualization_config,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:527:21: SyntaxError: Expected ')', found name
    |
525 | visualization_widget = (
526 |     self.visualization_factory_service.create_visualization_widget()
527 |                     request.visualization_config,
    |                     ^
528 |                     request.integration_config.container_widget,
529 |                 )
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:529:17: SyntaxError: Expected a statement
    |
527 |                     request.visualization_config,
528 |                     request.integration_config.container_widget,
529 |                 )
    |                 ^
530 |
531 |                 if not visualization_widget:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:529:18: SyntaxError: Expected a statement
    |
527 |                     request.visualization_config,
528 |                     request.integration_config.container_widget,
529 |                 )
    |                  ^
530 |
531 |                 if not visualization_widget:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:531:1: SyntaxError: Unexpected indentation
    |
529 |                 )
530 |
531 |                 if not visualization_widget:
    | ^
532 |                     return self._create_error_response(
533 |                         IntegrateResult.VISUALIZATION_CREATION_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:558:1: SyntaxError: unindent does not match any outer indentation level
    |
556 |                 )
557 |
558 |             except Exception as e:
    | ^
559 |                 return self._create_error_response(
560 |                     IntegrateResult.VISUALIZATION_CREATION_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:558:13: SyntaxError: Expected a statement
    |
556 |                 )
557 |
558 |             except Exception as e:
    |             ^
559 |                 return self._create_error_response(
560 |                     IntegrateResult.VISUALIZATION_CREATION_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:558:30: SyntaxError: Expected a statement
    |
556 |                 )
557 |
558 |             except Exception as e:
    |                              ^
559 |                 return self._create_error_response(
560 |                     IntegrateResult.VISUALIZATION_CREATION_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:558:35: SyntaxError: Expected an expression
    |
556 |                 )
557 |
558 |             except Exception as e:
    |                                   ^
559 |                 return self._create_error_response(
560 |                     IntegrateResult.VISUALIZATION_CREATION_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:559:1: SyntaxError: Unexpected indentation
    |
558 |             except Exception as e:
559 |                 return self._create_error_response(
    | ^
560 |                     IntegrateResult.VISUALIZATION_CREATION_FAILED,
561 |                     IntegratePhase.VISUALIZATION_CREATION,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:568:1: SyntaxError: unindent does not match any outer indentation level
    |
567 |             # Phase 4: Configuration Setup
568 |             self.progress_service.update_progress(session_id, IntegratePhase.CONFIGURATION_SETUP, 37.5)
    | ^
569 |
570 |             configuration_warnings = []
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:568:101: E501 Line too long (103 > 100)
    |
567 |             # Phase 4: Configuration Setup
568 |             self.progress_service.update_progress(session_id, IntegratePhase.CONFIGURATION_SETUP, 37.5)
    |                                                                                                     ^^^ E501
569 |
570 |             configuration_warnings = []
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:570:1: SyntaxError: Unexpected indentation
    |
568 |             self.progress_service.update_progress(session_id, IntegratePhase.CONFIGURATION_SETUP, 37.5)
569 |
570 |             configuration_warnings = []
    | ^
571 |
572 |             try:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:574:101: E501 Line too long (111 > 100)
    |
572 |             try:
573 |                 # Apply visualization configuration
574 |                 if hasattr(visualization_widget, "setMinimumSize") and request.visualization_config.dimensions:
    |                                                                                                     ^^^^^^^^^^^ E501
575 |                     visualization_widget.setMinimumSize(*request.visualization_config.dimensions)
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:577:101: E501 Line too long (116 > 100)
    |
575 |                     visualization_widget.setMinimumSize(*request.visualization_config.dimensions)
576 |
577 |                 if hasattr(visualization_widget, "setStyleSheet") and request.visualization_config.background_color:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
578 | style_sheet = (
579 |     f"background-color: {request.visualization_config.background_color};")
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:577:117: SyntaxError: Expected an indented block after `if` statement
    |
575 |                     visualization_widget.setMinimumSize(*request.visualization_config.dimensions)
576 |
577 |                 if hasattr(visualization_widget, "setStyleSheet") and request.visualization_config.background_color:
    |                                                                                                                     ^
578 | style_sheet = (
579 |     f"background-color: {request.visualization_config.background_color};")
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:578:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
577 |                 if hasattr(visualization_widget, "setStyleSheet") and request.visualization_config.background_color:
578 | style_sheet = (
    | ^
579 |     f"background-color: {request.visualization_config.background_color};")
580 |                     visualization_widget.setStyleSheet(style_sheet,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:580:1: SyntaxError: Unexpected indentation
    |
578 | style_sheet = (
579 |     f"background-color: {request.visualization_config.background_color};")
580 |                     visualization_widget.setStyleSheet(style_sheet,
    | ^
581 |     )
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:584:1: SyntaxError: unindent does not match any outer indentation level
    |
583 |                 # Configure update mode and refresh rate
584 |                 if request.visualization_config.update_mode == UpdateMode.TIMER_BASED:
    | ^
585 |                     update_interval = 1000 // request.visualization_config.refresh_rate_fps
586 |                     update_timer = self.integration_service.setup_update_mechanism(
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:593:1: SyntaxError: unindent does not match any outer indentation level
    |
591 |                     visualization_component.update_timer = update_timer
592 |
593 |             except Exception as e:
    | ^
594 |                 configuration_warnings.append(f"Configuration setup issues: {e!s}")
595 |                 self.logger_service.log_warning(
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:593:13: SyntaxError: Expected a statement
    |
591 |                     visualization_component.update_timer = update_timer
592 |
593 |             except Exception as e:
    |             ^
594 |                 configuration_warnings.append(f"Configuration setup issues: {e!s}")
595 |                 self.logger_service.log_warning(
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:593:30: SyntaxError: Expected a statement
    |
591 |                     visualization_component.update_timer = update_timer
592 |
593 |             except Exception as e:
    |                              ^
594 |                 configuration_warnings.append(f"Configuration setup issues: {e!s}")
595 |                 self.logger_service.log_warning(
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:593:35: SyntaxError: Expected an expression
    |
591 |                     visualization_component.update_timer = update_timer
592 |
593 |             except Exception as e:
    |                                   ^
594 |                 configuration_warnings.append(f"Configuration setup issues: {e!s}")
595 |                 self.logger_service.log_warning(
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:594:1: SyntaxError: Unexpected indentation
    |
593 |             except Exception as e:
594 |                 configuration_warnings.append(f"Configuration setup issues: {e!s}")
    | ^
595 |                 self.logger_service.log_warning(
596 |                     f"Configuration setup issues: {e!s}",
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:601:1: SyntaxError: unindent does not match any outer indentation level
    |
600 |             # Phase 5: Data Binding
601 |             self.progress_service.update_progress(session_id, IntegratePhase.DATA_BINDING, 50.0)
    | ^
602 |
603 |             data_binding = None
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:603:1: SyntaxError: Unexpected indentation
    |
601 |             self.progress_service.update_progress(session_id, IntegratePhase.DATA_BINDING, 50.0)
602 |
603 |             data_binding = None
    | ^
604 |             try:
605 |                 # Setup data source
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:604:17: SyntaxError: Expected an indented block after `try` statement
    |
603 |             data_binding = None
604 |             try:
    |                 ^
605 |                 # Setup data source
606 | data_source = (
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:606:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
604 |             try:
605 |                 # Setup data source
606 | data_source = (
    | ^
607 |     self.data_binding_service.setup_data_source(request.data_binding_config))
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:609:1: SyntaxError: Unexpected indentation
    |
607 |     self.data_binding_service.setup_data_source(request.data_binding_config))
608 |
609 |                 if not data_source:
    | ^
610 |                     return self._create_error_response(
611 |                         IntegrateResult.DATA_BINDING_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:652:13: SyntaxError: unindent does not match any outer indentation level
    |
650 |                         )
651 |
652 |             except Exception as e:
    |             ^
653 |                 return self._create_error_response(
654 |                     IntegrateResult.DATA_BINDING_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:652:30: SyntaxError: Expected a statement
    |
650 |                         )
651 |
652 |             except Exception as e:
    |                              ^
653 |                 return self._create_error_response(
654 |                     IntegrateResult.DATA_BINDING_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:652:35: SyntaxError: Expected an expression
    |
650 |                         )
651 |
652 |             except Exception as e:
    |                                   ^
653 |                 return self._create_error_response(
654 |                     IntegrateResult.DATA_BINDING_FAILED,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:653:1: SyntaxError: Unexpected indentation
    |
652 |             except Exception as e:
653 |                 return self._create_error_response(
    | ^
654 |                     IntegrateResult.DATA_BINDING_FAILED,
655 |                     IntegratePhase.DATA_BINDING,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:662:1: SyntaxError: unindent does not match any outer indentation level
    |
661 |             # Phase 6: Rendering Setup
662 |             self.progress_service.update_progress(session_id, IntegratePhase.RENDERING_SETUP, 62.5)
    | ^
663 |
664 |             rendering_setup = None
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:664:1: SyntaxError: Unexpected indentation
    |
662 |             self.progress_service.update_progress(session_id, IntegratePhase.RENDERING_SETUP, 62.5)
663 |
664 |             rendering_setup = None
    | ^
665 |             try:
666 |                 # Setup rendering context
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:774:72: SyntaxError: Expected an expression or a ')'
    |
772 |             if request.validate_performance:
773 |                 try:
774 |                     perf_session_id = f"viz_perf_{start_time.timestamp(,
    |                                                                        ^
775 |     )}"
776 |                     if self.performance_service.start_performance_monitoring(visualization_widget, perf_session_id):
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:776:101: E501 Line too long (116 > 100)
    |
774 |                     perf_session_id = f"viz_perf_{start_time.timestamp(,
775 |     )}"
776 |                     if self.performance_service.start_performance_monitoring(visualization_widget, perf_session_id):
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
777 |                         # Get initial performance report
778 | performance_report = (
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:776:117: SyntaxError: Expected an indented block after `if` statement
    |
774 |                     perf_session_id = f"viz_perf_{start_time.timestamp(,
775 |     )}"
776 |                     if self.performance_service.start_performance_monitoring(visualization_widget, perf_session_id):
    |                                                                                                                     ^
777 |                         # Get initial performance report
778 | performance_report = (
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:778:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
776 |                     if self.performance_service.start_performance_monitoring(visualization_widget, perf_session_id):
777 |                         # Get initial performance report
778 | performance_report = (
    | ^
779 |     self.performance_service.get_performance_report(perf_session_id))
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:782:1: SyntaxError: Unexpected indentation
    |
781 |                         # Validate performance requirements
782 |                         if performance_report:
    | ^
783 |                             requirements = {
784 |                                 "min_fps": 30.0,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:789:1: SyntaxError: Expected a statement
    |
787 |                             }
788 |
789 | perf_issues = (
    | ^
790 |     self.performance_service.validate_performance_requirements()
791 |                                 performance_report,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:791:33: SyntaxError: Expected ')', found name
    |
789 | perf_issues = (
790 |     self.performance_service.validate_performance_requirements()
791 |                                 performance_report,
    |                                 ^
792 |                                 requirements,
793 |                             )
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:793:29: SyntaxError: Expected a statement
    |
791 |                                 performance_report,
792 |                                 requirements,
793 |                             )
    |                             ^
794 |
795 |                             if perf_issues:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:793:30: SyntaxError: Expected a statement
    |
791 |                                 performance_report,
792 |                                 requirements,
793 |                             )
    |                              ^
794 |
795 |                             if perf_issues:
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:795:1: SyntaxError: Unexpected indentation
    |
793 |                             )
794 |
795 |                             if perf_issues:
    | ^
796 |                                 self.logger_service.log_warning(
797 |                                     "Performance validation issues detected",
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:802:17: SyntaxError: unindent does not match any outer indentation level
    |
800 |                                 configuration_warnings.extend(perf_issues)
801 |
802 |                 except Exception as e:
    |                 ^
803 |                     self.logger_service.log_warning(
804 |                         f"Performance monitoring setup failed: {e!s}",
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:802:34: SyntaxError: Expected a statement
    |
800 |                                 configuration_warnings.extend(perf_issues)
801 |
802 |                 except Exception as e:
    |                                  ^
803 |                     self.logger_service.log_warning(
804 |                         f"Performance monitoring setup failed: {e!s}",
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:802:39: SyntaxError: Expected an expression
    |
800 |                                 configuration_warnings.extend(perf_issues)
801 |
802 |                 except Exception as e:
    |                                       ^
803 |                     self.logger_service.log_warning(
804 |                         f"Performance monitoring setup failed: {e!s}",
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:803:1: SyntaxError: Unexpected indentation
    |
802 |                 except Exception as e:
803 |                     self.logger_service.log_warning(
    | ^
804 |                         f"Performance monitoring setup failed: {e!s}",
805 |                         {
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:810:1: SyntaxError: unindent does not match any outer indentation level
    |
809 |             # Create visualization state
810 |             visualization_state = VisualizationState(
    | ^
811 |                 component=visualization_component,
812 |                 data_binding=data_binding,
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:818:51: COM812 Trailing comma missing
    |
816 |                 is_running=data_binding.connection_active if data_binding else False,
817 |                 integration_time=start_time,
818 |                 last_update_time=datetime.utcnow()
    |                                                   ^ COM812
819 |             )
    |
    = help: Add trailing comma

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:821:1: SyntaxError: Unexpected indentation
    |
819 |             )
820 |
821 |             self.progress_service.update_progress(session_id, IntegratePhase.FINALIZATION, 100.0)
    | ^
822 |             self.progress_service.complete_progress_session(session_id)
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:846:101: E501 Line too long (103 > 100)
    |
844 |                     "integration_successful": integration_success,
845 |                     "rendering_setup_successful": rendering_setup.setup_successful,
846 |                     "data_streaming_active": data_binding.connection_active if data_binding else False,
    |                                                                                                     ^^^ E501
847 |                     "performance_monitoring": performance_report is not None,
848 |                 },
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:861:1: SyntaxError: unindent does not match any outer indentation level
    |
859 |             )
860 |
861 |         except Exception as e:
    | ^
862 |             self.logger_service.log_error(
863 |                 "Unexpected error during visualization integration",
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:861:9: SyntaxError: Expected a statement
    |
859 |             )
860 |
861 |         except Exception as e:
    |         ^
862 |             self.logger_service.log_error(
863 |                 "Unexpected error during visualization integration",
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:861:26: SyntaxError: Expected a statement
    |
859 |             )
860 |
861 |         except Exception as e:
    |                          ^
862 |             self.logger_service.log_error(
863 |                 "Unexpected error during visualization integration",
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:861:31: SyntaxError: Expected an expression
    |
859 |             )
860 |
861 |         except Exception as e:
    |                               ^
862 |             self.logger_service.log_error(
863 |                 "Unexpected error during visualization integration",
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:862:1: SyntaxError: Unexpected indentation
    |
861 |         except Exception as e:
862 |             self.logger_service.log_error(
    | ^
863 |                 "Unexpected error during visualization integration",
864 |                 {"error": str(e)},
    |

src_refactored\application\main_window\use_cases\integrate_visualization_use_case.py:875:1: SyntaxError: unindent does not match any outer indentation level
    |
873 |             )
874 |
875 |     def _create_error_response(
    | ^
876 |         self,
877 |         result: IntegrateResult,
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:335:13: SyntaxError: Expected ',', found name
    |
333 |             state_backup=None,
334 |             total_widgets=len(request.target_widgets)
335 |             processed_widgets=0,
    |             ^
336 |             errors=[],
337 |             warnings=[],
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:357:101: E501 Line too long (116 > 100)
    |
355 |             # Phase 1: Validation
356 |             state.current_phase = ManagePhase.VALIDATION
357 |             self._progress_tracking.update_progress(request.operation_id, 1, "Validating widgets and configuration")
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
358 |
359 |             validation_result = self._validate_request(request, state)
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:369:101: E501 Line too long (101 > 100)
    |
367 |             # Phase 2: State Backup
368 |             state.current_phase = ManagePhase.STATE_BACKUP
369 |             self._progress_tracking.update_progress(request.operation_id, 2, "Creating state backup")
    |                                                                                                     ^ E501
370 |
371 |             backup_result = self._create_state_backup(request, state)
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:379:101: E501 Line too long (106 > 100)
    |
377 |             # Phase 3: Effect Setup
378 |             state.current_phase = ManagePhase.EFFECT_SETUP
379 |             self._progress_tracking.update_progress(request.operation_id, 3, "Setting up opacity effects")
    |                                                                                                     ^^^^^^ E501
380 |
381 |             setup_result = self._setup_effects(request, state)
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:391:101: E501 Line too long (104 > 100)
    |
389 |             # Phase 4: Opacity Application
390 |             state.current_phase = ManagePhase.OPACITY_APPLICATION
391 |             self._progress_tracking.update_progress(request.operation_id, 4, "Applying opacity effects")
    |                                                                                                     ^^^^ E501
392 |
393 |             effects_applied = self._apply_opacity_effects(request, state)
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:397:101: E501 Line too long (101 > 100)
    |
395 |             # Phase 5: Animation Setup
396 |             state.current_phase = ManagePhase.ANIMATION_SETUP
397 |             self._progress_tracking.update_progress(request.operation_id, 5, "Setting up animations")
    |                                                                                                     ^ E501
398 |
399 |             if request.animation_config:
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:404:101: E501 Line too long (106 > 100)
    |
402 |             # Phase 6: State Monitoring
403 |             state.current_phase = ManagePhase.STATE_MONITORING
404 |             self._progress_tracking.update_progress(request.operation_id, 6, "Starting effect monitoring")
    |                                                                                                     ^^^^^^ E501
405 |
406 |             monitoring_result = self._start_monitoring(request, state)
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:412:101: E501 Line too long (106 > 100)
    |
410 |             # Phase 7: Finalization
411 |             state.current_phase = ManagePhase.FINALIZATION
412 |             self._progress_tracking.update_progress(request.operation_id, 7, "Finalizing opacity effects")
    |                                                                                                     ^^^^^^ E501
413 |
414 |             self._finalize_effects(request, state)
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:426:17: SyntaxError: Expected ',', found name
    |
424 |                 execution_time_ms=execution_time,
425 |                 effects_count=len(effects_applied)
426 |                 animations_count=len(animations_setup),
    |                 ^
427 |             )
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:452:51: SyntaxError: Expected an indented block after `except` clause
    |
450 |                     self._state_backup.restore_backup(state.state_backup)
451 |                     self._logger.log_info("State restored from backup after failure")
452 |                 except Exception as restore_error:
    |                                                   ^
453 | self._logger.log_error("Failed to restore state from backup", error = (
454 |     restore_error))
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:456:1: SyntaxError: Unexpected indentation
    |
454 |     restore_error))
455 |
456 |             return self._create_error_response(
    | ^
457 |                 request.operation_id, ManageResult.FAILED,
458 |                 str(e), state, effects_applied, animations_setup,
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:462:1: SyntaxError: unindent does not match any outer indentation level
    |
460 |             )
461 |
462 |     def _validate_request(self, request: ManageOpacityEffectsRequest, state: OpacityEffectsState,
    | ^
463 |     ) -> bool:
464 |         """Validate the opacity effects management request."""
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:468:101: E501 Line too long (101 > 100)
    |
466 |             # Validate opacity configuration
467 |             if not (0.0 <= request.opacity_config.opacity_value <= 1.0):
468 |                 state.errors.append(f"Invalid opacity value: {request.opacity_config.opacity_value}"\
    |                                                                                                     ^ E501
469 |     )
470 |                 return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:483:101: E501 Line too long (101 > 100)
    |
482 |                 if not self._widget_validation.validate_opacity_value(target.target_opacity):
483 |                     state.errors.append(f"Invalid target opacity for widget {target.widget_id}: {tar\
    |                                                                                                     ^ E501
484 |     get.target_opacity}")
485 |                     return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:484:5: SyntaxError: f-string: expecting '}'
    |
482 |                 if not self._widget_validation.validate_opacity_value(target.target_opacity):
483 |                     state.errors.append(f"Invalid target opacity for widget {target.widget_id}: {tar\
484 |     get.target_opacity}")
    |     ^
485 |                     return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:484:8: SyntaxError: Expected ',', found FStringMiddle
    |
482 |                 if not self._widget_validation.validate_opacity_value(target.target_opacity):
483 |                     state.errors.append(f"Invalid target opacity for widget {target.widget_id}: {tar\
484 |     get.target_opacity}")
    |        ^
485 |                     return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:484:23: SyntaxError: f-string: single '}' is not allowed
    |
482 |                 if not self._widget_validation.validate_opacity_value(target.target_opacity):
483 |                     state.errors.append(f"Invalid target opacity for widget {target.widget_id}: {tar\
484 |     get.target_opacity}")
    |                       ^
485 |                     return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:484:24: SyntaxError: Expected ',', found FStringEnd
    |
482 |                 if not self._widget_validation.validate_opacity_value(target.target_opacity):
483 |                     state.errors.append(f"Invalid target opacity for widget {target.widget_id}: {tar\
484 |     get.target_opacity}")
    |                        ^
485 |                     return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:490:101: E501 Line too long (101 > 100)
    |
488 |             if request.animation_config:
489 |                 if request.animation_config.duration_ms <= 0:
490 |                     state.errors.append(f"Invalid animation duration: {request.animation_config.dura\
    |                                                                                                     ^ E501
491 |     tion_ms}")
492 |                     return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:491:5: SyntaxError: f-string: expecting '}'
    |
489 |                 if request.animation_config.duration_ms <= 0:
490 |                     state.errors.append(f"Invalid animation duration: {request.animation_config.dura\
491 |     tion_ms}")
    |     ^
492 |                     return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:491:12: SyntaxError: f-string: single '}' is not allowed
    |
489 |                 if request.animation_config.duration_ms <= 0:
490 |                     state.errors.append(f"Invalid animation duration: {request.animation_config.dura\
491 |     tion_ms}")
    |            ^
492 |                     return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:491:13: SyntaxError: Expected ',', found FStringEnd
    |
489 |                 if request.animation_config.duration_ms <= 0:
490 |                     state.errors.append(f"Invalid animation duration: {request.animation_config.dura\
491 |     tion_ms}")
    |             ^
492 |                     return False
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:501:5: SyntaxError: unindent does not match any outer indentation level
    |
499 |             return False
500 |
501 |     def _create_state_backup(self, request: ManageOpacityEffectsRequest, state: OpacityEffectsState,
    |     ^
502 |     ) -> bool:
503 |         """Create backup of current widget states."""
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:516:5: SyntaxError: unindent does not match any outer indentation level
    |
514 |             return False
515 |
516 |     def _setup_effects(self, request: ManageOpacityEffectsRequest, state: OpacityEffectsState,
    |     ^
517 |     ) -> bool:
518 |         """Setup opacity effects for target widgets."""
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:523:101: E501 Line too long (101 > 100)
    |
521 |             for target in request.target_widgets:
522 |                 if not self._opacity_management.supports_opacity_effects(target.widget_id):
523 |                     state.warnings.append(f"Widget {target.widget_id} has limited opacity effect sup\
    |                                                                                                     ^ E501
524 |     port")
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:533:5: SyntaxError: unindent does not match any outer indentation level
    |
531 |             return False
532 |
533 |     def _apply_opacity_effects(self,
    |     ^
534 |     request: ManageOpacityEffectsRequest, state: OpacityEffectsState,
535 |     ) -> list[EffectApplication]:
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:549:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
548 |                 # Apply opacity effect
549 | effect_result = (
    | ^
550 |     self._opacity_management.apply_opacity(target.widget_id, target.target_opacity))
551 |                 effects_applied.append(effect_result)
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:551:1: SyntaxError: Unexpected indentation
    |
549 | effect_result = (
550 |     self._opacity_management.apply_opacity(target.widget_id, target.target_opacity))
551 |                 effects_applied.append(effect_result)
    | ^
552 |
553 |                 # Update state
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:562:13: SyntaxError: unindent does not match any outer indentation level
    |
560 |                     request.progress_callback(f"Applied opacity to {target.widget_id}", progress)
561 |
562 |             except Exception as e:
    |             ^
563 | self._logger.log_error(f"Failed to apply opacity to widget {target.widget_id}", error = (
564 |     e))
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:562:30: SyntaxError: Expected a statement
    |
560 |                     request.progress_callback(f"Applied opacity to {target.widget_id}", progress)
561 |
562 |             except Exception as e:
    |                              ^
563 | self._logger.log_error(f"Failed to apply opacity to widget {target.widget_id}", error = (
564 |     e))
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:562:35: SyntaxError: Expected an expression
    |
560 |                     request.progress_callback(f"Applied opacity to {target.widget_id}", progress)
561 |
562 |             except Exception as e:
    |                                   ^
563 | self._logger.log_error(f"Failed to apply opacity to widget {target.widget_id}", error = (
564 |     e))
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:567:1: SyntaxError: Unexpected indentation
    |
566 |                 # Create error effect application
567 |                 error_effect = EffectApplication(
    | ^
568 |                     widget_id=target.widget_id,
569 |                     effect_applied=False,
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:572:41: COM812 Trailing comma missing
    |
570 |                     previous_opacity=target.current_opacity,
571 |                     new_opacity=target.current_opacity,
572 |                     error_message=str(e)
    |                                         ^ COM812
573 |                 )
574 |                 effects_applied.append(error_effect)
    |
    = help: Add trailing comma

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:581:9: SyntaxError: unindent does not match any outer indentation level
    |
579 |                     request.error_callback(f"Opacity application failed for {target.widget_id}", e)
580 |
581 |         return effects_applied
    |         ^
582 |
583 |     def _setup_animations(self,
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:583:1: SyntaxError: Unexpected indentation
    |
581 |         return effects_applied
582 |
583 |     def _setup_animations(self,
    | ^
584 |     request: ManageOpacityEffectsRequest, state: OpacityEffectsState,
585 |     ) -> list[AnimationSetup]:
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:595:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
594 |                 # Create animation
595 | animation_result = (
    | ^
596 |     self._animation.create_opacity_animation(request.animation_config, target_ids))
597 |                 animations_setup.append(animation_result)
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:597:1: SyntaxError: Unexpected indentation
    |
595 | animation_result = (
596 |     self._animation.create_opacity_animation(request.animation_config, target_ids))
597 |                 animations_setup.append(animation_result)
    | ^
598 |
599 |                 # Start animation if created successfully
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:600:89: SyntaxError: Expected an indented block after `if` statement
    |
599 |                 # Start animation if created successfully
600 |                 if animation_result.animation_created and animation_result.animation_id:
    |                                                                                         ^
601 | animation_started = (
602 |     self._animation.start_animation(animation_result.animation_id))
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:603:1: SyntaxError: Unexpected indentation
    |
601 | animation_started = (
602 |     self._animation.start_animation(animation_result.animation_id))
603 |                     if animation_started:
    | ^
604 |                         state.active_animations[animation_result.animation_id] = animation_result
605 |                         self._logger.log_info(f"Animation started: {animation_result.animation_id}")
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:607:101: E501 Line too long (108 > 100)
    |
605 |                         self._logger.log_info(f"Animation started: {animation_result.animation_id}")
606 |                     else:
607 |                         state.warnings.append(f"Failed to start animation: {animation_result.animation_id}",
    |                                                                                                     ^^^^^^^^ E501
608 |     )
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:610:9: SyntaxError: unindent does not match any outer indentation level
    |
608 |     )
609 |
610 |         except Exception as e:
    |         ^
611 |             self._logger.log_error("Animation setup failed", error=e)
612 |             state.errors.append(f"Animation setup error: {e!s}")
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:610:26: SyntaxError: Expected a statement
    |
608 |     )
609 |
610 |         except Exception as e:
    |                          ^
611 |             self._logger.log_error("Animation setup failed", error=e)
612 |             state.errors.append(f"Animation setup error: {e!s}")
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:610:31: SyntaxError: Expected an expression
    |
608 |     )
609 |
610 |         except Exception as e:
    |                               ^
611 |             self._logger.log_error("Animation setup failed", error=e)
612 |             state.errors.append(f"Animation setup error: {e!s}")
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:611:1: SyntaxError: Unexpected indentation
    |
610 |         except Exception as e:
611 |             self._logger.log_error("Animation setup failed", error=e)
    | ^
612 |             state.errors.append(f"Animation setup error: {e!s}")
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:614:1: SyntaxError: unindent does not match any outer indentation level
    |
612 |             state.errors.append(f"Animation setup error: {e!s}")
613 |
614 |         return animations_setup
    | ^
615 |
616 |     def _start_monitoring(self, request: ManageOpacityEffectsRequest, state: OpacityEffectsState,
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:616:1: SyntaxError: Unexpected indentation
    |
614 |         return animations_setup
615 |
616 |     def _start_monitoring(self, request: ManageOpacityEffectsRequest, state: OpacityEffectsState,
    | ^
617 |     ) -> bool:
618 |         """Start monitoring opacity effects."""
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:639:17: SyntaxError: Expected ',', found name
    |
637 |                 processed_widgets=state.processed_widgets,
638 |                 active_effects=len(state.active_effects)
639 |                 active_animations=len(state.active_animations)
    |                 ^
640 |                 errors=len(state.errors)
641 |                 warnings=len(state.warnings)
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:640:17: SyntaxError: Expected ',', found name
    |
638 |                 active_effects=len(state.active_effects)
639 |                 active_animations=len(state.active_animations)
640 |                 errors=len(state.errors)
    |                 ^
641 |                 warnings=len(state.warnings)
642 |             )
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:641:17: SyntaxError: Expected ',', found name
    |
639 |                 active_animations=len(state.active_animations)
640 |                 errors=len(state.errors)
641 |                 warnings=len(state.warnings)
    |                 ^
642 |             )
    |

src_refactored\application\main_window\use_cases\manage_opacity_effects_use_case.py:641:45: COM812 Trailing comma missing
    |
639 |                 active_animations=len(state.active_animations)
640 |                 errors=len(state.errors)
641 |                 warnings=len(state.warnings)
    |                                             ^ COM812
642 |             )
    |
    = help: Add trailing comma

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:135:62: SyntaxError: Expected an expression or a ')'
    |
133 |             self.context_data = {}
134 |         if self.validation_config is None:
135 |             self.validation_config = ValidationConfiguration(,
    |                                                              ^
136 |     )
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:313:11: SyntaxError: Expected ')', found '->'
    |
311 |     def calculate_optimal_geometry(self,
312 | window: Any, mode: GeometryMode, reference_geometry: WindowGeometry | None = (
313 |     None) -> WindowGeometry:)
    |           ^
314 |         """Calculate optimal geometry based on mode."""
315 |         ...
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:313:29: SyntaxError: Expected a simple statement
    |
311 |     def calculate_optimal_geometry(self,
312 | window: Any, mode: GeometryMode, reference_geometry: WindowGeometry | None = (
313 |     None) -> WindowGeometry:)
    |                             ^
314 |         """Calculate optimal geometry based on mode."""
315 |         ...
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:313:30: SyntaxError: Expected a statement
    |
311 |     def calculate_optimal_geometry(self,
312 | window: Any, mode: GeometryMode, reference_geometry: WindowGeometry | None = (
313 |     None) -> WindowGeometry:)
    |                              ^
314 |         """Calculate optimal geometry based on mode."""
315 |         ...
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:314:1: SyntaxError: Unexpected indentation
    |
312 | window: Any, mode: GeometryMode, reference_geometry: WindowGeometry | None = (
313 |     None) -> WindowGeometry:)
314 |         """Calculate optimal geometry based on mode."""
    | ^
315 |         ...
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:327:1: SyntaxError: Expected a statement
    |
327 | class StatePersistenceServiceProtocol(Protocol,
    | ^
328 |     ):
329 |     """Protocol for state persistence operations."""
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:513:101: E501 Line too long (105 > 100)
    |
511 |                         ManagePhase.STATE_TRANSITION,
512 |                         42.9,
513 |                         f"State transition failed: {transition_result.error_message or 'Unknown error'}",
    |                                                                                                     ^^^^^ E501
514 |                         start_time,
515 |                     )
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:545:63: SyntaxError: Expected ':', found newline
    |
543 |                 # Handle geometry mode
544 |                 if request.transition_config.geometry_mode != GeometryMode.PRESERVE:
545 |                     if request.transition_config.geometry_mode
    |                                                               ^
546 |                      ==  GeometryMode.CUSTOM_POSITION and request.transition_config.custom_geometry:
547 |                         # Use custom geometry
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:546:22: SyntaxError: Expected a statement
    |
544 |                 if request.transition_config.geometry_mode != GeometryMode.PRESERVE:
545 |                     if request.transition_config.geometry_mode
546 |                      ==  GeometryMode.CUSTOM_POSITION and request.transition_config.custom_geometry:
    |                      ^
547 |                         # Use custom geometry
548 |                         final_geometry = request.transition_config.custom_geometry
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:546:26: SyntaxError: Invalid annotated assignment target
    |
544 |                 if request.transition_config.geometry_mode != GeometryMode.PRESERVE:
545 |                     if request.transition_config.geometry_mode
546 |                      ==  GeometryMode.CUSTOM_POSITION and request.transition_config.custom_geometry:
    |                          ^
547 |                         # Use custom geometry
548 |                         final_geometry = request.transition_config.custom_geometry
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:546:101: SyntaxError: Expected an expression
    |
544 |                 if request.transition_config.geometry_mode != GeometryMode.PRESERVE:
545 |                     if request.transition_config.geometry_mode
546 |                      ==  GeometryMode.CUSTOM_POSITION and request.transition_config.custom_geometry:
    |                                                                                                     ^
547 |                         # Use custom geometry
548 |                         final_geometry = request.transition_config.custom_geometry
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:548:1: SyntaxError: Unexpected indentation
    |
546 |                      ==  GeometryMode.CUSTOM_POSITION and request.transition_config.custom_geometry:
547 |                         # Use custom geometry
548 |                         final_geometry = request.transition_config.custom_geometry
    | ^
549 |                     else:
550 |                         # Calculate optimal geometry
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:570:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
568 |                         if not geometry_success:
569 |                             geometry_warnings.append("Failed to apply calculated geometry")
570 | final_geometry = (
    | ^
571 |     transition_result.new_geometry  # Fallback to transition geometry)
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:574:70: SyntaxError: Expected 'else', found ':'
    |
573 |                 # Validate final geometry
574 |                 if request.validation_config.validate_geometry_bounds:
    |                                                                      ^
575 |                     final_geometry_errors = self.validation_service.validate_geometry_bounds(
576 |                         final_geometry,
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:579:45: SyntaxError: Expected 'else', found ':'
    |
577 |                         request.validation_config,
578 |                     )
579 |                     if final_geometry_errors:
    |                                             ^
580 |                         geometry_warnings.extend(final_geometry_errors)
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:582:13: SyntaxError: Expected a statement
    |
580 |                         geometry_warnings.extend(final_geometry_errors)
581 |
582 |             except Exception as e:
    |             ^
583 |                 geometry_warnings.append(f"Geometry adjustment error: {e!s}")
584 |                 self.logger_service.log_warning(
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:582:30: SyntaxError: Expected a statement
    |
580 |                         geometry_warnings.extend(final_geometry_errors)
581 |
582 |             except Exception as e:
    |                              ^
583 |                 geometry_warnings.append(f"Geometry adjustment error: {e!s}")
584 |                 self.logger_service.log_warning(
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:584:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
582 |             except Exception as e:
583 |                 geometry_warnings.append(f"Geometry adjustment error: {e!s}")
584 |                 self.logger_service.log_warning(
    |                 ^
585 |                     f"Geometry adjustment failed: {e!s}",
586 |                     {"transition_type": request.transition_config.transition_type.value},
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:590:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
589 |             # Phase 6: Persistence
590 |             self.progress_service.update_progress(session_id, ManagePhase.PERSISTENCE, 71.4)
    |             ^
591 |
592 |             persistence_result = None
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:592:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
590 |             self.progress_service.update_progress(session_id, ManagePhase.PERSISTENCE, 71.4)
591 |
592 |             persistence_result = None
    |             ^
593 | if request.persistence_config and request.persistence_config.persistence_mode ! = (
594 |     PersistenceMode.NONE:)
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:593:79: SyntaxError: Expected 'else', found '!'
    |
592 |             persistence_result = None
593 | if request.persistence_config and request.persistence_config.persistence_mode ! = (
    |                                                                               ^
594 |     PersistenceMode.NONE:)
595 |                 try:
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:593:81: SyntaxError: Expected a statement
    |
592 |             persistence_result = None
593 | if request.persistence_config and request.persistence_config.persistence_mode ! = (
    |                                                                                 ^
594 |     PersistenceMode.NONE:)
595 |                 try:
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:594:25: SyntaxError: Expected ')', found ':'
    |
592 |             persistence_result = None
593 | if request.persistence_config and request.persistence_config.persistence_mode ! = (
594 |     PersistenceMode.NONE:)
    |                         ^
595 |                 try:
596 |                     # Create updated snapshot for persistence
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:594:26: SyntaxError: Expected an expression
    |
592 |             persistence_result = None
593 | if request.persistence_config and request.persistence_config.persistence_mode ! = (
594 |     PersistenceMode.NONE:)
    |                          ^
595 |                 try:
596 |                     # Create updated snapshot for persistence
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:600:21: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
599 |                     # Save state to persistent storage
600 |                     persistence_result = self.persistence_service.save_window_state(
    |                     ^
601 |                         updated_snapshot,
602 |                         request.persistence_config,
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:605:67: SyntaxError: Expected 'else', found ':'
    |
603 |                     )
604 |
605 |                     if not persistence_result.operation_successful:
    |                                                                   ^
606 |                         self.logger_service.log_warning(
607 |                             "Failed to persist window state",
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:606:25: SyntaxError: Invalid annotated assignment target
    |
605 |                     if not persistence_result.operation_successful:
606 |                         self.logger_service.log_warning(
    |                         ^
607 |                             "Failed to persist window state",
608 |                             {
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:615:96: SyntaxError: Expected 'else', found ':'
    |
614 |                     # Setup auto-save if configured
615 |                     if request.persistence_config.persistence_mode == PersistenceMode.AUTO_SAVE:
    |                                                                                                ^
616 |                         auto_save_success = self.persistence_service.setup_auto_save(
617 |                             request.window,
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:621:49: SyntaxError: Expected 'else', found ':'
    |
619 |                         )
620 |
621 |                         if not auto_save_success:
    |                                                 ^
622 |                             self.logger_service.log_warning(
623 |                                 "Failed to setup auto-save for window state",
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:627:17: SyntaxError: Expected a statement
    |
625 |                             )
626 |
627 |                 except Exception as e:
    |                 ^
628 |                     self.logger_service.log_error(
629 |                         f"Persistence operation failed: {e!s}",
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:627:34: SyntaxError: Expected a statement
    |
625 |                             )
626 |
627 |                 except Exception as e:
    |                                  ^
628 |                     self.logger_service.log_error(
629 |                         f"Persistence operation failed: {e!s}",
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:631:101: E501 Line too long (104 > 100)
    |
629 |                         f"Persistence operation failed: {e!s}",
630 |                         {
631 |     "storage_key": request.persistence_config.storage_key if request.persistence_config else "unknown"},
    |                                                                                                     ^^^^ E501
632 |                     )
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:634:21: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
632 |                     )
633 |
634 |                     persistence_result = PersistenceResult(
    |                     ^
635 |                         persistence_mode=request.persistence_config.persistence_mode,
636 |                         operation_type="save",
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:645:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
644 |             # Phase 7: Finalization
645 |             self.progress_service.update_progress(session_id, ManagePhase.FINALIZATION, 85.7)
    |             ^
646 |
647 |             # Create final state snapshot
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:648:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
647 |             # Create final state snapshot
648 |             final_snapshot = self.backup_service.create_state_snapshot(request.window)
    |             ^
649 |
650 |             # Update transition result with final geometry
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:651:33: SyntaxError: Expected 'else', found ':'
    |
650 |             # Update transition result with final geometry
651 |             if transition_result:
    |                                 ^
652 |                 transition_result.new_geometry = final_geometry
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:655:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
654 |             # Create management state
655 |             management_state = WindowStateManagementState(
    |             ^
656 |                 current_snapshot=final_snapshot,
657 |                 previous_snapshot=current_snapshot,
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:663:17: SyntaxError: Expected ',', found name
    |
661 |                 management_active=True,
662 |                 last_update_time=datetime.utcnow()
663 |                 session_start_time=start_time,
    |                 ^
664 |             )
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:667:30: SyntaxError: Expected 'else', found ':'
    |
666 |             # Clean up backup
667 |             if backup_success:
    |                              ^
668 |                 self.backup_service.clear_state_backup(backup_key)
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:670:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
668 |                 self.backup_service.clear_state_backup(backup_key)
669 |
670 |             self.progress_service.update_progress(session_id, ManagePhase.FINALIZATION, 100.0)
    |             ^
671 |             self.progress_service.complete_progress_session(session_id)
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:671:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
670 |             self.progress_service.update_progress(session_id, ManagePhase.FINALIZATION, 100.0)
671 |             self.progress_service.complete_progress_session(session_id)
    |             ^
672 |
673 |             execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:673:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
671 |             self.progress_service.complete_progress_session(session_id)
672 |
673 |             execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
    |             ^
674 |
675 |             # Determine final result
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:676:84: SyntaxError: Expected 'else', found ':'
    |
675 |             # Determine final result
676 |             if not transition_result or not transition_result.transition_successful:
    |                                                                                    ^
677 |                 result = ManageResult.STATE_CHANGE_FAILED
678 |             elif persistence_result and not persistence_result.operation_successful:
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:678:13: SyntaxError: Expected a statement
    |
676 |             if not transition_result or not transition_result.transition_successful:
677 |                 result = ManageResult.STATE_CHANGE_FAILED
678 |             elif persistence_result and not persistence_result.operation_successful:
    |             ^
679 |                 result = ManageResult.PERSISTENCE_FAILED
680 |             elif geometry_warnings or validation_errors:
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:678:18: SyntaxError: Invalid annotated assignment target
    |
676 |             if not transition_result or not transition_result.transition_successful:
677 |                 result = ManageResult.STATE_CHANGE_FAILED
678 |             elif persistence_result and not persistence_result.operation_successful:
    |                  ^
679 |                 result = ManageResult.PERSISTENCE_FAILED
680 |             elif geometry_warnings or validation_errors:
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:680:13: SyntaxError: Expected a statement
    |
678 |             elif persistence_result and not persistence_result.operation_successful:
679 |                 result = ManageResult.PERSISTENCE_FAILED
680 |             elif geometry_warnings or validation_errors:
    |             ^
681 |                 result = ManageResult.SUCCESS  # Success with warnings
682 |             else:
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:680:18: SyntaxError: Invalid annotated assignment target
    |
678 |             elif persistence_result and not persistence_result.operation_successful:
679 |                 result = ManageResult.PERSISTENCE_FAILED
680 |             elif geometry_warnings or validation_errors:
    |                  ^
681 |                 result = ManageResult.SUCCESS  # Success with warnings
682 |             else:
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:682:13: SyntaxError: Expected a statement
    |
680 |             elif geometry_warnings or validation_errors:
681 |                 result = ManageResult.SUCCESS  # Success with warnings
682 |             else:
    |             ^
683 |                 result = ManageResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:682:17: SyntaxError: Expected a statement
    |
680 |             elif geometry_warnings or validation_errors:
681 |                 result = ManageResult.SUCCESS  # Success with warnings
682 |             else:
    |                 ^
683 |                 result = ManageResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:685:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
683 |                 result = ManageResult.SUCCESS
684 |
685 |             all_warnings = geometry_warnings + validation_errors
    |             ^
686 |
687 |             self.logger_service.log_info(
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:687:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
685 |             all_warnings = geometry_warnings + validation_errors
686 |
687 |             self.logger_service.log_info(
    |             ^
688 |                 "Window state management completed",
689 |                 {
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:694:101: E501 Line too long (117 > 100)
    |
692 |                     "result": result.value,
693 |                     "execution_time_ms": execution_time,
694 |                     "transition_successful": transition_result.transition_successful if transition_result else False,
    |                                                                                                     ^^^^^^^^^^^^^^^^^ E501
695 |                     "persistence_successful": persistence_result.operation_successful if persistence_result else None,
696 |                     "warnings_count": len(all_warnings),
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:695:101: E501 Line too long (118 > 100)
    |
693 |                     "execution_time_ms": execution_time,
694 |                     "transition_successful": transition_result.transition_successful if transition_result else False,
695 |                     "persistence_successful": persistence_result.operation_successful if persistence_result else None,
    |                                                                                                     ^^^^^^^^^^^^^^^^^^ E501
696 |                     "warnings_count": len(all_warnings),
697 |                 },
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:700:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
698 |             )
699 |
700 |             return ManageWindowStateResponse(
    |             ^
701 |                 result=result,
702 |                 management_state=management_state,
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:711:9: SyntaxError: Expected a statement
    |
709 |             )
710 |
711 |         except Exception as e:
    |         ^
712 |             self.logger_service.log_error(
713 |                 "Unexpected error during window state management",
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:711:26: SyntaxError: Expected a statement
    |
709 |             )
710 |
711 |         except Exception as e:
    |                          ^
712 |             self.logger_service.log_error(
713 |                 "Unexpected error during window state management",
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:717:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
715 |             )
716 |
717 |             return self._create_error_response(
    |             ^
718 |                 ManageResult.INTERNAL_ERROR,
719 |                 ManagePhase.INITIALIZATION,
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:725:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
723 |             )
724 |
725 |     def _create_error_response(
    |     ^
726 |         self,
727 |         result: ManageResult,
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:734:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
732 |     ) -> ManageWindowStateResponse:
733 |         """Create an error response with timing information."""
734 |         execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
    |         ^
735 |
736 |         return ManageWindowStateResponse(
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:736:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
734 |         execution_time = (datetime.utcnow() - start_time).total_seconds() * 1000
735 |
736 |         return ManageWindowStateResponse(
    |         ^
737 |             result=result,
738 |             management_state=None,
    |

src_refactored\application\main_window\use_cases\manage_window_state_use_case.py:743:10: SyntaxError: unexpected EOF while parsing
    |
741 |             error_message=error_message,
742 |             execution_time_ms=execution_time,
743 |         )
    |          ^
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:118:57: SyntaxError: Expected an expression or a ')'
    |
116 |             self.context_data = {}
117 |         if self.global_constraints is None:
118 |             self.global_constraints = LayoutConstraints(,
    |                                                         ^
119 |     )
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:232:101: E501 Line too long (103 > 100)
    |
230 |         ...
231 |
232 |     def update_component_constraints(self, layout: Any, component: Any, constraints: LayoutConstraints,
    |                                                                                                     ^^^ E501
233 |     ) -> bool:
234 |         """Update component constraints in layout."""
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:354:21: SyntaxError: Expected ',', found string
    |
352 |                     "layout_type": request.layout_type.value,
353 |                     "component_count": len(request.component_infos)
354 |                     "responsive_enabled": request.responsive_config is not None,
    |                     ^
355 |                     "parent_widget": str(request.parent_widget),
356 |                 },
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:396:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
395 |             # Validate layout hierarchy
396 | hierarchy_errors = (
    | ^
397 |     self.validation_service.validate_layout_hierarchy(request.component_infos))
398 |             if hierarchy_errors:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:398:1: SyntaxError: Unexpected indentation
    |
396 | hierarchy_errors = (
397 |     self.validation_service.validate_layout_hierarchy(request.component_infos))
398 |             if hierarchy_errors:
    | ^
399 |                 self.logger_service.log_warning(
400 |                     "Layout hierarchy validation issues",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:448:101: E501 Line too long (113 > 100)
    |
446 |                 if hasattr(request.parent_widget, "setLayout"):
447 |                     request.parent_widget.setLayout(main_layout)
448 |                 elif hasattr(request.parent_widget, "setCentralWidget") and hasattr(main_layout, "parentWidget"):
    |                                                                                                     ^^^^^^^^^^^^^ E501
449 |                     # For QMainWindow, create a central widget with the layout
450 |                     central_widget = main_layout.parentWidget()
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:464:101: E501 Line too long (101 > 100)
    |
463 |             # Phase 4: Component Arrangement
464 |             self.progress_service.update_progress(session_id, SetupPhase.COMPONENT_ARRANGEMENT, 42.9)
    |                                                                                                     ^ E501
465 |
466 |             arrangement_results = []
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:476:53: SyntaxError: Expected an expression or a ')'
    |
475 |             for component_info in sorted_components:
476 |                 arrangement_start = datetime.utcnow(,
    |                                                     ^
477 |     )
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:488:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
486 |                     )
487 |
488 | arrangement_time = (
    | ^
489 |     (datetime.utcnow() - arrangement_start).total_seconds() * 1000)
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:491:1: SyntaxError: Unexpected indentation
    |
489 |     (datetime.utcnow() - arrangement_start).total_seconds() * 1000)
490 |
491 |                     if success:
    | ^
492 |                         # Update component constraints if needed
493 |                         constraints_applied = self.arrangement_service.update_component_constraints(
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:527:17: SyntaxError: unindent does not match any outer indentation level
    |
525 |                         ))
526 |
527 |                 except Exception as e:
    |                 ^
528 | error_msg = (
529 |     f"Component arrangement failed for {component_info.role.value}: {e!s}")
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:527:34: SyntaxError: Expected a statement
    |
525 |                         ))
526 |
527 |                 except Exception as e:
    |                                  ^
528 | error_msg = (
529 |     f"Component arrangement failed for {component_info.role.value}: {e!s}")
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:527:39: SyntaxError: Expected an expression
    |
525 |                         ))
526 |
527 |                 except Exception as e:
    |                                       ^
528 | error_msg = (
529 |     f"Component arrangement failed for {component_info.role.value}: {e!s}")
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:530:1: SyntaxError: Unexpected indentation
    |
528 | error_msg = (
529 |     f"Component arrangement failed for {component_info.role.value}: {e!s}")
530 |                     arrangement_failures.append(error_msg)
    | ^
531 |
532 |                     arrangement_time = (datetime.utcnow() - arrangement_start).total_seconds(,
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:532:94: SyntaxError: Expected an expression or a ')'
    |
530 |                     arrangement_failures.append(error_msg)
531 |
532 |                     arrangement_time = (datetime.utcnow() - arrangement_start).total_seconds(,
    |                                                                                              ^
533 |     ) * 1000
534 |                     arrangement_results.append(LayoutArrangementResult(
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:543:1: SyntaxError: unindent does not match any outer indentation level
    |
542 |             # Check if critical arrangements failed
543 |             if arrangement_failures:
    | ^
544 |                 self.logger_service.log_warning(
545 |                     "Some component arrangements failed",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:550:1: SyntaxError: unindent does not match any outer indentation level
    |
549 |             # Phase 5: Constraint Application
550 |             self.progress_service.update_progress(session_id, SetupPhase.CONSTRAINT_APPLICATION, 57.2)
    | ^
551 |
552 |             # Apply additional constraints and optimizations
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:550:101: E501 Line too long (102 > 100)
    |
549 |             # Phase 5: Constraint Application
550 |             self.progress_service.update_progress(session_id, SetupPhase.CONSTRAINT_APPLICATION, 57.2)
    |                                                                                                     ^^ E501
551 |
552 |             # Apply additional constraints and optimizations
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:553:1: SyntaxError: Unexpected indentation
    |
552 |             # Apply additional constraints and optimizations
553 |             try:
    | ^
554 |                 # Calculate optimal sizes
555 |                 components = [info.component for info in request.component_infos if info.component]
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:556:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
554 |                 # Calculate optimal sizes
555 |                 components = [info.component for info in request.component_infos if info.component]
556 | optimal_sizes = (
    | ^
557 |     self.optimization_service.calculate_optimal_sizes(main_layout, components))
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:560:1: SyntaxError: Unexpected indentation
    |
559 |                 # Apply optimal sizes
560 |                 for component, (width, height) in optimal_sizes.items():
    | ^
561 |                     if hasattr(component, "resize"):
562 |                         component.resize(width, height)
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:565:1: SyntaxError: Expected a statement
    |
564 |                 # Optimize layout performance
565 | optimization_results = (
    | ^
566 |     self.optimization_service.optimize_layout_performance(main_layout))
567 |                 if optimization_results:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:567:1: SyntaxError: Unexpected indentation
    |
565 | optimization_results = (
566 |     self.optimization_service.optimize_layout_performance(main_layout))
567 |                 if optimization_results:
    | ^
568 |                     self.logger_service.log_info(
569 |                         "Layout optimization applied",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:574:1: SyntaxError: Expected a statement
    |
573 |                 # Validate layout efficiency
574 | efficiency_warnings = (
    | ^
575 |     self.optimization_service.validate_layout_efficiency(main_layout))
576 |                 if efficiency_warnings:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:576:1: SyntaxError: Unexpected indentation
    |
574 | efficiency_warnings = (
575 |     self.optimization_service.validate_layout_efficiency(main_layout))
576 |                 if efficiency_warnings:
    | ^
577 |                     self.logger_service.log_warning(
578 |                         "Layout efficiency warnings",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:582:13: SyntaxError: unindent does not match any outer indentation level
    |
580 |                     )
581 |
582 |             except Exception as e:
    |             ^
583 |                 self.logger_service.log_warning(
584 |                     f"Constraint application issues: {e!s}",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:582:30: SyntaxError: Expected a statement
    |
580 |                     )
581 |
582 |             except Exception as e:
    |                              ^
583 |                 self.logger_service.log_warning(
584 |                     f"Constraint application issues: {e!s}",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:582:35: SyntaxError: Expected an expression
    |
580 |                     )
581 |
582 |             except Exception as e:
    |                                   ^
583 |                 self.logger_service.log_warning(
584 |                     f"Constraint application issues: {e!s}",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:583:1: SyntaxError: Unexpected indentation
    |
582 |             except Exception as e:
583 |                 self.logger_service.log_warning(
    | ^
584 |                     f"Constraint application issues: {e!s}",
585 |                     {"layout_type": request.layout_type.value},
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:589:1: SyntaxError: unindent does not match any outer indentation level
    |
588 |             # Phase 6: Responsive Configuration
589 |             self.progress_service.update_progress(session_id, SetupPhase.RESPONSIVE_CONFIGURATION, 71.5)
    | ^
590 |
591 |             current_breakpoint = None
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:589:101: E501 Line too long (104 > 100)
    |
588 |             # Phase 6: Responsive Configuration
589 |             self.progress_service.update_progress(session_id, SetupPhase.RESPONSIVE_CONFIGURATION, 71.5)
    |                                                                                                     ^^^^ E501
590 |
591 |             current_breakpoint = None
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:591:1: SyntaxError: Unexpected indentation
    |
589 |             self.progress_service.update_progress(session_id, SetupPhase.RESPONSIVE_CONFIGURATION, 71.5)
590 |
591 |             current_breakpoint = None
    | ^
592 |             responsive_setup_success = True
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:681:51: COM812 Trailing comma missing
    |
679 |                 layout_valid=layout_valid,
680 |                 setup_time=start_time,
681 |                 last_update_time=datetime.utcnow()
    |                                                   ^ COM812
682 |             )
    |
    = help: Add trailing comma

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:690:40: SyntaxError: Expected an expression
    |
689 |             # Determine result
690 |             if arrangement_failures and
    |                                        ^
691 |     not any(result.arrangement_successful for result in arrangement_results):
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:691:1: SyntaxError: unindent does not match any outer indentation level
    |
689 |             # Determine result
690 |             if arrangement_failures and
691 |     not any(result.arrangement_successful for result in arrangement_results):
    | ^
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
693 |             elif not responsive_setup_success and request.responsive_config:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:691:5: SyntaxError: Invalid annotated assignment target
    |
689 |             # Determine result
690 |             if arrangement_failures and
691 |     not any(result.arrangement_successful for result in arrangement_results):
    |     ^
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
693 |             elif not responsive_setup_success and request.responsive_config:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:691:78: SyntaxError: Expected an expression
    |
689 |             # Determine result
690 |             if arrangement_failures and
691 |     not any(result.arrangement_successful for result in arrangement_results):
    |                                                                              ^
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
693 |             elif not responsive_setup_success and request.responsive_config:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:692:1: SyntaxError: Unexpected indentation
    |
690 |             if arrangement_failures and
691 |     not any(result.arrangement_successful for result in arrangement_results):
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
    | ^
693 |             elif not responsive_setup_success and request.responsive_config:
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:693:1: SyntaxError: unindent does not match any outer indentation level
    |
691 |     not any(result.arrangement_successful for result in arrangement_results):
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
693 |             elif not responsive_setup_success and request.responsive_config:
    | ^
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
695 |             elif not layout_valid:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:693:13: SyntaxError: Expected a statement
    |
691 |     not any(result.arrangement_successful for result in arrangement_results):
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
693 |             elif not responsive_setup_success and request.responsive_config:
    |             ^
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
695 |             elif not layout_valid:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:693:18: SyntaxError: Invalid annotated assignment target
    |
691 |     not any(result.arrangement_successful for result in arrangement_results):
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
693 |             elif not responsive_setup_success and request.responsive_config:
    |                  ^
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
695 |             elif not layout_valid:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:693:77: SyntaxError: Expected an expression
    |
691 |     not any(result.arrangement_successful for result in arrangement_results):
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
693 |             elif not responsive_setup_success and request.responsive_config:
    |                                                                             ^
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
695 |             elif not layout_valid:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:694:1: SyntaxError: Unexpected indentation
    |
692 |                 result = SetupResult.COMPONENT_ARRANGEMENT_FAILED
693 |             elif not responsive_setup_success and request.responsive_config:
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
    | ^
695 |             elif not layout_valid:
696 |                 result = SetupResult.VALIDATION_ERROR
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:695:1: SyntaxError: unindent does not match any outer indentation level
    |
693 |             elif not responsive_setup_success and request.responsive_config:
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
695 |             elif not layout_valid:
    | ^
696 |                 result = SetupResult.VALIDATION_ERROR
697 |             else:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:695:13: SyntaxError: Expected a statement
    |
693 |             elif not responsive_setup_success and request.responsive_config:
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
695 |             elif not layout_valid:
    |             ^
696 |                 result = SetupResult.VALIDATION_ERROR
697 |             else:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:695:18: SyntaxError: Invalid annotated assignment target
    |
693 |             elif not responsive_setup_success and request.responsive_config:
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
695 |             elif not layout_valid:
    |                  ^
696 |                 result = SetupResult.VALIDATION_ERROR
697 |             else:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:695:35: SyntaxError: Expected an expression
    |
693 |             elif not responsive_setup_success and request.responsive_config:
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
695 |             elif not layout_valid:
    |                                   ^
696 |                 result = SetupResult.VALIDATION_ERROR
697 |             else:
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:696:1: SyntaxError: Unexpected indentation
    |
694 |                 result = SetupResult.RESPONSIVE_SETUP_FAILED
695 |             elif not layout_valid:
696 |                 result = SetupResult.VALIDATION_ERROR
    | ^
697 |             else:
698 |                 result = SetupResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:697:1: SyntaxError: unindent does not match any outer indentation level
    |
695 |             elif not layout_valid:
696 |                 result = SetupResult.VALIDATION_ERROR
697 |             else:
    | ^
698 |                 result = SetupResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:697:13: SyntaxError: Expected a statement
    |
695 |             elif not layout_valid:
696 |                 result = SetupResult.VALIDATION_ERROR
697 |             else:
    |             ^
698 |                 result = SetupResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:697:17: SyntaxError: Expected a statement
    |
695 |             elif not layout_valid:
696 |                 result = SetupResult.VALIDATION_ERROR
697 |             else:
    |                 ^
698 |                 result = SetupResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:697:18: SyntaxError: Expected a statement
    |
695 |             elif not layout_valid:
696 |                 result = SetupResult.VALIDATION_ERROR
697 |             else:
    |                  ^
698 |                 result = SetupResult.SUCCESS
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:698:1: SyntaxError: Unexpected indentation
    |
696 |                 result = SetupResult.VALIDATION_ERROR
697 |             else:
698 |                 result = SetupResult.SUCCESS
    | ^
699 |
700 |             # Collect warnings
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:701:1: SyntaxError: unindent does not match any outer indentation level
    |
700 |             # Collect warnings
701 |             warnings = []
    | ^
702 |             warnings.extend(hierarchy_errors)
703 |             warnings.extend(responsive_errors)
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:702:1: SyntaxError: Unexpected indentation
    |
700 |             # Collect warnings
701 |             warnings = []
702 |             warnings.extend(hierarchy_errors)
    | ^
703 |             warnings.extend(responsive_errors)
704 |             warnings.extend(arrangement_failures)
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:719:21: SyntaxError: Expected ',', found string
    |
717 |                     "components_arranged": len([r for r in
718 |     arrangement_results if r.arrangement_successful])
719 |                     "total_components": len(request.component_infos)
    |                     ^
720 |                     "responsive_enabled": request.responsive_config is not None,
721 |                     "current_breakpoint": current_breakpoint,
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:720:21: SyntaxError: Expected ',', found string
    |
718 |     arrangement_results if r.arrangement_successful])
719 |                     "total_components": len(request.component_infos)
720 |                     "responsive_enabled": request.responsive_config is not None,
    |                     ^
721 |                     "current_breakpoint": current_breakpoint,
722 |                     "layout_valid": layout_valid,
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:736:1: SyntaxError: unindent does not match any outer indentation level
    |
734 |             )
735 |
736 |         except Exception as e:
    | ^
737 |             self.logger_service.log_error(
738 |                 "Unexpected error during UI layout setup",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:736:9: SyntaxError: Expected a statement
    |
734 |             )
735 |
736 |         except Exception as e:
    |         ^
737 |             self.logger_service.log_error(
738 |                 "Unexpected error during UI layout setup",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:736:26: SyntaxError: Expected a statement
    |
734 |             )
735 |
736 |         except Exception as e:
    |                          ^
737 |             self.logger_service.log_error(
738 |                 "Unexpected error during UI layout setup",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:736:31: SyntaxError: Expected an expression
    |
734 |             )
735 |
736 |         except Exception as e:
    |                               ^
737 |             self.logger_service.log_error(
738 |                 "Unexpected error during UI layout setup",
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:737:1: SyntaxError: Unexpected indentation
    |
736 |         except Exception as e:
737 |             self.logger_service.log_error(
    | ^
738 |                 "Unexpected error during UI layout setup",
739 |                 {"error": str(e)},
    |

src_refactored\application\main_window\use_cases\setup_ui_layout_use_case.py:750:1: SyntaxError: unindent does not match any outer indentation level
    |
748 |             )
749 |
750 |     def _create_error_response(
    | ^
751 |         self,
752 |         result: SetupResult,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:359:13: SyntaxError: Expected ',', found name
    |
357 |             formatting_results={},
358 |             total_updates=len(request.text_updates)
359 |             completed_updates=0,
    |             ^
360 |             errors=[],
361 |             warnings=[],
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:373:17: SyntaxError: Expected ',', found name
    |
371 |                 operation_id=request.operation_id,
372 |                 text_count=len(request.text_updates)
373 |                 widget_count=len(request.target_widgets),
    |                 ^
374 |             )
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:382:101: E501 Line too long (115 > 100)
    |
380 |             # Phase 1: Validation
381 |             state.current_phase = UpdatePhase.VALIDATION
382 |             self._progress_tracking.update_progress(request.operation_id, 1, "Validating text content and widgets")
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
383 |
384 |             validation_result = self._validate_request(request, state)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:394:101: E501 Line too long (102 > 100)
    |
392 |             # Phase 2: Text Preparation
393 |             state.current_phase = UpdatePhase.TEXT_PREPARATION
394 |             self._progress_tracking.update_progress(request.operation_id, 2, "Preparing text content")
    |                                                                                                     ^^ E501
395 |
396 |             preparation_result = self._prepare_text_content(request, state)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:406:101: E501 Line too long (103 > 100)
    |
404 |             # Phase 3: Translation
405 |             state.current_phase = UpdatePhase.TRANSLATION
406 |             self._progress_tracking.update_progress(request.operation_id, 3, "Processing translations")
    |                                                                                                     ^^^ E501
407 |
408 | if request.translation_config and request.translation_config.mode ! = (
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:408:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
406 |             self._progress_tracking.update_progress(request.operation_id, 3, "Processing translations")
407 |
408 | if request.translation_config and request.translation_config.mode ! = (
    | ^
409 |     TranslationMode.NONE:)
410 |                 translation_results = self._process_translations(request, state)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:408:67: SyntaxError: Expected ':', found '!'
    |
406 |             self._progress_tracking.update_progress(request.operation_id, 3, "Processing translations")
407 |
408 | if request.translation_config and request.translation_config.mode ! = (
    |                                                                   ^
409 |     TranslationMode.NONE:)
410 |                 translation_results = self._process_translations(request, state)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:408:69: SyntaxError: Expected a statement
    |
406 |             self._progress_tracking.update_progress(request.operation_id, 3, "Processing translations")
407 |
408 | if request.translation_config and request.translation_config.mode ! = (
    |                                                                     ^
409 |     TranslationMode.NONE:)
410 |                 translation_results = self._process_translations(request, state)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:409:25: SyntaxError: Expected ')', found ':'
    |
408 | if request.translation_config and request.translation_config.mode ! = (
409 |     TranslationMode.NONE:)
    |                         ^
410 |                 translation_results = self._process_translations(request, state)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:409:26: SyntaxError: Expected an expression
    |
408 | if request.translation_config and request.translation_config.mode ! = (
409 |     TranslationMode.NONE:)
    |                          ^
410 |                 translation_results = self._process_translations(request, state)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:409:27: SyntaxError: Expected a statement
    |
408 | if request.translation_config and request.translation_config.mode ! = (
409 |     TranslationMode.NONE:)
    |                           ^
410 |                 translation_results = self._process_translations(request, state)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:410:1: SyntaxError: Unexpected indentation
    |
408 | if request.translation_config and request.translation_config.mode ! = (
409 |     TranslationMode.NONE:)
410 |                 translation_results = self._process_translations(request, state)
    | ^
411 |
412 |             # Phase 4: Formatting
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:413:1: SyntaxError: unindent does not match any outer indentation level
    |
412 |             # Phase 4: Formatting
413 |             state.current_phase = UpdatePhase.FORMATTING
    | ^
414 |             self._progress_tracking.update_progress(request.operation_id, 4, "Applying text formatting")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:414:1: SyntaxError: Unexpected indentation
    |
412 |             # Phase 4: Formatting
413 |             state.current_phase = UpdatePhase.FORMATTING
414 |             self._progress_tracking.update_progress(request.operation_id, 4, "Applying text formatting")
    | ^
415 |
416 |             if request.formatting_config:
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:414:101: E501 Line too long (104 > 100)
    |
412 |             # Phase 4: Formatting
413 |             state.current_phase = UpdatePhase.FORMATTING
414 |             self._progress_tracking.update_progress(request.operation_id, 4, "Applying text formatting")
    |                                                                                                     ^^^^ E501
415 |
416 |             if request.formatting_config:
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:435:101: E501 Line too long (103 > 100)
    |
433 |             # Phase 7: Finalization
434 |             state.current_phase = UpdatePhase.FINALIZATION
435 |             self._progress_tracking.update_progress(request.operation_id, 7, "Finalizing text updates")
    |                                                                                                     ^^^ E501
436 |
437 |             self._finalize_updates(request, state)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:449:17: SyntaxError: Expected ',', found name
    |
447 |                 execution_time_ms=execution_time,
448 |                 updates_count=len(text_updates)
449 |                 translations_count=len(translation_results)
    |                 ^
450 |                 formatting_count=len(formatting_results)
451 |             )
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:450:17: SyntaxError: Expected ',', found name
    |
448 |                 updates_count=len(text_updates)
449 |                 translations_count=len(translation_results)
450 |                 formatting_count=len(formatting_results)
    |                 ^
451 |             )
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:450:57: COM812 Trailing comma missing
    |
448 |                 updates_count=len(text_updates)
449 |                 translations_count=len(translation_results)
450 |                 formatting_count=len(formatting_results)
    |                                                         ^ COM812
451 |             )
    |
    = help: Add trailing comma

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:464:1: SyntaxError: unindent does not match any outer indentation level
    |
462 |             )
463 |
464 |         except Exception as e:
    | ^
465 |             self._logger.log_error(
466 |                 f"UI text update failed for operation {request.operation_id}",
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:464:9: SyntaxError: Expected a statement
    |
462 |             )
463 |
464 |         except Exception as e:
    |         ^
465 |             self._logger.log_error(
466 |                 f"UI text update failed for operation {request.operation_id}",
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:464:26: SyntaxError: Expected a statement
    |
462 |             )
463 |
464 |         except Exception as e:
    |                          ^
465 |             self._logger.log_error(
466 |                 f"UI text update failed for operation {request.operation_id}",
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:464:31: SyntaxError: Expected an expression
    |
462 |             )
463 |
464 |         except Exception as e:
    |                               ^
465 |             self._logger.log_error(
466 |                 f"UI text update failed for operation {request.operation_id}",
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:465:1: SyntaxError: Unexpected indentation
    |
464 |         except Exception as e:
465 |             self._logger.log_error(
    | ^
466 |                 f"UI text update failed for operation {request.operation_id}",
467 |                 error=e,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:477:1: SyntaxError: unindent does not match any outer indentation level
    |
475 |             )
476 |
477 |     def _validate_request(self, request: UpdateUITextRequest, state: UITextUpdateState,
    | ^
478 |     ) -> bool:
479 |         """Validate the UI text update request."""
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:491:101: E501 Line too long (101 > 100)
    |
489 |                     text_content.content.encode(text_content.encoding)
490 |                 except UnicodeEncodeError:
491 |                     state.errors.append(f"Invalid encoding {text_content.encoding} for text ID: {tex\
    |                                                                                                     ^ E501
492 |     t_content.text_id}")
493 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:492:5: SyntaxError: f-string: expecting '}'
    |
490 |                 except UnicodeEncodeError:
491 |                     state.errors.append(f"Invalid encoding {text_content.encoding} for text ID: {tex\
492 |     t_content.text_id}")
    |     ^
493 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:492:14: SyntaxError: Expected ',', found FStringMiddle
    |
490 |                 except UnicodeEncodeError:
491 |                     state.errors.append(f"Invalid encoding {text_content.encoding} for text ID: {tex\
492 |     t_content.text_id}")
    |              ^
493 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:492:22: SyntaxError: f-string: single '}' is not allowed
    |
490 |                 except UnicodeEncodeError:
491 |                     state.errors.append(f"Invalid encoding {text_content.encoding} for text ID: {tex\
492 |     t_content.text_id}")
    |                      ^
493 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:492:23: SyntaxError: Expected ',', found FStringEnd
    |
490 |                 except UnicodeEncodeError:
491 |                     state.errors.append(f"Invalid encoding {text_content.encoding} for text ID: {tex\
492 |     t_content.text_id}")
    |                       ^
493 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:497:101: E501 Line too long (101 > 100)
    |
495 |                 # Validate length
496 |                 if text_content.max_length and len(text_content.content) > text_content.max_length:
497 |                     state.errors.append(f"Text too long for ID {text_content.text_id}: {len(text_con\
    |                                                                                                     ^ E501
498 |     tent.content)}
499 |                      >  {text_content.max_length}")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:498:5: SyntaxError: Expected ',', found name
    |
496 |                 if text_content.max_length and len(text_content.content) > text_content.max_length:
497 |                     state.errors.append(f"Text too long for ID {text_content.text_id}: {len(text_con\
498 |     tent.content)}
    |     ^
499 |                      >  {text_content.max_length}")
500 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:498:19: SyntaxError: f-string: unterminated string
    |
496 |                 if text_content.max_length and len(text_content.content) > text_content.max_length:
497 |                     state.errors.append(f"Text too long for ID {text_content.text_id}: {len(text_con\
498 |     tent.content)}
    |                   ^
499 |                      >  {text_content.max_length}")
500 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:499:22: SyntaxError: Expected an f-string element or the end of the f-string
    |
497 |                     state.errors.append(f"Text too long for ID {text_content.text_id}: {len(text_con\
498 |     tent.content)}
499 |                      >  {text_content.max_length}")
    |                      ^
500 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:499:50: SyntaxError: missing closing quote in string literal
    |
497 |                     state.errors.append(f"Text too long for ID {text_content.text_id}: {len(text_con\
498 |     tent.content)}
499 |                      >  {text_content.max_length}")
    |                                                  ^
500 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:499:52: SyntaxError: Expected FStringEnd, found newline
    |
497 |                     state.errors.append(f"Text too long for ID {text_content.text_id}: {len(text_con\
498 |     tent.content)}
499 |                      >  {text_content.max_length}")
    |                                                    ^
500 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:500:21: SyntaxError: Expected ')', found 'return'
    |
498 |     tent.content)}
499 |                      >  {text_content.max_length}")
500 |                     return False
    |                     ^
501 |
502 |             # Validate target widgets
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:504:101: E501 Line too long (111 > 100)
    |
502 |             # Validate target widgets
503 |             for target in request.target_widgets:
504 |                 if not self._widget_text.validate_widget_text_property(target.widget_id, target.text_property):
    |                                                                                                     ^^^^^^^^^^^ E501
505 |                     state.errors.append(f"Invalid text property {target.text_property} for widget {t\
506 |     arget.widget_id}")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:505:101: E501 Line too long (101 > 100)
    |
503 |             for target in request.target_widgets:
504 |                 if not self._widget_text.validate_widget_text_property(target.widget_id, target.text_property):
505 |                     state.errors.append(f"Invalid text property {target.text_property} for widget {t\
    |                                                                                                     ^ E501
506 |     arget.widget_id}")
507 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:506:5: SyntaxError: f-string: expecting '}'
    |
504 |                 if not self._widget_text.validate_widget_text_property(target.widget_id, target.text_property):
505 |                     state.errors.append(f"Invalid text property {target.text_property} for widget {t\
506 |     arget.widget_id}")
    |     ^
507 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:506:10: SyntaxError: Expected ',', found FStringMiddle
    |
504 |                 if not self._widget_text.validate_widget_text_property(target.widget_id, target.text_property):
505 |                     state.errors.append(f"Invalid text property {target.text_property} for widget {t\
506 |     arget.widget_id}")
    |          ^
507 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:506:20: SyntaxError: f-string: single '}' is not allowed
    |
504 |                 if not self._widget_text.validate_widget_text_property(target.widget_id, target.text_property):
505 |                     state.errors.append(f"Invalid text property {target.text_property} for widget {t\
506 |     arget.widget_id}")
    |                    ^
507 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:506:21: SyntaxError: Expected ',', found FStringEnd
    |
504 |                 if not self._widget_text.validate_widget_text_property(target.widget_id, target.text_property):
505 |                     state.errors.append(f"Invalid text property {target.text_property} for widget {t\
506 |     arget.widget_id}")
    |                     ^
507 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:511:69: SyntaxError: Expected an expression
    |
509 |             # Validate translation configuration
510 |             if request.translation_config:
511 |                 if not request.translation_config.source_language or
    |                                                                     ^
512 |     not request.translation_config.target_language:
513 |                     state.errors.append("Translation configuration missing source or
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:512:5: SyntaxError: unindent does not match any outer indentation level
    |
510 |             if request.translation_config:
511 |                 if not request.translation_config.source_language or
512 |     not request.translation_config.target_language:
    |     ^
513 |                     state.errors.append("Translation configuration missing source or
514 |     target language")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:512:52: SyntaxError: Expected an expression
    |
510 |             if request.translation_config:
511 |                 if not request.translation_config.source_language or
512 |     not request.translation_config.target_language:
    |                                                    ^
513 |                     state.errors.append("Translation configuration missing source or
514 |     target language")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:513:1: SyntaxError: Unexpected indentation
    |
511 |                 if not request.translation_config.source_language or
512 |     not request.translation_config.target_language:
513 |                     state.errors.append("Translation configuration missing source or
    | ^
514 |     target language")
515 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:513:41: SyntaxError: missing closing quote in string literal
    |
511 |                 if not request.translation_config.source_language or
512 |     not request.translation_config.target_language:
513 |                     state.errors.append("Translation configuration missing source or
    |                                         ^
514 |     target language")
515 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:514:12: SyntaxError: Expected ',', found name
    |
512 |     not request.translation_config.target_language:
513 |                     state.errors.append("Translation configuration missing source or
514 |     target language")
    |            ^
515 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:514:20: SyntaxError: missing closing quote in string literal
    |
512 |     not request.translation_config.target_language:
513 |                     state.errors.append("Translation configuration missing source or
514 |     target language")
    |                    ^
515 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:514:22: SyntaxError: Expected ')', found newline
    |
512 |     not request.translation_config.target_language:
513 |                     state.errors.append("Translation configuration missing source or
514 |     target language")
    |                      ^
515 |                     return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:517:1: SyntaxError: unindent does not match any outer indentation level
    |
515 |                     return False
516 |
517 |             return True
    | ^
518 |
519 |         except Exception as e:
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:519:1: SyntaxError: Unexpected indentation
    |
517 |             return True
518 |
519 |         except Exception as e:
    | ^
520 |             self._logger.log_error("Request validation failed", error=e)
521 |             state.errors.append(f"Validation error: {e!s}")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:519:9: SyntaxError: Expected a statement
    |
517 |             return True
518 |
519 |         except Exception as e:
    |         ^
520 |             self._logger.log_error("Request validation failed", error=e)
521 |             state.errors.append(f"Validation error: {e!s}")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:519:26: SyntaxError: Expected a statement
    |
517 |             return True
518 |
519 |         except Exception as e:
    |                          ^
520 |             self._logger.log_error("Request validation failed", error=e)
521 |             state.errors.append(f"Validation error: {e!s}")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:519:31: SyntaxError: Expected an expression
    |
517 |             return True
518 |
519 |         except Exception as e:
    |                               ^
520 |             self._logger.log_error("Request validation failed", error=e)
521 |             state.errors.append(f"Validation error: {e!s}")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:520:1: SyntaxError: Unexpected indentation
    |
519 |         except Exception as e:
520 |             self._logger.log_error("Request validation failed", error=e)
    | ^
521 |             state.errors.append(f"Validation error: {e!s}")
522 |             return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:524:5: SyntaxError: unindent does not match any outer indentation level
    |
522 |             return False
523 |
524 |     def _prepare_text_content(self, request: UpdateUITextRequest, state: UITextUpdateState,
    |     ^
525 |     ) -> bool:
526 |         """Prepare text content for processing."""
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:544:101: E501 Line too long (101 > 100)
    |
542 |                     )
543 |                     if not is_valid:
544 |                         state.warnings.append(f"Text content validation failed for ID: {text_content\
    |                                                                                                     ^ E501
545 |     .text_id}")
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:554:5: SyntaxError: unindent does not match any outer indentation level
    |
552 |             return False
553 |
554 |     def _process_translations(self, request: UpdateUITextRequest, state: UITextUpdateState,
    |     ^
555 |     ) -> list[TranslationResult]:
556 |         """Process text translations."""
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:592:69: SyntaxError: Expected an expression
    |
591 |                     # Cache result if successful
592 |                     if translation_result.translation_successful and
    |                                                                     ^
593 |     request.translation_config.use_cache:
594 |                         self._translation.cache_translation(
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:593:5: SyntaxError: unindent does not match any outer indentation level
    |
591 |                     # Cache result if successful
592 |                     if translation_result.translation_successful and
593 |     request.translation_config.use_cache:
    |     ^
594 |                         self._translation.cache_translation(
595 |                             text_content.content,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:593:42: SyntaxError: Expected an expression
    |
591 |                     # Cache result if successful
592 |                     if translation_result.translation_successful and
593 |     request.translation_config.use_cache:
    |                                          ^
594 |                         self._translation.cache_translation(
595 |                             text_content.content,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:594:1: SyntaxError: Unexpected indentation
    |
592 |                     if translation_result.translation_successful and
593 |     request.translation_config.use_cache:
594 |                         self._translation.cache_translation(
    | ^
595 |                             text_content.content,
596 |                             translation_result.translated_text,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:601:1: SyntaxError: unindent does not match any outer indentation level
    |
599 |                         )
600 |
601 |                 translation_results.append(translation_result)
    | ^
602 |                 state.translation_results[text_content.text_id] = translation_result
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:602:1: SyntaxError: Unexpected indentation
    |
601 |                 translation_results.append(translation_result)
602 |                 state.translation_results[text_content.text_id] = translation_result
    | ^
603 |
604 |                 # Update text content with translation
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:608:13: SyntaxError: unindent does not match any outer indentation level
    |
606 |                     text_content.content = translation_result.translated_text
607 |
608 |             except Exception as e:
    |             ^
609 | self._logger.log_error(f"Translation failed for text ID {text_content.text_id}", error = (
610 |     e))
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:608:30: SyntaxError: Expected a statement
    |
606 |                     text_content.content = translation_result.translated_text
607 |
608 |             except Exception as e:
    |                              ^
609 | self._logger.log_error(f"Translation failed for text ID {text_content.text_id}", error = (
610 |     e))
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:608:35: SyntaxError: Expected an expression
    |
606 |                     text_content.content = translation_result.translated_text
607 |
608 |             except Exception as e:
    |                                   ^
609 | self._logger.log_error(f"Translation failed for text ID {text_content.text_id}", error = (
610 |     e))
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:613:1: SyntaxError: Unexpected indentation
    |
612 |                 # Create error translation result
613 |                 error_result = TranslationResult(
    | ^
614 |                     text_id=text_content.text_id,
615 |                     original_text=text_content.content,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:625:1: SyntaxError: unindent does not match any outer indentation level
    |
623 |                 state.errors.append(f"Translation failed for {text_content.text_id}: {e!s}")
624 |
625 |         return translation_results
    | ^
626 |
627 |     def _apply_formatting(self, request: UpdateUITextRequest, state: UITextUpdateState,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:627:1: SyntaxError: Unexpected indentation
    |
625 |         return translation_results
626 |
627 |     def _apply_formatting(self, request: UpdateUITextRequest, state: UITextUpdateState,
    | ^
628 |     ) -> list[FormattingResult]:
629 |         """Apply text formatting."""
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:650:35: SyntaxError: Expected an indented block after `except` clause
    |
648 |                     text_content.content = formatting_result.formatted_text
649 |
650 |             except Exception as e:
    |                                   ^
651 | self._logger.log_error(f"Formatting failed for text ID {text_content.text_id}", error = (
652 |     e))
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:655:1: SyntaxError: Unexpected indentation
    |
654 |                 # Create error formatting result
655 |                 error_result = FormattingResult(
    | ^
656 |                     text_id=text_content.text_id,
657 |                     original_text=text_content.content,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:666:1: SyntaxError: unindent does not match any outer indentation level
    |
664 |                 state.errors.append(f"Formatting failed for {text_content.text_id}: {e!s}")
665 |
666 |         return formatting_results
    | ^
667 |
668 |     def _update_widget_text(self, request: UpdateUITextRequest, state: UITextUpdateState,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:668:1: SyntaxError: Unexpected indentation
    |
666 |         return formatting_results
667 |
668 |     def _update_widget_text(self, request: UpdateUITextRequest, state: UITextUpdateState,
    | ^
669 |     ) -> list[TextUpdate]:
670 |         """Update widget text properties."""
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:683:63: SyntaxError: Expected an expression
    |
681 |             matching_text = None
682 |             for text_content in request.text_updates:
683 |                 if text_content.text_id in target.widget_id or
    |                                                               ^
684 |     target.widget_id in text_content.text_id:
685 |                     matching_text = text_content
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:684:5: SyntaxError: Invalid annotated assignment target
    |
682 |             for text_content in request.text_updates:
683 |                 if text_content.text_id in target.widget_id or
684 |     target.widget_id in text_content.text_id:
    |     ^
685 |                     matching_text = text_content
686 |                     break
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:684:46: SyntaxError: Expected an expression
    |
682 |             for text_content in request.text_updates:
683 |                 if text_content.text_id in target.widget_id or
684 |     target.widget_id in text_content.text_id:
    |                                              ^
685 |                     matching_text = text_content
686 |                     break
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:685:1: SyntaxError: Unexpected indentation
    |
683 |                 if text_content.text_id in target.widget_id or
684 |     target.widget_id in text_content.text_id:
685 |                     matching_text = text_content
    | ^
686 |                     break
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:688:1: SyntaxError: unindent does not match any outer indentation level
    |
686 |                     break
687 |
688 |             if not matching_text and request.text_updates:
    | ^
689 |                 # Use first available text content if no specific match
690 |                 matching_text = request.text_updates[0]
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:692:1: SyntaxError: unindent does not match any outer indentation level
    |
690 |                 matching_text = request.text_updates[0]
691 |
692 |             if not matching_text:
    | ^
693 |                 continue
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:695:1: SyntaxError: unindent does not match any outer indentation level
    |
693 |                 continue
694 |
695 |             try:
    | ^
696 |                 # Get current text
697 | current_text = (
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:695:17: SyntaxError: Expected an indented block after `try` statement
    |
693 |                 continue
694 |
695 |             try:
    |                 ^
696 |                 # Get current text
697 | current_text = (
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:697:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
695 |             try:
696 |                 # Get current text
697 | current_text = (
    | ^
698 |     self._widget_text.get_widget_text(target.widget_id, target.text_property))
699 |                 target.current_text = current_text
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:699:1: SyntaxError: Unexpected indentation
    |
697 | current_text = (
698 |     self._widget_text.get_widget_text(target.widget_id, target.text_property))
699 |                 target.current_text = current_text
    | ^
700 |
701 |                 # Update widget text
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:729:13: SyntaxError: unindent does not match any outer indentation level
    |
727 |                     request.progress_callback(f"Updated text for {target.widget_id}", progress)
728 |
729 |             except Exception as e:
    |             ^
730 | self._logger.log_error(f"Failed to update text for widget {target.widget_id}", error = (
731 |     e))
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:729:30: SyntaxError: Expected a statement
    |
727 |                     request.progress_callback(f"Updated text for {target.widget_id}", progress)
728 |
729 |             except Exception as e:
    |                              ^
730 | self._logger.log_error(f"Failed to update text for widget {target.widget_id}", error = (
731 |     e))
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:729:35: SyntaxError: Expected an expression
    |
727 |                     request.progress_callback(f"Updated text for {target.widget_id}", progress)
728 |
729 |             except Exception as e:
    |                                   ^
730 | self._logger.log_error(f"Failed to update text for widget {target.widget_id}", error = (
731 |     e))
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:734:1: SyntaxError: Unexpected indentation
    |
733 |                 # Create error text update
734 |                 error_update = TextUpdate(
    | ^
735 |                     text_id=matching_text.text_id if matching_text else "unknown",
736 |                     widget_id=target.widget_id,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:750:9: SyntaxError: unindent does not match any outer indentation level
    |
748 |                     request.error_callback(f"Text update failed for {target.widget_id}", e)
749 |
750 |         return text_updates
    |         ^
751 |
752 |     def _validate_updates(self,
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:752:1: SyntaxError: Unexpected indentation
    |
750 |         return text_updates
751 |
752 |     def _validate_updates(self,
    | ^
753 |     request: UpdateUITextRequest, state: UITextUpdateState, text_updates: list[TextUpdate]) -> bool:
754 |         """Validate completed text updates."""
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:760:101: E501 Line too long (112 > 100)
    |
759 |             if successful_updates < total_updates:
760 |                 state.warnings.append(f"Only {successful_updates}/{total_updates} text updates were successful",
    |                                                                                                     ^^^^^^^^^^^^ E501
761 |     )
762 |                 return False
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:781:17: SyntaxError: Expected ',', found name
    |
779 |                 completed_updates=state.completed_updates,
780 |                 translations=len(state.translation_results)
781 |                 formatting=len(state.formatting_results)
    |                 ^
782 |                 errors=len(state.errors)
783 |                 warnings=len(state.warnings)
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:782:17: SyntaxError: Expected ',', found name
    |
780 |                 translations=len(state.translation_results)
781 |                 formatting=len(state.formatting_results)
782 |                 errors=len(state.errors)
    |                 ^
783 |                 warnings=len(state.warnings)
784 |             )
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:783:17: SyntaxError: Expected ',', found name
    |
781 |                 formatting=len(state.formatting_results)
782 |                 errors=len(state.errors)
783 |                 warnings=len(state.warnings)
    |                 ^
784 |             )
    |

src_refactored\application\main_window\use_cases\update_ui_text_use_case.py:811:10: SyntaxError: Expected dedent, found end of file
    |
809 |             error_message=error_message,
810 |             warnings=state.warnings if state.warnings else None,
811 |         )
    |          ^
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:392:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
391 |                     # Calculate progress
392 | progress_percentage = (
    | ^
393 |     self._progress_tracking_service.get_batch_progress_percentage()
394 |                         self._current_file_index - 1, self._total_files_count,
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:394:25: SyntaxError: Expected ')', found name
    |
392 | progress_percentage = (
393 |     self._progress_tracking_service.get_batch_progress_percentage()
394 |                         self._current_file_index - 1, self._total_files_count,
    |                         ^
395 |                     )
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:395:21: SyntaxError: Expected a statement
    |
393 |     self._progress_tracking_service.get_batch_progress_percentage()
394 |                         self._current_file_index - 1, self._total_files_count,
395 |                     )
    |                     ^
396 |
397 |                     # Determine file type and process accordingly
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:395:22: SyntaxError: Expected a statement
    |
393 |     self._progress_tracking_service.get_batch_progress_percentage()
394 |                         self._current_file_index - 1, self._total_files_count,
395 |                     )
    |                      ^
396 |
397 |                     # Determine file type and process accordingly
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:398:1: SyntaxError: Unexpected indentation
    |
397 |                     # Determine file type and process accordingly
398 |                     file_start_time = time.time()
    | ^
399 |
400 |                     if queue_item.file_type == FileType.VIDEO_FILE:
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:434:39: SyntaxError: Expected ',', found float
    |
432 |                         file_type=queue_item.file_type,
433 |                         status=status,
434 |                         progress=100.0.0,
    |                                       ^
435 |                         output_path=output_path,
436 |                         error_message=error_msg,
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:441:1: SyntaxError: unindent does not match any outer indentation level
    |
439 |                     ))
440 |
441 |                 except Exception as e:
    | ^
442 |                     failed_files += 1
443 |                     error_message = f"Error processing file: {e!s}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:441:17: SyntaxError: Expected a statement
    |
439 |                     ))
440 |
441 |                 except Exception as e:
    |                 ^
442 |                     failed_files += 1
443 |                     error_message = f"Error processing file: {e!s}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:441:34: SyntaxError: Expected a statement
    |
439 |                     ))
440 |
441 |                 except Exception as e:
    |                                  ^
442 |                     failed_files += 1
443 |                     error_message = f"Error processing file: {e!s}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:441:39: SyntaxError: Expected an expression
    |
439 |                     ))
440 |
441 |                 except Exception as e:
    |                                       ^
442 |                     failed_files += 1
443 |                     error_message = f"Error processing file: {e!s}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:442:1: SyntaxError: Unexpected indentation
    |
441 |                 except Exception as e:
442 |                     failed_files += 1
    | ^
443 |                     error_message = f"Error processing file: {e!s}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:459:1: SyntaxError: unindent does not match any outer indentation level
    |
458 |             # Phase 3: Complete batch transcription
459 |             self._is_transcribing = False
    | ^
460 |             total_processing_time = time.time() - start_time
461 |             remaining_files = self._transcription_queue_service.get_queue_size()
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:460:1: SyntaxError: Unexpected indentation
    |
458 |             # Phase 3: Complete batch transcription
459 |             self._is_transcribing = False
460 |             total_processing_time = time.time() - start_time
    | ^
461 |             remaining_files = self._transcription_queue_service.get_queue_size()
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:485:101: E501 Line too long (101 > 100)
    |
483 |                     request.progress_callback("All transcriptions completed!", 100.0)
484 |                 elif result == TranscriptionResult.PARTIAL_SUCCESS:
485 |                     request.progress_callback(f"Batch completed with {failed_files} failures", 100.0)
    |                                                                                                     ^ E501
486 |                 else:
487 |                     request.progress_callback("Batch transcription failed", 100.0)
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:512:1: SyntaxError: unindent does not match any outer indentation level
    |
510 |             )
511 |
512 |         except Exception as e:
    | ^
513 |             error_message = f"Error in batch transcription: {e!s}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:512:9: SyntaxError: Expected a statement
    |
510 |             )
511 |
512 |         except Exception as e:
    |         ^
513 |             error_message = f"Error in batch transcription: {e!s}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:512:26: SyntaxError: Expected a statement
    |
510 |             )
511 |
512 |         except Exception as e:
    |                          ^
513 |             error_message = f"Error in batch transcription: {e!s}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:512:31: SyntaxError: Expected an expression
    |
510 |             )
511 |
512 |         except Exception as e:
    |                               ^
513 |             error_message = f"Error in batch transcription: {e!s}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:513:1: SyntaxError: Unexpected indentation
    |
512 |         except Exception as e:
513 |             error_message = f"Error in batch transcription: {e!s}"
    | ^
514 |
515 |             self._logger_service.log_error(
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:518:29: COM812 Trailing comma missing
    |
516 |                 "Batch transcription failed",
517 |                 phase=TranscriptionPhase.ERROR_HANDLING.value,
518 |                 error=str(e)
    |                             ^ COM812
519 |             )
    |
    = help: Add trailing comma

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:533:17: SyntaxError: Expected ',', found name
    |
531 |                 failed_files=self._total_files_count,
532 |                 remaining_files=self._transcription_queue_service.get_queue_size()
533 |                 file_statuses=[],
    |                 ^
534 |                 total_processing_time=time.time() - start_time,
535 |                 error_message=error_message,
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:538:1: SyntaxError: unindent does not match any outer indentation level
    |
536 |             )
537 |
538 |     def _process_video_file(
    | ^
539 |         self,
540 |         queue_item: QueueItem,
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:559:87: SyntaxError: f-string: unterminated string
    |
558 |             # Update progress
559 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
    |                                                                                       ^
560 |     )"
561 |             message = f"Converting video: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:559:88: SyntaxError: Expected FStringEnd, found newline
    |
558 |             # Update progress
559 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
    |                                                                                        ^
560 |     )"
561 |             message = f"Converting video: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:560:5: SyntaxError: unindent does not match any outer indentation level
    |
558 |             # Update progress
559 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
560 |     )"
    |     ^
561 |             message = f"Converting video: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:560:6: SyntaxError: missing closing quote in string literal
    |
558 |             # Update progress
559 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
560 |     )"
    |      ^
561 |             message = f"Converting video: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:560:7: SyntaxError: Expected a statement
    |
558 |             # Update progress
559 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
560 |     )"
    |       ^
561 |             message = f"Converting video: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:561:1: SyntaxError: Unexpected indentation
    |
559 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
560 |     )"
561 |             message = f"Converting video: {base_name}{file_count_text}"
    | ^
562 |
563 |             if request.progress_callback:
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:581:1: SyntaxError: unindent does not match any outer indentation level
    |
579 |             return self._transcribe_audio_data(audio_data, request, file_count_text)
580 |
581 |         except Exception as e:
    | ^
582 |             error_message = f"Error processing video file: {e!s}"
583 |             self._logger_service.log_error("Video processing error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:581:9: SyntaxError: Expected a statement
    |
579 |             return self._transcribe_audio_data(audio_data, request, file_count_text)
580 |
581 |         except Exception as e:
    |         ^
582 |             error_message = f"Error processing video file: {e!s}"
583 |             self._logger_service.log_error("Video processing error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:581:26: SyntaxError: Expected a statement
    |
579 |             return self._transcribe_audio_data(audio_data, request, file_count_text)
580 |
581 |         except Exception as e:
    |                          ^
582 |             error_message = f"Error processing video file: {e!s}"
583 |             self._logger_service.log_error("Video processing error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:581:31: SyntaxError: Expected an expression
    |
579 |             return self._transcribe_audio_data(audio_data, request, file_count_text)
580 |
581 |         except Exception as e:
    |                               ^
582 |             error_message = f"Error processing video file: {e!s}"
583 |             self._logger_service.log_error("Video processing error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:582:1: SyntaxError: Unexpected indentation
    |
581 |         except Exception as e:
582 |             error_message = f"Error processing video file: {e!s}"
    | ^
583 |             self._logger_service.log_error("Video processing error", error=str(e))
584 |             return False, None, error_message
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:586:1: SyntaxError: unindent does not match any outer indentation level
    |
584 |             return False, None, error_message
585 |
586 |     def _process_memory_audio(
    | ^
587 |         self,
588 |         queue_item: QueueItem,
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:602:13: SyntaxError: Expected an indented block after `try` statement
    |
600 |             Tuple of (success, output_path, error_message)
601 |         """
602 |         try:
    |             ^
603 |             # Parse audio data from file path (stored as tuple)
604 | audio_data = (
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:604:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
602 |         try:
603 |             # Parse audio data from file path (stored as tuple)
604 | audio_data = (
    | ^
605 |     eval(queue_item.file_path)  # Note: In real implementation, use proper serialization)
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:607:13: SyntaxError: Expected ')', found name
    |
605 |     eval(queue_item.file_path)  # Note: In real implementation, use proper serialization)
606 |
607 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count})"
    |             ^
608 |
609 |             return self._transcribe_audio_data(audio_data, request, file_count_text)
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:609:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
607 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count})"
608 |
609 |             return self._transcribe_audio_data(audio_data, request, file_count_text)
    |             ^
610 |
611 |         except Exception as e:
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:611:9: SyntaxError: Expected a statement
    |
609 |             return self._transcribe_audio_data(audio_data, request, file_count_text)
610 |
611 |         except Exception as e:
    |         ^
612 |             error_message = f"Error processing memory audio: {e!s}"
613 |             self._logger_service.log_error("Memory audio processing error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:611:26: SyntaxError: Expected a statement
    |
609 |             return self._transcribe_audio_data(audio_data, request, file_count_text)
610 |
611 |         except Exception as e:
    |                          ^
612 |             error_message = f"Error processing memory audio: {e!s}"
613 |             self._logger_service.log_error("Memory audio processing error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:613:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
611 |         except Exception as e:
612 |             error_message = f"Error processing memory audio: {e!s}"
613 |             self._logger_service.log_error("Memory audio processing error", error=str(e))
    |             ^
614 |             return False, None, error_message
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:614:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
612 |             error_message = f"Error processing memory audio: {e!s}"
613 |             self._logger_service.log_error("Memory audio processing error", error=str(e))
614 |             return False, None, error_message
    |             ^
615 |
616 |     def _process_audio_file(
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:616:1: SyntaxError: Unexpected indentation
    |
614 |             return False, None, error_message
615 |
616 |     def _process_audio_file(
    | ^
617 |         self,
618 |         queue_item: QueueItem,
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:637:87: SyntaxError: f-string: unterminated string
    |
636 |             # Update progress
637 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
    |                                                                                       ^
638 |     )"
639 |             message = f"Transcribing: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:637:88: SyntaxError: Expected FStringEnd, found newline
    |
636 |             # Update progress
637 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
    |                                                                                        ^
638 |     )"
639 |             message = f"Transcribing: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:638:5: SyntaxError: Expected `except` or `finally` after `try` block
    |
636 |             # Update progress
637 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
638 |     )"
    |     ^
639 |             message = f"Transcribing: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:638:6: SyntaxError: missing closing quote in string literal
    |
636 |             # Update progress
637 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
638 |     )"
    |      ^
639 |             message = f"Transcribing: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:638:7: SyntaxError: Expected a statement
    |
636 |             # Update progress
637 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
638 |     )"
    |       ^
639 |             message = f"Transcribing: {base_name}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:639:1: SyntaxError: Unexpected indentation
    |
637 |             file_count_text = f" ({self._current_file_index}/{self._total_files_count},
638 |     )"
639 |             message = f"Transcribing: {base_name}{file_count_text}"
    | ^
640 |
641 |             if request.progress_callback:
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:680:1: SyntaxError: unindent does not match any outer indentation level
    |
678 |             return False, None, error_message
679 |
680 |         except Exception as e:
    | ^
681 |             error_message = f"Error transcribing file: {e!s}"
682 |             self._logger_service.log_error("File transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:680:9: SyntaxError: Expected a statement
    |
678 |             return False, None, error_message
679 |
680 |         except Exception as e:
    |         ^
681 |             error_message = f"Error transcribing file: {e!s}"
682 |             self._logger_service.log_error("File transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:680:26: SyntaxError: Expected a statement
    |
678 |             return False, None, error_message
679 |
680 |         except Exception as e:
    |                          ^
681 |             error_message = f"Error transcribing file: {e!s}"
682 |             self._logger_service.log_error("File transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:680:31: SyntaxError: Expected an expression
    |
678 |             return False, None, error_message
679 |
680 |         except Exception as e:
    |                               ^
681 |             error_message = f"Error transcribing file: {e!s}"
682 |             self._logger_service.log_error("File transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:681:1: SyntaxError: Unexpected indentation
    |
680 |         except Exception as e:
681 |             error_message = f"Error transcribing file: {e!s}"
    | ^
682 |             self._logger_service.log_error("File transcription error", error=str(e))
683 |             return False, None, error_message
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:720:1: SyntaxError: Unexpected indentation
    |
718 |                 extension = request.configuration.output_format.value
719 |                 success_message
720 |                  =  f"Saved transcript to: {os.path.basename(output_base_path,
    | ^
721 |     )}.{extension}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:720:18: SyntaxError: Expected a statement
    |
718 |                 extension = request.configuration.output_format.value
719 |                 success_message
720 |                  =  f"Saved transcript to: {os.path.basename(output_base_path,
    |                  ^
721 |     )}.{extension}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:732:13: SyntaxError: Expected `except` or `finally` after `try` block
    |
731 |                 return True, f"{output_base_path}.{extension}", None
732 |             error_message = f"Failed to save transcription for: {filename}"
    |             ^
733 |             return False, None, error_message
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:735:9: SyntaxError: Expected a statement
    |
733 |             return False, None, error_message
734 |
735 |         except Exception as e:
    |         ^
736 |             error_message = f"Error transcribing audio data: {e!s}"
737 |             self._logger_service.log_error("Audio data transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:735:26: SyntaxError: Expected a statement
    |
733 |             return False, None, error_message
734 |
735 |         except Exception as e:
    |                          ^
736 |             error_message = f"Error transcribing audio data: {e!s}"
737 |             self._logger_service.log_error("Audio data transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:735:31: SyntaxError: Expected an expression
    |
733 |             return False, None, error_message
734 |
735 |         except Exception as e:
    |                               ^
736 |             error_message = f"Error transcribing audio data: {e!s}"
737 |             self._logger_service.log_error("Audio data transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:736:1: SyntaxError: Unexpected indentation
    |
735 |         except Exception as e:
736 |             error_message = f"Error transcribing audio data: {e!s}"
    | ^
737 |             self._logger_service.log_error("Audio data transcription error", error=str(e))
738 |             return False, None, error_message
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:740:5: SyntaxError: Expected a statement
    |
738 |             return False, None, error_message
739 |
740 |     def is_transcribing(self) -> bool:
    |     ^
741 |         """Check if batch transcription is in progress.
    |

src_refactored\application\media_processing\use_cases\batch_transcribe_use_case.py:754:65: SyntaxError: Expected a statement
    |
752 |             Tuple of (current_file_index, total_files_count)
753 |         """
754 |         return self._current_file_index, self._total_files_count
    |                                                                 ^
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:325:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
324 |             # Initialize progress tracking
325 | total_steps = (
    | ^
326 |     6  # validation, preparation, extraction, processing, finalization, completion)
327 |             self._progress_tracking_service.initialize_progress(total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:327:13: SyntaxError: Expected ')', found name
    |
325 | total_steps = (
326 |     6  # validation, preparation, extraction, processing, finalization, completion)
327 |             self._progress_tracking_service.initialize_progress(total_steps)
    |             ^
328 |
329 |             if request.progress_callback:
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:327:13: SyntaxError: Invalid annotated assignment target
    |
325 | total_steps = (
326 |     6  # validation, preparation, extraction, processing, finalization, completion)
327 |             self._progress_tracking_service.initialize_progress(total_steps)
    |             ^
328 |
329 |             if request.progress_callback:
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:329:41: SyntaxError: Expected 'else', found ':'
    |
327 |             self._progress_tracking_service.initialize_progress(total_steps)
328 |
329 |             if request.progress_callback:
    |                                         ^
330 |                 request.progress_callback("Initializing conversion...", 0.0)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:333:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
332 |             # Phase 2: Validate input
333 |             self._logger_service.log_info(
    |             ^
334 |                 "Validating video file",
335 |                 phase=ConversionPhase.VALIDATING_INPUT.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:333:13: SyntaxError: Invalid annotated assignment target
    |
332 |             # Phase 2: Validate input
333 |             self._logger_service.log_info(
    |             ^
334 |                 "Validating video file",
335 |                 phase=ConversionPhase.VALIDATING_INPUT.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:338:54: SyntaxError: Expected 'else', found ':'
    |
336 |             )
337 |
338 |             if not os.path.exists(request.video_path):
    |                                                      ^
339 |                 error_message = f"Video file not found: {request.video_path}"
340 |                 return self._create_error_response(
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:340:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
338 |             if not os.path.exists(request.video_path):
339 |                 error_message = f"Video file not found: {request.video_path}"
340 |                 return self._create_error_response(
    |                 ^
341 |                     ConversionResult.INVALID_INPUT,
342 |                     error_message,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:348:1: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
347 |             # Validate video file
348 | is_valid, validation_error = (
    | ^
349 |     self._video_validation_service.validate_video(request.video_path))
350 |             if not is_valid:
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:350:28: SyntaxError: Expected 'else', found ':'
    |
348 | is_valid, validation_error = (
349 |     self._video_validation_service.validate_video(request.video_path))
350 |             if not is_valid:
    |                            ^
351 |                 return self._create_error_response(
352 |                     ConversionResult.INVALID_INPUT,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:359:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
358 |             # Get video information
359 |             video_info = self._video_validation_service.get_video_info(request.video_path)
    |             ^
360 |             if not video_info.has_audio:
361 |                 error_message = "Video file has no audio track"
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:360:40: SyntaxError: Expected 'else', found ':'
    |
358 |             # Get video information
359 |             video_info = self._video_validation_service.get_video_info(request.video_path)
360 |             if not video_info.has_audio:
    |                                        ^
361 |                 error_message = "Video file has no audio track"
362 |                 return self._create_error_response(
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:362:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
360 |             if not video_info.has_audio:
361 |                 error_message = "Video file has no audio track"
362 |                 return self._create_error_response(
    |                 ^
363 |                     ConversionResult.UNSUPPORTED_FORMAT,
364 |                     error_message,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:370:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
369 |             # Update progress
370 |             self._progress_tracking_service.update_progress(1, "Video validation complete")
    |             ^
371 |             if request.progress_callback:
372 |                 progress = self._progress_tracking_service.get_progress_percentage(1, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:370:13: SyntaxError: Invalid annotated assignment target
    |
369 |             # Update progress
370 |             self._progress_tracking_service.update_progress(1, "Video validation complete")
    |             ^
371 |             if request.progress_callback:
372 |                 progress = self._progress_tracking_service.get_progress_percentage(1, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:371:41: SyntaxError: Expected 'else', found ':'
    |
369 |             # Update progress
370 |             self._progress_tracking_service.update_progress(1, "Video validation complete")
371 |             if request.progress_callback:
    |                                         ^
372 |                 progress = self._progress_tracking_service.get_progress_percentage(1, total_steps)
373 |                 request.progress_callback("Video validation complete", progress)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:373:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
371 |             if request.progress_callback:
372 |                 progress = self._progress_tracking_service.get_progress_percentage(1, total_steps)
373 |                 request.progress_callback("Video validation complete", progress)
    |                 ^
374 |
375 |             # Phase 3: Prepare conversion
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:376:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
375 |             # Phase 3: Prepare conversion
376 |             self._logger_service.log_info(
    |             ^
377 |                 "Preparing conversion",
378 |                 phase=ConversionPhase.PREPARING_CONVERSION.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:376:13: SyntaxError: Invalid annotated assignment target
    |
375 |             # Phase 3: Prepare conversion
376 |             self._logger_service.log_info(
    |             ^
377 |                 "Preparing conversion",
378 |                 phase=ConversionPhase.PREPARING_CONVERSION.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:382:55: SyntaxError: Expected 'else', found ':'
    |
381 |             # Check FFmpeg availability
382 |             if not self._ffmpeg_service.is_available():
    |                                                       ^
383 |                 error_message = "FFmpeg is not available"
384 |                 return self._create_error_response(
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:384:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
382 |             if not self._ffmpeg_service.is_available():
383 |                 error_message = "FFmpeg is not available"
384 |                 return self._create_error_response(
    |                 ^
385 |                     ConversionResult.FAILURE,
386 |                     error_message,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:392:35: SyntaxError: Expected 'else', found ':'
    |
391 |             # Prepare output path
392 |             if request.output_path:
    |                                   ^
393 |                 output_base_path = os.path.splitext(request.output_path)[0]
394 |             else:
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:394:13: SyntaxError: Expected a statement
    |
392 |             if request.output_path:
393 |                 output_base_path = os.path.splitext(request.output_path)[0]
394 |             else:
    |             ^
395 |                 output_base_path = os.path.splitext(request.video_path,
396 |     )[0]
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:394:17: SyntaxError: Expected a statement
    |
392 |             if request.output_path:
393 |                 output_base_path = os.path.splitext(request.output_path)[0]
394 |             else:
    |                 ^
395 |                 output_base_path = os.path.splitext(request.video_path,
396 |     )[0]
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:399:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
398 |             # Update progress
399 |             self._progress_tracking_service.update_progress(2, "Conversion preparation complete")
    |             ^
400 |             if request.progress_callback:
401 |                 progress = self._progress_tracking_service.get_progress_percentage(2, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:399:13: SyntaxError: Invalid annotated assignment target
    |
398 |             # Update progress
399 |             self._progress_tracking_service.update_progress(2, "Conversion preparation complete")
    |             ^
400 |             if request.progress_callback:
401 |                 progress = self._progress_tracking_service.get_progress_percentage(2, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:400:41: SyntaxError: Expected 'else', found ':'
    |
398 |             # Update progress
399 |             self._progress_tracking_service.update_progress(2, "Conversion preparation complete")
400 |             if request.progress_callback:
    |                                         ^
401 |                 progress = self._progress_tracking_service.get_progress_percentage(2, total_steps)
402 |                 request.progress_callback("Conversion preparation complete", progress)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:402:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
400 |             if request.progress_callback:
401 |                 progress = self._progress_tracking_service.get_progress_percentage(2, total_steps)
402 |                 request.progress_callback("Conversion preparation complete", progress)
    |                 ^
403 |
404 |             # Phase 4: Extract audio
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:405:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
404 |             # Phase 4: Extract audio
405 |             self._logger_service.log_info(
    |             ^
406 |                 "Extracting audio from video",
407 |                 phase=ConversionPhase.EXTRACTING_AUDIO.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:410:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
408 |             )
409 |
410 |             base_name = os.path.basename(request.video_path)
    |             ^
411 |             if request.progress_callback:
412 |                 request.progress_callback(f"Converting {base_name} to audio...", 40.0)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:411:41: SyntaxError: Expected 'else', found ':'
    |
410 |             base_name = os.path.basename(request.video_path)
411 |             if request.progress_callback:
    |                                         ^
412 |                 request.progress_callback(f"Converting {base_name} to audio...", 40.0)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:415:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
414 |             # Extract audio using FFmpeg
415 |             audio_bytes, ffmpeg_error = self._ffmpeg_service.extract_audio(
    |             ^
416 |                 request.video_path,
417 |                 request.configuration.output_format,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:423:31: SyntaxError: Expected 'else', found ':'
    |
421 |             )
422 |
423 |             if not audio_bytes:
    |                               ^
424 |                 error_message = f"Audio extraction failed: {ffmpeg_error or 'Unknown error'}"
425 |                 return self._create_error_response(
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:425:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
423 |             if not audio_bytes:
424 |                 error_message = f"Audio extraction failed: {ffmpeg_error or 'Unknown error'}"
425 |                 return self._create_error_response(
    |                 ^
426 |                     ConversionResult.FAILURE,
427 |                     error_message,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:433:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
432 |             # Update progress
433 |             self._progress_tracking_service.update_progress(3, "Audio extraction complete")
    |             ^
434 |             if request.progress_callback:
435 |                 progress = self._progress_tracking_service.get_progress_percentage(3, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:433:13: SyntaxError: Invalid annotated assignment target
    |
432 |             # Update progress
433 |             self._progress_tracking_service.update_progress(3, "Audio extraction complete")
    |             ^
434 |             if request.progress_callback:
435 |                 progress = self._progress_tracking_service.get_progress_percentage(3, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:434:41: SyntaxError: Expected 'else', found ':'
    |
432 |             # Update progress
433 |             self._progress_tracking_service.update_progress(3, "Audio extraction complete")
434 |             if request.progress_callback:
    |                                         ^
435 |                 progress = self._progress_tracking_service.get_progress_percentage(3, total_steps)
436 |                 request.progress_callback("Audio extraction complete", progress)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:436:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
434 |             if request.progress_callback:
435 |                 progress = self._progress_tracking_service.get_progress_percentage(3, total_steps)
436 |                 request.progress_callback("Audio extraction complete", progress)
    |                 ^
437 |
438 |             # Phase 5: Process audio (optional)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:439:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
438 |             # Phase 5: Process audio (optional)
439 |             self._logger_service.log_info(
    |             ^
440 |                 "Processing audio",
441 |                 phase=ConversionPhase.PROCESSING_AUDIO.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:444:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
442 |             )
443 |
444 |             processed_audio = audio_bytes
    |             ^
445 |
446 |             # Apply audio processing if requested
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:447:53: SyntaxError: Expected 'else', found ':'
    |
446 |             # Apply audio processing if requested
447 |             if request.configuration.normalize_audio:
    |                                                     ^
448 |                 processed_audio = self._audio_processing_service.normalize_audio(processed_audio)
449 |                 self._logger_service.log_info("Audio normalization applied")
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:449:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
447 |             if request.configuration.normalize_audio:
448 |                 processed_audio = self._audio_processing_service.normalize_audio(processed_audio)
449 |                 self._logger_service.log_info("Audio normalization applied")
    |                 ^
450 |
451 |             if request.configuration.remove_silence:
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:449:17: SyntaxError: Invalid annotated assignment target
    |
447 |             if request.configuration.normalize_audio:
448 |                 processed_audio = self._audio_processing_service.normalize_audio(processed_audio)
449 |                 self._logger_service.log_info("Audio normalization applied")
    |                 ^
450 |
451 |             if request.configuration.remove_silence:
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:451:52: SyntaxError: Expected 'else', found ':'
    |
449 |                 self._logger_service.log_info("Audio normalization applied")
450 |
451 |             if request.configuration.remove_silence:
    |                                                    ^
452 |                 processed_audio = self._audio_processing_service.remove_silence(processed_audio)
453 |                 self._logger_service.log_info("Silence removal applied",
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:453:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
451 |             if request.configuration.remove_silence:
452 |                 processed_audio = self._audio_processing_service.remove_silence(processed_audio)
453 |                 self._logger_service.log_info("Silence removal applied",
    |                 ^
454 |     )
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:457:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
456 |             # Update progress
457 |             self._progress_tracking_service.update_progress(4, "Audio processing complete")
    |             ^
458 |             if request.progress_callback:
459 |                 progress = self._progress_tracking_service.get_progress_percentage(4, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:457:13: SyntaxError: Invalid annotated assignment target
    |
456 |             # Update progress
457 |             self._progress_tracking_service.update_progress(4, "Audio processing complete")
    |             ^
458 |             if request.progress_callback:
459 |                 progress = self._progress_tracking_service.get_progress_percentage(4, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:458:41: SyntaxError: Expected 'else', found ':'
    |
456 |             # Update progress
457 |             self._progress_tracking_service.update_progress(4, "Audio processing complete")
458 |             if request.progress_callback:
    |                                         ^
459 |                 progress = self._progress_tracking_service.get_progress_percentage(4, total_steps)
460 |                 request.progress_callback("Audio processing complete", progress)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:460:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
458 |             if request.progress_callback:
459 |                 progress = self._progress_tracking_service.get_progress_percentage(4, total_steps)
460 |                 request.progress_callback("Audio processing complete", progress)
    |                 ^
461 |
462 |             # Phase 6: Finalize conversion
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:463:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
462 |             # Phase 6: Finalize conversion
463 |             self._logger_service.log_info(
    |             ^
464 |                 "Finalizing conversion",
465 |                 phase=ConversionPhase.FINALIZING.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:469:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
468 |             # Get audio duration
469 |             duration = None
    |             ^
470 |             try:
471 |                 duration = self._audio_processing_service.get_audio_duration(
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:470:13: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
468 |             # Get audio duration
469 |             duration = None
470 |             try:
    |             ^
471 |                 duration = self._audio_processing_service.get_audio_duration(
472 |                     processed_audio,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:475:13: SyntaxError: Expected newline, found 'except'
    |
473 |                     request.configuration.sample_rate,
474 |                 )
475 |             except Exception as e:
    |             ^
476 |                 self._logger_service.log_warning(
477 |                     "Failed to calculate audio duration",
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:482:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
481 |             # Create audio data object
482 |             audio_data = AudioData(
    |             ^
483 |                 data_type="memory_audio",
484 |                 audio_bytes=processed_audio,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:494:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
493 |             # Update progress
494 |             self._progress_tracking_service.update_progress(5, "Conversion finalization complete")
    |             ^
495 |             if request.progress_callback:
496 |                 progress = self._progress_tracking_service.get_progress_percentage(5, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:494:13: SyntaxError: Invalid annotated assignment target
    |
493 |             # Update progress
494 |             self._progress_tracking_service.update_progress(5, "Conversion finalization complete")
    |             ^
495 |             if request.progress_callback:
496 |                 progress = self._progress_tracking_service.get_progress_percentage(5, total_steps)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:495:41: SyntaxError: Expected 'else', found ':'
    |
493 |             # Update progress
494 |             self._progress_tracking_service.update_progress(5, "Conversion finalization complete")
495 |             if request.progress_callback:
    |                                         ^
496 |                 progress = self._progress_tracking_service.get_progress_percentage(5, total_steps)
497 |                 request.progress_callback("Conversion finalization complete", progress)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:497:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
495 |             if request.progress_callback:
496 |                 progress = self._progress_tracking_service.get_progress_percentage(5, total_steps)
497 |                 request.progress_callback("Conversion finalization complete", progress)
    |                 ^
498 |
499 |             # Phase 7: Complete conversion
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:500:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
499 |             # Phase 7: Complete conversion
500 |             conversion_time = time.time() - start_time
    |             ^
501 |
502 |             # Calculate compression ratio
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:503:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
502 |             # Calculate compression ratio
503 |             compression_ratio = None
    |             ^
504 |             if video_info.file_size and audio_data.size_bytes:
505 |                 compression_ratio = video_info.file_size / audio_data.size_bytes
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:504:62: SyntaxError: Expected 'else', found ':'
    |
502 |             # Calculate compression ratio
503 |             compression_ratio = None
504 |             if video_info.file_size and audio_data.size_bytes:
    |                                                              ^
505 |                 compression_ratio = video_info.file_size / audio_data.size_bytes
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:508:41: SyntaxError: Expected 'else', found ':'
    |
507 |             # Final progress update
508 |             if request.progress_callback:
    |                                         ^
509 |                 request.progress_callback(f"Conversion successful: {base_name}", 100.0)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:509:17: SyntaxError: Invalid annotated assignment target
    |
507 |             # Final progress update
508 |             if request.progress_callback:
509 |                 request.progress_callback(f"Conversion successful: {base_name}", 100.0)
    |                 ^
510 |
511 |             if request.completion_callback:
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:511:43: SyntaxError: Expected 'else', found ':'
    |
509 |                 request.progress_callback(f"Conversion successful: {base_name}", 100.0)
510 |
511 |             if request.completion_callback:
    |                                           ^
512 |                 request.completion_callback(ConversionResult.SUCCESS)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:514:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
512 |                 request.completion_callback(ConversionResult.SUCCESS)
513 |
514 |             self._logger_service.log_info(
    |             ^
515 |                 "Video conversion completed successfully",
516 |                 phase=ConversionPhase.COMPLETING.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:522:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
520 |             )
521 |
522 |             return ConvertVideoResponse(
    |             ^
523 |                 result=ConversionResult.SUCCESS,
524 |                 audio_data=audio_data,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:531:9: SyntaxError: Expected a statement
    |
529 |             )
530 |
531 |         except Exception as e:
    |         ^
532 |             error_message = f"Error in video conversion: {e!s}"
533 |             return self._create_error_response(
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:531:26: SyntaxError: Expected a statement
    |
529 |             )
530 |
531 |         except Exception as e:
    |                          ^
532 |             error_message = f"Error in video conversion: {e!s}"
533 |             return self._create_error_response(
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:533:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
531 |         except Exception as e:
532 |             error_message = f"Error in video conversion: {e!s}"
533 |             return self._create_error_response(
    |             ^
534 |                 ConversionResult.FAILURE,
535 |                 error_message,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:540:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
538 |             )
539 |
540 |     def _create_error_response(
    |     ^
541 |         self,
542 |         result: ConversionResult,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:558:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
556 |             ConvertVideoResponse with error information
557 |         """
558 |         import time
    |         ^
559 |
560 |         self._logger_service.log_error(
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:560:9: SyntaxError: Expected ',', found name
    |
558 |         import time
559 |
560 |         self._logger_service.log_error(
    |         ^
561 |             "Video conversion failed",
562 |             phase=ConversionPhase.ERROR_HANDLING.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:560:39: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
558 |         import time
559 |
560 |         self._logger_service.log_error(
    |                                       ^
561 |             "Video conversion failed",
562 |             phase=ConversionPhase.ERROR_HANDLING.value,
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:562:18: SyntaxError: Expected ',', found '='
    |
560 |         self._logger_service.log_error(
561 |             "Video conversion failed",
562 |             phase=ConversionPhase.ERROR_HANDLING.value,
    |                  ^
563 |             error=error_message,
564 |         )
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:563:18: SyntaxError: Expected ',', found '='
    |
561 |             "Video conversion failed",
562 |             phase=ConversionPhase.ERROR_HANDLING.value,
563 |             error=error_message,
    |                  ^
564 |         )
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:566:1: SyntaxError: Unexpected indentation
    |
564 |         )
565 |
566 |         if request.error_callback:
    | ^
567 |             request.error_callback(error_message)
    |

src_refactored\application\media_processing\use_cases\convert_video_use_case.py:576:10: SyntaxError: Expected a statement
    |
574 |             conversion_time=time.time() - start_time,
575 |             error_message=error_message,
576 |         )
    |          ^
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:345:21: SyntaxError: Expected ',', found name
    |
343 |                     result=ProcessingResult.FAILURE,
344 |                     total_files=len(request.media_files)
345 |                     processed_files=0,
    |                     ^
346 |                     failed_files=len(request.media_files)
347 |                     queue_size=0,
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:347:21: SyntaxError: Expected ',', found name
    |
345 |                     processed_files=0,
346 |                     failed_files=len(request.media_files)
347 |                     queue_size=0,
    |                     ^
348 |                     file_statuses=[
349 |                         FileProcessingStatus(
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:379:38: SyntaxError: Unparenthesized generator expression cannot be used here
    |
377 |             for i, file_path in enumerate(valid_files):
378 |                 try:
379 |                     file_info = next(info for info in file_infos if info.file_path == file_path,
    |                                      ^
380 |     )
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:383:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
382 |                     # Update progress
383 | progress = (
    | ^
384 |     self._progress_tracking_service.get_progress_percentage(i, len(valid_files)))
385 |                     message = f"Processing: {os.path.basename(file_path)}"
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:385:1: SyntaxError: Unexpected indentation
    |
383 | progress = (
384 |     self._progress_tracking_service.get_progress_percentage(i, len(valid_files)))
385 |                     message = f"Processing: {os.path.basename(file_path)}"
    | ^
386 |
387 |                     if request.progress_callback:
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:423:65: SyntaxError: Expected an indented block after `if` statement
    |
422 |                     elif file_info.media_type == MediaType.VIDEO:
423 |                         if request.configuration.convert_videos:
    |                                                                 ^
424 |                             # Add video file to queue for conversion
425 | success = (
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:425:1: SyntaxError: Expected a statement
    |
423 |                         if request.configuration.convert_videos:
424 |                             # Add video file to queue for conversion
425 | success = (
    | ^
426 |     self._transcription_queue_service.add_video_to_queue(file_path))
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:428:1: SyntaxError: Unexpected indentation
    |
426 |     self._transcription_queue_service.add_video_to_queue(file_path))
427 |
428 |                             if success:
    | ^
429 |                                 processed_files += 1
430 |                                 file_statuses.append(FileProcessingStatus(
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:451:25: SyntaxError: unindent does not match any outer indentation level
    |
449 |                                     error_message="Failed to add to queue",
450 |                                 ))
451 |                         else:
    |                         ^
452 |                             # Skip video files if conversion is disabled
453 |                             failed_files += 1
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:451:29: SyntaxError: Expected a statement
    |
449 |                                     error_message="Failed to add to queue",
450 |                                 ))
451 |                         else:
    |                             ^
452 |                             # Skip video files if conversion is disabled
453 |                             failed_files += 1
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:451:30: SyntaxError: Expected a statement
    |
449 |                                     error_message="Failed to add to queue",
450 |                                 ))
451 |                         else:
    |                              ^
452 |                             # Skip video files if conversion is disabled
453 |                             failed_files += 1
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:453:1: SyntaxError: Unexpected indentation
    |
451 |                         else:
452 |                             # Skip video files if conversion is disabled
453 |                             failed_files += 1
    | ^
454 |                             file_statuses.append(FileProcessingStatus(
455 |                                 file_path=file_path,
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:466:1: SyntaxError: unindent does not match any outer indentation level
    |
464 |                             )
465 |
466 |                     else:
    | ^
467 |                         # Unknown media type
468 |                         failed_files += 1
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:466:21: SyntaxError: Expected a statement
    |
464 |                             )
465 |
466 |                     else:
    |                     ^
467 |                         # Unknown media type
468 |                         failed_files += 1
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:466:25: SyntaxError: Expected a statement
    |
464 |                             )
465 |
466 |                     else:
    |                         ^
467 |                         # Unknown media type
468 |                         failed_files += 1
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:466:26: SyntaxError: Expected a statement
    |
464 |                             )
465 |
466 |                     else:
    |                          ^
467 |                         # Unknown media type
468 |                         failed_files += 1
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:468:1: SyntaxError: Unexpected indentation
    |
466 |                     else:
467 |                         # Unknown media type
468 |                         failed_files += 1
    | ^
469 |                         file_statuses.append(FileProcessingStatus(
470 |                             file_path=file_path,
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:481:1: SyntaxError: unindent does not match any outer indentation level
    |
479 |                         )
480 |
481 |                 except Exception as e:
    | ^
482 |                     failed_files += 1
483 |                     file_statuses.append(FileProcessingStatus(
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:481:17: SyntaxError: Expected a statement
    |
479 |                         )
480 |
481 |                 except Exception as e:
    |                 ^
482 |                     failed_files += 1
483 |                     file_statuses.append(FileProcessingStatus(
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:481:34: SyntaxError: Expected a statement
    |
479 |                         )
480 |
481 |                 except Exception as e:
    |                                  ^
482 |                     failed_files += 1
483 |                     file_statuses.append(FileProcessingStatus(
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:481:39: SyntaxError: Expected an expression
    |
479 |                         )
480 |
481 |                 except Exception as e:
    |                                       ^
482 |                     failed_files += 1
483 |                     file_statuses.append(FileProcessingStatus(
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:482:1: SyntaxError: Unexpected indentation
    |
481 |                 except Exception as e:
482 |                     failed_files += 1
    | ^
483 |                     file_statuses.append(FileProcessingStatus(
484 |                         file_path=file_path,
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:487:45: COM812 Trailing comma missing
    |
485 |                         media_type=MediaType.UNKNOWN,
486 |                         status="error",
487 |                         error_message=str(e)
    |                                             ^ COM812
488 |                     ))
    |
    = help: Add trailing comma

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:493:37: COM812 Trailing comma missing
    |
491 |                         "Error processing file",
492 |                         file_path=file_path,
493 |                         error=str(e)
    |                                     ^ COM812
494 |                     )
    |
    = help: Add trailing comma

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:497:1: SyntaxError: unindent does not match any outer indentation level
    |
496 |             # Phase 5: Complete processing
497 |             processing_time = time.time() - start_time
    | ^
498 |             queue_size = self._transcription_queue_service.get_queue_size()
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:498:1: SyntaxError: Unexpected indentation
    |
496 |             # Phase 5: Complete processing
497 |             processing_time = time.time() - start_time
498 |             queue_size = self._transcription_queue_service.get_queue_size()
    | ^
499 |
500 |             # Determine result
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:527:17: SyntaxError: Expected ',', found name
    |
525 |                 result=result,
526 |                 total_files=len(request.media_files)
527 |                 processed_files=processed_files,
    |                 ^
528 |                 failed_files=failed_files,
529 |                 queue_size=queue_size,
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:534:1: SyntaxError: unindent does not match any outer indentation level
    |
532 |             )
533 |
534 |         except Exception as e:
    | ^
535 |             error_message = f"Error in media files processing: {e!s}"
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:534:9: SyntaxError: Expected a statement
    |
532 |             )
533 |
534 |         except Exception as e:
    |         ^
535 |             error_message = f"Error in media files processing: {e!s}"
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:534:26: SyntaxError: Expected a statement
    |
532 |             )
533 |
534 |         except Exception as e:
    |                          ^
535 |             error_message = f"Error in media files processing: {e!s}"
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:534:31: SyntaxError: Expected an expression
    |
532 |             )
533 |
534 |         except Exception as e:
    |                               ^
535 |             error_message = f"Error in media files processing: {e!s}"
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:535:1: SyntaxError: Unexpected indentation
    |
534 |         except Exception as e:
535 |             error_message = f"Error in media files processing: {e!s}"
    | ^
536 |
537 |             self._logger_service.log_error(
    |

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:540:29: COM812 Trailing comma missing
    |
538 |                 "Media files processing failed",
539 |                 phase=ProcessingPhase.ERROR_HANDLING.value,
540 |                 error=str(e)
    |                             ^ COM812
541 |             )
    |
    = help: Add trailing comma

src_refactored\application\media_processing\use_cases\process_media_files_use_case.py:555:14: SyntaxError: Expected a statement
    |
553 |                 processing_time=time.time() - start_time,
554 |                 error_message=error_message,
555 |             )
    |              ^
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:457:17: SyntaxError: Expected ',', found name
    |
455 |                 result=ProcessingResult.FAILURE,
456 |                 queue_size_remaining=self._transcription_queue_service.get_queue_size()
457 |                 processing_time=time.time() - start_time,
    |                 ^
458 |                 error_message=error_message,
459 |             )
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:554:13: SyntaxError: Expected an indented block after `try` statement
    |
552 |             ProcessNextFileResponse with processing results
553 |         """
554 |         try:
    |             ^
555 |             # Parse audio data from file path (stored as tuple)
556 | audio_data = (
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:556:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
554 |         try:
555 |             # Parse audio data from file path (stored as tuple)
556 | audio_data = (
    | ^
557 |     eval(queue_item.file_path)  # Note: In real implementation, use proper serialization)
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:559:13: SyntaxError: Expected ')', found 'return'
    |
557 |     eval(queue_item.file_path)  # Note: In real implementation, use proper serialization)
558 |
559 |             return self._transcribe_audio_data(
    |             ^
560 |                 audio_data, request, file_count_text, FileType.MEMORY_AUDIO,
561 |             )
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:563:9: SyntaxError: Expected a statement
    |
561 |             )
562 |
563 |         except Exception as e:
    |         ^
564 |             error_message = f"Error processing memory audio: {e!s}"
565 |             self._logger_service.log_error("Memory audio processing error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:563:26: SyntaxError: Expected a statement
    |
561 |             )
562 |
563 |         except Exception as e:
    |                          ^
564 |             error_message = f"Error processing memory audio: {e!s}"
565 |             self._logger_service.log_error("Memory audio processing error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:565:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
563 |         except Exception as e:
564 |             error_message = f"Error processing memory audio: {e!s}"
565 |             self._logger_service.log_error("Memory audio processing error", error=str(e))
    |             ^
566 |
567 |             return ProcessNextFileResponse(
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:567:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
565 |             self._logger_service.log_error("Memory audio processing error", error=str(e))
566 |
567 |             return ProcessNextFileResponse(
    |             ^
568 |                 result=ProcessingResult.FAILURE,
569 |                 processed_file=queue_item.file_path,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:574:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
572 |             )
573 |
574 |     def _process_audio_file(
    |     ^
575 |         self,
576 |         queue_item: QueueItem,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:592:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
590 |             ProcessNextFileResponse with processing results
591 |         """
592 |         try:
    |         ^
593 |             file_path = queue_item.file_path
594 |             base_name = os.path.basename(file_path,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:594:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
592 |         try:
593 |             file_path = queue_item.file_path
594 |             base_name = os.path.basename(file_path,
    |             ^
595 |     )
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:598:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
597 |             # Update progress for transcription
598 |             message = f"Transcribing: {base_name}{file_count_text}"
    |             ^
599 |
600 |             if request.progress_callback:
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:600:41: SyntaxError: Expected 'else', found ':'
    |
598 |             message = f"Transcribing: {base_name}{file_count_text}"
599 |
600 |             if request.progress_callback:
    |                                         ^
601 |                 request.progress_callback(message, progress_percentage)
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:603:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
601 |                 request.progress_callback(message, progress_percentage)
602 |
603 |             current_file_index = self._batch_management_service.get_current_file_index()
    |             ^
604 |             total_files = self._batch_management_service.get_total_files_count()
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:604:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
603 |             current_file_index = self._batch_management_service.get_current_file_index()
604 |             total_files = self._batch_management_service.get_total_files_count()
    |             ^
605 |
606 |             self._progress_tracking_service.update_file_progress(
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:606:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
604 |             total_files = self._batch_management_service.get_total_files_count()
605 |
606 |             self._progress_tracking_service.update_file_progress(
    |             ^
607 |                 current_file_index, total_files, message,
608 |             )
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:610:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
608 |             )
609 |
610 |             self._logger_service.log_info(
    |             ^
611 |                 "Transcribing audio file",
612 |                 phase=ProcessingPhase.TRANSCRIBING.value,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:617:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
616 |             # Transcribe the file
617 |             transcript = self._transcription_service.transcribe_file(file_path)
    |             ^
618 |
619 |             if not transcript:
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:619:30: SyntaxError: Expected 'else', found ':'
    |
617 |             transcript = self._transcription_service.transcribe_file(file_path)
618 |
619 |             if not transcript:
    |                              ^
620 |                 error_message = f"Transcription failed for: {base_name}{file_count_text}"
621 |                 self._logger_service.log_error("Transcription failed", file_path=file_path)
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:621:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
619 |             if not transcript:
620 |                 error_message = f"Transcription failed for: {base_name}{file_count_text}"
621 |                 self._logger_service.log_error("Transcription failed", file_path=file_path)
    |                 ^
622 |
623 |                 if request.error_callback:
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:621:17: SyntaxError: Invalid annotated assignment target
    |
619 |             if not transcript:
620 |                 error_message = f"Transcription failed for: {base_name}{file_count_text}"
621 |                 self._logger_service.log_error("Transcription failed", file_path=file_path)
    |                 ^
622 |
623 |                 if request.error_callback:
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:623:42: SyntaxError: Expected 'else', found ':'
    |
621 |                 self._logger_service.log_error("Transcription failed", file_path=file_path)
622 |
623 |                 if request.error_callback:
    |                                          ^
624 |                     request.error_callback(error_message)
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:626:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
624 |                     request.error_callback(error_message)
625 |
626 |                 return ProcessNextFileResponse(
    |                 ^
627 |                     result=ProcessingResult.TRANSCRIPTION_FAILED,
628 |                     processed_file=file_path,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:634:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
633 |             # Save transcription
634 |             output_path = os.path.splitext(file_path)[0]
    |             ^
635 |             success = self._output_service.save_transcription(
636 |                 transcript, output_path, request.configuration.output_format,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:635:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
633 |             # Save transcription
634 |             output_path = os.path.splitext(file_path)[0]
635 |             success = self._output_service.save_transcription(
    |             ^
636 |                 transcript, output_path, request.configuration.output_format,
637 |             )
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:639:23: SyntaxError: Expected 'else', found ':'
    |
637 |             )
638 |
639 |             if success:
    |                       ^
640 |                 extension = request.configuration.output_format.value
641 |                 full_output_path = f"{output_path}.{extension}"
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:641:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
639 |             if success:
640 |                 extension = request.configuration.output_format.value
641 |                 full_output_path = f"{output_path}.{extension}"
    |                 ^
642 |                 success_message = f"Saved transcript to: {os.path.basename(full_output_path,
643 |     )}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:642:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
640 |                 extension = request.configuration.output_format.value
641 |                 full_output_path = f"{output_path}.{extension}"
642 |                 success_message = f"Saved transcript to: {os.path.basename(full_output_path,
    |                 ^
643 |     )}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:645:45: SyntaxError: Expected 'else', found ':'
    |
643 |     )}{file_count_text}"
644 |
645 |                 if request.progress_callback:
    |                                             ^
646 |                     request.progress_callback(success_message, progress_percentage + 10)
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:648:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
646 |                     request.progress_callback(success_message, progress_percentage + 10)
647 |
648 |                 self._logger_service.log_info(
    |                 ^
649 |                     "File transcription completed",
650 |                     phase=ProcessingPhase.SAVING_OUTPUT.value,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:655:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
653 |                 )
654 |
655 |                 return ProcessNextFileResponse(
    |                 ^
656 |                     result=ProcessingResult.SUCCESS,
657 |                     processed_file=file_path,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:661:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
659 |                     file_type=FileType.AUDIO_FILE,
660 |                 )
661 |             error_message = f"Failed to save transcription for: {base_name}"
    |             ^
662 |
663 |             return ProcessNextFileResponse(
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:663:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
661 |             error_message = f"Failed to save transcription for: {base_name}"
662 |
663 |             return ProcessNextFileResponse(
    |             ^
664 |                 result=ProcessingResult.SAVE_FAILED,
665 |                 processed_file=file_path,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:670:9: SyntaxError: Expected a statement
    |
668 |             )
669 |
670 |         except Exception as e:
    |         ^
671 |             error_message = f"Error transcribing file: {e!s}"
672 |             self._logger_service.log_error("File transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:670:26: SyntaxError: Expected a statement
    |
668 |             )
669 |
670 |         except Exception as e:
    |                          ^
671 |             error_message = f"Error transcribing file: {e!s}"
672 |             self._logger_service.log_error("File transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:672:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
670 |         except Exception as e:
671 |             error_message = f"Error transcribing file: {e!s}"
672 |             self._logger_service.log_error("File transcription error", error=str(e))
    |             ^
673 |
674 |             return ProcessNextFileResponse(
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:674:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
672 |             self._logger_service.log_error("File transcription error", error=str(e))
673 |
674 |             return ProcessNextFileResponse(
    |             ^
675 |                 result=ProcessingResult.FAILURE,
676 |                 processed_file=queue_item.file_path,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:681:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
679 |             )
680 |
681 |     def _transcribe_audio_data(
    |     ^
682 |         self,
683 |         audio_data: tuple[str, bytes, str],
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:699:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
697 |             ProcessNextFileResponse with processing results
698 |         """
699 |         try:
    |         ^
700 |             data_type, audio_bytes, output_base_path = audio_data
701 |             filename = os.path.basename(output_base_path)
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:701:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
699 |         try:
700 |             data_type, audio_bytes, output_base_path = audio_data
701 |             filename = os.path.basename(output_base_path)
    |             ^
702 |
703 |             # Update progress for transcription
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:704:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
703 |             # Update progress for transcription
704 |             message = f"Transcribing: {filename}{file_count_text}"
    |             ^
705 |
706 |             if request.progress_callback:
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:706:41: SyntaxError: Expected 'else', found ':'
    |
704 |             message = f"Transcribing: {filename}{file_count_text}"
705 |
706 |             if request.progress_callback:
    |                                         ^
707 |                 request.progress_callback(message, 50.0)
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:709:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
707 |                 request.progress_callback(message, 50.0)
708 |
709 |             current_file_index = self._batch_management_service.get_current_file_index()
    |             ^
710 |             total_files = self._batch_management_service.get_total_files_count()
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:710:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
709 |             current_file_index = self._batch_management_service.get_current_file_index()
710 |             total_files = self._batch_management_service.get_total_files_count()
    |             ^
711 |
712 |             self._progress_tracking_service.update_file_progress(
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:712:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
710 |             total_files = self._batch_management_service.get_total_files_count()
711 |
712 |             self._progress_tracking_service.update_file_progress(
    |             ^
713 |                 current_file_index, total_files, message,
714 |             )
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:716:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
714 |             )
715 |
716 |             self._logger_service.log_info(
    |             ^
717 |                 "Transcribing audio data",
718 |                 phase=ProcessingPhase.TRANSCRIBING.value,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:723:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
722 |             # Transcribe the audio data
723 |             transcript = self._transcription_service.transcribe_audio_data(audio_data)
    |             ^
724 |
725 |             if not transcript:
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:725:30: SyntaxError: Expected 'else', found ':'
    |
723 |             transcript = self._transcription_service.transcribe_audio_data(audio_data)
724 |
725 |             if not transcript:
    |                              ^
726 |                 error_message = f"Transcription failed for: {filename}{file_count_text}"
727 |                 self._logger_service.log_error("Audio data transcription failed")
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:727:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
725 |             if not transcript:
726 |                 error_message = f"Transcription failed for: {filename}{file_count_text}"
727 |                 self._logger_service.log_error("Audio data transcription failed")
    |                 ^
728 |
729 |                 if request.error_callback:
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:727:17: SyntaxError: Invalid annotated assignment target
    |
725 |             if not transcript:
726 |                 error_message = f"Transcription failed for: {filename}{file_count_text}"
727 |                 self._logger_service.log_error("Audio data transcription failed")
    |                 ^
728 |
729 |                 if request.error_callback:
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:729:42: SyntaxError: Expected 'else', found ':'
    |
727 |                 self._logger_service.log_error("Audio data transcription failed")
728 |
729 |                 if request.error_callback:
    |                                          ^
730 |                     request.error_callback(error_message,
731 |     )
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:733:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
731 |     )
732 |
733 |                 return ProcessNextFileResponse(
    |                 ^
734 |                     result=ProcessingResult.TRANSCRIPTION_FAILED,
735 |                     processed_file=output_base_path,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:741:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
740 |             # Save transcription
741 |             success = self._output_service.save_transcription(
    |             ^
742 |                 transcript, output_base_path, request.configuration.output_format,
743 |             )
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:745:23: SyntaxError: Expected 'else', found ':'
    |
743 |             )
744 |
745 |             if success:
    |                       ^
746 |                 extension = request.configuration.output_format.value
747 |                 full_output_path = f"{output_base_path}.{extension}"
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:747:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
745 |             if success:
746 |                 extension = request.configuration.output_format.value
747 |                 full_output_path = f"{output_base_path}.{extension}"
    |                 ^
748 |                 success_message = f"Saved transcript to: {os.path.basename(full_output_path,
749 |     )}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:748:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
746 |                 extension = request.configuration.output_format.value
747 |                 full_output_path = f"{output_base_path}.{extension}"
748 |                 success_message = f"Saved transcript to: {os.path.basename(full_output_path,
    |                 ^
749 |     )}{file_count_text}"
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:751:45: SyntaxError: Expected 'else', found ':'
    |
749 |     )}{file_count_text}"
750 |
751 |                 if request.progress_callback:
    |                                             ^
752 |                     request.progress_callback(success_message, 90.0)
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:754:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
752 |                     request.progress_callback(success_message, 90.0)
753 |
754 |                 self._logger_service.log_info(
    |                 ^
755 |                     "Audio data transcription completed",
756 |                     phase=ProcessingPhase.SAVING_OUTPUT.value,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:760:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
758 |                 )
759 |
760 |                 return ProcessNextFileResponse(
    |                 ^
761 |                     result=ProcessingResult.SUCCESS,
762 |                     processed_file=output_base_path,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:766:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
764 |                     file_type=original_file_type,
765 |                 )
766 |             error_message = f"Failed to save transcription for: {filename}"
    |             ^
767 |
768 |             return ProcessNextFileResponse(
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:768:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
766 |             error_message = f"Failed to save transcription for: {filename}"
767 |
768 |             return ProcessNextFileResponse(
    |             ^
769 |                 result=ProcessingResult.SAVE_FAILED,
770 |                 processed_file=output_base_path,
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:775:9: SyntaxError: Expected a statement
    |
773 |             )
774 |
775 |         except Exception as e:
    |         ^
776 |             error_message = f"Error transcribing audio data: {e!s}"
777 |             self._logger_service.log_error("Audio data transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:775:26: SyntaxError: Expected a statement
    |
773 |             )
774 |
775 |         except Exception as e:
    |                          ^
776 |             error_message = f"Error transcribing audio data: {e!s}"
777 |             self._logger_service.log_error("Audio data transcription error", error=str(e))
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:777:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
775 |         except Exception as e:
776 |             error_message = f"Error transcribing audio data: {e!s}"
777 |             self._logger_service.log_error("Audio data transcription error", error=str(e))
    |             ^
778 |
779 |             return ProcessNextFileResponse(
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:779:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
777 |             self._logger_service.log_error("Audio data transcription error", error=str(e))
778 |
779 |             return ProcessNextFileResponse(
    |             ^
780 |                 result=ProcessingResult.FAILURE,
781 |                 processed_file=audio_data[2] if len(audio_data) > 2 else "unknown",
    |

src_refactored\application\media_processing\use_cases\process_next_file_use_case.py:784:14: SyntaxError: unexpected EOF while parsing
    |
782 |                 file_type=original_file_type,
783 |                 error_message=error_message,
784 |             )
    |              ^
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:382:101: E501 Line too long (102 > 100)
    |
380 |                 request.progress_callback(transcription_message, 30.0)
381 |
382 |             self._progress_tracking_service.update_transcription_progress(transcription_message, 30.0)
    |                                                                                                     ^^ E501
383 |
384 |             # Perform transcription
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:403:101: E501 Line too long (104 > 100)
    |
401 |             # Update progress after transcription
402 |             if request.progress_callback:
403 |                 request.progress_callback(f"Transcription completed: {filename}{file_count_text}", 70.0)
    |                                                                                                     ^^^^ E501
404 |
405 |             self._progress_tracking_service.update_transcription_progress(
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:435:21: SyntaxError: Expected ',', found name
    |
433 |                     result=TranscriptionResult.SAVE_FAILED,
434 |                     transcription_text=transcript.get("text", "")
435 |                     transcription_segments=transcript.get("segments", [])
    |                     ^
436 |                     processing_time=time.time() - start_time,
437 |                     error_message=error_message,
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:436:21: SyntaxError: Expected ',', found name
    |
434 |                     transcription_text=transcript.get("text", "")
435 |                     transcription_segments=transcript.get("segments", [])
436 |                     processing_time=time.time() - start_time,
    |                     ^
437 |                     error_message=error_message,
438 |                 )
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:442:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
440 |             # Phase 6: Complete and update final progress
441 |             full_output_path = f"{request.audio_data_info.output_base_path}.{extension}"
442 | success_message = (
    | ^
443 |     f"Saved transcript to: {os.path.basename(full_output_path)}{file_count_text}")
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:445:1: SyntaxError: Unexpected indentation
    |
443 |     f"Saved transcript to: {os.path.basename(full_output_path)}{file_count_text}")
444 |
445 |             if request.progress_callback:
    | ^
446 |                 request.progress_callback(success_message, 90.0)
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:480:1: SyntaxError: unindent does not match any outer indentation level
    |
478 |             )
479 |
480 |         except Exception as e:
    | ^
481 |             error_message = f"Error transcribing audio data: {e!s}"
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:480:9: SyntaxError: Expected a statement
    |
478 |             )
479 |
480 |         except Exception as e:
    |         ^
481 |             error_message = f"Error transcribing audio data: {e!s}"
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:480:26: SyntaxError: Expected a statement
    |
478 |             )
479 |
480 |         except Exception as e:
    |                          ^
481 |             error_message = f"Error transcribing audio data: {e!s}"
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:480:31: SyntaxError: Expected an expression
    |
478 |             )
479 |
480 |         except Exception as e:
    |                               ^
481 |             error_message = f"Error transcribing audio data: {e!s}"
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:481:1: SyntaxError: Unexpected indentation
    |
480 |         except Exception as e:
481 |             error_message = f"Error transcribing audio data: {e!s}"
    | ^
482 |
483 |             self._logger_service.log_error(
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:486:29: COM812 Trailing comma missing
    |
484 |                 "Audio data transcription failed",
485 |                 phase=TranscriptionPhase.ERROR_HANDLING.value,
486 |                 error=str(e)
    |                             ^ COM812
487 |             )
    |
    = help: Add trailing comma

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:498:1: SyntaxError: unindent does not match any outer indentation level
    |
496 |             )
497 |
498 |     def safe_display_message(self, message: str, percentage: float = 0.0) -> None:
    | ^
499 |         """Safely display a message with progress.
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:511:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
509 |         try:
510 |             self._progress_tracking_service.update_transcription_progress(message, percentage)
511 | self._logger_service.log_debug("Progress updated", message = (
    | ^
512 |     message, percentage=percentage))
513 |         except Exception as e:
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:512:24: SyntaxError: Expected ',', found '='
    |
510 |             self._progress_tracking_service.update_transcription_progress(message, percentage)
511 | self._logger_service.log_debug("Progress updated", message = (
512 |     message, percentage=percentage))
    |                        ^
513 |         except Exception as e:
514 |             self._logger_service.log_warning(
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:513:1: SyntaxError: Unexpected indentation
    |
511 | self._logger_service.log_debug("Progress updated", message = (
512 |     message, percentage=percentage))
513 |         except Exception as e:
    | ^
514 |             self._logger_service.log_warning(
515 |                 "Failed to update progress display",
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:513:9: SyntaxError: Expected a statement
    |
511 | self._logger_service.log_debug("Progress updated", message = (
512 |     message, percentage=percentage))
513 |         except Exception as e:
    |         ^
514 |             self._logger_service.log_warning(
515 |                 "Failed to update progress display",
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:513:26: SyntaxError: Expected a statement
    |
511 | self._logger_service.log_debug("Progress updated", message = (
512 |     message, percentage=percentage))
513 |         except Exception as e:
    |                          ^
514 |             self._logger_service.log_warning(
515 |                 "Failed to update progress display",
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:513:31: SyntaxError: Expected an expression
    |
511 | self._logger_service.log_debug("Progress updated", message = (
512 |     message, percentage=percentage))
513 |         except Exception as e:
    |                               ^
514 |             self._logger_service.log_warning(
515 |                 "Failed to update progress display",
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:514:1: SyntaxError: Unexpected indentation
    |
512 |     message, percentage=percentage))
513 |         except Exception as e:
514 |             self._logger_service.log_warning(
    | ^
515 |                 "Failed to update progress display",
516 |                 error=str(e)
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:517:17: SyntaxError: Expected ',', found name
    |
515 |                 "Failed to update progress display",
516 |                 error=str(e)
517 |                 message=message,
    |                 ^
518 |                 percentage=percentage,
519 |             )
    |

src_refactored\application\media_processing\use_cases\transcribe_audio_data_use_case.py:519:14: SyntaxError: Expected a statement
    |
517 |                 message=message,
518 |                 percentage=percentage,
519 |             )
    |              ^
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:327:101: E501 Line too long (101 > 100)
    |
326 |             # Phase 2: Session Validation
327 |             self.progress_service.update_progress(session_id, CompletePhase.SESSION_VALIDATION, 14.3)
    |                                                                                                     ^ E501
328 |
329 |             # Get session
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:341:48: SyntaxError: Expected an expression
    |
340 |             # Check if session is already completed (unless forced)
341 |             if not request.force_completion and
    |                                                ^
342 |     not self.session_lookup_service.is_session_active(request.session_id):
343 |                 return self._create_error_response(
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:342:5: SyntaxError: Expected `except` or `finally` after `try` block
    |
340 |             # Check if session is already completed (unless forced)
341 |             if not request.force_completion and
342 |     not self.session_lookup_service.is_session_active(request.session_id):
    |     ^
343 |                 return self._create_error_response(
344 |                     CompleteResult.SESSION_ALREADY_COMPLETED,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:342:75: SyntaxError: Expected an expression
    |
340 |             # Check if session is already completed (unless forced)
341 |             if not request.force_completion and
342 |     not self.session_lookup_service.is_session_active(request.session_id):
    |                                                                           ^
343 |                 return self._create_error_response(
344 |                     CompleteResult.SESSION_ALREADY_COMPLETED,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:343:1: SyntaxError: Unexpected indentation
    |
341 |             if not request.force_completion and
342 |     not self.session_lookup_service.is_session_active(request.session_id):
343 |                 return self._create_error_response(
    | ^
344 |                     CompleteResult.SESSION_ALREADY_COMPLETED,
345 |                     CompletePhase.SESSION_VALIDATION,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:352:1: SyntaxError: unindent does not match any outer indentation level
    |
351 |             # Validate session can be completed
352 |             if request.configuration.validate_restoration:
    | ^
353 | validation_errors = (
354 |     self.validation_service.validate_session_completion(request.session_id,)
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:352:59: SyntaxError: Expected an indented block after `if` statement
    |
351 |             # Validate session can be completed
352 |             if request.configuration.validate_restoration:
    |                                                           ^
353 | validation_errors = (
354 |     self.validation_service.validate_session_completion(request.session_id,)
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:354:75: COM819 Trailing comma prohibited
    |
352 |             if request.configuration.validate_restoration:
353 | validation_errors = (
354 |     self.validation_service.validate_session_completion(request.session_id,)
    |                                                                           ^ COM819
355 |     )
356 |                 if validation_errors:
    |
    = help: Remove trailing comma

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:356:1: SyntaxError: Unexpected indentation
    |
354 |     self.validation_service.validate_session_completion(request.session_id,)
355 |     )
356 |                 if validation_errors:
    | ^
357 |                     return self._create_error_response(
358 |                         CompleteResult.VALIDATION_ERROR,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:366:13: SyntaxError: unindent does not match any outer indentation level
    |
365 |             # Initialize restoration state
366 |             restoration_state = RestorationState(
    |             ^
367 |                 ui_state_restored=False,
368 |                 progress_bar_restored=False,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:377:1: SyntaxError: Unexpected indentation
    |
376 |             # Phase 3: Progress Bar Restoration
377 |             self.progress_service.update_progress(session_id, CompletePhase.PROGRESS_BAR_RESTORATION, 28.6)
    | ^
378 |
379 |             if request.configuration.restore_progress_bar and hasattr(session, "progress_bar_info"):
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:377:101: E501 Line too long (107 > 100)
    |
376 |             # Phase 3: Progress Bar Restoration
377 |             self.progress_service.update_progress(session_id, CompletePhase.PROGRESS_BAR_RESTORATION, 28.6)
    |                                                                                                     ^^^^^^^ E501
378 |
379 |             if request.configuration.restore_progress_bar and hasattr(session, "progress_bar_info"):
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:387:101: E501 Line too long (101 > 100)
    |
385 |                         # Hide progress bar if configured
386 |                         if request.configuration.hide_progress_bar:
387 |                             if not self.progress_bar_restoration_service.hide_progress_bar(progress_\
    |                                                                                                     ^ E501
388 |     bar):
389 |                                 restoration_state.restoration_warnings.append("Failed to hide progre\
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:388:5: SyntaxError: Expected ',', found name
    |
386 |                         if request.configuration.hide_progress_bar:
387 |                             if not self.progress_bar_restoration_service.hide_progress_bar(progress_\
388 |     bar):
    |     ^
389 |                                 restoration_state.restoration_warnings.append("Failed to hide progre\
390 |     ss bar")
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:389:101: E501 Line too long (101 > 100)
    |
387 |                             if not self.progress_bar_restoration_service.hide_progress_bar(progress_\
388 |     bar):
389 |                                 restoration_state.restoration_warnings.append("Failed to hide progre\
    |                                                                                                     ^ E501
390 |     ss bar")
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:393:101: E501 Line too long (101 > 100)
    |
392 |                         # Reset progress bar value
393 |                         if not self.progress_bar_restoration_service.reset_progress_bar_value(progre\
    |                                                                                                     ^ E501
394 |     ss_bar):
395 |                             restoration_state.restoration_warnings.append("Failed to reset progress bar value",
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:394:5: SyntaxError: Expected ',', found name
    |
392 |                         # Reset progress bar value
393 |                         if not self.progress_bar_restoration_service.reset_progress_bar_value(progre\
394 |     ss_bar):
    |     ^
395 |                             restoration_state.restoration_warnings.append("Failed to reset progress bar value",
396 |     )
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:395:101: E501 Line too long (111 > 100)
    |
393 |                         if not self.progress_bar_restoration_service.reset_progress_bar_value(progre\
394 |     ss_bar):
395 |                             restoration_state.restoration_warnings.append("Failed to reset progress bar value",
    |                                                                                                     ^^^^^^^^^^^ E501
396 |     )
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:406:101: E501 Line too long (101 > 100)
    |
404 |                                 restoration_state.progress_bar_restored = True
405 |                             else:
406 |                                 restoration_state.restoration_errors.append("Failed to restore progr\
    |                                                                                                     ^ E501
407 |     ess bar parent")
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:411:101: E501 Line too long (101 > 100)
    |
409 |                         # Restore original geometry if available
410 |                         if progress_bar_info.original_geometry:
411 |                             if not self.progress_bar_restoration_service.restore_progress_bar_geomet\
    |                                                                                                     ^ E501
412 |     ry(
413 |                                 progress_bar,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:412:5: SyntaxError: Expected ':', found name
    |
410 |                         if progress_bar_info.original_geometry:
411 |                             if not self.progress_bar_restoration_service.restore_progress_bar_geomet\
412 |     ry(
    |     ^
413 |                                 progress_bar,
414 |                                 progress_bar_info.original_geometry,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:415:31: SyntaxError: Expected an expression
    |
413 |                                 progress_bar,
414 |                                 progress_bar_info.original_geometry,
415 |                             ):
    |                               ^
416 |                                 restoration_state.restoration_warnings.append("Failed to restore pro\
417 |     gress bar geometry")
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:416:1: SyntaxError: Unexpected indentation
    |
414 |                                 progress_bar_info.original_geometry,
415 |                             ):
416 |                                 restoration_state.restoration_warnings.append("Failed to restore pro\
    | ^
417 |     gress bar geometry")
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:416:101: E501 Line too long (101 > 100)
    |
414 |                                 progress_bar_info.original_geometry,
415 |                             ):
416 |                                 restoration_state.restoration_warnings.append("Failed to restore pro\
    |                                                                                                     ^ E501
417 |     gress bar geometry")
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:419:17: SyntaxError: Expected `except` or `finally` after `try` block
    |
417 |     gress bar geometry")
418 |
419 |                 except Exception as e:
    |                 ^
420 |                     error_msg = f"Progress bar restoration failed: {e!s}"
421 |                     restoration_state.restoration_errors.append(error_msg,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:419:34: SyntaxError: Expected a statement
    |
417 |     gress bar geometry")
418 |
419 |                 except Exception as e:
    |                                  ^
420 |                     error_msg = f"Progress bar restoration failed: {e!s}"
421 |                     restoration_state.restoration_errors.append(error_msg,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:419:39: SyntaxError: Expected an expression
    |
417 |     gress bar geometry")
418 |
419 |                 except Exception as e:
    |                                       ^
420 |                     error_msg = f"Progress bar restoration failed: {e!s}"
421 |                     restoration_state.restoration_errors.append(error_msg,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:420:1: SyntaxError: Unexpected indentation
    |
419 |                 except Exception as e:
420 |                     error_msg = f"Progress bar restoration failed: {e!s}"
    | ^
421 |                     restoration_state.restoration_errors.append(error_msg,
422 |     )
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:426:13: SyntaxError: Expected a statement
    |
425 |             # Phase 4: UI State Restoration
426 |             self.progress_service.update_progress(session_id, CompletePhase.UI_STATE_RESTORATION, 42.9)
    |             ^
427 |
428 |             if request.configuration.restore_ui_state and hasattr(session, "original_ui_state"):
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:426:101: E501 Line too long (103 > 100)
    |
425 |             # Phase 4: UI State Restoration
426 |             self.progress_service.update_progress(session_id, CompletePhase.UI_STATE_RESTORATION, 42.9)
    |                                                                                                     ^^^ E501
427 |
428 |             if request.configuration.restore_ui_state and hasattr(session, "original_ui_state"):
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:438:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
437 |                         # Count successful restorations
438 | successful_restorations = (
    | ^
439 |     sum(1 for success in restoration_results.values() if success))
440 |                         total_restorations = len(restoration_results)
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:440:1: SyntaxError: Unexpected indentation
    |
438 | successful_restorations = (
439 |     sum(1 for success in restoration_results.values() if success))
440 |                         total_restorations = len(restoration_results)
    | ^
441 |
442 |                         if successful_restorations == total_restorations:
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:447:101: E501 Line too long (124 > 100)
    |
445 |                             restoration_state.ui_state_restored = True
446 |                             restoration_state.restoration_warnings.append(
447 |                                 f"Partial UI restoration: {successful_restorations}/{total_restorations} elements restored",
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ E501
448 |                             )
449 |                         else:
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:450:101: E501 Line too long (101 > 100)
    |
448 |                             )
449 |                         else:
450 |                             restoration_state.restoration_errors.append("Failed to restore any UI el\
    |                                                                                                     ^ E501
451 |     ements")
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:453:17: SyntaxError: unindent does not match any outer indentation level
    |
451 |     ements")
452 |
453 |                 except Exception as e:
    |                 ^
454 |                     error_msg = f"UI state restoration failed: {e!s}"
455 |                     restoration_state.restoration_errors.append(error_msg,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:453:34: SyntaxError: Expected a statement
    |
451 |     ements")
452 |
453 |                 except Exception as e:
    |                                  ^
454 |                     error_msg = f"UI state restoration failed: {e!s}"
455 |                     restoration_state.restoration_errors.append(error_msg,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:453:39: SyntaxError: Expected an expression
    |
451 |     ements")
452 |
453 |                 except Exception as e:
    |                                       ^
454 |                     error_msg = f"UI state restoration failed: {e!s}"
455 |                     restoration_state.restoration_errors.append(error_msg,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:454:1: SyntaxError: Unexpected indentation
    |
453 |                 except Exception as e:
454 |                     error_msg = f"UI state restoration failed: {e!s}"
    | ^
455 |                     restoration_state.restoration_errors.append(error_msg,
456 |     )
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:460:1: SyntaxError: unindent does not match any outer indentation level
    |
459 |             # Phase 5: Layout Restoration
460 |             self.progress_service.update_progress(session_id, CompletePhase.LAYOUT_RESTORATION, 57.2)
    | ^
461 |
462 |             try:
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:460:101: E501 Line too long (101 > 100)
    |
459 |             # Phase 5: Layout Restoration
460 |             self.progress_service.update_progress(session_id, CompletePhase.LAYOUT_RESTORATION, 57.2)
    |                                                                                                     ^ E501
461 |
462 |             try:
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:462:1: SyntaxError: Unexpected indentation
    |
460 |             self.progress_service.update_progress(session_id, CompletePhase.LAYOUT_RESTORATION, 57.2)
461 |
462 |             try:
    | ^
463 |                 # Collapse progress area if it was expanded
464 |                 if (request.configuration.collapse_progress_area and
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:473:101: E501 Line too long (101 > 100)
    |
471 |                             restoration_state.progress_area_collapsed = True
472 |                         else:
473 |                             restoration_state.restoration_warnings.append("Failed to collapse progre\
    |                                                                                                     ^ E501
474 |     ss area")
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:482:101: E501 Line too long (101 > 100)
    |
480 |                         restoration_state.layout_restored = True
481 |                     else:
482 |                         restoration_state.restoration_warnings.append("Layout integrity validation f\
    |                                                                                                     ^ E501
483 |     ailed")
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:508:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
507 |                 # Cleanup temporary widgets
508 | temp_widgets_cleaned = (
    | ^
509 |     self.cleanup_service.cleanup_temporary_widgets(request.session_id))
510 |                 if temp_widgets_cleaned > 0:
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:510:1: SyntaxError: Unexpected indentation
    |
508 | temp_widgets_cleaned = (
509 |     self.cleanup_service.cleanup_temporary_widgets(request.session_id))
510 |                 if temp_widgets_cleaned > 0:
    | ^
511 |                     self.logger_service.log_info(
512 |                         f"Cleaned up {temp_widgets_cleaned} temporary widgets",
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:517:1: SyntaxError: Expected a statement
    |
516 |                 # Cleanup event connections
517 | connections_cleaned = (
    | ^
518 |     self.cleanup_service.cleanup_event_connections(request.session_id))
519 |                 if connections_cleaned > 0:
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:519:1: SyntaxError: Unexpected indentation
    |
517 | connections_cleaned = (
518 |     self.cleanup_service.cleanup_event_connections(request.session_id))
519 |                 if connections_cleaned > 0:
    | ^
520 |                     self.logger_service.log_info(
521 |                         f"Cleaned up {connections_cleaned} event connections",
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:525:13: SyntaxError: unindent does not match any outer indentation level
    |
523 |                     )
524 |
525 |             except Exception as e:
    |             ^
526 |                 error_msg = f"Cleanup failed: {e!s}"
527 |                 restoration_state.restoration_warnings.append(error_msg,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:525:30: SyntaxError: Expected a statement
    |
523 |                     )
524 |
525 |             except Exception as e:
    |                              ^
526 |                 error_msg = f"Cleanup failed: {e!s}"
527 |                 restoration_state.restoration_warnings.append(error_msg,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:525:35: SyntaxError: Expected an expression
    |
523 |                     )
524 |
525 |             except Exception as e:
    |                                   ^
526 |                 error_msg = f"Cleanup failed: {e!s}"
527 |                 restoration_state.restoration_warnings.append(error_msg,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:526:1: SyntaxError: Unexpected indentation
    |
525 |             except Exception as e:
526 |                 error_msg = f"Cleanup failed: {e!s}"
    | ^
527 |                 restoration_state.restoration_warnings.append(error_msg,
528 |     )
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:532:1: SyntaxError: unindent does not match any outer indentation level
    |
531 |             # Phase 7: Finalization
532 |             self.progress_service.update_progress(session_id, CompletePhase.FINALIZATION, 85.8)
    | ^
533 |
534 |             # Force UI update if configured
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:535:1: SyntaxError: Unexpected indentation
    |
534 |             # Force UI update if configured
535 |             if request.configuration.force_ui_update:
    | ^
536 |                 try:
537 |                     parent_window = getattr(session, "parent_window", None)
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:547:59: SyntaxError: Expected an indented block after `if` statement
    |
546 |             # Validate final restoration state
547 |             if request.configuration.validate_restoration:
    |                                                           ^
548 | validation_errors = (
549 |     self.validation_service.validate_restoration_state(restoration_state))
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:548:1: SyntaxError: Expected a statement
    |
546 |             # Validate final restoration state
547 |             if request.configuration.validate_restoration:
548 | validation_errors = (
    | ^
549 |     self.validation_service.validate_restoration_state(restoration_state))
550 |                 if validation_errors:
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:550:1: SyntaxError: Unexpected indentation
    |
548 | validation_errors = (
549 |     self.validation_service.validate_restoration_state(restoration_state))
550 |                 if validation_errors:
    | ^
551 |                     restoration_state.restoration_warnings.extend(validation_errors)
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:554:13: SyntaxError: unindent does not match any outer indentation level
    |
553 |             # Mark session as completed and remove from active sessions
554 |             self.session_lookup_service.mark_session_completed(request.session_id)
    |             ^
555 |             self.session_lookup_service.remove_session(request.session_id,
556 |     )
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:555:1: SyntaxError: Unexpected indentation
    |
553 |             # Mark session as completed and remove from active sessions
554 |             self.session_lookup_service.mark_session_completed(request.session_id)
555 |             self.session_lookup_service.remove_session(request.session_id,
    | ^
556 |     )
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:562:17: SyntaxError: Expected ',', found name
    |
560 |                 session_id=request.session_id,
561 |                 start_time=getattr(session, "start_time", start_time)
562 |                 end_time=request.timestamp,
    |                 ^
563 |                 duration_ms=0.0,  # Will be calculated in __post_init__
564 |                 total_updates=getattr(session, "update_count", 0)
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:565:17: SyntaxError: Expected ',', found name
    |
563 |                 duration_ms=0.0,  # Will be calculated in __post_init__
564 |                 total_updates=getattr(session, "update_count", 0)
565 |                 final_progress_value=getattr(session, "current_progress", 0.0)
    |                 ^
566 |                 ui_elements_restored=len(getattr(session, "original_ui_state", {})),
567 |                 progress_bar_reparented=restoration_state.progress_bar_restored,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:566:17: SyntaxError: Expected ',', found name
    |
564 |                 total_updates=getattr(session, "update_count", 0)
565 |                 final_progress_value=getattr(session, "current_progress", 0.0)
566 |                 ui_elements_restored=len(getattr(session, "original_ui_state", {})),
    |                 ^
567 |                 progress_bar_reparented=restoration_state.progress_bar_restored,
568 |                 completion_successful=len(restoration_state.restoration_errors) == 0,
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:579:2: SyntaxError: unindent does not match any outer indentation level
    |
577 |             if restoration_state.restoration_errors:
578 |                 result
579 |  = (
    |  ^
580 |     CompleteResult.UI_RESTORATION_ERROR if not restoration_state.progress_bar_restored else CompleteResult.PROGRESS_BAR_RESTORATION_E…
581 |             else:
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:580:101: E501 Line too long (138 > 100)
    |
578 | …
579 | …
580 | …on_state.progress_bar_restored else CompleteResult.PROGRESS_BAR_RESTORATION_ERROR)
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
581 | …
582 | …
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:581:1: SyntaxError: Unexpected indentation
    |
579 |  = (
580 |     CompleteResult.UI_RESTORATION_ERROR if not restoration_state.progress_bar_restored else CompleteResult.PROGRESS_BAR_RESTORATION_E…
581 |             else:
    | ^
582 |                 result = CompleteResult.SUCCESS
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:581:13: SyntaxError: Expected a statement
    |
579 |  = (
580 |     CompleteResult.UI_RESTORATION_ERROR if not restoration_state.progress_bar_restored else CompleteResult.PROGRESS_BAR_RESTORATION_E…
581 |             else:
    |             ^
582 |                 result = CompleteResult.SUCCESS
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:581:17: SyntaxError: Expected a statement
    |
579 |  = (
580 |     CompleteResult.UI_RESTORATION_ERROR if not restoration_state.progress_bar_restored else CompleteResult.PROGRESS_BAR_RESTORATION_E…
581 |             else:
    |                 ^
582 |                 result = CompleteResult.SUCCESS
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:581:18: SyntaxError: Expected a statement
    |
579 |  = (
580 |     CompleteResult.UI_RESTORATION_ERROR if not restoration_state.progress_bar_restored else CompleteResult.PROGRESS_BAR_RESTORATION_E…
581 |             else:
    |                  ^
582 |                 result = CompleteResult.SUCCESS
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:582:1: SyntaxError: Unexpected indentation
    |
580 |     CompleteResult.UI_RESTORATION_ERROR if not restoration_state.progress_bar_restored else CompleteResult.PROGRESS_BAR_RESTORATION_E…
581 |             else:
582 |                 result = CompleteResult.SUCCESS
    | ^
583 |
584 |             self.logger_service.log_info(
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:584:13: SyntaxError: Expected a statement
    |
582 |                 result = CompleteResult.SUCCESS
583 |
584 |             self.logger_service.log_info(
    |             ^
585 |                 "Progress completion finished",
586 |                 {
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:591:21: SyntaxError: Expected ',', found string
    |
589 |                     "execution_time_ms": execution_time,
590 |                     "errors": len(restoration_state.restoration_errors)
591 |                     "warnings": len(restoration_state.restoration_warnings)
    |                     ^
592 |                 },
593 |             )
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:591:76: COM812 Trailing comma missing
    |
589 |                     "execution_time_ms": execution_time,
590 |                     "errors": len(restoration_state.restoration_errors)
591 |                     "warnings": len(restoration_state.restoration_warnings)
    |                                                                            ^ COM812
592 |                 },
593 |             )
    |
    = help: Add trailing comma

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:605:1: SyntaxError: unindent does not match any outer indentation level
    |
603 |             )
604 |
605 |         except Exception as e:
    | ^
606 |             self.logger_service.log_error(
607 |                 "Unexpected error during progress completion",
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:605:9: SyntaxError: Expected a statement
    |
603 |             )
604 |
605 |         except Exception as e:
    |         ^
606 |             self.logger_service.log_error(
607 |                 "Unexpected error during progress completion",
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:605:26: SyntaxError: Expected a statement
    |
603 |             )
604 |
605 |         except Exception as e:
    |                          ^
606 |             self.logger_service.log_error(
607 |                 "Unexpected error during progress completion",
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:605:31: SyntaxError: Expected an expression
    |
603 |             )
604 |
605 |         except Exception as e:
    |                               ^
606 |             self.logger_service.log_error(
607 |                 "Unexpected error during progress completion",
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:606:1: SyntaxError: Unexpected indentation
    |
605 |         except Exception as e:
606 |             self.logger_service.log_error(
    | ^
607 |                 "Unexpected error during progress completion",
608 |                 {"session_id": request.session_id, "error": str(e)},
    |

src_refactored\application\progress_management\use_cases\complete_progress_use_case.py:619:1: SyntaxError: unindent does not match any outer indentation level
    |
617 |             )
618 |
619 |     def _create_error_response(
    | ^
620 |         self,
621 |         result: CompleteResult,
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:326:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
325 |             # Validate progress bar
326 | progress_bar_errors = (
    | ^
327 |     self.widget_validation_service.validate_progress_bar(request.progress_bar))
328 |             if progress_bar_errors:
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:328:1: SyntaxError: Unexpected indentation
    |
326 | progress_bar_errors = (
327 |     self.widget_validation_service.validate_progress_bar(request.progress_bar))
328 |             if progress_bar_errors:
    | ^
329 |                 return self._create_error_response(
330 |                     ReparentResult.PROGRESS_BAR_NOT_FOUND,
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:348:1: SyntaxError: Expected a statement
    |
347 |             # Validate target widget
348 | target_errors = (
    | ^
349 |     self.widget_validation_service.validate_target_widget(request.target_widget))
350 |             if target_errors:
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:350:1: SyntaxError: Unexpected indentation
    |
348 | target_errors = (
349 |     self.widget_validation_service.validate_target_widget(request.target_widget))
350 |             if target_errors:
    | ^
351 |                 return self._create_error_response(
352 |                     ReparentResult.TARGET_WIDGET_INVALID,
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:360:38: SyntaxError: Expected an indented block after `if` statement
    |
359 |             # Validate source widget if provided
360 |             if request.source_widget:
    |                                      ^
361 | source_errors = (
362 |     self.widget_validation_service.validate_target_widget(request.source_widget)
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:361:1: SyntaxError: Expected a statement
    |
359 |             # Validate source widget if provided
360 |             if request.source_widget:
361 | source_errors = (
    | ^
362 |     self.widget_validation_service.validate_target_widget(request.source_widget)
363 |     )
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:364:1: SyntaxError: Unexpected indentation
    |
362 |     self.widget_validation_service.validate_target_widget(request.source_widget)
363 |     )
364 |                 if source_errors:
    | ^
365 |                     return self._create_error_response(
366 |                         ReparentResult.SOURCE_WIDGET_INVALID,
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:374:13: SyntaxError: unindent does not match any outer indentation level
    |
373 |             # Validate widget hierarchy
374 |             if not self.widget_validation_service.validate_widget_hierarchy(
    |             ^
375 |                 request.progress_bar,
376 |                 request.target_widget,
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:387:1: SyntaxError: unindent does not match any outer indentation level
    |
386 |             # Phase 3: State Backup
387 |             self.progress_service.update_progress(session_id, ReparentPhase.STATE_BACKUP, 22.2)
    | ^
388 |
389 |             source_state = None
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:389:1: SyntaxError: Unexpected indentation
    |
387 |             self.progress_service.update_progress(session_id, ReparentPhase.STATE_BACKUP, 22.2)
388 |
389 |             source_state = None
    | ^
390 |             try:
391 |                 if request.configuration.backup_original_state:
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:391:64: SyntaxError: Expected an indented block after `if` statement
    |
389 |             source_state = None
390 |             try:
391 |                 if request.configuration.backup_original_state:
    |                                                                ^
392 | source_state = (
393 |     self.state_backup_service.backup_progress_bar_state(request.progress_bar,)
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:392:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
390 |             try:
391 |                 if request.configuration.backup_original_state:
392 | source_state = (
    | ^
393 |     self.state_backup_service.backup_progress_bar_state(request.progress_bar,)
394 |     )
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:393:77: COM819 Trailing comma prohibited
    |
391 |                 if request.configuration.backup_original_state:
392 | source_state = (
393 |     self.state_backup_service.backup_progress_bar_state(request.progress_bar,)
    |                                                                             ^ COM819
394 |     )
    |
    = help: Remove trailing comma

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:397:1: SyntaxError: Unexpected indentation
    |
396 |                     # Backup additional properties if configured
397 |                     if request.configuration.preserve_properties:
    | ^
398 | source_state.properties = (
399 |     self.state_backup_service.backup_widget_properties()
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:397:66: SyntaxError: Expected an indented block after `if` statement
    |
396 |                     # Backup additional properties if configured
397 |                     if request.configuration.preserve_properties:
    |                                                                  ^
398 | source_state.properties = (
399 |     self.state_backup_service.backup_widget_properties()
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:398:1: SyntaxError: Expected a statement
    |
396 |                     # Backup additional properties if configured
397 |                     if request.configuration.preserve_properties:
398 | source_state.properties = (
    | ^
399 |     self.state_backup_service.backup_widget_properties()
400 |                             request.progress_bar,
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:400:29: SyntaxError: Expected ')', found name
    |
398 | source_state.properties = (
399 |     self.state_backup_service.backup_widget_properties()
400 |                             request.progress_bar,
    |                             ^
401 |                         )
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:401:25: SyntaxError: Expected a statement
    |
399 |     self.state_backup_service.backup_widget_properties()
400 |                             request.progress_bar,
401 |                         )
    |                         ^
402 |
403 |             except Exception as e:
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:401:26: SyntaxError: Expected a statement
    |
399 |     self.state_backup_service.backup_widget_properties()
400 |                             request.progress_bar,
401 |                         )
    |                          ^
402 |
403 |             except Exception as e:
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:403:1: SyntaxError: Unexpected indentation
    |
401 |                         )
402 |
403 |             except Exception as e:
    | ^
404 |                 self.logger_service.log_warning(
405 |                     f"State backup warning: {e!s}",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:403:13: SyntaxError: Expected a statement
    |
401 |                         )
402 |
403 |             except Exception as e:
    |             ^
404 |                 self.logger_service.log_warning(
405 |                     f"State backup warning: {e!s}",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:403:30: SyntaxError: Expected a statement
    |
401 |                         )
402 |
403 |             except Exception as e:
    |                              ^
404 |                 self.logger_service.log_warning(
405 |                     f"State backup warning: {e!s}",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:403:35: SyntaxError: Expected an expression
    |
401 |                         )
402 |
403 |             except Exception as e:
    |                                   ^
404 |                 self.logger_service.log_warning(
405 |                     f"State backup warning: {e!s}",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:404:1: SyntaxError: Unexpected indentation
    |
403 |             except Exception as e:
404 |                 self.logger_service.log_warning(
    | ^
405 |                     f"State backup warning: {e!s}",
406 |                     {"progress_bar": str(type(request.progress_bar).__name__)},
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:411:13: SyntaxError: Expected a statement
    |
410 |             # Phase 4: Layout Removal
411 |             self.progress_service.update_progress(session_id, ReparentPhase.LAYOUT_REMOVAL, 33.3)
    |             ^
412 |
413 |             original_layout = None
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:515:101: E501 Line too long (102 > 100)
    |
514 |             # Phase 7: Geometry Adjustment
515 |             self.progress_service.update_progress(session_id, ReparentPhase.GEOMETRY_ADJUSTMENT, 66.6)
    |                                                                                                     ^^ E501
516 |
517 |             try:
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:547:66: SyntaxError: Expected an indented block after `if` statement
    |
545 |             target_state = None
546 |             try:
547 |                 if request.configuration.validate_after_reparent:
    |                                                                  ^
548 |                     # Backup new state for comparison
549 | target_state = (
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:549:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
547 |                 if request.configuration.validate_after_reparent:
548 |                     # Backup new state for comparison
549 | target_state = (
    | ^
550 |     self.state_backup_service.backup_progress_bar_state(request.progress_bar))
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:553:1: SyntaxError: Unexpected indentation
    |
552 |                     # Validate new layout
553 |                     new_layout = self.layout_service.get_widget_layout(request.progress_bar)
    | ^
554 |                     if new_layout and not self.layout_service.validate_layout_integrity(new_layout):
555 |                         self.logger_service.log_warning(
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:560:13: SyntaxError: unindent does not match any outer indentation level
    |
558 |                         )
559 |
560 |             except Exception as e:
    |             ^
561 |                 self.logger_service.log_warning(
562 |                     f"Post-reparent validation warning: {e!s}",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:560:30: SyntaxError: Expected a statement
    |
558 |                         )
559 |
560 |             except Exception as e:
    |                              ^
561 |                 self.logger_service.log_warning(
562 |                     f"Post-reparent validation warning: {e!s}",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:560:35: SyntaxError: Expected an expression
    |
558 |                         )
559 |
560 |             except Exception as e:
    |                                   ^
561 |                 self.logger_service.log_warning(
562 |                     f"Post-reparent validation warning: {e!s}",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:561:1: SyntaxError: Unexpected indentation
    |
560 |             except Exception as e:
561 |                 self.logger_service.log_warning(
    | ^
562 |                     f"Post-reparent validation warning: {e!s}",
563 |                     {"progress_bar": str(type(request.progress_bar).__name__)},
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:568:1: SyntaxError: unindent does not match any outer indentation level
    |
567 |             # Phase 9: Completion
568 |             self.progress_service.update_progress(session_id, ReparentPhase.COMPLETION, 88.8)
    | ^
569 |
570 |             # Force widget update if configured
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:571:1: SyntaxError: Unexpected indentation
    |
570 |             # Force widget update if configured
571 |             if request.configuration.force_layout_update:
    | ^
572 |                 try:
573 |                     self.reparenting_service.force_widget_update(request.progress_bar)
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:623:1: SyntaxError: unindent does not match any outer indentation level
    |
621 |             )
622 |
623 |         except Exception as e:
    | ^
624 |             self.logger_service.log_error(
625 |                 "Unexpected error during progress bar reparenting",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:623:9: SyntaxError: Expected a statement
    |
621 |             )
622 |
623 |         except Exception as e:
    |         ^
624 |             self.logger_service.log_error(
625 |                 "Unexpected error during progress bar reparenting",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:623:26: SyntaxError: Expected a statement
    |
621 |             )
622 |
623 |         except Exception as e:
    |                          ^
624 |             self.logger_service.log_error(
625 |                 "Unexpected error during progress bar reparenting",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:623:31: SyntaxError: Expected an expression
    |
621 |             )
622 |
623 |         except Exception as e:
    |                               ^
624 |             self.logger_service.log_error(
625 |                 "Unexpected error during progress bar reparenting",
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:624:1: SyntaxError: Unexpected indentation
    |
623 |         except Exception as e:
624 |             self.logger_service.log_error(
    | ^
625 |                 "Unexpected error during progress bar reparenting",
626 |                 {
    |

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:628:36: COM812 Trailing comma missing
    |
626 |                 {
627 |                     "progress_bar": str(type(request.progress_bar).__name__),
628 |                     "error": str(e)
    |                                    ^ COM812
629 |                 },
630 |             )
    |
    = help: Add trailing comma

src_refactored\application\progress_management\use_cases\reparent_progress_bar_use_case.py:640:1: SyntaxError: unindent does not match any outer indentation level
    |
638 |             )
639 |
640 |     def _create_error_response(
    | ^
641 |         self,
642 |         result: ReparentResult,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:85:46: SyntaxError: Expected an expression or a ')'
   |
83 |     def __post_init__(self):
84 |         if self.timestamp is None:
85 |             self.timestamp = datetime.utcnow(,
   |                                              ^
86 |     )
87 |         if self.configuration is None:
   |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:329:63: SyntaxError: Expected an indented block after `if` statement
    |
328 |             try:
329 |                 if request.configuration.store_original_state:
    |                                                               ^
330 | original_ui_state = (
331 |     self.ui_state_service.store_original_ui_state(request.parent_window)
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:330:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
328 |             try:
329 |                 if request.configuration.store_original_state:
330 | original_ui_state = (
    | ^
331 |     self.ui_state_service.store_original_ui_state(request.parent_window)
332 |     )
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:334:1: SyntaxError: Unexpected indentation
    |
332 |     )
333 |
334 |                 if request.configuration.disable_ui_elements:
    | ^
335 |                     disabled_state = self.ui_state_service.disable_ui_elements(
336 |                         request.parent_window,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:342:13: SyntaxError: unindent does not match any outer indentation level
    |
340 |                     ui_elements_disabled = True
341 |
342 |             except Exception as e:
    |             ^
343 |                 return self._create_error_response(
344 |                     StartResult.UI_SETUP_ERROR,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:342:30: SyntaxError: Expected a statement
    |
340 |                     ui_elements_disabled = True
341 |
342 |             except Exception as e:
    |                              ^
343 |                 return self._create_error_response(
344 |                     StartResult.UI_SETUP_ERROR,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:342:35: SyntaxError: Expected an expression
    |
340 |                     ui_elements_disabled = True
341 |
342 |             except Exception as e:
    |                                   ^
343 |                 return self._create_error_response(
344 |                     StartResult.UI_SETUP_ERROR,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:343:1: SyntaxError: Unexpected indentation
    |
342 |             except Exception as e:
343 |                 return self._create_error_response(
    | ^
344 |                     StartResult.UI_SETUP_ERROR,
345 |                     StartPhase.UI_STATE_SETUP,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:352:1: SyntaxError: unindent does not match any outer indentation level
    |
351 |             # Phase 4: Progress Bar Setup
352 |             self.progress_service.update_progress(session_id, StartPhase.PROGRESS_BAR_SETUP, 42.9)
    | ^
353 |
354 |             progress_bar_info = None
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:354:1: SyntaxError: Unexpected indentation
    |
352 |             self.progress_service.update_progress(session_id, StartPhase.PROGRESS_BAR_SETUP, 42.9)
353 |
354 |             progress_bar_info = None
    | ^
355 |             progress_area_expanded = False
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:361:81: SyntaxError: Expected an indented block after `if` statement
    |
359 |                 progress_bar = self.progress_bar_service.get_progress_bar(request.parent_window)
360 |
361 |                 if progress_bar and request.configuration.reparent_progress_bar:
    |                                                                                 ^
362 |                     # Store original progress bar state
363 | progress_bar_info = (
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:363:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
361 |                 if progress_bar and request.configuration.reparent_progress_bar:
362 |                     # Store original progress bar state
363 | progress_bar_info = (
    | ^
364 |     self.progress_bar_service.store_progress_bar_state(progress_bar))
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:367:1: SyntaxError: Unexpected indentation
    |
366 |                     # Expand progress area if needed
367 |                     if request.configuration.expand_progress_area and request.target_widget:
    | ^
368 |                         if self.ui_state_service.expand_progress_area(
369 |                             request.target_widget,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:376:101: E501 Line too long (116 > 100)
    |
374 |                     # Reparent progress bar
375 |                     if request.target_widget:
376 |                         if not self.progress_bar_service.reparent_progress_bar(progress_bar, request.target_widget):
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
377 |                             self.logger_service.log_warning(
378 |                                 "Failed to reparent progress bar",
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:381:30: SyntaxError: Expected an indented block after `else` clause
    |
379 |                                 {"session_id": request.session_id},
380 |                             )
381 |                         else:
    |                              ^
382 | progress_bar_info.current_location = (
383 |     request.configuration.progress_bar_location)
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:382:1: SyntaxError: Expected a statement
    |
380 |                             )
381 |                         else:
382 | progress_bar_info.current_location = (
    | ^
383 |     request.configuration.progress_bar_location)
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:385:1: SyntaxError: Unexpected indentation
    |
383 |     request.configuration.progress_bar_location)
384 |
385 |             except Exception as e:
    | ^
386 |                 return self._create_error_response(
387 |                     StartResult.PROGRESS_BAR_ERROR,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:385:13: SyntaxError: Expected a statement
    |
383 |     request.configuration.progress_bar_location)
384 |
385 |             except Exception as e:
    |             ^
386 |                 return self._create_error_response(
387 |                     StartResult.PROGRESS_BAR_ERROR,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:385:30: SyntaxError: Expected a statement
    |
383 |     request.configuration.progress_bar_location)
384 |
385 |             except Exception as e:
    |                              ^
386 |                 return self._create_error_response(
387 |                     StartResult.PROGRESS_BAR_ERROR,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:385:35: SyntaxError: Expected an expression
    |
383 |     request.configuration.progress_bar_location)
384 |
385 |             except Exception as e:
    |                                   ^
386 |                 return self._create_error_response(
387 |                     StartResult.PROGRESS_BAR_ERROR,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:386:1: SyntaxError: Unexpected indentation
    |
385 |             except Exception as e:
386 |                 return self._create_error_response(
    | ^
387 |                     StartResult.PROGRESS_BAR_ERROR,
388 |                     StartPhase.PROGRESS_BAR_SETUP,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:395:13: SyntaxError: Expected a statement
    |
394 |             # Phase 5: Layout Configuration
395 |             self.progress_service.update_progress(session_id, StartPhase.LAYOUT_CONFIGURATION, 57.2)
    |             ^
396 |
397 |             try:
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:415:101: E501 Line too long (101 > 100)
    |
414 |             # Phase 6: Visibility Management
415 |             self.progress_service.update_progress(session_id, StartPhase.VISIBILITY_MANAGEMENT, 71.5)
    |                                                                                                     ^ E501
416 |
417 |             try:
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:471:1: SyntaxError: unindent does not match any outer indentation level
    |
469 |             )
470 |
471 |         except Exception as e:
    | ^
472 |             self.logger_service.log_error(
473 |                 "Unexpected error during progress session start",
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:471:9: SyntaxError: Expected a statement
    |
469 |             )
470 |
471 |         except Exception as e:
    |         ^
472 |             self.logger_service.log_error(
473 |                 "Unexpected error during progress session start",
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:471:26: SyntaxError: Expected a statement
    |
469 |             )
470 |
471 |         except Exception as e:
    |                          ^
472 |             self.logger_service.log_error(
473 |                 "Unexpected error during progress session start",
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:471:31: SyntaxError: Expected an expression
    |
469 |             )
470 |
471 |         except Exception as e:
    |                               ^
472 |             self.logger_service.log_error(
473 |                 "Unexpected error during progress session start",
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:472:1: SyntaxError: Unexpected indentation
    |
471 |         except Exception as e:
472 |             self.logger_service.log_error(
    | ^
473 |                 "Unexpected error during progress session start",
474 |                 {"session_id": request.session_id, "error": str(e)},
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:485:1: SyntaxError: unindent does not match any outer indentation level
    |
483 |             )
484 |
485 |     def get_active_session(self, session_id: str,
    | ^
486 |     ) -> ProgressSessionState | None:
487 |         """Get active session by ID."""
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:490:1: SyntaxError: unindent does not match any outer indentation level
    |
488 |         return self._active_sessions.get(session_id)
489 |
490 |     def get_all_active_sessions(self) -> dict[str, ProgressSessionState]:
    | ^
491 |         """Get all active sessions."""
492 |         return self._active_sessions.copy()
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:494:1: SyntaxError: unindent does not match any outer indentation level
    |
492 |         return self._active_sessions.copy()
493 |
494 |     def _create_error_response(
    | ^
495 |         self,
496 |         result: StartResult,
    |

src_refactored\application\progress_management\use_cases\start_progress_session_use_case.py:512:10: SyntaxError: Expected dedent, found end of file
    |
510 |             error_message=error_message,
511 |             execution_time_ms=execution_time,
512 |         )
    |          ^
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:205:101: E501 Line too long (103 > 100)
    |
203 |         ...
204 |
205 | def animate_progress_change(self, widget: Any, from_value: float, to_value: float, duration_ms: int = (
    |                                                                                                     ^^^ E501
206 |     200,),
207 |     ) -> bool:
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:211:1: SyntaxError: unindent does not match any outer indentation level
    |
209 |         ...
210 |
211 |     def update_progress_color(self, widget: Any, value: float,
    | ^
212 |     ) -> bool:
213 |         """Update progress color based on value."""
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:395:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
394 |             # Validate progress value
395 | validation_errors = (
    | ^
396 |     self.progress_validation_service.validate_progress_value(request.progress_value))
397 |             if validation_errors:
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:397:1: SyntaxError: Unexpected indentation
    |
395 | validation_errors = (
396 |     self.progress_validation_service.validate_progress_value(request.progress_value))
397 |             if validation_errors:
    | ^
398 |                 return self._create_error_response(
399 |                     UpdateResult.INVALID_PROGRESS_VALUE,
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:447:101: E501 Line too long (107 > 100)
    |
446 |                 # Update progress bar value
447 |                 if not self.progress_bar_service.update_progress_bar_value(progress_bar, normalized_value):
    |                                                                                                     ^^^^^^^ E501
448 |                     return self._create_error_response(
449 |                         UpdateResult.PROGRESS_BAR_ERROR,
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:515:101: E501 Line too long (102 > 100)
    |
514 |             # Phase 6: State Synchronization
515 |             self.progress_service.update_progress(session_id, UpdatePhase.STATE_SYNCHRONIZATION, 71.5)
    |                                                                                                     ^^ E501
516 |
517 |             try:
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:519:101: E501 Line too long (102 > 100)
    |
517 |             try:
518 |                 # Update session progress state
519 |                 self.state_service.update_session_progress(request.session_id, request.progress_value)
    |                                                                                                     ^^ E501
520 |
521 |                 # Increment update count
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:526:101: E501 Line too long (101 > 100)
    |
524 |                 # Record update time for throttling
525 |                 if request.configuration.throttle_updates:
526 |                     self.throttling_service.record_update_time(request.session_id, request.timestamp)
    |                                                                                                     ^ E501
527 |
528 |             except Exception as e:
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:572:1: SyntaxError: unindent does not match any outer indentation level
    |
570 |             )
571 |
572 |         except Exception as e:
    | ^
573 |             self.logger_service.log_error(
574 |                 "Unexpected error during progress update",
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:572:9: SyntaxError: Expected a statement
    |
570 |             )
571 |
572 |         except Exception as e:
    |         ^
573 |             self.logger_service.log_error(
574 |                 "Unexpected error during progress update",
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:572:26: SyntaxError: Expected a statement
    |
570 |             )
571 |
572 |         except Exception as e:
    |                          ^
573 |             self.logger_service.log_error(
574 |                 "Unexpected error during progress update",
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:572:31: SyntaxError: Expected an expression
    |
570 |             )
571 |
572 |         except Exception as e:
    |                               ^
573 |             self.logger_service.log_error(
574 |                 "Unexpected error during progress update",
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:573:1: SyntaxError: Unexpected indentation
    |
572 |         except Exception as e:
573 |             self.logger_service.log_error(
    | ^
574 |                 "Unexpected error during progress update",
575 |                 {"session_id": request.session_id, "error": str(e)},
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:586:1: SyntaxError: unindent does not match any outer indentation level
    |
584 |             )
585 |
586 |     def _create_error_response(
    | ^
587 |         self,
588 |         result: UpdateResult,
    |

src_refactored\application\progress_management\use_cases\update_progress_use_case.py:604:10: SyntaxError: Expected dedent, found end of file
    |
602 |             error_message=error_message,
603 |             execution_time_ms=execution_time,
604 |         )
    |          ^
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:145:101: E501 Line too long (103 > 100)
    |
143 |                         progress = int((i / total_changes) * 100,
144 |     )
145 |                         request.progress_callback(progress, f"Applying {change.setting_type.value}...")
    |                                                                                                     ^^^ E501
146 |
147 |                     # Apply the change
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:171:31: SyntaxError: Expected an indented block after `if` statement
    |
170 |             # Determine final state
171 |             if failed_changes:
    |                               ^
172 | final_state = (
173 |     ApplicationState.ERROR if not applied_changes else ApplicationState.COMPLETED)
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:172:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
170 |             # Determine final state
171 |             if failed_changes:
172 | final_state = (
    | ^
173 |     ApplicationState.ERROR if not applied_changes else ApplicationState.COMPLETED)
174 |             else:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:174:1: SyntaxError: Unexpected indentation
    |
172 | final_state = (
173 |     ApplicationState.ERROR if not applied_changes else ApplicationState.COMPLETED)
174 |             else:
    | ^
175 |                 final_state = ApplicationState.COMPLETED
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:174:13: SyntaxError: Expected a statement
    |
172 | final_state = (
173 |     ApplicationState.ERROR if not applied_changes else ApplicationState.COMPLETED)
174 |             else:
    |             ^
175 |                 final_state = ApplicationState.COMPLETED
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:174:17: SyntaxError: Expected a statement
    |
172 | final_state = (
173 |     ApplicationState.ERROR if not applied_changes else ApplicationState.COMPLETED)
174 |             else:
    |                 ^
175 |                 final_state = ApplicationState.COMPLETED
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:174:18: SyntaxError: Expected a statement
    |
172 | final_state = (
173 |     ApplicationState.ERROR if not applied_changes else ApplicationState.COMPLETED)
174 |             else:
    |                  ^
175 |                 final_state = ApplicationState.COMPLETED
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:175:1: SyntaxError: Unexpected indentation
    |
173 |     ApplicationState.ERROR if not applied_changes else ApplicationState.COMPLETED)
174 |             else:
175 |                 final_state = ApplicationState.COMPLETED
    | ^
176 |
177 |             self.current_state = final_state
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:177:13: SyntaxError: Expected a statement
    |
175 |                 final_state = ApplicationState.COMPLETED
176 |
177 |             self.current_state = final_state
    |             ^
178 |
179 |             return ApplySettingsResponse(
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:189:1: SyntaxError: unindent does not match any outer indentation level
    |
187 |             )
188 |
189 |         except Exception as e:
    | ^
190 |             self.current_state = ApplicationState.ERROR
191 |             return ApplySettingsResponse(
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:189:9: SyntaxError: Expected a statement
    |
187 |             )
188 |
189 |         except Exception as e:
    |         ^
190 |             self.current_state = ApplicationState.ERROR
191 |             return ApplySettingsResponse(
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:189:26: SyntaxError: Expected a statement
    |
187 |             )
188 |
189 |         except Exception as e:
    |                          ^
190 |             self.current_state = ApplicationState.ERROR
191 |             return ApplySettingsResponse(
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:189:31: SyntaxError: Expected an expression
    |
187 |             )
188 |
189 |         except Exception as e:
    |                               ^
190 |             self.current_state = ApplicationState.ERROR
191 |             return ApplySettingsResponse(
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:190:1: SyntaxError: Unexpected indentation
    |
189 |         except Exception as e:
190 |             self.current_state = ApplicationState.ERROR
    | ^
191 |             return ApplySettingsResponse(
192 |                 success=False,
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:197:37: COM812 Trailing comma missing
    |
195 |                 final_state=ApplicationState.ERROR,
196 |                 restart_required=False,
197 |                 error_message=str(e)
    |                                     ^ COM812
198 |             )
    |
    = help: Add trailing comma

src_refactored\application\settings\use_cases\apply_settings_use_case.py:200:1: SyntaxError: unindent does not match any outer indentation level
    |
198 |             )
199 |
200 |     def _sort_changes_by_priority(self, changes: list[SettingChange]) -> list[SettingChange]:
    | ^
201 |         """Sort changes by application priority."""
202 |         # Priority order: downloads first, then worker reinits, then simple changes
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:213:1: SyntaxError: unindent does not match any outer indentation level
    |
211 |         return sorted(changes, key=priority_key)
212 |
213 |     def _apply_single_change(self, change: SettingChange, request: ApplySettingsRequest,
    | ^
214 |     ) -> tuple[bool, str | None]:
215 |         """Apply a single setting change."""
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:239:5: SyntaxError: unindent does not match any outer indentation level
    |
237 |             return False, f"Error applying {change.setting_type.value}: {e!s}"
238 |
239 |     def _apply_model_change(self, change: SettingChange, request: ApplySettingsRequest,
    |     ^
240 |     ) -> tuple[bool, str | None]:
241 |         """Apply model change."""
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:252:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
250 |                         request.progress_callback(percentage, f"Downloading {change.new_value}...")
251 |
252 | success = (
    | ^
253 |     self.download_manager.start_model_download(change.new_value, download_progress))
254 |                 if not success:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:254:1: SyntaxError: Unexpected indentation
    |
252 | success = (
253 |     self.download_manager.start_model_download(change.new_value, download_progress))
254 |                 if not success:
    | ^
255 |                     return False, f"Failed to download model {change.new_value}"
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:258:13: SyntaxError: unindent does not match any outer indentation level
    |
257 |             # Update parent window
258 |             if self.parent_window and hasattr(self.parent_window, "selected_model"):
    |             ^
259 |                 self.parent_window.selected_model = change.new_value
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:262:1: SyntaxError: unindent does not match any outer indentation level
    |
261 |             # Reinitialize workers if required
262 |             if change.requires_worker_reinit:
    | ^
263 |                 self.current_state = ApplicationState.REINITIALIZING
264 |                 if self.worker_manager:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:265:72: SyntaxError: Expected an expression or a ')'
    |
263 |                 self.current_state = ApplicationState.REINITIALIZING
264 |                 if self.worker_manager:
265 |                     success = self.worker_manager.reinitialize_workers(,
    |                                                                        ^
266 |     )
267 |                     if not success:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:273:13: SyntaxError: unindent does not match any outer indentation level
    |
272 |             # Show message
273 |             if request.message_callback:
    |             ^
274 |                 if change.new_value == "whisper-turbo":
275 |                     message = "Using standard Whisper Turbo model"
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:285:1: SyntaxError: unindent does not match any outer indentation level
    |
283 |     )
284 |
285 |             return True, None
    | ^
286 |
287 |         except Exception as e:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:287:1: SyntaxError: Unexpected indentation
    |
285 |             return True, None
286 |
287 |         except Exception as e:
    | ^
288 |             return False, str(e)
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:287:9: SyntaxError: Expected a statement
    |
285 |             return True, None
286 |
287 |         except Exception as e:
    |         ^
288 |             return False, str(e)
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:287:26: SyntaxError: Expected a statement
    |
285 |             return True, None
286 |
287 |         except Exception as e:
    |                          ^
288 |             return False, str(e)
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:287:31: SyntaxError: Expected an expression
    |
285 |             return True, None
286 |
287 |         except Exception as e:
    |                               ^
288 |             return False, str(e)
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:288:1: SyntaxError: Unexpected indentation
    |
287 |         except Exception as e:
288 |             return False, str(e)
    | ^
289 |
290 |     def _apply_quantization_change(self,
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:290:5: SyntaxError: unindent does not match any outer indentation level
    |
288 |             return False, str(e)
289 |
290 |     def _apply_quantization_change(self,
    |     ^
291 |     change: SettingChange, request: ApplySettingsRequest,
292 |     ) -> tuple[bool, str | None]:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:315:5: SyntaxError: unindent does not match any outer indentation level
    |
313 |             return False, str(e)
314 |
315 |     def _apply_recording_sound_change(self,
    |     ^
316 |     change: SettingChange, request: ApplySettingsRequest,
317 |     ) -> tuple[bool, str | None]:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:339:5: SyntaxError: unindent does not match any outer indentation level
    |
337 |             return False, str(e)
338 |
339 |     def _apply_srt_output_change(self,
    |     ^
340 |     change: SettingChange, request: ApplySettingsRequest,
341 |     ) -> tuple[bool, str | None]:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:359:5: SyntaxError: unindent does not match any outer indentation level
    |
357 |             return False, str(e)
358 |
359 |     def _apply_hotkey_change(self, change: SettingChange, request: ApplySettingsRequest,
    |     ^
360 |     ) -> tuple[bool, str | None]:
361 |         """Apply hotkey change."""
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:376:5: SyntaxError: unindent does not match any outer indentation level
    |
374 |             return False, str(e)
375 |
376 |     def _apply_llm_settings_change(self,
    |     ^
377 |     change: SettingChange, request: ApplySettingsRequest,
378 |     ) -> tuple[bool, str | None]:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:393:5: SyntaxError: unindent does not match any outer indentation level
    |
391 |             return False, str(e)
392 |
393 |     def _apply_audio_settings_change(self,
    |     ^
394 |     change: SettingChange, request: ApplySettingsRequest,
395 |     ) -> tuple[bool, str | None]:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:411:5: SyntaxError: unindent does not match any outer indentation level
    |
409 |             return False, str(e)
410 |
411 |     def _apply_ui_settings_change(self,
    |     ^
412 |     change: SettingChange, request: ApplySettingsRequest,
413 |     ) -> tuple[bool, str | None]:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:428:5: SyntaxError: unindent does not match any outer indentation level
    |
426 |             return False, str(e)
427 |
428 |     def get_current_state(self) -> ApplicationState:
    |     ^
429 |         """Get the current application state."""
430 |         return self.current_state
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:432:1: SyntaxError: unindent does not match any outer indentation level
    |
430 |         return self.current_state
431 |
432 |     def cancel_operation(self) -> bool:
    | ^
433 |         """Cancel the current operation if possible."""
434 |         if self.current_state in [ApplicationState.DOWNLOADING, ApplicationState.APPLYING]:
    |

src_refactored\application\settings\use_cases\apply_settings_use_case.py:437:21: SyntaxError: Expected dedent, found end of file
    |
435 |             self.current_state = ApplicationState.IDLE
436 |             return True
437 |         return False
    |                     ^
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:167:17: SyntaxError: Expected ',', found name
    |
165 |                 "Starting settings export",
166 |                 export_path=str(request.export_path.value)
167 |                 format=request.export_format.value,
    |                 ^
168 |             )
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:181:101: E501 Line too long (105 > 100)
    |
180 |             # Phase 2: Validate settings
181 |             if not self._update_progress(request.progress_callback, ExportPhase.VALIDATING_SETTINGS, 20):
    |                                                                                                     ^^^^^ E501
182 |                 response.result = ExportResult.CANCELLED
183 |                 return response
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:185:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
183 |                 return response
184 |
185 | settings_validation = (
    | ^
186 |     self._validation.validate_settings_data(request.settings_to_export))
187 |             if not settings_validation.is_success:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:187:1: SyntaxError: Unexpected indentation
    |
185 | settings_validation = (
186 |     self._validation.validate_settings_data(request.settings_to_export))
187 |             if not settings_validation.is_success:
    | ^
188 | response.error_message = (
189 |     f"Settings validation failed: {settings_validation.error_message}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:187:51: SyntaxError: Expected an indented block after `if` statement
    |
185 | settings_validation = (
186 |     self._validation.validate_settings_data(request.settings_to_export))
187 |             if not settings_validation.is_success:
    |                                                   ^
188 | response.error_message = (
189 |     f"Settings validation failed: {settings_validation.error_message}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:188:1: SyntaxError: Expected a statement
    |
186 |     self._validation.validate_settings_data(request.settings_to_export))
187 |             if not settings_validation.is_success:
188 | response.error_message = (
    | ^
189 |     f"Settings validation failed: {settings_validation.error_message}")
190 |                 return response
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:190:1: SyntaxError: Unexpected indentation
    |
188 | response.error_message = (
189 |     f"Settings validation failed: {settings_validation.error_message}")
190 |                 return response
    | ^
191 |
192 |             # Phase 3: Prepare data for export
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:193:1: SyntaxError: unindent does not match any outer indentation level
    |
192 |             # Phase 3: Prepare data for export
193 |             if not self._update_progress(request.progress_callback, ExportPhase.PREPARING_DATA, 40):
    | ^
194 |                 response.result = ExportResult.CANCELLED
195 |                 return response
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:197:1: SyntaxError: unindent does not match any outer indentation level
    |
195 |                 return response
196 |
197 |             export_data_result = self._prepare_export_data(request)
    | ^
198 |             if not export_data_result.is_success:
199 | response.error_message = (
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:198:1: SyntaxError: Unexpected indentation
    |
197 |             export_data_result = self._prepare_export_data(request)
198 |             if not export_data_result.is_success:
    | ^
199 | response.error_message = (
200 |     f"Data preparation failed: {export_data_result.error_message}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:198:50: SyntaxError: Expected an indented block after `if` statement
    |
197 |             export_data_result = self._prepare_export_data(request)
198 |             if not export_data_result.is_success:
    |                                                  ^
199 | response.error_message = (
200 |     f"Data preparation failed: {export_data_result.error_message}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:201:1: SyntaxError: Unexpected indentation
    |
199 | response.error_message = (
200 |     f"Data preparation failed: {export_data_result.error_message}")
201 |                 return response
    | ^
202 |
203 |             export_data = export_data_result.value
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:203:1: SyntaxError: unindent does not match any outer indentation level
    |
201 |                 return response
202 |
203 |             export_data = export_data_result.value
    | ^
204 |             response.exported_settings_count = len(export_data)
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:204:1: SyntaxError: Unexpected indentation
    |
203 |             export_data = export_data_result.value
204 |             response.exported_settings_count = len(export_data)
    | ^
205 |
206 |             # Phase 4: Backup existing file if needed
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:227:101: E501 Line too long (106 > 100)
    |
225 |             # Phase 6: Verify export if enabled
226 |             if request.configuration.verify_export:
227 |                 if not self._update_progress(request.progress_callback, ExportPhase.VERIFYING_EXPORT, 80):
    |                                                                                                     ^^^^^^ E501
228 |                     response.result = ExportResult.CANCELLED
229 |                     return response
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:231:1: SyntaxError: Expected a statement
    |
229 |                     return response
230 |
231 | verify_result = (
    | ^
232 |     self._validation.verify_exported_file(request.export_path, export_data))
233 |                 if not verify_result.is_success:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:233:1: SyntaxError: Unexpected indentation
    |
231 | verify_result = (
232 |     self._validation.verify_exported_file(request.export_path, export_data))
233 |                 if not verify_result.is_success:
    | ^
234 |                     response.warnings.append(f"Export verification failed: {verify_result.error_mess\
235 |     age}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:234:101: E501 Line too long (101 > 100)
    |
232 |     self._validation.verify_exported_file(request.export_path, export_data))
233 |                 if not verify_result.is_success:
234 |                     response.warnings.append(f"Export verification failed: {verify_result.error_mess\
    |                                                                                                     ^ E501
235 |     age}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:235:5: SyntaxError: f-string: expecting '}'
    |
233 |                 if not verify_result.is_success:
234 |                     response.warnings.append(f"Export verification failed: {verify_result.error_mess\
235 |     age}")
    |     ^
236 |
237 |             # Phase 7: Complete
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:235:8: SyntaxError: f-string: single '}' is not allowed
    |
233 |                 if not verify_result.is_success:
234 |                     response.warnings.append(f"Export verification failed: {verify_result.error_mess\
235 |     age}")
    |        ^
236 |
237 |             # Phase 7: Complete
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:235:9: SyntaxError: Expected ',', found FStringEnd
    |
233 |                 if not verify_result.is_success:
234 |                     response.warnings.append(f"Export verification failed: {verify_result.error_mess\
235 |     age}")
    |         ^
236 |
237 |             # Phase 7: Complete
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:238:13: SyntaxError: unindent does not match any outer indentation level
    |
237 |             # Phase 7: Complete
238 |             if not self._update_progress(request.progress_callback, ExportPhase.COMPLETED, 100):
    |             ^
239 |                 response.result = ExportResult.CANCELLED
240 |                 return response
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:243:1: SyntaxError: unindent does not match any outer indentation level
    |
242 |             # Get file size
243 |             size_result = self._file_system.get_file_size(Path(request.export_path.value))
    | ^
244 |             if size_result.is_success:
245 |                 response.file_size_bytes = size_result.value
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:244:1: SyntaxError: Unexpected indentation
    |
242 |             # Get file size
243 |             size_result = self._file_system.get_file_size(Path(request.export_path.value))
244 |             if size_result.is_success:
    | ^
245 |                 response.file_size_bytes = size_result.value
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:254:1: SyntaxError: Unexpected indentation
    |
253 |             # Add metadata
254 |             response.metadata = {
    | ^
255 |                 "export_timestamp": start_time.isoformat()
256 |                 "format": request.export_format.value,
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:256:17: SyntaxError: Expected ',', found string
    |
254 |             response.metadata = {
255 |                 "export_timestamp": start_time.isoformat()
256 |                 "format": request.export_format.value,
    |                 ^
257 |                 "configuration": {
258 |                     "include_sensitive_data": request.configuration.include_sensitive_data,
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:268:17: SyntaxError: Expected ',', found name
    |
266 |                 "Settings export completed successfully",
267 |                 export_path=str(request.export_path.value)
268 |                 settings_count=response.exported_settings_count,
    |                 ^
269 |                 file_size=response.file_size_bytes,
270 |                 duration_ms=response.export_duration_ms,
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:273:1: SyntaxError: unindent does not match any outer indentation level
    |
271 |             )
272 |
273 |         except Exception as e:
    | ^
274 |             self._logger.log_error(f"Unexpected error during settings export: {e!s}")
275 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:273:9: SyntaxError: Expected a statement
    |
271 |             )
272 |
273 |         except Exception as e:
    |         ^
274 |             self._logger.log_error(f"Unexpected error during settings export: {e!s}")
275 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:273:26: SyntaxError: Expected a statement
    |
271 |             )
272 |
273 |         except Exception as e:
    |                          ^
274 |             self._logger.log_error(f"Unexpected error during settings export: {e!s}")
275 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:273:31: SyntaxError: Expected an expression
    |
271 |             )
272 |
273 |         except Exception as e:
    |                               ^
274 |             self._logger.log_error(f"Unexpected error during settings export: {e!s}")
275 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:274:1: SyntaxError: Unexpected indentation
    |
273 |         except Exception as e:
274 |             self._logger.log_error(f"Unexpected error during settings export: {e!s}")
    | ^
275 |             response.error_message = f"Unexpected error: {e!s}"
276 |             response.result = ExportResult.FAILED
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:278:1: SyntaxError: unindent does not match any outer indentation level
    |
276 |             response.result = ExportResult.FAILED
277 |
278 |         return response
    | ^
279 |
280 |     def _validate_request(self, request: ExportSettingsRequest,
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:280:1: SyntaxError: Unexpected indentation
    |
278 |         return response
279 |
280 |     def _validate_request(self, request: ExportSettingsRequest,
    | ^
281 |     ) -> Result[None]:
282 |         """Validate the export request"""
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:284:1: SyntaxError: Expected a statement
    |
282 |         """Validate the export request"""
283 |         # Validate export path
284 | path_validation = (
    | ^
285 |     self._validation.validate_export_path(request.export_path, request.export_format))
286 |         if not path_validation.is_success:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:286:1: SyntaxError: Unexpected indentation
    |
284 | path_validation = (
285 |     self._validation.validate_export_path(request.export_path, request.export_format))
286 |         if not path_validation.is_success:
    | ^
287 |             return path_validation
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:295:1: SyntaxError: unindent does not match any outer indentation level
    |
293 |         return Result.success(None)
294 |
295 |     def _prepare_export_data(self, request: ExportSettingsRequest,
    | ^
296 |     ) -> Result[dict[str, Any]]:
297 |         """Prepare settings data for export"""
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:304:101: E501 Line too long (137 > 100)
    |
302 | …ation.quantization.value,
303 | …nd_configuration.enabled,
304 | …onfiguration.file_path.value) if settings.sound_configuration.file_path else None,
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
305 | …tion.srt_enabled,
306 | …nding.key_combination.value)
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:307:17: SyntaxError: Expected ',', found string
    |
305 |                 "output_srt": settings.output_configuration.srt_enabled,
306 |                 "recording_key": str(settings.hotkey_binding.key_combination.value)
307 |                 "llm_enabled": settings.llm_configuration.enabled,
    |                 ^
308 |                 "llm_model": settings.llm_configuration.model_name,
309 |                 "llm_quantization": settings.llm_configuration.quantization.value,
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:317:21: SyntaxError: Expected ',', found string
    |
315 |                 export_data["_metadata"] = {
316 |                     "export_timestamp": datetime.utcnow().isoformat()
317 |                     "export_format": request.export_format.value,
    |                     ^
318 |                     "application_version": "1.0.0",  # Should come from app config
319 |                     "settings_version": "1.0",
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:332:5: SyntaxError: unindent does not match any outer indentation level
    |
330 |             return Result.failure(f"Failed to prepare export data: {e!s}")
331 |
332 |     def _backup_existing_file(self, export_path: FilePath,
    |     ^
333 |     ) -> Result[Path]:
334 |         """Create backup of existing file if it exists"""
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:342:1: SyntaxError: unindent does not match any outer indentation level
    |
340 |         return self._file_system.backup_file(file_path)
341 |
342 |     def _write_export_file(
    | ^
343 |     self,
344 |     request: ExportSettingsRequest,
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:350:59: SyntaxError: Expected an indented block after `if` statement
    |
348 |         try:
349 |             # Serialize data based on format
350 |             if request.export_format == ExportFormat.JSON:
    |                                                           ^
351 | content_result = (
352 |     self._serialization.serialize_to_json(data, request.configuration.pretty_format))
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:351:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
349 |             # Serialize data based on format
350 |             if request.export_format == ExportFormat.JSON:
351 | content_result = (
    | ^
352 |     self._serialization.serialize_to_json(data, request.configuration.pretty_format))
353 |             elif request.export_format == ExportFormat.XML:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:353:1: SyntaxError: Unexpected indentation
    |
351 | content_result = (
352 |     self._serialization.serialize_to_json(data, request.configuration.pretty_format))
353 |             elif request.export_format == ExportFormat.XML:
    | ^
354 | content_result = (
355 |     self._serialization.serialize_to_xml(data, request.configuration.pretty_format))
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:353:13: SyntaxError: Expected a statement
    |
351 | content_result = (
352 |     self._serialization.serialize_to_json(data, request.configuration.pretty_format))
353 |             elif request.export_format == ExportFormat.XML:
    |             ^
354 | content_result = (
355 |     self._serialization.serialize_to_xml(data, request.configuration.pretty_format))
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:353:18: SyntaxError: Invalid annotated assignment target
    |
351 | content_result = (
352 |     self._serialization.serialize_to_json(data, request.configuration.pretty_format))
353 |             elif request.export_format == ExportFormat.XML:
    |                  ^
354 | content_result = (
355 |     self._serialization.serialize_to_xml(data, request.configuration.pretty_format))
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:353:60: SyntaxError: Expected an expression
    |
351 | content_result = (
352 |     self._serialization.serialize_to_json(data, request.configuration.pretty_format))
353 |             elif request.export_format == ExportFormat.XML:
    |                                                            ^
354 | content_result = (
355 |     self._serialization.serialize_to_xml(data, request.configuration.pretty_format))
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:356:1: SyntaxError: Unexpected indentation
    |
354 | content_result = (
355 |     self._serialization.serialize_to_xml(data, request.configuration.pretty_format))
356 |             elif request.export_format == ExportFormat.YAML:
    | ^
357 |                 content_result = self._serialization.serialize_to_yaml(data)
358 |             elif request.export_format == ExportFormat.INI:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:356:13: SyntaxError: Expected a statement
    |
354 | content_result = (
355 |     self._serialization.serialize_to_xml(data, request.configuration.pretty_format))
356 |             elif request.export_format == ExportFormat.YAML:
    |             ^
357 |                 content_result = self._serialization.serialize_to_yaml(data)
358 |             elif request.export_format == ExportFormat.INI:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:356:18: SyntaxError: Invalid annotated assignment target
    |
354 | content_result = (
355 |     self._serialization.serialize_to_xml(data, request.configuration.pretty_format))
356 |             elif request.export_format == ExportFormat.YAML:
    |                  ^
357 |                 content_result = self._serialization.serialize_to_yaml(data)
358 |             elif request.export_format == ExportFormat.INI:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:356:61: SyntaxError: Expected an expression
    |
354 | content_result = (
355 |     self._serialization.serialize_to_xml(data, request.configuration.pretty_format))
356 |             elif request.export_format == ExportFormat.YAML:
    |                                                             ^
357 |                 content_result = self._serialization.serialize_to_yaml(data)
358 |             elif request.export_format == ExportFormat.INI:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:357:1: SyntaxError: Unexpected indentation
    |
355 |     self._serialization.serialize_to_xml(data, request.configuration.pretty_format))
356 |             elif request.export_format == ExportFormat.YAML:
357 |                 content_result = self._serialization.serialize_to_yaml(data)
    | ^
358 |             elif request.export_format == ExportFormat.INI:
359 |                 content_result = self._serialization.serialize_to_ini(data)
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:358:13: SyntaxError: Expected a statement
    |
356 |             elif request.export_format == ExportFormat.YAML:
357 |                 content_result = self._serialization.serialize_to_yaml(data)
358 |             elif request.export_format == ExportFormat.INI:
    |             ^
359 |                 content_result = self._serialization.serialize_to_ini(data)
360 |             else:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:358:18: SyntaxError: Invalid annotated assignment target
    |
356 |             elif request.export_format == ExportFormat.YAML:
357 |                 content_result = self._serialization.serialize_to_yaml(data)
358 |             elif request.export_format == ExportFormat.INI:
    |                  ^
359 |                 content_result = self._serialization.serialize_to_ini(data)
360 |             else:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:358:60: SyntaxError: Expected an expression
    |
356 |             elif request.export_format == ExportFormat.YAML:
357 |                 content_result = self._serialization.serialize_to_yaml(data)
358 |             elif request.export_format == ExportFormat.INI:
    |                                                            ^
359 |                 content_result = self._serialization.serialize_to_ini(data)
360 |             else:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:359:1: SyntaxError: Unexpected indentation
    |
357 |                 content_result = self._serialization.serialize_to_yaml(data)
358 |             elif request.export_format == ExportFormat.INI:
359 |                 content_result = self._serialization.serialize_to_ini(data)
    | ^
360 |             else:
361 |                 return Result.failure(f"Unsupported export format: {request.export_format}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:360:13: SyntaxError: Expected a statement
    |
358 |             elif request.export_format == ExportFormat.INI:
359 |                 content_result = self._serialization.serialize_to_ini(data)
360 |             else:
    |             ^
361 |                 return Result.failure(f"Unsupported export format: {request.export_format}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:360:17: SyntaxError: Expected a statement
    |
358 |             elif request.export_format == ExportFormat.INI:
359 |                 content_result = self._serialization.serialize_to_ini(data)
360 |             else:
    |                 ^
361 |                 return Result.failure(f"Unsupported export format: {request.export_format}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:360:18: SyntaxError: Expected a statement
    |
358 |             elif request.export_format == ExportFormat.INI:
359 |                 content_result = self._serialization.serialize_to_ini(data)
360 |             else:
    |                  ^
361 |                 return Result.failure(f"Unsupported export format: {request.export_format}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:361:1: SyntaxError: Unexpected indentation
    |
359 |                 content_result = self._serialization.serialize_to_ini(data)
360 |             else:
361 |                 return Result.failure(f"Unsupported export format: {request.export_format}")
    | ^
362 |
363 |             if not content_result.is_success:
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:363:13: SyntaxError: Expected a statement
    |
361 |                 return Result.failure(f"Unsupported export format: {request.export_format}")
362 |
363 |             if not content_result.is_success:
    |             ^
364 |                 return Result.failure(f"Serialization failed: {content_result.error_message}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:376:1: SyntaxError: unindent does not match any outer indentation level
    |
374 |             return Result.success(None)
375 |
376 |         except Exception as e:
    | ^
377 |             return Result.failure(f"Failed to write export file: {e!s}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:376:9: SyntaxError: Expected a statement
    |
374 |             return Result.success(None)
375 |
376 |         except Exception as e:
    |         ^
377 |             return Result.failure(f"Failed to write export file: {e!s}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:376:26: SyntaxError: Expected a statement
    |
374 |             return Result.success(None)
375 |
376 |         except Exception as e:
    |                          ^
377 |             return Result.failure(f"Failed to write export file: {e!s}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:376:31: SyntaxError: Expected an expression
    |
374 |             return Result.success(None)
375 |
376 |         except Exception as e:
    |                               ^
377 |             return Result.failure(f"Failed to write export file: {e!s}")
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:377:1: SyntaxError: Unexpected indentation
    |
376 |         except Exception as e:
377 |             return Result.failure(f"Failed to write export file: {e!s}")
    | ^
378 |
379 |     def _update_progress(self, callback: ProgressCallback | None, phase: ExportPhase, percentage: int,
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:379:1: SyntaxError: unindent does not match any outer indentation level
    |
377 |             return Result.failure(f"Failed to write export file: {e!s}")
378 |
379 |     def _update_progress(self, callback: ProgressCallback | None, phase: ExportPhase, percentage: int,
    | ^
380 |     ) -> bool:
381 |         """Update progress and check for cancellation"""
    |

src_refactored\application\settings\use_cases\export_settings_use_case.py:379:101: E501 Line too long (102 > 100)
    |
377 |             return Result.failure(f"Failed to write export file: {e!s}")
378 |
379 |     def _update_progress(self, callback: ProgressCallback | None, phase: ExportPhase, percentage: int,
    |                                                                                                     ^^ E501
380 |     ) -> bool:
381 |         """Update progress and check for cancellation"""
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:203:17: SyntaxError: Expected ',', found name
    |
201 |                 "Starting settings import",
202 |                 import_path=str(request.import_path.value)
203 |                 format=request.import_format.value,
    |                 ^
204 |             )
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:225:2: SyntaxError: unindent does not match any outer indentation level
    |
223 |                 response.error_message = file_content_result.error_message
224 |                 response.result
225 |  = (
    |  ^
226 |     ImportResult.FILE_NOT_FOUND if "not found" in file_content_result.error_message.lower() else ImportResult.FAILED)
227 |                 return response
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:226:101: E501 Line too long (117 > 100)
    |
224 |                 response.result
225 |  = (
226 |     ImportResult.FILE_NOT_FOUND if "not found" in file_content_result.error_message.lower() else ImportResult.FAILED)
    |                                                                                                     ^^^^^^^^^^^^^^^^^ E501
227 |                 return response
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:227:1: SyntaxError: Unexpected indentation
    |
225 |  = (
226 |     ImportResult.FILE_NOT_FOUND if "not found" in file_content_result.error_message.lower() else ImportResult.FAILED)
227 |                 return response
    | ^
228 |
229 |             file_content = file_content_result.value
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:229:1: SyntaxError: unindent does not match any outer indentation level
    |
227 |                 return response
228 |
229 |             file_content = file_content_result.value
    | ^
230 |
231 |             # Detect format if auto-detect is enabled
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:232:1: SyntaxError: Unexpected indentation
    |
231 |             # Detect format if auto-detect is enabled
232 |             import_format = request.import_format
    | ^
233 |             if request.import_format == ImportFormat.AUTO_DETECT:
234 | format_result = (
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:233:66: SyntaxError: Expected an indented block after `if` statement
    |
231 |             # Detect format if auto-detect is enabled
232 |             import_format = request.import_format
233 |             if request.import_format == ImportFormat.AUTO_DETECT:
    |                                                                  ^
234 | format_result = (
235 |     self._file_system.detect_file_format(Path(request.import_path.value)))
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:236:1: SyntaxError: Unexpected indentation
    |
234 | format_result = (
235 |     self._file_system.detect_file_format(Path(request.import_path.value)))
236 |                 if format_result.is_success:
    | ^
237 |                     import_format = format_result.value
238 |                     response.detected_format = import_format
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:240:101: E501 Line too long (108 > 100)
    |
238 |                     response.detected_format = import_format
239 |                 else:
240 |                     response.warnings.append(f"Could not auto-detect format: {format_result.error_message}",
    |                                                                                                     ^^^^^^^^ E501
241 |     )
242 |                     import_format = ImportFormat.JSON  # Default fallback
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:245:13: SyntaxError: unindent does not match any outer indentation level
    |
244 |             # Phase 3: Parse data
245 |             if not self._update_progress(request.progress_callback, ImportPhase.PARSING_DATA, 30):
    |             ^
246 |                 response.result = ImportResult.CANCELLED
247 |                 return response
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:249:1: SyntaxError: unindent does not match any outer indentation level
    |
247 |                 return response
248 |
249 |             parsed_data_result = self._parse_file_content(file_content, import_format)
    | ^
250 |             if not parsed_data_result.is_success:
251 |                 response.error_message
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:250:1: SyntaxError: Unexpected indentation
    |
249 |             parsed_data_result = self._parse_file_content(file_content, import_format)
250 |             if not parsed_data_result.is_success:
    | ^
251 |                 response.error_message
252 |  = (
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:252:2: SyntaxError: unindent does not match any outer indentation level
    |
250 |             if not parsed_data_result.is_success:
251 |                 response.error_message
252 |  = (
    |  ^
253 |     f"Failed to parse {import_format.value} data: {parsed_data_result.error_message}")
254 |                 response.result = ImportResult.INVALID_FORMAT
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:254:1: SyntaxError: Unexpected indentation
    |
252 |  = (
253 |     f"Failed to parse {import_format.value} data: {parsed_data_result.error_message}")
254 |                 response.result = ImportResult.INVALID_FORMAT
    | ^
255 |                 return response
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:257:1: SyntaxError: unindent does not match any outer indentation level
    |
255 |                 return response
256 |
257 |             parsed_data = parsed_data_result.value
    | ^
258 |
259 |             # Phase 4: Validate settings
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:260:1: SyntaxError: Unexpected indentation
    |
259 |             # Phase 4: Validate settings
260 |             if not self._update_progress(request.progress_callback, ImportPhase.VALIDATING_SETTINGS, 50):
    | ^
261 |                 response.result = ImportResult.CANCELLED
262 |                 return response
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:260:101: E501 Line too long (105 > 100)
    |
259 |             # Phase 4: Validate settings
260 |             if not self._update_progress(request.progress_callback, ImportPhase.VALIDATING_SETTINGS, 50):
    |                                                                                                     ^^^^^ E501
261 |                 response.result = ImportResult.CANCELLED
262 |                 return response
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:269:53: SyntaxError: Expected an indented block after `if` statement
    |
267 |                     request.configuration.strict_validation,
268 |                 )
269 |                 if not validation_result.is_success:
    |                                                     ^
270 | response.field_errors = (
271 |     validation_result.value if validation_result.value else {})
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:272:1: SyntaxError: Unexpected indentation
    |
270 | response.field_errors = (
271 |     validation_result.value if validation_result.value else {})
272 |                     if request.configuration.strict_validation and response.field_errors:
    | ^
273 | response.error_message = (
274 |     f"Validation failed: {len(response.field_errors)} field errors")
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:272:90: SyntaxError: Expected an indented block after `if` statement
    |
270 | response.field_errors = (
271 |     validation_result.value if validation_result.value else {})
272 |                     if request.configuration.strict_validation and response.field_errors:
    |                                                                                          ^
273 | response.error_message = (
274 |     f"Validation failed: {len(response.field_errors)} field errors")
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:273:1: SyntaxError: Expected a statement
    |
271 |     validation_result.value if validation_result.value else {})
272 |                     if request.configuration.strict_validation and response.field_errors:
273 | response.error_message = (
    | ^
274 |     f"Validation failed: {len(response.field_errors)} field errors")
275 |                         response.result = ImportResult.VALIDATION_FAILED
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:275:1: SyntaxError: Unexpected indentation
    |
273 | response.error_message = (
274 |     f"Validation failed: {len(response.field_errors)} field errors")
275 |                         response.result = ImportResult.VALIDATION_FAILED
    | ^
276 |                         return response
277 |                     if response.field_errors:
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:277:1: SyntaxError: unindent does not match any outer indentation level
    |
275 |                         response.result = ImportResult.VALIDATION_FAILED
276 |                         return response
277 |                     if response.field_errors:
    | ^
278 |                         response.warnings.append(f"Found {len(response.field_errors)} field validati\
279 |     on warnings")
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:278:101: E501 Line too long (101 > 100)
    |
276 |                         return response
277 |                     if response.field_errors:
278 |                         response.warnings.append(f"Found {len(response.field_errors)} field validati\
    |                                                                                                     ^ E501
279 |     on warnings")
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:282:1: SyntaxError: unindent does not match any outer indentation level
    |
281 |             # Phase 5: Create settings object
282 |             settings_result = self._create_settings_from_data(parsed_data, request.configuration)
    | ^
283 |             if not settings_result.is_success:
284 | response.error_message = (
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:283:1: SyntaxError: Unexpected indentation
    |
281 |             # Phase 5: Create settings object
282 |             settings_result = self._create_settings_from_data(parsed_data, request.configuration)
283 |             if not settings_result.is_success:
    | ^
284 | response.error_message = (
285 |     f"Failed to create settings: {settings_result.error_message}")
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:283:47: SyntaxError: Expected an indented block after `if` statement
    |
281 |             # Phase 5: Create settings object
282 |             settings_result = self._create_settings_from_data(parsed_data, request.configuration)
283 |             if not settings_result.is_success:
    |                                               ^
284 | response.error_message = (
285 |     f"Failed to create settings: {settings_result.error_message}")
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:286:1: SyntaxError: Unexpected indentation
    |
284 | response.error_message = (
285 |     f"Failed to create settings: {settings_result.error_message}")
286 |                 return response
    | ^
287 |
288 |             imported_settings = settings_result.value
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:288:1: SyntaxError: unindent does not match any outer indentation level
    |
286 |                 return response
287 |
288 |             imported_settings = settings_result.value
    | ^
289 |             response.imported_fields_count = len([k for k in parsed_data if not k.startswith("_")])
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:289:1: SyntaxError: Unexpected indentation
    |
288 |             imported_settings = settings_result.value
289 |             response.imported_fields_count = len([k for k in parsed_data if not k.startswith("_")])
    | ^
290 |
291 |             # Phase 6: Apply settings (merge if needed)
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:292:101: E501 Line too long (103 > 100)
    |
291 |             # Phase 6: Apply settings (merge if needed)
292 |             if not self._update_progress(request.progress_callback, ImportPhase.APPLYING_SETTINGS, 70):
    |                                                                                                     ^^^ E501
293 |                 response.result = ImportResult.CANCELLED
294 |                 return response
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:297:1: SyntaxError: Expected a statement
    |
296 |             final_settings = imported_settings
297 | if request.current_settings and request.configuration.strategy ! = (
    | ^
298 |     ImportStrategy.REPLACE_ALL:)
299 |                 merge_result = self._settings_factory.merge_settings(
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:297:64: SyntaxError: Expected ':', found '!'
    |
296 |             final_settings = imported_settings
297 | if request.current_settings and request.configuration.strategy ! = (
    |                                                                ^
298 |     ImportStrategy.REPLACE_ALL:)
299 |                 merge_result = self._settings_factory.merge_settings(
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:297:66: SyntaxError: Expected a statement
    |
296 |             final_settings = imported_settings
297 | if request.current_settings and request.configuration.strategy ! = (
    |                                                                  ^
298 |     ImportStrategy.REPLACE_ALL:)
299 |                 merge_result = self._settings_factory.merge_settings(
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:298:31: SyntaxError: Expected ')', found ':'
    |
296 |             final_settings = imported_settings
297 | if request.current_settings and request.configuration.strategy ! = (
298 |     ImportStrategy.REPLACE_ALL:)
    |                               ^
299 |                 merge_result = self._settings_factory.merge_settings(
300 |                     request.current_settings,
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:298:32: SyntaxError: Expected an expression
    |
296 |             final_settings = imported_settings
297 | if request.current_settings and request.configuration.strategy ! = (
298 |     ImportStrategy.REPLACE_ALL:)
    |                                ^
299 |                 merge_result = self._settings_factory.merge_settings(
300 |                     request.current_settings,
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:298:33: SyntaxError: Expected a statement
    |
296 |             final_settings = imported_settings
297 | if request.current_settings and request.configuration.strategy ! = (
298 |     ImportStrategy.REPLACE_ALL:)
    |                                 ^
299 |                 merge_result = self._settings_factory.merge_settings(
300 |                     request.current_settings,
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:299:1: SyntaxError: Unexpected indentation
    |
297 | if request.current_settings and request.configuration.strategy ! = (
298 |     ImportStrategy.REPLACE_ALL:)
299 |                 merge_result = self._settings_factory.merge_settings(
    | ^
300 |                     request.current_settings,
301 |                     imported_settings,
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:311:13: SyntaxError: unindent does not match any outer indentation level
    |
310 |             # Phase 7: Verify import
311 |             if not self._update_progress(request.progress_callback, ImportPhase.VERIFYING_IMPORT, 85):
    |             ^
312 |                 response.result = ImportResult.CANCELLED
313 |                 return response
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:311:101: E501 Line too long (102 > 100)
    |
310 |             # Phase 7: Verify import
311 |             if not self._update_progress(request.progress_callback, ImportPhase.VERIFYING_IMPORT, 85):
    |                                                                                                     ^^ E501
312 |                 response.result = ImportResult.CANCELLED
313 |                 return response
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:315:1: SyntaxError: unindent does not match any outer indentation level
    |
313 |                 return response
314 |
315 |             compatibility_result = self._validation.validate_settings_compatibility(final_settings)
    | ^
316 |             if not compatibility_result.is_success:
317 |                 response.warnings.append(f"Compatibility warning: {compatibility_result.error_messag\
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:316:1: SyntaxError: Unexpected indentation
    |
315 |             compatibility_result = self._validation.validate_settings_compatibility(final_settings)
316 |             if not compatibility_result.is_success:
    | ^
317 |                 response.warnings.append(f"Compatibility warning: {compatibility_result.error_messag\
318 |     e}")
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:317:101: E501 Line too long (101 > 100)
    |
315 |             compatibility_result = self._validation.validate_settings_compatibility(final_settings)
316 |             if not compatibility_result.is_success:
317 |                 response.warnings.append(f"Compatibility warning: {compatibility_result.error_messag\
    |                                                                                                     ^ E501
318 |     e}")
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:318:5: SyntaxError: f-string: expecting '}'
    |
316 |             if not compatibility_result.is_success:
317 |                 response.warnings.append(f"Compatibility warning: {compatibility_result.error_messag\
318 |     e}")
    |     ^
319 |
320 |             # Phase 8: Complete
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:318:6: SyntaxError: f-string: single '}' is not allowed
    |
316 |             if not compatibility_result.is_success:
317 |                 response.warnings.append(f"Compatibility warning: {compatibility_result.error_messag\
318 |     e}")
    |      ^
319 |
320 |             # Phase 8: Complete
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:318:7: SyntaxError: Expected ',', found FStringEnd
    |
316 |             if not compatibility_result.is_success:
317 |                 response.warnings.append(f"Compatibility warning: {compatibility_result.error_messag\
318 |     e}")
    |       ^
319 |
320 |             # Phase 8: Complete
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:328:1: SyntaxError: Unexpected indentation
    |
326 | response.result = (
327 |     ImportResult.SUCCESS if not response.field_errors else ImportResult.PARTIAL_SUCCESS)
328 |             response.imported_settings = final_settings
    | ^
329 | response.import_duration_ms = (
330 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:329:1: SyntaxError: Expected a statement
    |
327 |     ImportResult.SUCCESS if not response.field_errors else ImportResult.PARTIAL_SUCCESS)
328 |             response.imported_settings = final_settings
329 | response.import_duration_ms = (
    | ^
330 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
331 |             response.invalid_fields_count = len(response.field_errors)
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:331:1: SyntaxError: Unexpected indentation
    |
329 | response.import_duration_ms = (
330 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
331 |             response.invalid_fields_count = len(response.field_errors)
    | ^
332 |
333 |             # Add metadata
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:336:17: SyntaxError: Expected ',', found string
    |
334 |             response.metadata = {
335 |                 "import_timestamp": start_time.isoformat()
336 |                 "detected_format": response.detected_format.value if response.detected_format else import_format.value,
    |                 ^
337 |                 "original_format": request.import_format.value,
338 |                 "strategy_used": request.configuration.strategy.value,
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:336:101: E501 Line too long (119 > 100)
    |
334 |             response.metadata = {
335 |                 "import_timestamp": start_time.isoformat()
336 |                 "detected_format": response.detected_format.value if response.detected_format else import_format.value,
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^ E501
337 |                 "original_format": request.import_format.value,
338 |                 "strategy_used": request.configuration.strategy.value,
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:340:17: SyntaxError: Expected ',', found string
    |
338 |                 "strategy_used": request.configuration.strategy.value,
339 |                 "file_size_bytes": len(file_content)
340 |                 "validation_strict": request.configuration.strict_validation,
    |                 ^
341 |             }
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:346:17: SyntaxError: Expected ',', found name
    |
344 |                 "Settings import completed",
345 |                 import_path=str(request.import_path.value)
346 |                 result=response.result.value,
    |                 ^
347 |                 imported_fields=response.imported_fields_count,
348 |                 invalid_fields=response.invalid_fields_count,
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:352:1: SyntaxError: unindent does not match any outer indentation level
    |
350 |             )
351 |
352 |         except Exception as e:
    | ^
353 |             self._logger.log_error(f"Unexpected error during settings import: {e!s}")
354 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:352:9: SyntaxError: Expected a statement
    |
350 |             )
351 |
352 |         except Exception as e:
    |         ^
353 |             self._logger.log_error(f"Unexpected error during settings import: {e!s}")
354 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:352:26: SyntaxError: Expected a statement
    |
350 |             )
351 |
352 |         except Exception as e:
    |                          ^
353 |             self._logger.log_error(f"Unexpected error during settings import: {e!s}")
354 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:352:31: SyntaxError: Expected an expression
    |
350 |             )
351 |
352 |         except Exception as e:
    |                               ^
353 |             self._logger.log_error(f"Unexpected error during settings import: {e!s}")
354 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:353:1: SyntaxError: Unexpected indentation
    |
352 |         except Exception as e:
353 |             self._logger.log_error(f"Unexpected error during settings import: {e!s}")
    | ^
354 |             response.error_message = f"Unexpected error: {e!s}"
355 |             response.result = ImportResult.FAILED
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:357:1: SyntaxError: unindent does not match any outer indentation level
    |
355 |             response.result = ImportResult.FAILED
356 |
357 |         return response
    | ^
358 |
359 |     def _validate_request(self, request: ImportSettingsRequest,
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:359:1: SyntaxError: Unexpected indentation
    |
357 |         return response
358 |
359 |     def _validate_request(self, request: ImportSettingsRequest,
    | ^
360 |     ) -> Result[None]:
361 |         """Validate the import request"""
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:376:101: E501 Line too long (101 > 100)
    |
374 |             size_mb = size_result.value / (1024 * 1024)
375 |             if size_mb > request.configuration.max_file_size_mb:
376 |                 return Result.failure(f"File too large: {size_mb:.1f}MB (max: {request.configuration\
    |                                                                                                     ^ E501
377 |     .max_file_size_mb}MB)")
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:419:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
417 |                     "llm_quantization", "llm_prompt", "_metadata",
418 |                 }
419 | filtered_data = (
    | ^
420 |     {k: v for k, v in data.items() if k in known_fields or k.startswith("_")})
421 |             else:
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:421:1: SyntaxError: Unexpected indentation
    |
419 | filtered_data = (
420 |     {k: v for k, v in data.items() if k in known_fields or k.startswith("_")})
421 |             else:
    | ^
422 |                 filtered_data = data
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:421:13: SyntaxError: Expected a statement
    |
419 | filtered_data = (
420 |     {k: v for k, v in data.items() if k in known_fields or k.startswith("_")})
421 |             else:
    |             ^
422 |                 filtered_data = data
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:421:17: SyntaxError: Expected a statement
    |
419 | filtered_data = (
420 |     {k: v for k, v in data.items() if k in known_fields or k.startswith("_")})
421 |             else:
    |                 ^
422 |                 filtered_data = data
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:421:18: SyntaxError: Expected a statement
    |
419 | filtered_data = (
420 |     {k: v for k, v in data.items() if k in known_fields or k.startswith("_")})
421 |             else:
    |                  ^
422 |                 filtered_data = data
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:422:1: SyntaxError: Unexpected indentation
    |
420 |     {k: v for k, v in data.items() if k in known_fields or k.startswith("_")})
421 |             else:
422 |                 filtered_data = data
    | ^
423 |
424 |             return self._settings_factory.create_user_preferences_from_data(filtered_data)
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:424:13: SyntaxError: Expected a statement
    |
422 |                 filtered_data = data
423 |
424 |             return self._settings_factory.create_user_preferences_from_data(filtered_data)
    |             ^
425 |
426 |         except Exception as e:
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:426:1: SyntaxError: unindent does not match any outer indentation level
    |
424 |             return self._settings_factory.create_user_preferences_from_data(filtered_data)
425 |
426 |         except Exception as e:
    | ^
427 |             return Result.failure(f"Failed to create settings from data: {e!s}",
428 |     )
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:426:9: SyntaxError: Expected a statement
    |
424 |             return self._settings_factory.create_user_preferences_from_data(filtered_data)
425 |
426 |         except Exception as e:
    |         ^
427 |             return Result.failure(f"Failed to create settings from data: {e!s}",
428 |     )
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:426:26: SyntaxError: Expected a statement
    |
424 |             return self._settings_factory.create_user_preferences_from_data(filtered_data)
425 |
426 |         except Exception as e:
    |                          ^
427 |             return Result.failure(f"Failed to create settings from data: {e!s}",
428 |     )
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:426:31: SyntaxError: Expected an expression
    |
424 |             return self._settings_factory.create_user_preferences_from_data(filtered_data)
425 |
426 |         except Exception as e:
    |                               ^
427 |             return Result.failure(f"Failed to create settings from data: {e!s}",
428 |     )
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:427:1: SyntaxError: Unexpected indentation
    |
426 |         except Exception as e:
427 |             return Result.failure(f"Failed to create settings from data: {e!s}",
    | ^
428 |     )
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:430:1: SyntaxError: unindent does not match any outer indentation level
    |
428 |     )
429 |
430 |     def _update_progress(self, callback: ProgressCallback | None, phase: ImportPhase, percentage: int,
    | ^
431 |     ) -> bool:
432 |         """Update progress and check for cancellation"""
    |

src_refactored\application\settings\use_cases\import_settings_use_case.py:430:101: E501 Line too long (102 > 100)
    |
428 |     )
429 |
430 |     def _update_progress(self, callback: ProgressCallback | None, phase: ImportPhase, percentage: int,
    |                                                                                                     ^^ E501
431 |     ) -> bool:
432 |         """Update progress and check for cancellation"""
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:173:71: SyntaxError: Expected an indented block after `if` statement
    |
171 |     )
172 |                         else:
173 |                             if request.strategy == LoadStrategy.MERGE:
    |                                                                       ^
174 | merged_settings = (
175 |     self._merge_settings(merged_settings, result.settings))
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:174:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
172 |                         else:
173 |                             if request.strategy == LoadStrategy.MERGE:
174 | merged_settings = (
    | ^
175 |     self._merge_settings(merged_settings, result.settings))
176 |                             else:  # OVERRIDE
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:176:1: SyntaxError: Unexpected indentation
    |
174 | merged_settings = (
175 |     self._merge_settings(merged_settings, result.settings))
176 |                             else:  # OVERRIDE
    | ^
177 | merged_settings = (
178 |     self._override_settings(merged_settings, result.settings))
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:176:29: SyntaxError: Expected a statement
    |
174 | merged_settings = (
175 |     self._merge_settings(merged_settings, result.settings))
176 |                             else:  # OVERRIDE
    |                             ^
177 | merged_settings = (
178 |     self._override_settings(merged_settings, result.settings))
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:176:33: SyntaxError: Expected a statement
    |
174 | merged_settings = (
175 |     self._merge_settings(merged_settings, result.settings))
176 |                             else:  # OVERRIDE
    |                                 ^
177 | merged_settings = (
178 |     self._override_settings(merged_settings, result.settings))
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:176:46: SyntaxError: Expected a statement
    |
174 | merged_settings = (
175 |     self._merge_settings(merged_settings, result.settings))
176 |                             else:  # OVERRIDE
    |                                              ^
177 | merged_settings = (
178 |     self._override_settings(merged_settings, result.settings))
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:177:1: SyntaxError: Expected a statement
    |
175 |     self._merge_settings(merged_settings, result.settings))
176 |                             else:  # OVERRIDE
177 | merged_settings = (
    | ^
178 |     self._override_settings(merged_settings, result.settings))
179 |                             merged_from_sources.append(source)
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:179:1: SyntaxError: Unexpected indentation
    |
177 | merged_settings = (
178 |     self._override_settings(merged_settings, result.settings))
179 |                             merged_from_sources.append(source)
    | ^
180 |
181 |                 elif request.strategy == LoadStrategy.STRICT:
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:181:1: SyntaxError: unindent does not match any outer indentation level
    |
179 |                             merged_from_sources.append(source)
180 |
181 |                 elif request.strategy == LoadStrategy.STRICT:
    | ^
182 |                     # In strict mode, any failure is fatal
183 |                     return LoadSettingsResponse(
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:181:17: SyntaxError: Expected a statement
    |
179 |                             merged_from_sources.append(source)
180 |
181 |                 elif request.strategy == LoadStrategy.STRICT:
    |                 ^
182 |                     # In strict mode, any failure is fatal
183 |                     return LoadSettingsResponse(
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:181:22: SyntaxError: Invalid annotated assignment target
    |
179 |                             merged_from_sources.append(source)
180 |
181 |                 elif request.strategy == LoadStrategy.STRICT:
    |                      ^
182 |                     # In strict mode, any failure is fatal
183 |                     return LoadSettingsResponse(
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:181:62: SyntaxError: Expected an expression
    |
179 |                             merged_from_sources.append(source)
180 |
181 |                 elif request.strategy == LoadStrategy.STRICT:
    |                                                              ^
182 |                     # In strict mode, any failure is fatal
183 |                     return LoadSettingsResponse(
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:183:1: SyntaxError: Unexpected indentation
    |
181 |                 elif request.strategy == LoadStrategy.STRICT:
182 |                     # In strict mode, any failure is fatal
183 |                     return LoadSettingsResponse(
    | ^
184 |                         success=False,
185 |                         source_results=source_results,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:190:1: SyntaxError: unindent does not match any outer indentation level
    |
189 |                 # Collect warnings
190 |                 warnings.extend(result.warnings)
    | ^
191 |
192 |             # If no settings loaded and fallback is allowed, create defaults
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:193:1: SyntaxError: Unexpected indentation
    |
192 |             # If no settings loaded and fallback is allowed, create defaults
193 |             if merged_settings is None and request.strategy != LoadStrategy.STRICT:
    | ^
194 |                 if request.merge_with_defaults:
195 |                     merged_settings = self.settings_repository.get_default_settings()
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:201:29: SyntaxError: Expected an indented block after `try` statement
    |
199 |                     # Create default config file if requested
200 |                     if request.create_if_missing and request.config_file_path:
201 |                         try:
    |                             ^
202 | success = (
203 |     self.settings_repository.save_to_json(merged_settings, request.config_file_path))
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:202:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
200 |                     if request.create_if_missing and request.config_file_path:
201 |                         try:
202 | success = (
    | ^
203 |     self.settings_repository.save_to_json(merged_settings, request.config_file_path))
204 |                             if success:
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:204:1: SyntaxError: Unexpected indentation
    |
202 | success = (
203 |     self.settings_repository.save_to_json(merged_settings, request.config_file_path))
204 |                             if success:
    | ^
205 |                                 created_default_config = True
206 |                                 warnings.append(f"Created default configuration file: {request.confi\
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:206:101: E501 Line too long (101 > 100)
    |
204 |                             if success:
205 |                                 created_default_config = True
206 |                                 warnings.append(f"Created default configuration file: {request.confi\
    |                                                                                                     ^ E501
207 |     g_file_path}")
208 |                         except Exception as e:
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:207:5: SyntaxError: f-string: expecting '}'
    |
205 |                                 created_default_config = True
206 |                                 warnings.append(f"Created default configuration file: {request.confi\
207 |     g_file_path}")
    |     ^
208 |                         except Exception as e:
209 |                             warnings.append(f"Failed to create default config file: {e!s}",
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:207:16: SyntaxError: f-string: single '}' is not allowed
    |
205 |                                 created_default_config = True
206 |                                 warnings.append(f"Created default configuration file: {request.confi\
207 |     g_file_path}")
    |                ^
208 |                         except Exception as e:
209 |                             warnings.append(f"Failed to create default config file: {e!s}",
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:207:17: SyntaxError: Expected ',', found FStringEnd
    |
205 |                                 created_default_config = True
206 |                                 warnings.append(f"Created default configuration file: {request.confi\
207 |     g_file_path}")
    |                 ^
208 |                         except Exception as e:
209 |                             warnings.append(f"Failed to create default config file: {e!s}",
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:208:25: SyntaxError: unindent does not match any outer indentation level
    |
206 |                                 warnings.append(f"Created default configuration file: {request.confi\
207 |     g_file_path}")
208 |                         except Exception as e:
    |                         ^
209 |                             warnings.append(f"Failed to create default config file: {e!s}",
210 |     )
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:208:42: SyntaxError: Expected a statement
    |
206 |                                 warnings.append(f"Created default configuration file: {request.confi\
207 |     g_file_path}")
208 |                         except Exception as e:
    |                                          ^
209 |                             warnings.append(f"Failed to create default config file: {e!s}",
210 |     )
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:208:47: SyntaxError: Expected an expression
    |
206 |                                 warnings.append(f"Created default configuration file: {request.confi\
207 |     g_file_path}")
208 |                         except Exception as e:
    |                                               ^
209 |                             warnings.append(f"Failed to create default config file: {e!s}",
210 |     )
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:209:1: SyntaxError: Unexpected indentation
    |
207 |     g_file_path}")
208 |                         except Exception as e:
209 |                             warnings.append(f"Failed to create default config file: {e!s}",
    | ^
210 |     )
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:213:1: SyntaxError: unindent does not match any outer indentation level
    |
212 |             # Validate settings if requested
213 |             validation_errors = []
    | ^
214 |             if request.validate_after_load and merged_settings and self.validator:
215 |                 is_valid, errors = self.validator.validate(merged_settings)
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:214:1: SyntaxError: Unexpected indentation
    |
212 |             # Validate settings if requested
213 |             validation_errors = []
214 |             if request.validate_after_load and merged_settings and self.validator:
    | ^
215 |                 is_valid, errors = self.validator.validate(merged_settings)
216 |                 if not is_valid:
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:243:1: SyntaxError: unindent does not match any outer indentation level
    |
241 |             )
242 |
243 |         except Exception as e:
    | ^
244 |             return LoadSettingsResponse(
245 |                 success=False,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:243:9: SyntaxError: Expected a statement
    |
241 |             )
242 |
243 |         except Exception as e:
    |         ^
244 |             return LoadSettingsResponse(
245 |                 success=False,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:243:26: SyntaxError: Expected a statement
    |
241 |             )
242 |
243 |         except Exception as e:
    |                          ^
244 |             return LoadSettingsResponse(
245 |                 success=False,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:243:31: SyntaxError: Expected an expression
    |
241 |             )
242 |
243 |         except Exception as e:
    |                               ^
244 |             return LoadSettingsResponse(
245 |                 success=False,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:244:1: SyntaxError: Unexpected indentation
    |
243 |         except Exception as e:
244 |             return LoadSettingsResponse(
    | ^
245 |                 success=False,
246 |                 error_message=f"Unexpected error during settings loading: {e!s}",
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:249:1: SyntaxError: unindent does not match any outer indentation level
    |
247 |             )
248 |
249 |     def _load_from_source(self, source: LoadSource, request: LoadSettingsRequest,
    | ^
250 |     ) -> SourceLoadResult:
251 |         """Load settings from a specific source."""
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:273:37: COM812 Trailing comma missing
    |
271 |                 source=source,
272 |                 success=False,
273 |                 error_message=str(e)
    |                                     ^ COM812
274 |             )
    |
    = help: Add trailing comma

src_refactored\application\settings\use_cases\load_settings_use_case.py:276:5: SyntaxError: unindent does not match any outer indentation level
    |
274 |             )
275 |
276 |     def _load_from_json_file(self, request: LoadSettingsRequest,
    |     ^
277 |     ) -> SourceLoadResult:
278 |         """Load settings from JSON file."""
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:317:5: SyntaxError: unindent does not match any outer indentation level
    |
315 |             )
316 |
317 |     def _load_default_config(self) -> SourceLoadResult:
    |     ^
318 |         """Load default configuration."""
319 |         try:
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:320:70: SyntaxError: Expected an expression or a ')'
    |
318 |         """Load default configuration."""
319 |         try:
320 |             settings = self.settings_repository.get_default_settings(,
    |                                                                      ^
321 |     )
322 |             return SourceLoadResult(
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:334:5: SyntaxError: unindent does not match any outer indentation level
    |
332 |             )
333 |
334 |     def _load_from_environment(self, request: LoadSettingsRequest,
    |     ^
335 |     ) -> SourceLoadResult:
336 |         """Load settings from environment variables."""
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:371:5: SyntaxError: unindent does not match any outer indentation level
    |
369 |             )
370 |
371 |     def _load_from_registry(self) -> SourceLoadResult:
    |     ^
372 |         """Load settings from Windows registry."""
373 |         if not self.registry_loader:
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:380:13: SyntaxError: Expected an indented block after `try` statement
    |
378 |             )
379 |
380 |         try:
    |             ^
381 | registry_data = (
382 |     self.registry_loader.load_from_registry("HKEY_CURRENT_USER\\Software\\WinSTT",)
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:381:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
380 |         try:
381 | registry_data = (
    | ^
382 |     self.registry_loader.load_from_registry("HKEY_CURRENT_USER\\Software\\WinSTT",)
383 |     )
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:382:82: COM819 Trailing comma prohibited
    |
380 |         try:
381 | registry_data = (
382 |     self.registry_loader.load_from_registry("HKEY_CURRENT_USER\\Software\\WinSTT",)
    |                                                                                  ^ COM819
383 |     )
384 |             if not registry_data:
    |
    = help: Remove trailing comma

src_refactored\application\settings\use_cases\load_settings_use_case.py:384:1: SyntaxError: Unexpected indentation
    |
382 |     self.registry_loader.load_from_registry("HKEY_CURRENT_USER\\Software\\WinSTT",)
383 |     )
384 |             if not registry_data:
    | ^
385 |                 return SourceLoadResult(
386 |                     source=LoadSource.REGISTRY,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:400:1: SyntaxError: unindent does not match any outer indentation level
    |
398 |                 metadata={"keys_count": len(registry_data)},
399 |             )
400 |         except Exception as e:
    | ^
401 |             return SourceLoadResult(
402 |                 source=LoadSource.REGISTRY,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:400:9: SyntaxError: Expected a statement
    |
398 |                 metadata={"keys_count": len(registry_data)},
399 |             )
400 |         except Exception as e:
    |         ^
401 |             return SourceLoadResult(
402 |                 source=LoadSource.REGISTRY,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:400:26: SyntaxError: Expected a statement
    |
398 |                 metadata={"keys_count": len(registry_data)},
399 |             )
400 |         except Exception as e:
    |                          ^
401 |             return SourceLoadResult(
402 |                 source=LoadSource.REGISTRY,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:400:31: SyntaxError: Expected an expression
    |
398 |                 metadata={"keys_count": len(registry_data)},
399 |             )
400 |         except Exception as e:
    |                               ^
401 |             return SourceLoadResult(
402 |                 source=LoadSource.REGISTRY,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:401:1: SyntaxError: Unexpected indentation
    |
399 |             )
400 |         except Exception as e:
401 |             return SourceLoadResult(
    | ^
402 |                 source=LoadSource.REGISTRY,
403 |                 success=False,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:407:1: SyntaxError: unindent does not match any outer indentation level
    |
405 |             )
406 |
407 |     def _load_from_command_line(self) -> SourceLoadResult:
    | ^
408 |         """Load settings from command line arguments."""
409 |         # This would typically be implemented to parse sys.argv or use argparse
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:417:1: SyntaxError: unindent does not match any outer indentation level
    |
415 |         )
416 |
417 |     def _merge_settings(self, base: SettingsConfiguration, override: SettingsConfiguration,
    | ^
418 |     ) -> SettingsConfiguration:
419 |         """Merge two settings configurations, keeping non-None values from override."""
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:424:1: SyntaxError: unindent does not match any outer indentation level
    |
422 |         return override
423 |
424 |     def _override_settings(self,
    | ^
425 |     base: SettingsConfiguration, override: SettingsConfiguration,
426 |     ) -> SettingsConfiguration:
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:431:1: SyntaxError: unindent does not match any outer indentation level
    |
429 |         return override
430 |
431 |     def _convert_env_data_to_settings(self, env_data: dict[str, Any]) -> SettingsConfiguration:
    | ^
432 |         """Convert environment variable data to settings configuration."""
433 |         # This would need to be implemented based on the specific mapping
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:437:1: SyntaxError: unindent does not match any outer indentation level
    |
435 |         return self.settings_repository.get_default_settings()
436 |
437 |     def _convert_registry_data_to_settings(
    | ^
438 |     self,
439 |     registry_data: dict[str,
    |

src_refactored\application\settings\use_cases\load_settings_use_case.py:444:63: SyntaxError: Expected dedent, found end of file
    |
442 |         # This would need to be implemented based on the specific mapping
443 |         # For now, return default settings
444 |         return self.settings_repository.get_default_settings()
    |                                                               ^
    |

src_refactored\application\settings\use_cases\reset_settings_use_case.py:119:53: SyntaxError: Expected an expression or a ')'
    |
117 |             if request.validate_after_reset:
118 |                 validation_result = self._validate_settings(updated_settings)
119 |                 if not validation_result.is_success(,
    |                                                     ^
120 |     ):
121 |                     validation_errors = validation_result.error
    |

src_refactored\application\settings\use_cases\save_settings_use_case.py:89:53: SyntaxError: Expected an expression or a ')'
   |
87 |             if request.validate_before_save:
88 |                 validation_result = self._validate_settings(settings_dict)
89 |                 if not validation_result.is_success(,
   |                                                     ^
90 |     ):
91 |                     validation_errors = validation_result.error
   |

src_refactored\application\settings\use_cases\save_settings_use_case.py:175:17: SyntaxError: Expected ',', found name
    |
173 |             ModelConfiguration(
174 |                 model_name=settings.get("model", "")
175 |                 quantization=settings.get("quantization", ""),
    |                 ^
176 |             )
177 |         except Exception as e:
    |

src_refactored\application\settings\use_cases\save_settings_use_case.py:185:21: SyntaxError: Expected ',', found name
    |
183 |                 LLMConfiguration(
184 |                     model_name=settings.get("llm_model", "")
185 |                     quantization=settings.get("llm_quantization", "")
    |                     ^
186 |                     prompt=settings.get("llm_prompt", ""),
187 |                 )
    |

src_refactored\application\settings\use_cases\save_settings_use_case.py:186:21: SyntaxError: Expected ',', found name
    |
184 |                     model_name=settings.get("llm_model", "")
185 |                     quantization=settings.get("llm_quantization", "")
186 |                     prompt=settings.get("llm_prompt", ""),
    |                     ^
187 |                 )
188 |             except Exception as e:
    |

src_refactored\application\settings\use_cases\save_settings_use_case.py:195:17: SyntaxError: Expected ',', found name
    |
193 |             AudioConfiguration(
194 |                 recording_sound_enabled=settings.get("recording_sound_enabled", False)
195 |                 sound_file_path=AudioFilePath(settings.get("sound_file_path", "")),
    |                 ^
196 |                 output_srt=settings.get("output_srt", False),
197 |             )
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:104:101: E501 Line too long (101 > 100)
    |
102 |                 return self._reset_to_default()
103 |             if request.new_key_combination:
104 |                 return self._update_hotkey(request.new_key_combination, request.validate_combination)
    |                                                                                                     ^ E501
105 |             return self._get_current_state()
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:142:17: SyntaxError: Expected ',', found name
    |
140 |                 state=self._recording_state,
141 |                 pressed_keys=self._pressed_keys.copy()
142 |                 current_combination=self._format_key_combination(self._pressed_keys)
    |                 ^
143 |                 message=f"Recording: {self._format_key_combination(self._pressed_keys)}",
144 |             )
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:143:17: SyntaxError: Expected ',', found name
    |
141 |                 pressed_keys=self._pressed_keys.copy()
142 |                 current_combination=self._format_key_combination(self._pressed_keys)
143 |                 message=f"Recording: {self._format_key_combination(self._pressed_keys)}",
    |                 ^
144 |             )
145 |             self._progress_callback(progress)
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:152:17: SyntaxError: Expected ',', found name
    |
150 |                 recording_state=self._recording_state,
151 |                 pressed_keys=self._pressed_keys.copy()
152 |                 current_hotkey=self._format_key_combination(self._pressed_keys)
    |                 ^
153 |                 requires_ui_update=True,
154 |             ),
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:153:17: SyntaxError: Expected ',', found name
    |
151 |                 pressed_keys=self._pressed_keys.copy()
152 |                 current_hotkey=self._format_key_combination(self._pressed_keys)
153 |                 requires_ui_update=True,
    |                 ^
154 |             ),
155 |         )
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:171:17: SyntaxError: Expected ',', found name
    |
169 |                 state=self._recording_state,
170 |                 pressed_keys=set()
171 |                 message="Recording hotkey... Press keys now",
    |                 ^
172 |             )
173 |             self._progress_callback(progress)
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:180:17: SyntaxError: Expected ',', found name
    |
178 |                 recording_state=self._recording_state,
179 |                 pressed_keys=set()
180 |                 message="Started recording hotkey",
    |                 ^
181 |                 requires_ui_update=True,
182 |             ),
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:219:49: SyntaxError: Expected an expression or a ')'
    |
217 |         if validate:
218 |             validation_result = self._validate_key_combination(new_combination)
219 |             if not validation_result.is_success(,
    |                                                 ^
220 |     ):
221 |                 self._recording_state = HotkeyRecordingState.IDLE
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:251:17: SyntaxError: Expected ',', found name
    |
249 |                 state=self._recording_state,
250 |                 pressed_keys=self._pressed_keys.copy()
251 |                 current_combination=new_combination,
    |                 ^
252 |                 message=f"Hotkey updated to: {new_combination}",
253 |             )
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:284:17: SyntaxError: Expected ',', found name
    |
282 |                 state=self._recording_state,
283 |                 pressed_keys=set()
284 |                 message="Hotkey recording cancelled",
    |                 ^
285 |             )
286 |             self._progress_callback(progress)
    |

src_refactored\application\settings\use_cases\update_hotkey_use_case.py:347:49: SyntaxError: Expected an expression or a ')'
    |
345 |         if validate:
346 |             validation_result = self._validate_key_combination(combination)
347 |             if not validation_result.is_success(,
    |                                                 ^
348 |     ):
349 |                 return Result.failure(
    |

src_refactored\application\settings\use_cases\validate_settings_use_case.py:126:101: E501 Line too long (104 > 100)
    |
125 |             # Count issues by severity
126 |             errors_count = sum(1 for issue in issues if issue.rule.severity == ValidationSeverity.ERROR)
    |                                                                                                     ^^^^ E501
127 |             warnings_count = sum(1 for issue in issues if issue.rule.severity == ValidationSeverity.WARNING)
128 |             info_count = sum(1 for issue in issues if issue.rule.severity == ValidationSeverity.INFO)
    |

src_refactored\application\settings\use_cases\validate_settings_use_case.py:127:101: E501 Line too long (108 > 100)
    |
125 |             # Count issues by severity
126 |             errors_count = sum(1 for issue in issues if issue.rule.severity == ValidationSeverity.ERROR)
127 |             warnings_count = sum(1 for issue in issues if issue.rule.severity == ValidationSeverity.WARNING)
    |                                                                                                     ^^^^^^^^ E501
128 |             info_count = sum(1 for issue in issues if issue.rule.severity == ValidationSeverity.INFO)
    |

src_refactored\application\settings\use_cases\validate_settings_use_case.py:128:101: E501 Line too long (101 > 100)
    |
126 |             errors_count = sum(1 for issue in issues if issue.rule.severity == ValidationSeverity.ERROR)
127 |             warnings_count = sum(1 for issue in issues if issue.rule.severity == ValidationSeverity.WARNING)
128 |             info_count = sum(1 for issue in issues if issue.rule.severity == ValidationSeverity.INFO)
    |                                                                                                     ^ E501
129 |
130 |             # Determine overall validity
    |

src_refactored\application\settings\use_cases\validate_settings_use_case.py:134:101: E501 Line too long (107 > 100)
    |
133 |             # Generate message
134 |             message = self._generate_validation_message(is_valid, errors_count, warnings_count, info_count)
    |                                                                                                     ^^^^^^^ E501
135 |
136 |             return Result.success(
    |

src_refactored\application\settings\use_cases\validate_settings_use_case.py:148:16: BLE001 Do not catch blind exception: `Exception`
    |
146 |             )
147 |
148 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
149 |             return Result.failure(f"Validation error: {e!s}")
    |

src_refactored\application\settings\use_cases\validate_settings_use_case.py:185:17: PERF401 Use a list comprehension to create a transformed list
    |
183 |           for key in required_keys:
184 |               if key not in settings:
185 | /                 issues.append(
186 | |                     ValidationIssue(
187 | |                         rule=structure_rule,
188 | |                         key=key,
189 | |                         value=None,
190 | |                         message=f"Required setting '{key}' is missing",
191 | |                         suggestion=f"Add '{key}' to settings configuration",
192 | |                     ),
193 | |                 )
    | |_________________^ PERF401
194 |
195 |           return issues
    |
    = help: Replace for loop with list comprehension

src_refactored\application\settings\use_cases\validate_settings_use_case.py:244:101: E501 Line too long (123 > 100)
    |
242 |                         value=settings[key],
243 |                         message=(
244 |                             f"Setting '{key}' must be of type {expected_type.__name__}, got {type(settings[key]).__name__}"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ E501
245 |                         ),
246 |                         suggestion=f"Convert '{key}' value to {expected_type.__name__}",
    |

src_refactored\application\settings\use_cases\validate_settings_use_case.py:410:20: BLE001 Do not catch blind exception: `Exception`
    |
408 |             try:
409 |                 KeyCombination.from_string(recording_key)
410 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
411 |                 issues.append(
412 |                     ValidationIssue(
    |

src_refactored\application\settings\use_cases\validate_settings_use_case.py:480:5: ARG002 Unused method argument: `settings`
    |
479 |     def _validate_system_compatibility(self,
480 |     settings: dict[str, Any], rules: list[ValidationRule]) -> list[ValidationIssue]:
    |     ^^^^^^^^ ARG002
481 |         """Validate system compatibility.
    |

src_refactored\application\settings\use_cases\validate_settings_use_case.py:480:31: ARG002 Unused method argument: `rules`
    |
479 |     def _validate_system_compatibility(self,
480 |     settings: dict[str, Any], rules: list[ValidationRule]) -> list[ValidationIssue]:
    |                               ^^^^^ ARG002
481 |         """Validate system compatibility.
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:375:21: SyntaxError: Expected ',', found name
    |
373 |                     "Starting drag and drop enablement",
374 |                     drop_zones=len(request.drop_zones)
375 |                     file_types=len(request.file_types),
    |                     ^
376 |                 )
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:386:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
385 |             # Check system permissions
386 | permissions_valid, permissions_error = (
    | ^
387 |     self._validation_service.check_system_permissions())
388 |             if not permissions_valid:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:388:1: SyntaxError: Unexpected indentation
    |
386 | permissions_valid, permissions_error = (
387 |     self._validation_service.check_system_permissions())
388 |             if not permissions_valid:
    | ^
389 |                 state.error_message = f"Insufficient permissions: {permissions_error}"
390 |                 return EnableDragDropResponse(
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:398:46: SyntaxError: Expected an indented block after `for` statement
    |
397 |             # Validate drop zone configurations
398 |             for config in request.drop_zones:
    |                                              ^
399 | config_valid, config_error = (
400 |     self._validation_service.validate_drop_zone_configuration(config))
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:399:1: SyntaxError: Expected a statement
    |
397 |             # Validate drop zone configurations
398 |             for config in request.drop_zones:
399 | config_valid, config_error = (
    | ^
400 |     self._validation_service.validate_drop_zone_configuration(config))
401 |                 if not config_valid:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:401:1: SyntaxError: Unexpected indentation
    |
399 | config_valid, config_error = (
400 |     self._validation_service.validate_drop_zone_configuration(config))
401 |                 if not config_valid:
    | ^
402 | state.error_message = (
403 |     f"Invalid drop zone configuration for {config.zone_id}: {config_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:401:37: SyntaxError: Expected an indented block after `if` statement
    |
399 | config_valid, config_error = (
400 |     self._validation_service.validate_drop_zone_configuration(config))
401 |                 if not config_valid:
    |                                     ^
402 | state.error_message = (
403 |     f"Invalid drop zone configuration for {config.zone_id}: {config_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:402:1: SyntaxError: Expected a statement
    |
400 |     self._validation_service.validate_drop_zone_configuration(config))
401 |                 if not config_valid:
402 | state.error_message = (
    | ^
403 |     f"Invalid drop zone configuration for {config.zone_id}: {config_error}")
404 |                     return EnableDragDropResponse(
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:404:1: SyntaxError: Unexpected indentation
    |
402 | state.error_message = (
403 |     f"Invalid drop zone configuration for {config.zone_id}: {config_error}")
404 |                     return EnableDragDropResponse(
    | ^
405 |                         result=EnableResult.VALIDATION_ERROR,
406 |                         state=state,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:412:1: SyntaxError: Expected a statement
    |
411 |                 # Validate widget support
412 | widget_valid, widget_error = (
    | ^
413 |     self._validation_service.validate_widget_support(config.target_widget))
414 |                 if not widget_valid:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:414:1: SyntaxError: Unexpected indentation
    |
412 | widget_valid, widget_error = (
413 |     self._validation_service.validate_widget_support(config.target_widget))
414 |                 if not widget_valid:
    | ^
415 |                     warnings.append(f"Widget {config.zone_id} may not support drag and
416 |     drop: {widget_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:415:62: SyntaxError: f-string: unterminated string
    |
413 |     self._validation_service.validate_widget_support(config.target_widget))
414 |                 if not widget_valid:
415 |                     warnings.append(f"Widget {config.zone_id} may not support drag and
    |                                                              ^
416 |     drop: {widget_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:415:87: SyntaxError: Expected FStringEnd, found newline
    |
413 |     self._validation_service.validate_widget_support(config.target_widget))
414 |                 if not widget_valid:
415 |                     warnings.append(f"Widget {config.zone_id} may not support drag and
    |                                                                                       ^
416 |     drop: {widget_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:416:5: SyntaxError: unindent does not match any outer indentation level
    |
414 |                 if not widget_valid:
415 |                     warnings.append(f"Widget {config.zone_id} may not support drag and
416 |     drop: {widget_error}")
    |     ^
417 |
418 |             # Validate file type configurations
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:416:25: SyntaxError: missing closing quote in string literal
    |
414 |                 if not widget_valid:
415 |                     warnings.append(f"Widget {config.zone_id} may not support drag and
416 |     drop: {widget_error}")
    |                         ^
417 |
418 |             # Validate file type configurations
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:416:27: SyntaxError: Expected a statement
    |
414 |                 if not widget_valid:
415 |                     warnings.append(f"Widget {config.zone_id} may not support drag and
416 |     drop: {widget_error}")
    |                           ^
417 |
418 |             # Validate file type configurations
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:419:1: SyntaxError: Unexpected indentation
    |
418 |             # Validate file type configurations
419 |             for config in request.file_types:
    | ^
420 | file_type_valid, file_type_error = (
421 |     self._validation_service.validate_file_type_configuration(config))
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:419:46: SyntaxError: Expected an indented block after `for` statement
    |
418 |             # Validate file type configurations
419 |             for config in request.file_types:
    |                                              ^
420 | file_type_valid, file_type_error = (
421 |     self._validation_service.validate_file_type_configuration(config))
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:420:1: SyntaxError: Expected a statement
    |
418 |             # Validate file type configurations
419 |             for config in request.file_types:
420 | file_type_valid, file_type_error = (
    | ^
421 |     self._validation_service.validate_file_type_configuration(config))
422 |                 if not file_type_valid:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:422:1: SyntaxError: Unexpected indentation
    |
420 | file_type_valid, file_type_error = (
421 |     self._validation_service.validate_file_type_configuration(config))
422 |                 if not file_type_valid:
    | ^
423 | state.error_message = (
424 |     f"Invalid file type configuration for {config.file_type}: {file_type_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:422:40: SyntaxError: Expected an indented block after `if` statement
    |
420 | file_type_valid, file_type_error = (
421 |     self._validation_service.validate_file_type_configuration(config))
422 |                 if not file_type_valid:
    |                                        ^
423 | state.error_message = (
424 |     f"Invalid file type configuration for {config.file_type}: {file_type_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:423:1: SyntaxError: Expected a statement
    |
421 |     self._validation_service.validate_file_type_configuration(config))
422 |                 if not file_type_valid:
423 | state.error_message = (
    | ^
424 |     f"Invalid file type configuration for {config.file_type}: {file_type_error}")
425 |                     return EnableDragDropResponse(
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:425:1: SyntaxError: Unexpected indentation
    |
423 | state.error_message = (
424 |     f"Invalid file type configuration for {config.file_type}: {file_type_error}")
425 |                     return EnableDragDropResponse(
    | ^
426 |                         result=EnableResult.VALIDATION_ERROR,
427 |                         state=state,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:432:1: SyntaxError: unindent does not match any outer indentation level
    |
430 |                     )
431 |
432 |             phase_times[EnablePhase.VALIDATION] = time.time() - phase_start
    | ^
433 |
434 |             if request.enable_progress_tracking and self._progress_tracking_service:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:434:1: SyntaxError: Unexpected indentation
    |
432 |             phase_times[EnablePhase.VALIDATION] = time.time() - phase_start
433 |
434 |             if request.enable_progress_tracking and self._progress_tracking_service:
    | ^
435 |                 self._progress_tracking_service.update_progress(EnablePhase.VALIDATION, 1.0)
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:442:101: E501 Line too long (102 > 100)
    |
441 |             if request.enable_progress_tracking and self._progress_tracking_service:
442 |                 self._progress_tracking_service.update_progress(EnablePhase.WIDGET_CONFIGURATION, 0.0)
    |                                                                                                     ^^ E501
443 |
444 |             for i, config in enumerate(request.drop_zones):
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:448:1: SyntaxError: Expected a statement
    |
447 |                 # Configure drop zone
448 | zone_configured, zone_error = (
    | ^
449 |     self._widget_configuration_service.configure_drop_zone(config))
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:451:1: SyntaxError: Unexpected indentation
    |
449 |     self._widget_configuration_service.configure_drop_zone(config))
450 |
451 |                 result = DropZoneSetupResult(
    | ^
452 |                     zone_id=config.zone_id,
453 |                     zone_configured=zone_configured,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:461:36: SyntaxError: Expected an indented block after `if` statement
    |
459 |                 )
460 |
461 |                 if zone_configured:
    |                                    ^
462 |                     # Set accepted actions
463 | actions_set, actions_error = (
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:463:1: SyntaxError: Expected a statement
    |
461 |                 if zone_configured:
462 |                     # Set accepted actions
463 | actions_set, actions_error = (
    | ^
464 |     self._widget_configuration_service.set_accepted_actions()
465 |                         config.target_widget, config.accepted_actions,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:465:25: SyntaxError: Expected ')', found name
    |
463 | actions_set, actions_error = (
464 |     self._widget_configuration_service.set_accepted_actions()
465 |                         config.target_widget, config.accepted_actions,
    |                         ^
466 |                     )
467 |                     if not actions_set:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:466:21: SyntaxError: Expected a statement
    |
464 |     self._widget_configuration_service.set_accepted_actions()
465 |                         config.target_widget, config.accepted_actions,
466 |                     )
    |                     ^
467 |                     if not actions_set:
468 |                         warnings.append(f"Failed to set accepted actions for {config.zone_id}: {acti\
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:466:22: SyntaxError: Expected a statement
    |
464 |     self._widget_configuration_service.set_accepted_actions()
465 |                         config.target_widget, config.accepted_actions,
466 |                     )
    |                      ^
467 |                     if not actions_set:
468 |                         warnings.append(f"Failed to set accepted actions for {config.zone_id}: {acti\
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:467:1: SyntaxError: Unexpected indentation
    |
465 |                         config.target_widget, config.accepted_actions,
466 |                     )
467 |                     if not actions_set:
    | ^
468 |                         warnings.append(f"Failed to set accepted actions for {config.zone_id}: {acti\
469 |     ons_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:468:101: E501 Line too long (101 > 100)
    |
466 |                     )
467 |                     if not actions_set:
468 |                         warnings.append(f"Failed to set accepted actions for {config.zone_id}: {acti\
    |                                                                                                     ^ E501
469 |     ons_error}")
470 |                     else:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:469:5: SyntaxError: f-string: expecting '}'
    |
467 |                     if not actions_set:
468 |                         warnings.append(f"Failed to set accepted actions for {config.zone_id}: {acti\
469 |     ons_error}")
    |     ^
470 |                     else:
471 |                         result.widget_enabled = True
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:469:14: SyntaxError: f-string: single '}' is not allowed
    |
467 |                     if not actions_set:
468 |                         warnings.append(f"Failed to set accepted actions for {config.zone_id}: {acti\
469 |     ons_error}")
    |              ^
470 |                     else:
471 |                         result.widget_enabled = True
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:469:15: SyntaxError: Expected ',', found FStringEnd
    |
467 |                     if not actions_set:
468 |                         warnings.append(f"Failed to set accepted actions for {config.zone_id}: {acti\
469 |     ons_error}")
    |               ^
470 |                     else:
471 |                         result.widget_enabled = True
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:474:47: SyntaxError: Expected an indented block after `if` statement
    |
473 |                     # Apply visual feedback
474 |                     if config.visual_feedback:
    |                                               ^
475 | feedback_applied, feedback_error = (
476 |     self._widget_configuration_service.apply_visual_feedback()
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:475:1: SyntaxError: Expected a statement
    |
473 |                     # Apply visual feedback
474 |                     if config.visual_feedback:
475 | feedback_applied, feedback_error = (
    | ^
476 |     self._widget_configuration_service.apply_visual_feedback()
477 |                             config.target_widget, config,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:477:29: SyntaxError: Expected ')', found name
    |
475 | feedback_applied, feedback_error = (
476 |     self._widget_configuration_service.apply_visual_feedback()
477 |                             config.target_widget, config,
    |                             ^
478 |                         )
479 |                         if not feedback_applied:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:478:25: SyntaxError: Expected a statement
    |
476 |     self._widget_configuration_service.apply_visual_feedback()
477 |                             config.target_widget, config,
478 |                         )
    |                         ^
479 |                         if not feedback_applied:
480 |                             warnings.append(f"Failed to apply visual feedback for {config.zone_id}: \
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:478:26: SyntaxError: Expected a statement
    |
476 |     self._widget_configuration_service.apply_visual_feedback()
477 |                             config.target_widget, config,
478 |                         )
    |                          ^
479 |                         if not feedback_applied:
480 |                             warnings.append(f"Failed to apply visual feedback for {config.zone_id}: \
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:479:1: SyntaxError: Unexpected indentation
    |
477 |                             config.target_widget, config,
478 |                         )
479 |                         if not feedback_applied:
    | ^
480 |                             warnings.append(f"Failed to apply visual feedback for {config.zone_id}: \
481 |     {feedback_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:480:101: E501 Line too long (101 > 100)
    |
478 |                         )
479 |                         if not feedback_applied:
480 |                             warnings.append(f"Failed to apply visual feedback for {config.zone_id}: \
    |                                                                                                     ^ E501
481 |     {feedback_error}")
482 |                         else:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:485:21: SyntaxError: unindent does not match any outer indentation level
    |
483 |                             result.visual_feedback_applied = True
484 |
485 |                     state.enabled_zones += 1
    |                     ^
486 |                 else:
487 |                     state.failed_zones += 1
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:486:1: SyntaxError: Unexpected indentation
    |
485 |                     state.enabled_zones += 1
486 |                 else:
    | ^
487 |                     state.failed_zones += 1
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:486:17: SyntaxError: Expected a statement
    |
485 |                     state.enabled_zones += 1
486 |                 else:
    |                 ^
487 |                     state.failed_zones += 1
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:486:21: SyntaxError: Expected a statement
    |
485 |                     state.enabled_zones += 1
486 |                 else:
    |                     ^
487 |                     state.failed_zones += 1
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:486:22: SyntaxError: Expected a statement
    |
485 |                     state.enabled_zones += 1
486 |                 else:
    |                      ^
487 |                     state.failed_zones += 1
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:487:1: SyntaxError: Unexpected indentation
    |
485 |                     state.enabled_zones += 1
486 |                 else:
487 |                     state.failed_zones += 1
    | ^
488 |
489 |                 state.drop_zone_results.append(result)
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:489:17: SyntaxError: Expected a statement
    |
487 |                     state.failed_zones += 1
488 |
489 |                 state.drop_zone_results.append(result)
    |                 ^
490 |
491 |                 if request.enable_progress_tracking and self._progress_tracking_service:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:494:101: E501 Line too long (111 > 100)
    |
492 |                     progress = (i + 1) / len(request.drop_zones,
493 |     )
494 |                     self._progress_tracking_service.update_progress(EnablePhase.WIDGET_CONFIGURATION, progress)
    |                                                                                                     ^^^^^^^^^^^ E501
495 |
496 |             phase_times[EnablePhase.WIDGET_CONFIGURATION] = time.time() - phase_start
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:496:13: SyntaxError: unindent does not match any outer indentation level
    |
494 |                     self._progress_tracking_service.update_progress(EnablePhase.WIDGET_CONFIGURATION, progress)
495 |
496 |             phase_times[EnablePhase.WIDGET_CONFIGURATION] = time.time() - phase_start
    |             ^
497 |
498 |             # Phase 3: Handler Setup
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:499:1: SyntaxError: Unexpected indentation
    |
498 |             # Phase 3: Handler Setup
499 |             phase_start = time.time()
    | ^
500 |             state.current_phase = EnablePhase.HANDLER_SETUP
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:506:1: SyntaxError: Expected a statement
    |
505 |             # Setup file handling
506 | handler_setup, file_handler, handler_error = (
    | ^
507 |     self._file_handler_service.setup_file_handling()
508 |                 request.file_handling,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:508:17: SyntaxError: Expected ')', found name
    |
506 | handler_setup, file_handler, handler_error = (
507 |     self._file_handler_service.setup_file_handling()
508 |                 request.file_handling,
    |                 ^
509 |             )
510 |             if not handler_setup:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:509:13: SyntaxError: Expected a statement
    |
507 |     self._file_handler_service.setup_file_handling()
508 |                 request.file_handling,
509 |             )
    |             ^
510 |             if not handler_setup:
511 |                 warnings.append(f"Failed to setup file handling: {handler_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:509:14: SyntaxError: Expected a statement
    |
507 |     self._file_handler_service.setup_file_handling()
508 |                 request.file_handling,
509 |             )
    |              ^
510 |             if not handler_setup:
511 |                 warnings.append(f"Failed to setup file handling: {handler_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:510:1: SyntaxError: Unexpected indentation
    |
508 |                 request.file_handling,
509 |             )
510 |             if not handler_setup:
    | ^
511 |                 warnings.append(f"Failed to setup file handling: {handler_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:514:1: SyntaxError: Expected a statement
    |
513 |             # Register file types
514 | types_registered, types_count, types_error = (
    | ^
515 |     self._file_handler_service.register_file_types()
516 |                 request.file_types,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:516:17: SyntaxError: Expected ')', found name
    |
514 | types_registered, types_count, types_error = (
515 |     self._file_handler_service.register_file_types()
516 |                 request.file_types,
    |                 ^
517 |             )
518 |             if not types_registered:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:517:13: SyntaxError: Expected a statement
    |
515 |     self._file_handler_service.register_file_types()
516 |                 request.file_types,
517 |             )
    |             ^
518 |             if not types_registered:
519 |                 warnings.append(f"Failed to register file types: {types_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:517:14: SyntaxError: Expected a statement
    |
515 |     self._file_handler_service.register_file_types()
516 |                 request.file_types,
517 |             )
    |              ^
518 |             if not types_registered:
519 |                 warnings.append(f"Failed to register file types: {types_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:518:1: SyntaxError: Unexpected indentation
    |
516 |                 request.file_types,
517 |             )
518 |             if not types_registered:
    | ^
519 |                 warnings.append(f"Failed to register file types: {types_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:522:1: SyntaxError: Expected a statement
    |
521 |             # Install validators
522 | validators_installed, validators_count, validators_error = (
    | ^
523 |     self._file_handler_service.install_validators()
524 |                 request.file_types,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:524:17: SyntaxError: Expected ')', found name
    |
522 | validators_installed, validators_count, validators_error = (
523 |     self._file_handler_service.install_validators()
524 |                 request.file_types,
    |                 ^
525 |             )
526 |             if not validators_installed:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:525:13: SyntaxError: Expected a statement
    |
523 |     self._file_handler_service.install_validators()
524 |                 request.file_types,
525 |             )
    |             ^
526 |             if not validators_installed:
527 |                 warnings.append(f"Failed to install validators: {validators_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:525:14: SyntaxError: Expected a statement
    |
523 |     self._file_handler_service.install_validators()
524 |                 request.file_types,
525 |             )
    |              ^
526 |             if not validators_installed:
527 |                 warnings.append(f"Failed to install validators: {validators_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:526:1: SyntaxError: Unexpected indentation
    |
524 |                 request.file_types,
525 |             )
526 |             if not validators_installed:
    | ^
527 |                 warnings.append(f"Failed to install validators: {validators_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:530:1: SyntaxError: Expected a statement
    |
529 |             # Configure processing
530 | processing_configured, processing_error = (
    | ^
531 |     self._file_handler_service.configure_processing()
532 |                 request.file_handling,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:532:17: SyntaxError: Expected ')', found name
    |
530 | processing_configured, processing_error = (
531 |     self._file_handler_service.configure_processing()
532 |                 request.file_handling,
    |                 ^
533 |             )
534 |             if not processing_configured:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:533:13: SyntaxError: Expected a statement
    |
531 |     self._file_handler_service.configure_processing()
532 |                 request.file_handling,
533 |             )
    |             ^
534 |             if not processing_configured:
535 |                 warnings.append(f"Failed to configure processing: {processing_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:533:14: SyntaxError: Expected a statement
    |
531 |     self._file_handler_service.configure_processing()
532 |                 request.file_handling,
533 |             )
    |              ^
534 |             if not processing_configured:
535 |                 warnings.append(f"Failed to configure processing: {processing_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:534:1: SyntaxError: Unexpected indentation
    |
532 |                 request.file_handling,
533 |             )
534 |             if not processing_configured:
    | ^
535 |                 warnings.append(f"Failed to configure processing: {processing_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:543:1: SyntaxError: Expected ',', found name
    |
541 | extensions_registered = (
542 |     len(file_type_config.extensions) if types_registered else 0,)
543 | mime_types_registered = (
    | ^
544 |     len(file_type_config.mime_types) if types_registered else 0,)
545 | validator_installed = (
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:545:1: SyntaxError: Expected ',', found name
    |
543 | mime_types_registered = (
544 |     len(file_type_config.mime_types) if types_registered else 0,)
545 | validator_installed = (
    | ^
546 |     validators_installed and file_type_config.custom_validator is not None,)
547 | validation_configured = (
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:547:1: SyntaxError: Expected ',', found name
    |
545 | validator_installed = (
546 |     validators_installed and file_type_config.custom_validator is not None,)
547 | validation_configured = (
    | ^
548 |     file_type_config.validation_required and validators_installed,)
549 |                 )
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:574:1: SyntaxError: Expected a statement
    |
573 |             # Setup security
574 | security_setup, security_validator, security_error = (
    | ^
575 |     self._security_service.setup_security()
576 |                 request.security_config,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:576:17: SyntaxError: Expected ')', found name
    |
574 | security_setup, security_validator, security_error = (
575 |     self._security_service.setup_security()
576 |                 request.security_config,
    |                 ^
577 |             )
578 |             if not security_setup:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:577:13: SyntaxError: Expected a statement
    |
575 |     self._security_service.setup_security()
576 |                 request.security_config,
577 |             )
    |             ^
578 |             if not security_setup:
579 |                 warnings.append(f"Failed to setup security: {security_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:577:14: SyntaxError: Expected a statement
    |
575 |     self._security_service.setup_security()
576 |                 request.security_config,
577 |             )
    |              ^
578 |             if not security_setup:
579 |                 warnings.append(f"Failed to setup security: {security_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:578:1: SyntaxError: Unexpected indentation
    |
576 |                 request.security_config,
577 |             )
578 |             if not security_setup:
    | ^
579 |                 warnings.append(f"Failed to setup security: {security_error}")
580 |             elif state.handler_setup:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:596:1: SyntaxError: Expected a statement
    |
595 |             # Bind drag and drop events
596 | events_bound, events_count, events_error = (
    | ^
597 |     self._event_binding_service.bind_drag_drop_events()
598 |                 request.drop_zones, request.event_config,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:598:17: SyntaxError: Expected ')', found name
    |
596 | events_bound, events_count, events_error = (
597 |     self._event_binding_service.bind_drag_drop_events()
598 |                 request.drop_zones, request.event_config,
    |                 ^
599 |             )
600 |             if not events_bound:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:599:13: SyntaxError: Expected a statement
    |
597 |     self._event_binding_service.bind_drag_drop_events()
598 |                 request.drop_zones, request.event_config,
599 |             )
    |             ^
600 |             if not events_bound:
601 |                 warnings.append(f"Failed to bind drag and drop events: {events_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:599:14: SyntaxError: Expected a statement
    |
597 |     self._event_binding_service.bind_drag_drop_events()
598 |                 request.drop_zones, request.event_config,
599 |             )
    |              ^
600 |             if not events_bound:
601 |                 warnings.append(f"Failed to bind drag and drop events: {events_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:600:1: SyntaxError: Unexpected indentation
    |
598 |                 request.drop_zones, request.event_config,
599 |             )
600 |             if not events_bound:
    | ^
601 |                 warnings.append(f"Failed to bind drag and drop events: {events_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:612:1: SyntaxError: Expected a statement
    |
611 |             # Setup event propagation
612 | propagation_setup, propagation_error = (
    | ^
613 |     self._event_binding_service.setup_event_propagation()
614 |                 request.drop_zones,
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:614:17: SyntaxError: Expected ')', found name
    |
612 | propagation_setup, propagation_error = (
613 |     self._event_binding_service.setup_event_propagation()
614 |                 request.drop_zones,
    |                 ^
615 |             )
616 |             if not propagation_setup:
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:615:13: SyntaxError: Expected a statement
    |
613 |     self._event_binding_service.setup_event_propagation()
614 |                 request.drop_zones,
615 |             )
    |             ^
616 |             if not propagation_setup:
617 |                 warnings.append(f"Failed to setup event propagation: {propagation_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:615:14: SyntaxError: Expected a statement
    |
613 |     self._event_binding_service.setup_event_propagation()
614 |                 request.drop_zones,
615 |             )
    |              ^
616 |             if not propagation_setup:
617 |                 warnings.append(f"Failed to setup event propagation: {propagation_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:616:1: SyntaxError: Unexpected indentation
    |
614 |                 request.drop_zones,
615 |             )
616 |             if not propagation_setup:
    | ^
617 |                 warnings.append(f"Failed to setup event propagation: {propagation_error}")
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:654:21: SyntaxError: Expected ',', found name
    |
652 |                     failed_zones=state.failed_zones,
653 |                     file_types=len(state.file_type_results)
654 |                     warnings_count=len(warnings)
    |                     ^
655 |                     execution_time=time.time() - start_time,
656 |                 )
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:655:21: SyntaxError: Expected ',', found name
    |
653 |                     file_types=len(state.file_type_results)
654 |                     warnings_count=len(warnings)
655 |                     execution_time=time.time() - start_time,
    |                     ^
656 |                 )
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:677:1: SyntaxError: unindent does not match any outer indentation level
    |
675 |             )
676 |
677 |         except Exception as e:
    | ^
678 |             error_message = f"Unexpected error during drag and drop enablement: {e!s}"
679 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:677:9: SyntaxError: Expected a statement
    |
675 |             )
676 |
677 |         except Exception as e:
    |         ^
678 |             error_message = f"Unexpected error during drag and drop enablement: {e!s}"
679 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:677:26: SyntaxError: Expected a statement
    |
675 |             )
676 |
677 |         except Exception as e:
    |                          ^
678 |             error_message = f"Unexpected error during drag and drop enablement: {e!s}"
679 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:677:31: SyntaxError: Expected an expression
    |
675 |             )
676 |
677 |         except Exception as e:
    |                               ^
678 |             error_message = f"Unexpected error during drag and drop enablement: {e!s}"
679 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:678:1: SyntaxError: Unexpected indentation
    |
677 |         except Exception as e:
678 |             error_message = f"Unexpected error during drag and drop enablement: {e!s}"
    | ^
679 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:685:21: SyntaxError: Expected ',', found name
    |
683 |                     "Drag and drop enablement failed",
684 |                     error=str(e)
685 |                     phase=state.current_phase.value,
    |                     ^
686 |                     execution_time=time.time() - start_time,
687 |                 )
    |

src_refactored\application\system_integration\use_cases\enable_drag_drop_use_case.py:696:14: SyntaxError: Expected a statement
    |
694 |                 execution_time=time.time() - start_time,
695 |                 phase_times=phase_times,
696 |             )
    |              ^
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:364:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
363 |             # Validate icon configuration
364 | icon_valid, icon_error = (
    | ^
365 |     self._tray_validation_service.validate_icon_configuration(request.icon_config))
366 |             if not icon_valid:
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:366:1: SyntaxError: Unexpected indentation
    |
364 | icon_valid, icon_error = (
365 |     self._tray_validation_service.validate_icon_configuration(request.icon_config))
366 |             if not icon_valid:
    | ^
367 |                 state.error_message = f"Invalid icon configuration: {icon_error}"
368 |                 return InitializeSystemTrayResponse(
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:376:1: SyntaxError: Expected a statement
    |
375 |             # Validate menu configuration
376 | menu_valid, menu_error = (
    | ^
377 |     self._tray_validation_service.validate_menu_configuration(request.menu_config))
378 |             if not menu_valid:
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:378:1: SyntaxError: Unexpected indentation
    |
376 | menu_valid, menu_error = (
377 |     self._tray_validation_service.validate_menu_configuration(request.menu_config))
378 |             if not menu_valid:
    | ^
379 |                 state.error_message = f"Invalid menu configuration: {menu_error}"
380 |                 return InitializeSystemTrayResponse(
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:388:1: SyntaxError: Expected a statement
    |
387 |             # Validate event configuration
388 | event_valid, event_error = (
    | ^
389 |     self._tray_validation_service.validate_event_configuration(request.event_config))
390 |             if not event_valid:
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:390:1: SyntaxError: Unexpected indentation
    |
388 | event_valid, event_error = (
389 |     self._tray_validation_service.validate_event_configuration(request.event_config))
390 |             if not event_valid:
    | ^
391 |                 state.error_message = f"Invalid event configuration: {event_error}"
392 |                 return InitializeSystemTrayResponse(
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:411:1: SyntaxError: Expected a statement
    |
409 |                 self._progress_tracking_service.update_progress(InitializePhase.ICON_SETUP, 0.0)
410 |
411 | icon_loaded, icon_widget, icon_error = (
    | ^
412 |     self._icon_management_service.load_icon(request.icon_config))
413 |             if not icon_loaded:
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:413:1: SyntaxError: Unexpected indentation
    |
411 | icon_loaded, icon_widget, icon_error = (
412 |     self._icon_management_service.load_icon(request.icon_config))
413 |             if not icon_loaded:
    | ^
414 |                 state.error_message = f"Failed to load icon: {icon_error}"
415 |                 return InitializeSystemTrayResponse(
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:480:1: SyntaxError: Expected a statement
    |
479 |             # Bind menu actions
480 | actions_bound, actions_count, actions_error = (
    | ^
481 |     self._menu_creation_service.bind_menu_actions()
482 |                 menu_widget, request.menu_config.menu_items,
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:482:17: SyntaxError: Expected ')', found name
    |
480 | actions_bound, actions_count, actions_error = (
481 |     self._menu_creation_service.bind_menu_actions()
482 |                 menu_widget, request.menu_config.menu_items,
    |                 ^
483 |             )
484 |             if not actions_bound:
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:483:13: SyntaxError: Expected a statement
    |
481 |     self._menu_creation_service.bind_menu_actions()
482 |                 menu_widget, request.menu_config.menu_items,
483 |             )
    |             ^
484 |             if not actions_bound:
485 |                 warnings.append(f"Failed to bind some menu actions: {actions_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:483:14: SyntaxError: Expected a statement
    |
481 |     self._menu_creation_service.bind_menu_actions()
482 |                 menu_widget, request.menu_config.menu_items,
483 |             )
    |              ^
484 |             if not actions_bound:
485 |                 warnings.append(f"Failed to bind some menu actions: {actions_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:484:1: SyntaxError: Unexpected indentation
    |
482 |                 menu_widget, request.menu_config.menu_items,
483 |             )
484 |             if not actions_bound:
    | ^
485 |                 warnings.append(f"Failed to bind some menu actions: {actions_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:492:17: SyntaxError: Expected ',', found name
    |
490 |                 separators_count=sum(1 for item in request.menu_config.menu_items if item.item_type
491 |                  ==  MenuItemType.SEPARATOR)
492 |                 submenus_count=sum(1 for item in request.menu_config.menu_items if item.item_type
    |                 ^
493 |                  ==  MenuItemType.SUBMENU)
494 |                 actions_bound=actions_count,
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:494:17: SyntaxError: Expected ',', found name
    |
492 |                 submenus_count=sum(1 for item in request.menu_config.menu_items if item.item_type
493 |                  ==  MenuItemType.SUBMENU)
494 |                 actions_bound=actions_count,
    |                 ^
495 |                 style_applied=bool(request.menu_config.style_sheet),
496 |             )
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:523:1: SyntaxError: Expected a statement
    |
522 |             # Set tray icon
523 | icon_set, icon_set_error = (
    | ^
524 |     self._tray_creation_service.set_tray_icon(tray_widget, icon_widget))
525 |             if not icon_set:
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:525:1: SyntaxError: Unexpected indentation
    |
523 | icon_set, icon_set_error = (
524 |     self._tray_creation_service.set_tray_icon(tray_widget, icon_widget))
525 |             if not icon_set:
    | ^
526 |                 warnings.append(f"Failed to set tray icon: {icon_set_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:529:1: SyntaxError: Expected a statement
    |
528 |             # Set tray menu
529 | menu_set, menu_set_error = (
    | ^
530 |     self._tray_creation_service.set_tray_menu(tray_widget, menu_widget))
531 |             if not menu_set:
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:531:1: SyntaxError: Unexpected indentation
    |
529 | menu_set, menu_set_error = (
530 |     self._tray_creation_service.set_tray_menu(tray_widget, menu_widget))
531 |             if not menu_set:
    | ^
532 |                 warnings.append(f"Failed to set tray menu: {menu_set_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:556:1: SyntaxError: Expected a statement
    |
555 |             # Bind click events
556 | clicks_bound, clicks_count, clicks_error = (
    | ^
557 |     self._event_binding_service.bind_click_events()
558 |                 tray_widget, request.event_config,
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:558:17: SyntaxError: Expected ')', found name
    |
556 | clicks_bound, clicks_count, clicks_error = (
557 |     self._event_binding_service.bind_click_events()
558 |                 tray_widget, request.event_config,
    |                 ^
559 |             )
560 |             if not clicks_bound:
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:559:13: SyntaxError: Expected a statement
    |
557 |     self._event_binding_service.bind_click_events()
558 |                 tray_widget, request.event_config,
559 |             )
    |             ^
560 |             if not clicks_bound:
561 |                 warnings.append(f"Failed to bind click events: {clicks_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:559:14: SyntaxError: Expected a statement
    |
557 |     self._event_binding_service.bind_click_events()
558 |                 tray_widget, request.event_config,
559 |             )
    |              ^
560 |             if not clicks_bound:
561 |                 warnings.append(f"Failed to bind click events: {clicks_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:560:1: SyntaxError: Unexpected indentation
    |
558 |                 tray_widget, request.event_config,
559 |             )
560 |             if not clicks_bound:
    | ^
561 |                 warnings.append(f"Failed to bind click events: {clicks_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:571:1: SyntaxError: Expected a statement
    |
570 |             # Setup notifications
571 | notifications_setup, notifications_error = (
    | ^
572 |     self._event_binding_service.setup_notifications()
573 |                 tray_widget, request.behavior_config.show_notifications,
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:573:17: SyntaxError: Expected ')', found name
    |
571 | notifications_setup, notifications_error = (
572 |     self._event_binding_service.setup_notifications()
573 |                 tray_widget, request.behavior_config.show_notifications,
    |                 ^
574 |             )
575 |             if not notifications_setup:
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:574:13: SyntaxError: Expected a statement
    |
572 |     self._event_binding_service.setup_notifications()
573 |                 tray_widget, request.behavior_config.show_notifications,
574 |             )
    |             ^
575 |             if not notifications_setup:
576 |                 warnings.append(f"Failed to setup notifications: {notifications_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:574:14: SyntaxError: Expected a statement
    |
572 |     self._event_binding_service.setup_notifications()
573 |                 tray_widget, request.behavior_config.show_notifications,
574 |             )
    |              ^
575 |             if not notifications_setup:
576 |                 warnings.append(f"Failed to setup notifications: {notifications_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:575:1: SyntaxError: Unexpected indentation
    |
573 |                 tray_widget, request.behavior_config.show_notifications,
574 |             )
575 |             if not notifications_setup:
    | ^
576 |                 warnings.append(f"Failed to setup notifications: {notifications_error}")
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:616:21: SyntaxError: Expected ',', found name
    |
614 |                     "System tray initialization completed successfully",
615 |                     warnings_count=len(warnings)
616 |                     execution_time=time.time() - start_time,
    |                     ^
617 |                 )
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:631:1: SyntaxError: unindent does not match any outer indentation level
    |
629 |             )
630 |
631 |         except Exception as e:
    | ^
632 |             error_message = f"Unexpected error during system tray initialization: {e!s}"
633 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:631:9: SyntaxError: Expected a statement
    |
629 |             )
630 |
631 |         except Exception as e:
    |         ^
632 |             error_message = f"Unexpected error during system tray initialization: {e!s}"
633 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:631:26: SyntaxError: Expected a statement
    |
629 |             )
630 |
631 |         except Exception as e:
    |                          ^
632 |             error_message = f"Unexpected error during system tray initialization: {e!s}"
633 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:631:31: SyntaxError: Expected an expression
    |
629 |             )
630 |
631 |         except Exception as e:
    |                               ^
632 |             error_message = f"Unexpected error during system tray initialization: {e!s}"
633 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:632:1: SyntaxError: Unexpected indentation
    |
631 |         except Exception as e:
632 |             error_message = f"Unexpected error during system tray initialization: {e!s}"
    | ^
633 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:639:21: SyntaxError: Expected ',', found name
    |
637 |                     "System tray initialization failed",
638 |                     error=str(e)
639 |                     phase=state.current_phase.value,
    |                     ^
640 |                     execution_time=time.time() - start_time,
641 |                 )
    |

src_refactored\application\system_integration\use_cases\initialize_system_tray_use_case.py:650:14: SyntaxError: Expected a statement
    |
648 |                 execution_time=time.time() - start_time,
649 |                 phase_times=phase_times,
650 |             )
    |              ^
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:402:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
401 |             # Validate system configuration
402 | system_valid, system_error = (
    | ^
403 |     self._filter_validation_service.validate_system_configuration()
404 |                 request.system_config,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:404:17: SyntaxError: Expected ')', found name
    |
402 | system_valid, system_error = (
403 |     self._filter_validation_service.validate_system_configuration()
404 |                 request.system_config,
    |                 ^
405 |             )
406 |             if not system_valid:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:405:13: SyntaxError: Expected a statement
    |
403 |     self._filter_validation_service.validate_system_configuration()
404 |                 request.system_config,
405 |             )
    |             ^
406 |             if not system_valid:
407 |                 state.error_message = f"Invalid system configuration: {system_error}"
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:405:14: SyntaxError: Expected a statement
    |
403 |     self._filter_validation_service.validate_system_configuration()
404 |                 request.system_config,
405 |             )
    |              ^
406 |             if not system_valid:
407 |                 state.error_message = f"Invalid system configuration: {system_error}"
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:406:1: SyntaxError: Unexpected indentation
    |
404 |                 request.system_config,
405 |             )
406 |             if not system_valid:
    | ^
407 |                 state.error_message = f"Invalid system configuration: {system_error}"
408 |                 return InstallEventFilterResponse(
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:416:1: SyntaxError: Expected a statement
    |
415 |             # Validate permissions
416 | permissions_valid, permissions_error = (
    | ^
417 |     self._filter_validation_service.validate_permissions()
418 |                 request.system_config,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:418:17: SyntaxError: Expected ')', found name
    |
416 | permissions_valid, permissions_error = (
417 |     self._filter_validation_service.validate_permissions()
418 |                 request.system_config,
    |                 ^
419 |             )
420 |             if not permissions_valid:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:419:13: SyntaxError: Expected a statement
    |
417 |     self._filter_validation_service.validate_permissions()
418 |                 request.system_config,
419 |             )
    |             ^
420 |             if not permissions_valid:
421 |                 state.error_message = f"Insufficient permissions: {permissions_error}"
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:419:14: SyntaxError: Expected a statement
    |
417 |     self._filter_validation_service.validate_permissions()
418 |                 request.system_config,
419 |             )
    |              ^
420 |             if not permissions_valid:
421 |                 state.error_message = f"Insufficient permissions: {permissions_error}"
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:420:1: SyntaxError: Unexpected indentation
    |
418 |                 request.system_config,
419 |             )
420 |             if not permissions_valid:
    | ^
421 |                 state.error_message = f"Insufficient permissions: {permissions_error}"
422 |                 return InstallEventFilterResponse(
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:430:50: SyntaxError: Expected an indented block after `for` statement
    |
429 |             # Validate filter configurations
430 |             for config in request.filter_configs:
    |                                                  ^
431 | config_valid, config_error = (
432 |     self._filter_validation_service.validate_filter_configuration(config))
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:431:1: SyntaxError: Expected a statement
    |
429 |             # Validate filter configurations
430 |             for config in request.filter_configs:
431 | config_valid, config_error = (
    | ^
432 |     self._filter_validation_service.validate_filter_configuration(config))
433 |                 if not config_valid:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:433:1: SyntaxError: Unexpected indentation
    |
431 | config_valid, config_error = (
432 |     self._filter_validation_service.validate_filter_configuration(config))
433 |                 if not config_valid:
    | ^
434 | state.error_message = (
435 |     f"Invalid filter configuration for {config.filter_id}: {config_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:433:37: SyntaxError: Expected an indented block after `if` statement
    |
431 | config_valid, config_error = (
432 |     self._filter_validation_service.validate_filter_configuration(config))
433 |                 if not config_valid:
    |                                     ^
434 | state.error_message = (
435 |     f"Invalid filter configuration for {config.filter_id}: {config_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:434:1: SyntaxError: Expected a statement
    |
432 |     self._filter_validation_service.validate_filter_configuration(config))
433 |                 if not config_valid:
434 | state.error_message = (
    | ^
435 |     f"Invalid filter configuration for {config.filter_id}: {config_error}")
436 |                     return InstallEventFilterResponse(
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:436:1: SyntaxError: Unexpected indentation
    |
434 | state.error_message = (
435 |     f"Invalid filter configuration for {config.filter_id}: {config_error}")
436 |                     return InstallEventFilterResponse(
    | ^
437 |                         result=InstallResult.VALIDATION_ERROR,
438 |                         state=state,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:444:1: SyntaxError: Expected a statement
    |
443 |             # Check for filter conflicts
444 | conflicts_valid, conflicts_error = (
    | ^
445 |     self._filter_validation_service.check_filter_conflicts()
446 |                 request.filter_configs,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:446:17: SyntaxError: Expected ')', found name
    |
444 | conflicts_valid, conflicts_error = (
445 |     self._filter_validation_service.check_filter_conflicts()
446 |                 request.filter_configs,
    |                 ^
447 |             )
448 |             if not conflicts_valid:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:447:13: SyntaxError: Expected a statement
    |
445 |     self._filter_validation_service.check_filter_conflicts()
446 |                 request.filter_configs,
447 |             )
    |             ^
448 |             if not conflicts_valid:
449 |                 warnings.append(f"Filter conflicts detected: {conflicts_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:447:14: SyntaxError: Expected a statement
    |
445 |     self._filter_validation_service.check_filter_conflicts()
446 |                 request.filter_configs,
447 |             )
    |              ^
448 |             if not conflicts_valid:
449 |                 warnings.append(f"Filter conflicts detected: {conflicts_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:448:1: SyntaxError: Unexpected indentation
    |
446 |                 request.filter_configs,
447 |             )
448 |             if not conflicts_valid:
    | ^
449 |                 warnings.append(f"Filter conflicts detected: {conflicts_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:467:1: SyntaxError: Expected a statement
    |
466 |                 # Create filter
467 | filter_created, filter_obj, filter_error = (
    | ^
468 |     self._filter_creation_service.create_filter(config))
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:470:1: SyntaxError: Unexpected indentation
    |
468 |     self._filter_creation_service.create_filter(config))
469 |
470 |                 result = FilterInstallationResult(
    | ^
471 |                     filter_id=config.filter_id,
472 |                     filter_installed=filter_created,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:483:1: SyntaxError: Expected a statement
    |
482 |                     # Configure filter priority
483 | priority_set, priority_error = (
    | ^
484 |     self._filter_creation_service.configure_filter_priority()
485 |                         filter_obj, config.filter_priority,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:485:25: SyntaxError: Expected ')', found name
    |
483 | priority_set, priority_error = (
484 |     self._filter_creation_service.configure_filter_priority()
485 |                         filter_obj, config.filter_priority,
    |                         ^
486 |                     )
487 |                     if not priority_set and priority_error:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:486:21: SyntaxError: Expected a statement
    |
484 |     self._filter_creation_service.configure_filter_priority()
485 |                         filter_obj, config.filter_priority,
486 |                     )
    |                     ^
487 |                     if not priority_set and priority_error:
488 |                         warnings.append(f"Failed to set priority for {config.filter_id}: {priority_e\
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:486:22: SyntaxError: Expected a statement
    |
484 |     self._filter_creation_service.configure_filter_priority()
485 |                         filter_obj, config.filter_priority,
486 |                     )
    |                      ^
487 |                     if not priority_set and priority_error:
488 |                         warnings.append(f"Failed to set priority for {config.filter_id}: {priority_e\
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:487:1: SyntaxError: Unexpected indentation
    |
485 |                         filter_obj, config.filter_priority,
486 |                     )
487 |                     if not priority_set and priority_error:
    | ^
488 |                         warnings.append(f"Failed to set priority for {config.filter_id}: {priority_e\
489 |     rror}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:488:101: E501 Line too long (101 > 100)
    |
486 |                     )
487 |                     if not priority_set and priority_error:
488 |                         warnings.append(f"Failed to set priority for {config.filter_id}: {priority_e\
    |                                                                                                     ^ E501
489 |     rror}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:489:5: SyntaxError: f-string: expecting '}'
    |
487 |                     if not priority_set and priority_error:
488 |                         warnings.append(f"Failed to set priority for {config.filter_id}: {priority_e\
489 |     rror}")
    |     ^
490 |
491 |                     # Set filter scope
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:489:9: SyntaxError: f-string: single '}' is not allowed
    |
487 |                     if not priority_set and priority_error:
488 |                         warnings.append(f"Failed to set priority for {config.filter_id}: {priority_e\
489 |     rror}")
    |         ^
490 |
491 |                     # Set filter scope
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:489:10: SyntaxError: Expected ',', found FStringEnd
    |
487 |                     if not priority_set and priority_error:
488 |                         warnings.append(f"Failed to set priority for {config.filter_id}: {priority_e\
489 |     rror}")
    |          ^
490 |
491 |                     # Set filter scope
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:496:101: E501 Line too long (101 > 100)
    |
494 |                     )
495 |                     if not scope_set and scope_error:
496 |                         warnings.append(f"Failed to set scope for {config.filter_id}: {scope_error}"\
    |                                                                                                     ^ E501
497 |     )
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:500:1: SyntaxError: unindent does not match any outer indentation level
    |
499 |                     state.active_filters += 1
500 |                 else:
    | ^
501 |                     state.failed_filters += 1
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:500:17: SyntaxError: Expected a statement
    |
499 |                     state.active_filters += 1
500 |                 else:
    |                 ^
501 |                     state.failed_filters += 1
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:500:21: SyntaxError: Expected a statement
    |
499 |                     state.active_filters += 1
500 |                 else:
    |                     ^
501 |                     state.failed_filters += 1
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:500:22: SyntaxError: Expected a statement
    |
499 |                     state.active_filters += 1
500 |                 else:
    |                      ^
501 |                     state.failed_filters += 1
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:501:1: SyntaxError: Unexpected indentation
    |
499 |                     state.active_filters += 1
500 |                 else:
501 |                     state.failed_filters += 1
    | ^
502 |
503 |                 state.filter_results.append(result)
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:503:1: SyntaxError: unindent does not match any outer indentation level
    |
501 |                     state.failed_filters += 1
502 |
503 |                 state.filter_results.append(result)
    | ^
504 |
505 |                 if request.enable_progress_tracking and self._progress_tracking_service:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:505:1: SyntaxError: Unexpected indentation
    |
503 |                 state.filter_results.append(result)
504 |
505 |                 if request.enable_progress_tracking and self._progress_tracking_service:
    | ^
506 |                     progress = (i + 1) / len(request.filter_configs,
507 |     )
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:508:101: E501 Line too long (107 > 100)
    |
506 |                     progress = (i + 1) / len(request.filter_configs,
507 |     )
508 |                     self._progress_tracking_service.update_progress(InstallPhase.FILTER_CREATION, progress)
    |                                                                                                     ^^^^^^^ E501
509 |
510 |             # Check if any filters were created successfully
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:511:13: SyntaxError: unindent does not match any outer indentation level
    |
510 |             # Check if any filters were created successfully
511 |             if not created_filters:
    |             ^
512 |                 state.error_message = "Failed to create any event filters"
513 |                 return InstallEventFilterResponse(
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:522:1: SyntaxError: unindent does not match any outer indentation level
    |
520 |                 )
521 |
522 |             phase_times[InstallPhase.FILTER_CREATION] = time.time() - phase_start
    | ^
523 |
524 |             # Phase 3: System Integration
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:525:1: SyntaxError: Unexpected indentation
    |
524 |             # Phase 3: System Integration
525 |             phase_start = time.time()
    | ^
526 |             state.current_phase = InstallPhase.SYSTEM_INTEGRATION
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:529:101: E501 Line too long (101 > 100)
    |
528 |             if request.enable_progress_tracking and self._progress_tracking_service:
529 |                 self._progress_tracking_service.update_progress(InstallPhase.SYSTEM_INTEGRATION, 0.0)
    |                                                                                                     ^ E501
530 |
531 |             # Setup system integration
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:532:30: COM818 Trailing comma on bare tuple prohibited
    |
531 |             # Setup system integration
532 |             integration_setup,
    |                              ^ COM818
533 | integrator, integration_error = (
534 |     self._system_integration_service.setup_system_integration()
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:535:17: SyntaxError: Expected ')', found name
    |
533 | integrator, integration_error = (
534 |     self._system_integration_service.setup_system_integration()
535 |                 request.system_config,
    |                 ^
536 |             )
537 |             if not integration_setup:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:536:13: SyntaxError: Expected a statement
    |
534 |     self._system_integration_service.setup_system_integration()
535 |                 request.system_config,
536 |             )
    |             ^
537 |             if not integration_setup:
538 |                 warnings.append(f"Failed to setup system integration: {integration_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:536:14: SyntaxError: Expected a statement
    |
534 |     self._system_integration_service.setup_system_integration()
535 |                 request.system_config,
536 |             )
    |              ^
537 |             if not integration_setup:
538 |                 warnings.append(f"Failed to setup system integration: {integration_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:537:1: SyntaxError: Unexpected indentation
    |
535 |                 request.system_config,
536 |             )
537 |             if not integration_setup:
    | ^
538 |                 warnings.append(f"Failed to setup system integration: {integration_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:551:58: SyntaxError: Expected an indented block after `if` statement
    |
549 |             # Install global hooks if needed
550 |             global_hooks_installed = False
551 |             if request.system_config.enable_global_hooks:
    |                                                          ^
552 | hooks_installed, hooks_error = (
553 |     self._system_integration_service.install_global_hooks()
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:552:1: SyntaxError: Expected a statement
    |
550 |             global_hooks_installed = False
551 |             if request.system_config.enable_global_hooks:
552 | hooks_installed, hooks_error = (
    | ^
553 |     self._system_integration_service.install_global_hooks()
554 |                     request.system_config,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:554:21: SyntaxError: Expected ')', found name
    |
552 | hooks_installed, hooks_error = (
553 |     self._system_integration_service.install_global_hooks()
554 |                     request.system_config,
    |                     ^
555 |                 )
556 |                 if not hooks_installed:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:555:17: SyntaxError: Expected a statement
    |
553 |     self._system_integration_service.install_global_hooks()
554 |                     request.system_config,
555 |                 )
    |                 ^
556 |                 if not hooks_installed:
557 |                     warnings.append(f"Failed to install global hooks: {hooks_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:555:18: SyntaxError: Expected a statement
    |
553 |     self._system_integration_service.install_global_hooks()
554 |                     request.system_config,
555 |                 )
    |                  ^
556 |                 if not hooks_installed:
557 |                     warnings.append(f"Failed to install global hooks: {hooks_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:556:1: SyntaxError: Unexpected indentation
    |
554 |                     request.system_config,
555 |                 )
556 |                 if not hooks_installed:
    | ^
557 |                     warnings.append(f"Failed to install global hooks: {hooks_error}")
558 |                 else:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:562:13: SyntaxError: unindent does not match any outer indentation level
    |
561 |             # Validate security
562 |             security_validated = False
    |             ^
563 |             if request.system_config.security_validation:
564 | security_valid, security_error = (
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:563:1: SyntaxError: Unexpected indentation
    |
561 |             # Validate security
562 |             security_validated = False
563 |             if request.system_config.security_validation:
    | ^
564 | security_valid, security_error = (
565 |     self._system_integration_service.validate_security(created_filters))
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:563:58: SyntaxError: Expected an indented block after `if` statement
    |
561 |             # Validate security
562 |             security_validated = False
563 |             if request.system_config.security_validation:
    |                                                          ^
564 | security_valid, security_error = (
565 |     self._system_integration_service.validate_security(created_filters))
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:564:1: SyntaxError: Expected a statement
    |
562 |             security_validated = False
563 |             if request.system_config.security_validation:
564 | security_valid, security_error = (
    | ^
565 |     self._system_integration_service.validate_security(created_filters))
566 |                 if not security_valid:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:566:1: SyntaxError: Unexpected indentation
    |
564 | security_valid, security_error = (
565 |     self._system_integration_service.validate_security(created_filters))
566 |                 if not security_valid:
    | ^
567 |                     warnings.append(f"Security validation failed: {security_error}")
568 |                 else:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:571:13: SyntaxError: unindent does not match any outer indentation level
    |
569 |                     security_validated = True
570 |
571 |             state.system_integration = SystemIntegrationResult(
    |             ^
572 |                 integration_successful=integration_setup,
573 |                 global_hooks_installed=global_hooks_installed,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:581:1: SyntaxError: Unexpected indentation
    |
579 |             )
580 |
581 |             phase_times[InstallPhase.SYSTEM_INTEGRATION] = time.time() - phase_start
    | ^
582 |
583 |             if request.enable_progress_tracking and self._progress_tracking_service:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:584:101: E501 Line too long (101 > 100)
    |
583 |             if request.enable_progress_tracking and self._progress_tracking_service:
584 |                 self._progress_tracking_service.update_progress(InstallPhase.SYSTEM_INTEGRATION, 1.0)
    |                                                                                                     ^ E501
585 |
586 |             # Phase 4: Event Binding
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:602:54: SyntaxError: Expected an indented block after `if` statement
    |
600 |             # Setup event cascading
601 |             cascading_setup = False
602 |             if request.binding_config.cascade_events:
    |                                                      ^
603 | cascading_enabled, cascading_error = (
604 |     self._event_binding_service.setup_event_cascading(created_filters))
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:603:1: SyntaxError: Expected a statement
    |
601 |             cascading_setup = False
602 |             if request.binding_config.cascade_events:
603 | cascading_enabled, cascading_error = (
    | ^
604 |     self._event_binding_service.setup_event_cascading(created_filters))
605 |                 if not cascading_enabled:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:605:1: SyntaxError: Unexpected indentation
    |
603 | cascading_enabled, cascading_error = (
604 |     self._event_binding_service.setup_event_cascading(created_filters))
605 |                 if not cascading_enabled:
    | ^
606 |                     warnings.append(f"Failed to setup event cascading: {cascading_error}")
607 |                 else:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:611:13: SyntaxError: unindent does not match any outer indentation level
    |
610 |             # Configure event propagation
611 |             propagation_setup = False
    |             ^
612 |             if request.binding_config.event_propagation:
613 | propagation_enabled, propagation_error = (
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:612:1: SyntaxError: Unexpected indentation
    |
610 |             # Configure event propagation
611 |             propagation_setup = False
612 |             if request.binding_config.event_propagation:
    | ^
613 | propagation_enabled, propagation_error = (
614 |     self._event_binding_service.configure_propagation()
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:612:57: SyntaxError: Expected an indented block after `if` statement
    |
610 |             # Configure event propagation
611 |             propagation_setup = False
612 |             if request.binding_config.event_propagation:
    |                                                         ^
613 | propagation_enabled, propagation_error = (
614 |     self._event_binding_service.configure_propagation()
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:613:1: SyntaxError: Expected a statement
    |
611 |             propagation_setup = False
612 |             if request.binding_config.event_propagation:
613 | propagation_enabled, propagation_error = (
    | ^
614 |     self._event_binding_service.configure_propagation()
615 |                     created_filters, request.binding_config.event_propagation,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:615:21: SyntaxError: Expected ')', found name
    |
613 | propagation_enabled, propagation_error = (
614 |     self._event_binding_service.configure_propagation()
615 |                     created_filters, request.binding_config.event_propagation,
    |                     ^
616 |                 )
617 |                 if not propagation_enabled:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:616:17: SyntaxError: Expected a statement
    |
614 |     self._event_binding_service.configure_propagation()
615 |                     created_filters, request.binding_config.event_propagation,
616 |                 )
    |                 ^
617 |                 if not propagation_enabled:
618 |                     warnings.append(f"Failed to configure event propagation: {propagation_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:616:18: SyntaxError: Expected a statement
    |
614 |     self._event_binding_service.configure_propagation()
615 |                     created_filters, request.binding_config.event_propagation,
616 |                 )
    |                  ^
617 |                 if not propagation_enabled:
618 |                     warnings.append(f"Failed to configure event propagation: {propagation_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:617:1: SyntaxError: Unexpected indentation
    |
615 |                     created_filters, request.binding_config.event_propagation,
616 |                 )
617 |                 if not propagation_enabled:
    | ^
618 |                     warnings.append(f"Failed to configure event propagation: {propagation_error}")
619 |                 else:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:623:13: SyntaxError: unindent does not match any outer indentation level
    |
622 |             # Install error handling
623 |             error_handling_setup = False
    |             ^
624 |             if request.binding_config.error_handling:
625 | error_handling_enabled, error_handling_error = (
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:624:1: SyntaxError: Unexpected indentation
    |
622 |             # Install error handling
623 |             error_handling_setup = False
624 |             if request.binding_config.error_handling:
    | ^
625 | error_handling_enabled, error_handling_error = (
626 |     self._event_binding_service.install_error_handling()
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:624:54: SyntaxError: Expected an indented block after `if` statement
    |
622 |             # Install error handling
623 |             error_handling_setup = False
624 |             if request.binding_config.error_handling:
    |                                                      ^
625 | error_handling_enabled, error_handling_error = (
626 |     self._event_binding_service.install_error_handling()
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:625:1: SyntaxError: Expected a statement
    |
623 |             error_handling_setup = False
624 |             if request.binding_config.error_handling:
625 | error_handling_enabled, error_handling_error = (
    | ^
626 |     self._event_binding_service.install_error_handling()
627 |                     created_filters,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:627:21: SyntaxError: Expected ')', found name
    |
625 | error_handling_enabled, error_handling_error = (
626 |     self._event_binding_service.install_error_handling()
627 |                     created_filters,
    |                     ^
628 |                 )
629 |                 if not error_handling_enabled:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:628:17: SyntaxError: Expected a statement
    |
626 |     self._event_binding_service.install_error_handling()
627 |                     created_filters,
628 |                 )
    |                 ^
629 |                 if not error_handling_enabled:
630 |                     warnings.append(f"Failed to install error handling: {error_handling_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:628:18: SyntaxError: Expected a statement
    |
626 |     self._event_binding_service.install_error_handling()
627 |                     created_filters,
628 |                 )
    |                  ^
629 |                 if not error_handling_enabled:
630 |                     warnings.append(f"Failed to install error handling: {error_handling_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:629:1: SyntaxError: Unexpected indentation
    |
627 |                     created_filters,
628 |                 )
629 |                 if not error_handling_enabled:
    | ^
630 |                     warnings.append(f"Failed to install error handling: {error_handling_error}")
631 |                 else:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:635:13: SyntaxError: unindent does not match any outer indentation level
    |
634 |             # Update filter results with binding information
635 |             events_bound_count = 0
    |             ^
636 |             for i, filter_result in enumerate(state.filter_results):
637 |                 if filter_result.filter_installed:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:636:1: SyntaxError: Unexpected indentation
    |
634 |             # Update filter results with binding information
635 |             events_bound_count = 0
636 |             for i, filter_result in enumerate(state.filter_results):
    | ^
637 |                 if filter_result.filter_installed:
638 |                     filter_result.filter_active = events_bound
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:678:63: SyntaxError: Expected an indented block after `if` statement
    |
677 |                 # Run performance tests
678 |                 if request.testing_config.performance_testing:
    |                                                               ^
679 | perf_passed, perf_metrics, perf_error = (
680 |     self._filter_testing_service.run_performance_tests()
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:679:1: SyntaxError: Expected a statement
    |
677 |                 # Run performance tests
678 |                 if request.testing_config.performance_testing:
679 | perf_passed, perf_metrics, perf_error = (
    | ^
680 |     self._filter_testing_service.run_performance_tests()
681 |                         created_filters,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:681:25: SyntaxError: Expected ')', found name
    |
679 | perf_passed, perf_metrics, perf_error = (
680 |     self._filter_testing_service.run_performance_tests()
681 |                         created_filters,
    |                         ^
682 |                     )
683 |                     if not perf_passed:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:682:21: SyntaxError: Expected a statement
    |
680 |     self._filter_testing_service.run_performance_tests()
681 |                         created_filters,
682 |                     )
    |                     ^
683 |                     if not perf_passed:
684 |                         warnings.append(f"Performance testing failed: {perf_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:682:22: SyntaxError: Expected a statement
    |
680 |     self._filter_testing_service.run_performance_tests()
681 |                         created_filters,
682 |                     )
    |                      ^
683 |                     if not perf_passed:
684 |                         warnings.append(f"Performance testing failed: {perf_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:683:1: SyntaxError: Unexpected indentation
    |
681 |                         created_filters,
682 |                     )
683 |                     if not perf_passed:
    | ^
684 |                         warnings.append(f"Performance testing failed: {perf_error}")
685 |                     else:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:689:17: SyntaxError: unindent does not match any outer indentation level
    |
688 |                 # Validate filter responses
689 |                 if request.testing_config.validate_responses:
    |                 ^
690 |                     validation_passed,
691 | validation_result, validation_error = (
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:690:38: COM818 Trailing comma on bare tuple prohibited
    |
688 |                 # Validate filter responses
689 |                 if request.testing_config.validate_responses:
690 |                     validation_passed,
    |                                      ^ COM818
691 | validation_result, validation_error = (
692 |     self._filter_testing_service.validate_filter_responses()
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:693:25: SyntaxError: Expected ')', found name
    |
691 | validation_result, validation_error = (
692 |     self._filter_testing_service.validate_filter_responses()
693 |                         created_filters,
    |                         ^
694 |                     )
695 |                     if not validation_passed:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:694:21: SyntaxError: Expected a statement
    |
692 |     self._filter_testing_service.validate_filter_responses()
693 |                         created_filters,
694 |                     )
    |                     ^
695 |                     if not validation_passed:
696 |                         warnings.append(f"Response validation failed: {validation_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:694:22: SyntaxError: Expected a statement
    |
692 |     self._filter_testing_service.validate_filter_responses()
693 |                         created_filters,
694 |                     )
    |                      ^
695 |                     if not validation_passed:
696 |                         warnings.append(f"Response validation failed: {validation_error}")
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:695:1: SyntaxError: Unexpected indentation
    |
693 |                         created_filters,
694 |                     )
695 |                     if not validation_passed:
    | ^
696 |                         warnings.append(f"Response validation failed: {validation_error}")
697 |                     else:
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:701:17: SyntaxError: unindent does not match any outer indentation level
    |
700 |                 # Update filter results with test information
701 |                 for filter_result in state.filter_results:
    |                 ^
702 |                     if filter_result.filter_installed:
703 | filter_result.test_results = (
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:702:55: SyntaxError: Expected an indented block after `if` statement
    |
700 |                 # Update filter results with test information
701 |                 for filter_result in state.filter_results:
702 |                     if filter_result.filter_installed:
    |                                                       ^
703 | filter_result.test_results = (
704 |     validation_results.get(filter_result.filter_id, {}))
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:706:1: SyntaxError: Unexpected indentation
    |
704 |     validation_results.get(filter_result.filter_id, {}))
705 |
706 |             state.testing_result = TestingResult(
    | ^
707 |                 testing_completed=testing_completed,
708 | tests_passed = (
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:710:1: SyntaxError: Expected ',', found name
    |
708 | tests_passed = (
709 |     len([r for r in validation_results.values() if r]) if validation_results else 0,)
710 | tests_failed = (
    | ^
711 |     len([r for r in validation_results.values() if not r]) if validation_results else 0,)
712 |                 performance_metrics=performance_metrics,
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:712:17: SyntaxError: Expected ',', found name
    |
710 | tests_failed = (
711 |     len([r for r in validation_results.values() if not r]) if validation_results else 0,)
712 |                 performance_metrics=performance_metrics,
    |                 ^
713 |                 stress_test_passed=request.testing_config.stress_testing and testing_completed,
714 |                 validation_successful=bool(validation_results)
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:714:63: COM812 Trailing comma missing
    |
712 |                 performance_metrics=performance_metrics,
713 |                 stress_test_passed=request.testing_config.stress_testing and testing_completed,
714 |                 validation_successful=bool(validation_results)
    |                                                               ^ COM812
715 |             )
    |
    = help: Add trailing comma

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:738:21: SyntaxError: Expected ',', found name
    |
736 |                     failed_filters=state.failed_filters,
737 |                     warnings_count=len(warnings)
738 |                     execution_time=time.time() - start_time,
    |                     ^
739 |                 )
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:760:1: SyntaxError: unindent does not match any outer indentation level
    |
758 |             )
759 |
760 |         except Exception as e:
    | ^
761 |             error_message = f"Unexpected error during event filter installation: {e!s}"
762 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:760:9: SyntaxError: Expected a statement
    |
758 |             )
759 |
760 |         except Exception as e:
    |         ^
761 |             error_message = f"Unexpected error during event filter installation: {e!s}"
762 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:760:26: SyntaxError: Expected a statement
    |
758 |             )
759 |
760 |         except Exception as e:
    |                          ^
761 |             error_message = f"Unexpected error during event filter installation: {e!s}"
762 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:760:31: SyntaxError: Expected an expression
    |
758 |             )
759 |
760 |         except Exception as e:
    |                               ^
761 |             error_message = f"Unexpected error during event filter installation: {e!s}"
762 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:761:1: SyntaxError: Unexpected indentation
    |
760 |         except Exception as e:
761 |             error_message = f"Unexpected error during event filter installation: {e!s}"
    | ^
762 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:768:21: SyntaxError: Expected ',', found name
    |
766 |                     "Event filter installation failed",
767 |                     error=str(e)
768 |                     phase=state.current_phase.value,
    |                     ^
769 |                     execution_time=time.time() - start_time,
770 |                 )
    |

src_refactored\application\system_integration\use_cases\install_event_filter_use_case.py:779:14: SyntaxError: Expected a statement
    |
777 |                 execution_time=time.time() - start_time,
778 |                 phase_times=phase_times,
779 |             )
    |              ^
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:366:101: E501 Line too long (152 > 100)
    |
365 | …
366 | … PositionConfiguration | None, size_config: SizeConfiguration | None, screen: ScreenInfo,
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
367 | …
368 | …
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:525:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
524 |             # Validate widget
525 | widget_valid, widget_error = (
    | ^
526 |     self._validation_service.validate_widget(request.target_widget))
527 |             if not widget_valid:
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:527:1: SyntaxError: Unexpected indentation
    |
525 | widget_valid, widget_error = (
526 |     self._validation_service.validate_widget(request.target_widget))
527 |             if not widget_valid:
    | ^
528 |                 state.error_message = f"Invalid widget: {widget_error}"
529 |                 return ManageGeometryResponse(
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:538:31: COM818 Trailing comma on bare tuple prohibited
    |
536 |             # Validate position configuration
537 |             if request.position_config:
538 |                 position_valid,
    |                               ^ COM818
539 | position_error = (
540 |     self._validation_service.validate_position_configuration(request.position_config))
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:539:1: SyntaxError: Expected a statement
    |
537 |             if request.position_config:
538 |                 position_valid,
539 | position_error = (
    | ^
540 |     self._validation_service.validate_position_configuration(request.position_config))
541 |                 if not position_valid:
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:541:1: SyntaxError: Unexpected indentation
    |
539 | position_error = (
540 |     self._validation_service.validate_position_configuration(request.position_config))
541 |                 if not position_valid:
    | ^
542 |                     state.error_message = f"Invalid position configuration: {position_error}"
543 |                     return ManageGeometryResponse(
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:551:13: SyntaxError: unindent does not match any outer indentation level
    |
550 |             # Validate size configuration
551 |             if request.size_config:
    |             ^
552 | size_valid, size_error = (
553 |     self._validation_service.validate_size_configuration(request.size_config))
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:552:1: SyntaxError: Expected an indented block after `if` statement
    |
550 |             # Validate size configuration
551 |             if request.size_config:
552 | size_valid, size_error = (
    | ^
553 |     self._validation_service.validate_size_configuration(request.size_config))
554 |                 if not size_valid:
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:554:1: SyntaxError: Unexpected indentation
    |
552 | size_valid, size_error = (
553 |     self._validation_service.validate_size_configuration(request.size_config))
554 |                 if not size_valid:
    | ^
555 |                     state.error_message = f"Invalid size configuration: {size_error}"
556 |                     return ManageGeometryResponse(
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:564:1: SyntaxError: Expected a statement
    |
563 |             # Validate constraints
564 | constraints_valid, constraint_errors = (
    | ^
565 |     self._validation_service.validate_constraints(request.constraints))
566 |             if not constraints_valid:
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:566:1: SyntaxError: Unexpected indentation
    |
564 | constraints_valid, constraint_errors = (
565 |     self._validation_service.validate_constraints(request.constraints))
566 |             if not constraints_valid:
    | ^
567 |                 warnings.extend(constraint_errors)
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:582:1: SyntaxError: Expected a statement
    |
581 |             screen_analysis = self._screen_analysis_service.analyze_screens()
582 | target_screen_index = (
    | ^
583 |     request.position_config.screen_index if request.position_config else None)
584 | target_screen = (
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:587:1: SyntaxError: Unexpected indentation
    |
585 |     self._screen_analysis_service.get_target_screen(request.target_widget, target_screen_index))
586 |
587 |             screen_analysis.target_screen = target_screen
    | ^
588 |             state.screen_analysis = screen_analysis
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:600:101: E501 Line too long (101 > 100)
    |
599 |             if request.enable_progress_tracking and self._progress_tracking_service:
600 |                 self._progress_tracking_service.update_progress(ManagePhase.CONSTRAINT_CHECKING, 0.0)
    |                                                                                                     ^ E501
601 |
602 |             # Get current geometry for constraint checking
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:603:1: SyntaxError: Expected a statement
    |
602 |             # Get current geometry for constraint checking
603 | current_geometry = (
    | ^
604 |     self._geometry_application_service.get_current_geometry(request.target_widget))
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:607:1: SyntaxError: Unexpected indentation
    |
606 |             # Check constraints against current geometry
607 |             constraint_check = self._constraint_service.check_constraints(
    | ^
608 |                 current_geometry, request.constraints, target_screen,
609 |             )
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:618:101: E501 Line too long (101 > 100)
    |
617 |             if request.enable_progress_tracking and self._progress_tracking_service:
618 |                 self._progress_tracking_service.update_progress(ManagePhase.CONSTRAINT_CHECKING, 1.0)
    |                                                                                                     ^ E501
619 |
620 |             # Phase 4: Geometry Calculation
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:625:101: E501 Line too long (102 > 100)
    |
624 |             if request.enable_progress_tracking and self._progress_tracking_service:
625 |                 self._progress_tracking_service.update_progress(ManagePhase.GEOMETRY_CALCULATION, 0.0)
    |                                                                                                     ^^ E501
626 |
627 |             # Calculate target geometry
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:652:101: E501 Line too long (102 > 100)
    |
651 |             if request.enable_progress_tracking and self._progress_tracking_service:
652 |                 self._progress_tracking_service.update_progress(ManagePhase.GEOMETRY_CALCULATION, 1.0)
    |                                                                                                     ^^ E501
653 |
654 |             # Phase 5: Animation Setup
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:667:84: SyntaxError: Expected ':', found newline
    |
665 |             )
666 |
667 |             if request.animation_config and request.animation_config.animation_type
    |                                                                                    ^
668 |              !=  AnimationType.NONE and self._animation_service:
669 |                 animation_created,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:668:14: SyntaxError: Expected a statement
    |
667 |             if request.animation_config and request.animation_config.animation_type
668 |              !=  AnimationType.NONE and self._animation_service:
    |              ^
669 |                 animation_created,
670 | animation_object, animation_error = (
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:668:18: SyntaxError: Invalid annotated assignment target
    |
667 |             if request.animation_config and request.animation_config.animation_type
668 |              !=  AnimationType.NONE and self._animation_service:
    |                  ^
669 |                 animation_created,
670 | animation_object, animation_error = (
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:668:65: SyntaxError: Expected an expression
    |
667 |             if request.animation_config and request.animation_config.animation_type
668 |              !=  AnimationType.NONE and self._animation_service:
    |                                                                 ^
669 |                 animation_created,
670 | animation_object, animation_error = (
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:669:1: SyntaxError: Unexpected indentation
    |
667 |             if request.animation_config and request.animation_config.animation_type
668 |              !=  AnimationType.NONE and self._animation_service:
669 |                 animation_created,
    | ^
670 | animation_object, animation_error = (
671 |     self._animation_service.create_geometry_animation()
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:669:34: COM818 Trailing comma on bare tuple prohibited
    |
667 |             if request.animation_config and request.animation_config.animation_type
668 |              !=  AnimationType.NONE and self._animation_service:
669 |                 animation_created,
    |                                  ^ COM818
670 | animation_object, animation_error = (
671 |     self._animation_service.create_geometry_animation()
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:670:1: SyntaxError: Expected a statement
    |
668 |              !=  AnimationType.NONE and self._animation_service:
669 |                 animation_created,
670 | animation_object, animation_error = (
    | ^
671 |     self._animation_service.create_geometry_animation()
672 |                     request.target_widget,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:672:21: SyntaxError: Expected ')', found name
    |
670 | animation_object, animation_error = (
671 |     self._animation_service.create_geometry_animation()
672 |                     request.target_widget,
    |                     ^
673 |                     geometry_calculation.calculated_geometry,
674 |                     request.animation_config,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:675:17: SyntaxError: Expected a statement
    |
673 |                     geometry_calculation.calculated_geometry,
674 |                     request.animation_config,
675 |                 )
    |                 ^
676 |
677 |                 animation_setup.animation_created = animation_created
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:675:18: SyntaxError: Expected a statement
    |
673 |                     geometry_calculation.calculated_geometry,
674 |                     request.animation_config,
675 |                 )
    |                  ^
676 |
677 |                 animation_setup.animation_created = animation_created
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:677:1: SyntaxError: Unexpected indentation
    |
675 |                 )
676 |
677 |                 animation_setup.animation_created = animation_created
    | ^
678 |                 animation_setup.animation_object = animation_object
679 |                 animation_setup.error_message = animation_error
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:687:13: SyntaxError: unindent does not match any outer indentation level
    |
685 |                     warnings.append(f"Failed to create animation: {animation_error}")
686 |
687 |             state.animation_setup = animation_setup
    |             ^
688 |
689 |             phase_times[ManagePhase.ANIMATION_SETUP] = time.time() - phase_start
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:689:1: SyntaxError: Unexpected indentation
    |
687 |             state.animation_setup = animation_setup
688 |
689 |             phase_times[ManagePhase.ANIMATION_SETUP] = time.time() - phase_start
    | ^
690 |
691 |             if request.enable_progress_tracking and self._progress_tracking_service:
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:699:101: E501 Line too long (102 > 100)
    |
698 |             if request.enable_progress_tracking and self._progress_tracking_service:
699 |                 self._progress_tracking_service.update_progress(ManagePhase.GEOMETRY_APPLICATION, 0.0)
    |                                                                                                     ^^ E501
700 |
701 |             application_start = time.time()
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:705:1: SyntaxError: unindent does not match any outer indentation level
    |
703 |             # Apply geometry
704 |             use_animation
705 |  = (
    | ^
706 |     animation_setup.animation_ready and request.animation_config and request.animation_config.auto_start)
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:705:2: SyntaxError: Expected a statement
    |
703 |             # Apply geometry
704 |             use_animation
705 |  = (
    |  ^
706 |     animation_setup.animation_ready and request.animation_config and request.animation_config.auto_start)
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:706:101: E501 Line too long (105 > 100)
    |
704 |             use_animation
705 |  = (
706 |     animation_setup.animation_ready and request.animation_config and request.animation_config.auto_start)
    |                                                                                                     ^^^^^ E501
707 |
708 |             if use_animation and self._animation_service:
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:708:1: SyntaxError: Unexpected indentation
    |
706 |     animation_setup.animation_ready and request.animation_config and request.animation_config.auto_start)
707 |
708 |             if use_animation and self._animation_service:
    | ^
709 |                 # Start animation
710 |                 animation_started,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:710:34: COM818 Trailing comma on bare tuple prohibited
    |
708 |             if use_animation and self._animation_service:
709 |                 # Start animation
710 |                 animation_started,
    |                                  ^ COM818
711 | animation_error = (
712 |     self._animation_service.start_animation(animation_setup.animation_object))
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:711:1: SyntaxError: Expected a statement
    |
709 |                 # Start animation
710 |                 animation_started,
711 | animation_error = (
    | ^
712 |     self._animation_service.start_animation(animation_setup.animation_object))
713 |                 if not animation_started:
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:713:1: SyntaxError: Unexpected indentation
    |
711 | animation_error = (
712 |     self._animation_service.start_animation(animation_setup.animation_object))
713 |                 if not animation_started:
    | ^
714 |                     warnings.append(f"Failed to start animation: {animation_error}")
715 |                     use_animation = False
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:717:13: SyntaxError: unindent does not match any outer indentation level
    |
715 |                     use_animation = False
716 |
717 |             if not use_animation:
    |             ^
718 |                 # Apply geometry directly
719 |                 geometry_applied,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:719:33: COM818 Trailing comma on bare tuple prohibited
    |
717 |             if not use_animation:
718 |                 # Apply geometry directly
719 |                 geometry_applied,
    |                                 ^ COM818
720 | final_geometry, application_error = (
721 |     self._geometry_application_service.apply_geometry()
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:722:21: SyntaxError: Expected ')', found name
    |
720 | final_geometry, application_error = (
721 |     self._geometry_application_service.apply_geometry()
722 |                     request.target_widget,
    |                     ^
723 |                     geometry_calculation.calculated_geometry,
724 |                     animated=False,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:725:17: SyntaxError: Expected a statement
    |
723 |                     geometry_calculation.calculated_geometry,
724 |                     animated=False,
725 |                 )
    |                 ^
726 |             else:
727 |                 # Animation will handle geometry application
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:725:18: SyntaxError: Expected a statement
    |
723 |                     geometry_calculation.calculated_geometry,
724 |                     animated=False,
725 |                 )
    |                  ^
726 |             else:
727 |                 # Animation will handle geometry application
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:726:1: SyntaxError: Unexpected indentation
    |
724 |                     animated=False,
725 |                 )
726 |             else:
    | ^
727 |                 # Animation will handle geometry application
728 |                 geometry_applied = True
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:726:13: SyntaxError: Expected a statement
    |
724 |                     animated=False,
725 |                 )
726 |             else:
    |             ^
727 |                 # Animation will handle geometry application
728 |                 geometry_applied = True
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:726:17: SyntaxError: Expected a statement
    |
724 |                     animated=False,
725 |                 )
726 |             else:
    |                 ^
727 |                 # Animation will handle geometry application
728 |                 geometry_applied = True
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:726:18: SyntaxError: Expected a statement
    |
724 |                     animated=False,
725 |                 )
726 |             else:
    |                  ^
727 |                 # Animation will handle geometry application
728 |                 geometry_applied = True
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:728:1: SyntaxError: Unexpected indentation
    |
726 |             else:
727 |                 # Animation will handle geometry application
728 |                 geometry_applied = True
    | ^
729 |                 final_geometry = geometry_calculation.calculated_geometry
730 |                 application_error = None
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:732:13: SyntaxError: Expected a statement
    |
730 |                 application_error = None
731 |
732 |             geometry_application = GeometryApplicationResult(
    |             ^
733 |                 geometry_applied=geometry_applied,
734 |                 animation_started=use_animation,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:756:101: E501 Line too long (102 > 100)
    |
755 |             if request.enable_progress_tracking and self._progress_tracking_service:
756 |                 self._progress_tracking_service.update_progress(ManagePhase.GEOMETRY_APPLICATION, 1.0)
    |                                                                                                     ^^ E501
757 |
758 |             # Phase 7: State Persistence
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:772:46: SyntaxError: Expected an expression
    |
770 |             )
771 |
772 |             if request.persistence_config and
    |                                              ^
773 |     request.persistence_config.auto_save and self._state_persistence_service:
774 | state_saved, persistence_error = (
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:773:1: SyntaxError: unindent does not match any outer indentation level
    |
772 |             if request.persistence_config and
773 |     request.persistence_config.auto_save and self._state_persistence_service:
    | ^
774 | state_saved, persistence_error = (
775 |     self._state_persistence_service.save_geometry_state()
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:773:5: SyntaxError: Invalid annotated assignment target
    |
772 |             if request.persistence_config and
773 |     request.persistence_config.auto_save and self._state_persistence_service:
    |     ^
774 | state_saved, persistence_error = (
775 |     self._state_persistence_service.save_geometry_state()
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:773:78: SyntaxError: Expected an expression
    |
772 |             if request.persistence_config and
773 |     request.persistence_config.auto_save and self._state_persistence_service:
    |                                                                              ^
774 | state_saved, persistence_error = (
775 |     self._state_persistence_service.save_geometry_state()
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:776:21: SyntaxError: Expected ')', found name
    |
774 | state_saved, persistence_error = (
775 |     self._state_persistence_service.save_geometry_state()
776 |                     request.target_widget,
    |                     ^
777 |                     final_geometry,
778 |                     request.persistence_config,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:779:17: SyntaxError: Expected a statement
    |
777 |                     final_geometry,
778 |                     request.persistence_config,
779 |                 )
    |                 ^
780 |
781 |                 state_persistence.state_saved = state_saved
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:779:18: SyntaxError: Expected a statement
    |
777 |                     final_geometry,
778 |                     request.persistence_config,
779 |                 )
    |                  ^
780 |
781 |                 state_persistence.state_saved = state_saved
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:781:1: SyntaxError: Unexpected indentation
    |
779 |                 )
780 |
781 |                 state_persistence.state_saved = state_saved
    | ^
782 | state_persistence.position_saved = (
783 |     state_saved and request.persistence_config.save_position)
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:782:1: SyntaxError: Expected a statement
    |
781 |                 state_persistence.state_saved = state_saved
782 | state_persistence.position_saved = (
    | ^
783 |     state_saved and request.persistence_config.save_position)
784 |                 state_persistence.size_saved = state_saved and request.persistence_config.save_size
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:784:1: SyntaxError: Unexpected indentation
    |
782 | state_persistence.position_saved = (
783 |     state_saved and request.persistence_config.save_position)
784 |                 state_persistence.size_saved = state_saved and request.persistence_config.save_size
    | ^
785 |                 state_persistence.error_message = persistence_error
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:790:13: SyntaxError: unindent does not match any outer indentation level
    |
788 |                     warnings.append(f"Failed to save geometry state: {persistence_error}")
789 |
790 |             state.state_persistence = state_persistence
    |             ^
791 |
792 |             phase_times[ManagePhase.STATE_PERSISTENCE] = time.time() - phase_start
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:792:1: SyntaxError: Unexpected indentation
    |
790 |             state.state_persistence = state_persistence
791 |
792 |             phase_times[ManagePhase.STATE_PERSISTENCE] = time.time() - phase_start
    | ^
793 |
794 |             if request.enable_progress_tracking and self._progress_tracking_service:
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:813:21: SyntaxError: Expected ',', found name
    |
811 | final_geometry = (
812 |     f"{final_geometry.x},{final_geometry.y} {final_geometry.width}x{final_geometry.height}",)
813 |                     animated=use_animation,
    |                     ^
814 |                     warnings_count=len(warnings)
815 |                     execution_time=time.time() - start_time,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:815:21: SyntaxError: Expected ',', found name
    |
813 |                     animated=use_animation,
814 |                     warnings_count=len(warnings)
815 |                     execution_time=time.time() - start_time,
    |                     ^
816 |                 )
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:827:17: SyntaxError: Expected ',', found name
    |
825 | animation_controller = (
826 |     animation_setup.animation_object if animation_setup.animation_ready else None,)
827 |                 warnings=warnings,
    |                 ^
828 |                 execution_time=time.time() - start_time,
829 |                 phase_times=phase_times,
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:832:1: SyntaxError: unindent does not match any outer indentation level
    |
830 |             )
831 |
832 |         except Exception as e:
    | ^
833 |             error_message = f"Unexpected error during geometry management: {e!s}"
834 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:832:9: SyntaxError: Expected a statement
    |
830 |             )
831 |
832 |         except Exception as e:
    |         ^
833 |             error_message = f"Unexpected error during geometry management: {e!s}"
834 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:832:26: SyntaxError: Expected a statement
    |
830 |             )
831 |
832 |         except Exception as e:
    |                          ^
833 |             error_message = f"Unexpected error during geometry management: {e!s}"
834 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:832:31: SyntaxError: Expected an expression
    |
830 |             )
831 |
832 |         except Exception as e:
    |                               ^
833 |             error_message = f"Unexpected error during geometry management: {e!s}"
834 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:833:1: SyntaxError: Unexpected indentation
    |
832 |         except Exception as e:
833 |             error_message = f"Unexpected error during geometry management: {e!s}"
    | ^
834 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:840:21: SyntaxError: Expected ',', found name
    |
838 |                     "Geometry management failed",
839 |                     error=str(e)
840 |                     phase=state.current_phase.value,
    |                     ^
841 |                     execution_time=time.time() - start_time,
842 |                 )
    |

src_refactored\application\system_integration\use_cases\manage_geometry_use_case.py:851:14: SyntaxError: Expected a statement
    |
849 |                 execution_time=time.time() - start_time,
850 |                 phase_times=phase_times,
851 |             )
    |              ^
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:65:20: SyntaxError: Expected an expression
   |
63 |     startup_timeout: float = 30.0
64 |     shutdown_timeout: float = 10.0
65 |     args: tuple = (,
   |                    ^
66 |     )
67 |     kwargs: dict[str, Any] = None
   |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:415:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
414 |             # Check resource availability
415 | resources_available, resource_error = (
    | ^
416 |     self._thread_validation_service.check_resource_availability())
417 |             if not resources_available:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:417:1: SyntaxError: Unexpected indentation
    |
415 | resources_available, resource_error = (
416 |     self._thread_validation_service.check_resource_availability())
417 |             if not resources_available:
    | ^
418 |                 state.error_message = f"Insufficient resources: {resource_error}"
419 |                 return SetupWorkerThreadsResponse(
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:427:50: SyntaxError: Expected an indented block after `for` statement
    |
426 |             # Validate thread configurations
427 |             for config in request.thread_configs:
    |                                                  ^
428 | config_valid, config_error = (
429 |     self._thread_validation_service.validate_thread_configuration(config))
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:428:1: SyntaxError: Expected a statement
    |
426 |             # Validate thread configurations
427 |             for config in request.thread_configs:
428 | config_valid, config_error = (
    | ^
429 |     self._thread_validation_service.validate_thread_configuration(config))
430 |                 if not config_valid:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:430:1: SyntaxError: Unexpected indentation
    |
428 | config_valid, config_error = (
429 |     self._thread_validation_service.validate_thread_configuration(config))
430 |                 if not config_valid:
    | ^
431 | state.error_message = (
432 |     f"Invalid thread configuration for {config.thread_id}: {config_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:430:37: SyntaxError: Expected an indented block after `if` statement
    |
428 | config_valid, config_error = (
429 |     self._thread_validation_service.validate_thread_configuration(config))
430 |                 if not config_valid:
    |                                     ^
431 | state.error_message = (
432 |     f"Invalid thread configuration for {config.thread_id}: {config_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:431:1: SyntaxError: Expected a statement
    |
429 |     self._thread_validation_service.validate_thread_configuration(config))
430 |                 if not config_valid:
431 | state.error_message = (
    | ^
432 |     f"Invalid thread configuration for {config.thread_id}: {config_error}")
433 |                     return SetupWorkerThreadsResponse(
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:433:1: SyntaxError: Unexpected indentation
    |
431 | state.error_message = (
432 |     f"Invalid thread configuration for {config.thread_id}: {config_error}")
433 |                     return SetupWorkerThreadsResponse(
    | ^
434 |                         result=SetupResult.VALIDATION_ERROR,
435 |                         state=state,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:441:1: SyntaxError: Expected a statement
    |
440 |             # Validate coordination configuration
441 | coord_valid, coord_error = (
    | ^
442 |     self._thread_validation_service.validate_coordination_configuration()
443 |                 request.coordination_config,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:443:17: SyntaxError: Expected ')', found name
    |
441 | coord_valid, coord_error = (
442 |     self._thread_validation_service.validate_coordination_configuration()
443 |                 request.coordination_config,
    |                 ^
444 |             )
445 |             if not coord_valid:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:444:13: SyntaxError: Expected a statement
    |
442 |     self._thread_validation_service.validate_coordination_configuration()
443 |                 request.coordination_config,
444 |             )
    |             ^
445 |             if not coord_valid:
446 |                 state.error_message = f"Invalid coordination configuration: {coord_error}"
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:444:14: SyntaxError: Expected a statement
    |
442 |     self._thread_validation_service.validate_coordination_configuration()
443 |                 request.coordination_config,
444 |             )
    |              ^
445 |             if not coord_valid:
446 |                 state.error_message = f"Invalid coordination configuration: {coord_error}"
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:445:1: SyntaxError: Unexpected indentation
    |
443 |                 request.coordination_config,
444 |             )
445 |             if not coord_valid:
    | ^
446 |                 state.error_message = f"Invalid coordination configuration: {coord_error}"
447 |                 return SetupWorkerThreadsResponse(
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:483:1: SyntaxError: Expected a statement
    |
482 |                 # Create thread
483 | thread_created, thread_obj, thread_error = (
    | ^
484 |     self._thread_creation_service.create_thread(config))
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:486:1: SyntaxError: Unexpected indentation
    |
484 |     self._thread_creation_service.create_thread(config))
485 |
486 |                 result = ThreadSetupResult(
    | ^
487 |                     thread_id=config.thread_id,
488 |                     thread_created=thread_created,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:501:1: SyntaxError: Expected a statement
    |
500 |                     # Configure thread priority
501 | priority_set, priority_error = (
    | ^
502 |     self._thread_creation_service.configure_thread_priority()
503 |                         thread_obj, config.priority,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:503:25: SyntaxError: Expected ')', found name
    |
501 | priority_set, priority_error = (
502 |     self._thread_creation_service.configure_thread_priority()
503 |                         thread_obj, config.priority,
    |                         ^
504 |                     )
505 |                     if not priority_set and priority_error:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:504:21: SyntaxError: Expected a statement
    |
502 |     self._thread_creation_service.configure_thread_priority()
503 |                         thread_obj, config.priority,
504 |                     )
    |                     ^
505 |                     if not priority_set and priority_error:
506 |                         warnings.append(f"Failed to set priority for {config.thread_id}: {priority_e\
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:504:22: SyntaxError: Expected a statement
    |
502 |     self._thread_creation_service.configure_thread_priority()
503 |                         thread_obj, config.priority,
504 |                     )
    |                      ^
505 |                     if not priority_set and priority_error:
506 |                         warnings.append(f"Failed to set priority for {config.thread_id}: {priority_e\
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:505:1: SyntaxError: Unexpected indentation
    |
503 |                         thread_obj, config.priority,
504 |                     )
505 |                     if not priority_set and priority_error:
    | ^
506 |                         warnings.append(f"Failed to set priority for {config.thread_id}: {priority_e\
507 |     rror}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:506:101: E501 Line too long (101 > 100)
    |
504 |                     )
505 |                     if not priority_set and priority_error:
506 |                         warnings.append(f"Failed to set priority for {config.thread_id}: {priority_e\
    |                                                                                                     ^ E501
507 |     rror}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:507:5: SyntaxError: f-string: expecting '}'
    |
505 |                     if not priority_set and priority_error:
506 |                         warnings.append(f"Failed to set priority for {config.thread_id}: {priority_e\
507 |     rror}")
    |     ^
508 |
509 |                     # Start thread if auto_start is enabled
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:507:9: SyntaxError: f-string: single '}' is not allowed
    |
505 |                     if not priority_set and priority_error:
506 |                         warnings.append(f"Failed to set priority for {config.thread_id}: {priority_e\
507 |     rror}")
    |         ^
508 |
509 |                     # Start thread if auto_start is enabled
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:507:10: SyntaxError: Expected ',', found FStringEnd
    |
505 |                     if not priority_set and priority_error:
506 |                         warnings.append(f"Failed to set priority for {config.thread_id}: {priority_e\
507 |     rror}")
    |          ^
508 |
509 |                     # Start thread if auto_start is enabled
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:515:1: SyntaxError: Expected a statement
    |
513 |                         )
514 |                         result.thread_started = thread_started
515 | result.current_state = (
    | ^
516 |     ThreadState.RUNNING if thread_started else ThreadState.ERROR)
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:518:1: SyntaxError: Unexpected indentation
    |
516 |     ThreadState.RUNNING if thread_started else ThreadState.ERROR)
517 |
518 |                         if not thread_started:
    | ^
519 |                             result.error_message = start_error
520 |                             state.failed_threads += 1
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:523:17: SyntaxError: unindent does not match any outer indentation level
    |
521 |                         else:
522 |                             state.active_threads += 1
523 |                 else:
    |                 ^
524 |                     state.failed_threads += 1
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:523:21: SyntaxError: Expected a statement
    |
521 |                         else:
522 |                             state.active_threads += 1
523 |                 else:
    |                     ^
524 |                     state.failed_threads += 1
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:523:22: SyntaxError: Expected a statement
    |
521 |                         else:
522 |                             state.active_threads += 1
523 |                 else:
    |                      ^
524 |                     state.failed_threads += 1
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:524:1: SyntaxError: Unexpected indentation
    |
522 |                             state.active_threads += 1
523 |                 else:
524 |                     state.failed_threads += 1
    | ^
525 |
526 |                 state.thread_results.append(result)
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:526:1: SyntaxError: unindent does not match any outer indentation level
    |
524 |                     state.failed_threads += 1
525 |
526 |                 state.thread_results.append(result)
    | ^
527 |
528 |                 if request.enable_progress_tracking and self._progress_tracking_service:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:528:1: SyntaxError: Unexpected indentation
    |
526 |                 state.thread_results.append(result)
527 |
528 |                 if request.enable_progress_tracking and self._progress_tracking_service:
    | ^
529 |                     progress = (i + 1) / len(request.thread_configs,
530 |     )
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:531:101: E501 Line too long (105 > 100)
    |
529 |                     progress = (i + 1) / len(request.thread_configs,
530 |     )
531 |                     self._progress_tracking_service.update_progress(SetupPhase.THREAD_CREATION, progress)
    |                                                                                                     ^^^^^ E501
532 |
533 |             # Check if any threads were created successfully
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:534:13: SyntaxError: unindent does not match any outer indentation level
    |
533 |             # Check if any threads were created successfully
534 |             if not created_threads:
    |             ^
535 |                 state.error_message = "Failed to create any worker threads"
536 |                 return SetupWorkerThreadsResponse(
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:545:1: SyntaxError: unindent does not match any outer indentation level
    |
543 |                 )
544 |
545 |             phase_times[SetupPhase.THREAD_CREATION] = time.time() - phase_start
    | ^
546 |
547 |             # Phase 3: Coordination Setup
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:548:1: SyntaxError: Unexpected indentation
    |
547 |             # Phase 3: Coordination Setup
548 |             phase_start = time.time()
    | ^
549 |             state.current_phase = SetupPhase.COORDINATION_SETUP
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:564:17: SyntaxError: Expected ')', found name
    |
562 | deps_established, deps_count, deps_error = (
563 |     self._coordination_service.establish_dependencies()
564 |                 request.coordination_config.thread_dependencies, thread_map,
    |                 ^
565 |             )
566 |             if not deps_established:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:565:13: SyntaxError: Expected a statement
    |
563 |     self._coordination_service.establish_dependencies()
564 |                 request.coordination_config.thread_dependencies, thread_map,
565 |             )
    |             ^
566 |             if not deps_established:
567 |                 warnings.append(f"Failed to establish dependencies: {deps_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:565:14: SyntaxError: Expected a statement
    |
563 |     self._coordination_service.establish_dependencies()
564 |                 request.coordination_config.thread_dependencies, thread_map,
565 |             )
    |              ^
566 |             if not deps_established:
567 |                 warnings.append(f"Failed to establish dependencies: {deps_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:566:1: SyntaxError: Unexpected indentation
    |
564 |                 request.coordination_config.thread_dependencies, thread_map,
565 |             )
566 |             if not deps_established:
    | ^
567 |                 warnings.append(f"Failed to establish dependencies: {deps_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:570:1: SyntaxError: Expected a statement
    |
569 |             # Create synchronization points
570 | sync_created, sync_count, sync_error = (
    | ^
571 |     self._coordination_service.create_synchronization_points()
572 |                 request.coordination_config.synchronization_points,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:572:17: SyntaxError: Expected ')', found name
    |
570 | sync_created, sync_count, sync_error = (
571 |     self._coordination_service.create_synchronization_points()
572 |                 request.coordination_config.synchronization_points,
    |                 ^
573 |             )
574 |             if not sync_created:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:573:13: SyntaxError: Expected a statement
    |
571 |     self._coordination_service.create_synchronization_points()
572 |                 request.coordination_config.synchronization_points,
573 |             )
    |             ^
574 |             if not sync_created:
575 |                 warnings.append(f"Failed to create synchronization points: {sync_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:573:14: SyntaxError: Expected a statement
    |
571 |     self._coordination_service.create_synchronization_points()
572 |                 request.coordination_config.synchronization_points,
573 |             )
    |              ^
574 |             if not sync_created:
575 |                 warnings.append(f"Failed to create synchronization points: {sync_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:574:1: SyntaxError: Unexpected indentation
    |
572 |                 request.coordination_config.synchronization_points,
573 |             )
574 |             if not sync_created:
    | ^
575 |                 warnings.append(f"Failed to create synchronization points: {sync_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:578:1: SyntaxError: Expected a statement
    |
577 |             # Setup communication channels
578 | channels_setup, channels_count, channels_error = (
    | ^
579 |     self._coordination_service.setup_communication_channels()
580 |                 request.coordination_config.communication_channels,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:580:17: SyntaxError: Expected ')', found name
    |
578 | channels_setup, channels_count, channels_error = (
579 |     self._coordination_service.setup_communication_channels()
580 |                 request.coordination_config.communication_channels,
    |                 ^
581 |             )
582 |             if not channels_setup:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:581:13: SyntaxError: Expected a statement
    |
579 |     self._coordination_service.setup_communication_channels()
580 |                 request.coordination_config.communication_channels,
581 |             )
    |             ^
582 |             if not channels_setup:
583 |                 warnings.append(f"Failed to setup communication channels: {channels_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:581:14: SyntaxError: Expected a statement
    |
579 |     self._coordination_service.setup_communication_channels()
580 |                 request.coordination_config.communication_channels,
581 |             )
    |              ^
582 |             if not channels_setup:
583 |                 warnings.append(f"Failed to setup communication channels: {channels_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:582:1: SyntaxError: Unexpected indentation
    |
580 |                 request.coordination_config.communication_channels,
581 |             )
582 |             if not channels_setup:
    | ^
583 |                 warnings.append(f"Failed to setup communication channels: {channels_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:591:17: SyntaxError: Expected ',', found name
    |
589 |                 channels_established=channels_count,
590 |                 shared_resources_configured=len(request.coordination_config.shared_resources)
591 |                 deadlock_detection_enabled=request.coordination_config.deadlock_detection,
    |                 ^
592 |             )
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:604:101: E501 Line too long (101 > 100)
    |
603 |             if request.enable_progress_tracking and self._progress_tracking_service:
604 |                 self._progress_tracking_service.update_progress(SetupPhase.LIFECYCLE_MANAGEMENT, 0.0)
    |                                                                                                     ^ E501
605 |
606 |             lifecycle_setup,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:606:28: COM818 Trailing comma on bare tuple prohibited
    |
604 |                 self._progress_tracking_service.update_progress(SetupPhase.LIFECYCLE_MANAGEMENT, 0.0)
605 |
606 |             lifecycle_setup,
    |                            ^ COM818
607 | lifecycle_manager, lifecycle_error = (
608 |     self._lifecycle_management_service.setup_lifecycle_management()
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:607:1: SyntaxError: Expected a statement
    |
606 |             lifecycle_setup,
607 | lifecycle_manager, lifecycle_error = (
    | ^
608 |     self._lifecycle_management_service.setup_lifecycle_management()
609 |                 request.lifecycle_config, created_threads,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:609:17: SyntaxError: Expected ')', found name
    |
607 | lifecycle_manager, lifecycle_error = (
608 |     self._lifecycle_management_service.setup_lifecycle_management()
609 |                 request.lifecycle_config, created_threads,
    |                 ^
610 |             )
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:610:13: SyntaxError: Expected a statement
    |
608 |     self._lifecycle_management_service.setup_lifecycle_management()
609 |                 request.lifecycle_config, created_threads,
610 |             )
    |             ^
611 |
612 |             if not lifecycle_setup:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:610:14: SyntaxError: Expected a statement
    |
608 |     self._lifecycle_management_service.setup_lifecycle_management()
609 |                 request.lifecycle_config, created_threads,
610 |             )
    |              ^
611 |
612 |             if not lifecycle_setup:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:612:1: SyntaxError: Unexpected indentation
    |
610 |             )
611 |
612 |             if not lifecycle_setup:
    | ^
613 |                 warnings.append(f"Failed to setup lifecycle management: {lifecycle_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:616:1: SyntaxError: Expected a statement
    |
615 |             # Install shutdown handlers
616 | shutdown_installed, shutdown_error = (
    | ^
617 |     self._lifecycle_management_service.install_shutdown_handlers()
618 |                 created_threads,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:618:17: SyntaxError: Expected ')', found name
    |
616 | shutdown_installed, shutdown_error = (
617 |     self._lifecycle_management_service.install_shutdown_handlers()
618 |                 created_threads,
    |                 ^
619 |             )
620 |             if not shutdown_installed:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:619:13: SyntaxError: Expected a statement
    |
617 |     self._lifecycle_management_service.install_shutdown_handlers()
618 |                 created_threads,
619 |             )
    |             ^
620 |             if not shutdown_installed:
621 |                 warnings.append(f"Failed to install shutdown handlers: {shutdown_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:619:14: SyntaxError: Expected a statement
    |
617 |     self._lifecycle_management_service.install_shutdown_handlers()
618 |                 created_threads,
619 |             )
    |              ^
620 |             if not shutdown_installed:
621 |                 warnings.append(f"Failed to install shutdown handlers: {shutdown_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:620:1: SyntaxError: Unexpected indentation
    |
618 |                 created_threads,
619 |             )
620 |             if not shutdown_installed:
    | ^
621 |                 warnings.append(f"Failed to install shutdown handlers: {shutdown_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:624:1: SyntaxError: Expected a statement
    |
623 |             # Install cleanup handlers
624 | cleanup_installed, cleanup_error = (
    | ^
625 |     self._lifecycle_management_service.install_cleanup_handlers()
626 |                 created_threads,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:626:17: SyntaxError: Expected ')', found name
    |
624 | cleanup_installed, cleanup_error = (
625 |     self._lifecycle_management_service.install_cleanup_handlers()
626 |                 created_threads,
    |                 ^
627 |             )
628 |             if not cleanup_installed:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:627:13: SyntaxError: Expected a statement
    |
625 |     self._lifecycle_management_service.install_cleanup_handlers()
626 |                 created_threads,
627 |             )
    |             ^
628 |             if not cleanup_installed:
629 |                 warnings.append(f"Failed to install cleanup handlers: {cleanup_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:627:14: SyntaxError: Expected a statement
    |
625 |     self._lifecycle_management_service.install_cleanup_handlers()
626 |                 created_threads,
627 |             )
    |              ^
628 |             if not cleanup_installed:
629 |                 warnings.append(f"Failed to install cleanup handlers: {cleanup_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:628:1: SyntaxError: Unexpected indentation
    |
626 |                 created_threads,
627 |             )
628 |             if not cleanup_installed:
    | ^
629 |                 warnings.append(f"Failed to install cleanup handlers: {cleanup_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:632:1: SyntaxError: Expected a statement
    |
631 |             # Setup exception handling
632 | exception_setup, exception_error = (
    | ^
633 |     self._lifecycle_management_service.setup_exception_handling()
634 |                 created_threads,
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:634:17: SyntaxError: Expected ')', found name
    |
632 | exception_setup, exception_error = (
633 |     self._lifecycle_management_service.setup_exception_handling()
634 |                 created_threads,
    |                 ^
635 |             )
636 |             if not exception_setup:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:635:13: SyntaxError: Expected a statement
    |
633 |     self._lifecycle_management_service.setup_exception_handling()
634 |                 created_threads,
635 |             )
    |             ^
636 |             if not exception_setup:
637 |                 warnings.append(f"Failed to setup exception handling: {exception_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:635:14: SyntaxError: Expected a statement
    |
633 |     self._lifecycle_management_service.setup_exception_handling()
634 |                 created_threads,
635 |             )
    |              ^
636 |             if not exception_setup:
637 |                 warnings.append(f"Failed to setup exception handling: {exception_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:636:1: SyntaxError: Unexpected indentation
    |
634 |                 created_threads,
635 |             )
636 |             if not exception_setup:
    | ^
637 |                 warnings.append(f"Failed to setup exception handling: {exception_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:650:101: E501 Line too long (101 > 100)
    |
649 |             if request.enable_progress_tracking and self._progress_tracking_service:
650 |                 self._progress_tracking_service.update_progress(SetupPhase.LIFECYCLE_MANAGEMENT, 1.0)
    |                                                                                                     ^ E501
651 |
652 |             # Phase 5: Monitoring Setup
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:667:1: SyntaxError: Expected a statement
    |
666 |             # Enable health checks
667 | health_enabled, health_error = (
    | ^
668 |     self._monitoring_service.enable_health_checks(created_threads))
669 |             if not health_enabled:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:669:1: SyntaxError: Unexpected indentation
    |
667 | health_enabled, health_error = (
668 |     self._monitoring_service.enable_health_checks(created_threads))
669 |             if not health_enabled:
    | ^
670 |                 warnings.append(f"Failed to enable health checks: {health_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:673:1: SyntaxError: Expected a statement
    |
672 |             # Setup performance tracking
673 | perf_setup, perf_error = (
    | ^
674 |     self._monitoring_service.setup_performance_tracking(created_threads))
675 |             if not perf_setup and request.monitoring_config.performance_metrics:
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:675:1: SyntaxError: Unexpected indentation
    |
673 | perf_setup, perf_error = (
674 |     self._monitoring_service.setup_performance_tracking(created_threads))
675 |             if not perf_setup and request.monitoring_config.performance_metrics:
    | ^
676 |                 warnings.append(f"Failed to setup performance tracking: {perf_error}")
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:715:21: SyntaxError: Expected ',', found name
    |
713 |                     failed_threads=state.failed_threads,
714 |                     warnings_count=len(warnings)
715 |                     execution_time=time.time() - start_time,
    |                     ^
716 |                 )
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:737:1: SyntaxError: unindent does not match any outer indentation level
    |
735 |             )
736 |
737 |         except Exception as e:
    | ^
738 |             error_message = f"Unexpected error during worker threads setup: {e!s}"
739 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:737:9: SyntaxError: Expected a statement
    |
735 |             )
736 |
737 |         except Exception as e:
    |         ^
738 |             error_message = f"Unexpected error during worker threads setup: {e!s}"
739 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:737:26: SyntaxError: Expected a statement
    |
735 |             )
736 |
737 |         except Exception as e:
    |                          ^
738 |             error_message = f"Unexpected error during worker threads setup: {e!s}"
739 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:737:31: SyntaxError: Expected an expression
    |
735 |             )
736 |
737 |         except Exception as e:
    |                               ^
738 |             error_message = f"Unexpected error during worker threads setup: {e!s}"
739 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:738:1: SyntaxError: Unexpected indentation
    |
737 |         except Exception as e:
738 |             error_message = f"Unexpected error during worker threads setup: {e!s}"
    | ^
739 |             state.error_message = error_message
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:745:21: SyntaxError: Expected ',', found name
    |
743 |                     "Worker threads setup failed",
744 |                     error=str(e)
745 |                     phase=state.current_phase.value,
    |                     ^
746 |                     execution_time=time.time() - start_time,
747 |                 )
    |

src_refactored\application\system_integration\use_cases\setup_worker_threads_use_case.py:756:14: SyntaxError: Expected a statement
    |
754 |                 execution_time=time.time() - start_time,
755 |                 phase_times=phase_times,
756 |             )
    |              ^
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:83:21: SyntaxError: Expected ',', found string
   |
81 |                         error_message="No transcription ID provided or found in session",
82 |                     )
83 |                     "Missing transcription ID",
   |                     ^
84 |                 )
   |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:95:21: SyntaxError: Expected ',', found name
   |
93 |                         error_message=f"Failed to get transcription state: {current_result.error}",
94 |                     )
95 |                     current_result.error,
   |                     ^
96 |                 )
   |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:112:21: SyntaxError: Expected ',', found FStringStart
    |
110 |                         error_message=f"Cannot cancel transcription in state: {state_name}",
111 |                     )
112 |                     f"Transcription not cancellable in state: {state_name}",
    |                     ^
113 |                 )
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:119:47: SyntaxError: Expected an expression or a ')'
    |
117 |                 try:
118 |                     stop_result = self._model_service.stop_transcription(transcription_id)
119 |                     if stop_result.is_failure(,
    |                                               ^
120 |     ) and not request.force_cancel:
121 |                         return Result.failure(
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:129:29: SyntaxError: Expected ',', found name
    |
127 |     f"Failed to stop model processing: {stop_result.error}",),
128 |                             )
129 |                             stop_result.error,
    |                             ^
130 |                         )
131 |                 except Exception as e:
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:140:29: SyntaxError: Expected ',', found FStringStart
    |
138 |                                 error_message=f"Error stopping model processing: {e!s}",
139 |                             )
140 |                             f"Model stop error: {e!s}",
    |                             ^
141 |                         )
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:163:21: SyntaxError: Expected ',', found name
    |
161 |                         error_message=f"Failed to cancel transcription: {cancel_result.error}",
162 |                     )
163 |                     cancel_result.error,
    |                     ^
164 |                 )
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:204:17: SyntaxError: Expected ',', found name
    |
202 |                     error_message=error_msg,
203 |                 )
204 |                 error_msg,
    |                 ^
205 |             )
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:273:13: SyntaxError: Expected a parameter name
    |
272 |         # Check if processing has progressed significantly
273 | return bool(transcription_result.state = (
    |             ^
274 |     = TranscriptionState.PROCESSING and hasattr(transcription_result)
275 |         "progress_percentage") and
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:274:5: SyntaxError: Expected an expression
    |
272 |         # Check if processing has progressed significantly
273 | return bool(transcription_result.state = (
274 |     = TranscriptionState.PROCESSING and hasattr(transcription_result)
    |     ^
275 |         "progress_percentage") and
276 |     transcription_result.progress_percentage and transcription_result.progress_percentage > 10)
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:274:7: SyntaxError: Positional argument cannot follow keyword argument
    |
272 |         # Check if processing has progressed significantly
273 | return bool(transcription_result.state = (
274 |     = TranscriptionState.PROCESSING and hasattr(transcription_result)
    |       ^
275 |         "progress_percentage") and
276 |     transcription_result.progress_percentage and transcription_result.progress_percentage > 10)
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:275:9: SyntaxError: Expected ',', found string
    |
273 | return bool(transcription_result.state = (
274 |     = TranscriptionState.PROCESSING and hasattr(transcription_result)
275 |         "progress_percentage") and
    |         ^
276 |     transcription_result.progress_percentage and transcription_result.progress_percentage > 10)
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:276:95: SyntaxError: Expected a statement
    |
274 |     = TranscriptionState.PROCESSING and hasattr(transcription_result)
275 |         "progress_percentage") and
276 |     transcription_result.progress_percentage and transcription_result.progress_percentage > 10)
    |                                                                                               ^
277 |
278 |     def _perform_cleanup(
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:276:96: SyntaxError: Expected a statement
    |
274 |     = TranscriptionState.PROCESSING and hasattr(transcription_result)
275 |         "progress_percentage") and
276 |     transcription_result.progress_percentage and transcription_result.progress_percentage > 10)
    |                                                                                                ^
277 |
278 |     def _perform_cleanup(
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:278:1: SyntaxError: Unexpected indentation
    |
276 |     transcription_result.progress_percentage and transcription_result.progress_percentage > 10)
277 |
278 |     def _perform_cleanup(
    | ^
279 |         self,
280 |         transcription_id: str,
    |

src_refactored\application\transcription\use_cases\cancel_transcription_use_case.py:323:31: SyntaxError: Expected a statement
    |
321 |                 cleanup_success = False
322 |
323 |         return cleanup_success
    |                               ^
    |

src_refactored\application\transcription\use_cases\configure_model_use_case.py:193:24: BLE001 Do not catch blind exception: `Exception`
    |
191 |                         if optimization_result.warnings:
192 |                             validation_warnings.extend(optimization_result.warnings)
193 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
194 |                     logger.warning("Configuration optimization failed: %s", e)
195 |                     # Optimization failure shouldn't block configuration
    |

src_refactored\application\transcription\use_cases\configure_model_use_case.py:232:28: BLE001 Do not catch blind exception: `Exception`
    |
230 |                                 f"Model reload failed: {reload_result.error}",
231 |                             )
232 |                     except Exception as e:
    |                            ^^^^^^^^^ BLE001
233 |                         logger.warning("Model reload failed: %s", e)
234 |                         validation_warnings.append(f"Model reload error: {e!s}")
    |

src_refactored\application\transcription\use_cases\configure_model_use_case.py:460:20: BLE001 Do not catch blind exception: `Exception`
    |
458 |                     supported_languages = model_info.value.get("supported_languages",
459 |     )
460 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
461 |                 logger.warning("Failed to get model info: %s", e)
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:98:101: E501 Line too long (111 > 100)
   |
98 | class GetTranscriptionHistoryUseCase(UseCase[GetTranscriptionHistoryRequest, GetTranscriptionHistoryResponse]):
   |                                                                                                     ^^^^^^^^^^^ E501
99 |     """Use case for retrieving transcription history.
   |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:147:21: SyntaxError: Expected ',', found name
    |
145 |                         error_message=f"Failed to retrieve history: {history_result.error}",
146 |                     )
147 |                     history_result.error,
    |                     ^
148 |                 )
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:204:17: SyntaxError: Expected ',', found name
    |
202 |                     error_message=error_msg,
203 |                 )
204 |                 error_msg,
    |                 ^
205 |             )
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:227:35: SyntaxError: Expected an indented block after `if` statement
    |
226 |             # Fallback to session history
227 |             if request.session_id:
    |                                   ^
228 | session_history = (
229 |     self._transcription_session.get_session_history(request.session_id))
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:228:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
226 |             # Fallback to session history
227 |             if request.session_id:
228 | session_history = (
    | ^
229 |     self._transcription_session.get_session_history(request.session_id))
230 |             else:
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:230:1: SyntaxError: Unexpected indentation
    |
228 | session_history = (
229 |     self._transcription_session.get_session_history(request.session_id))
230 |             else:
    | ^
231 |                 session_history = self._transcription_session.get_all_history()
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:230:13: SyntaxError: Expected a statement
    |
228 | session_history = (
229 |     self._transcription_session.get_session_history(request.session_id))
230 |             else:
    |             ^
231 |                 session_history = self._transcription_session.get_all_history()
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:230:17: SyntaxError: Expected a statement
    |
228 | session_history = (
229 |     self._transcription_session.get_session_history(request.session_id))
230 |             else:
    |                 ^
231 |                 session_history = self._transcription_session.get_all_history()
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:230:18: SyntaxError: Expected a statement
    |
228 | session_history = (
229 |     self._transcription_session.get_session_history(request.session_id))
230 |             else:
    |                  ^
231 |                 session_history = self._transcription_session.get_all_history()
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:231:1: SyntaxError: Unexpected indentation
    |
229 |     self._transcription_session.get_session_history(request.session_id))
230 |             else:
231 |                 session_history = self._transcription_session.get_all_history()
    | ^
232 |
233 |             if session_history.is_failure():
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:233:13: SyntaxError: Expected a statement
    |
231 |                 session_history = self._transcription_session.get_all_history()
232 |
233 |             if session_history.is_failure():
    |             ^
234 |                 return session_history
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:238:1: SyntaxError: unindent does not match any outer indentation level
    |
236 |             return Result.success(session_history.value)
237 |
238 |         except Exception as e:
    | ^
239 |             return Result.failure(f"Error retrieving raw history: {e!s}",
240 |     )
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:238:9: SyntaxError: Expected a statement
    |
236 |             return Result.success(session_history.value)
237 |
238 |         except Exception as e:
    |         ^
239 |             return Result.failure(f"Error retrieving raw history: {e!s}",
240 |     )
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:238:26: SyntaxError: Expected a statement
    |
236 |             return Result.success(session_history.value)
237 |
238 |         except Exception as e:
    |                          ^
239 |             return Result.failure(f"Error retrieving raw history: {e!s}",
240 |     )
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:238:31: SyntaxError: Expected an expression
    |
236 |             return Result.success(session_history.value)
237 |
238 |         except Exception as e:
    |                               ^
239 |             return Result.failure(f"Error retrieving raw history: {e!s}",
240 |     )
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:239:1: SyntaxError: Unexpected indentation
    |
238 |         except Exception as e:
239 |             return Result.failure(f"Error retrieving raw history: {e!s}",
    | ^
240 |     )
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:242:1: SyntaxError: unindent does not match any outer indentation level
    |
240 |     )
241 |
242 |     def _apply_filters(
    | ^
243 |         self,
244 |         history: list[TranscriptionResult],
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:279:24: SyntaxError: Invalid assignment target
    |
277 |         # Apply duration filters
278 |         if request.min_duration is not None:
279 |             filtered = [item for item in filtered
    |                        ^
280 | if hasattr(item, "duration_seconds") and item.duration_seconds > = (
281 |     request.min_duration])
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:280:66: SyntaxError: Expected an expression
    |
278 |         if request.min_duration is not None:
279 |             filtered = [item for item in filtered
280 | if hasattr(item, "duration_seconds") and item.duration_seconds > = (
    |                                                                  ^
281 |     request.min_duration])
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:281:25: SyntaxError: Expected ')', found ']'
    |
279 |             filtered = [item for item in filtered
280 | if hasattr(item, "duration_seconds") and item.duration_seconds > = (
281 |     request.min_duration])
    |                         ^
282 |
283 |         if request.max_duration is not None:
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:281:26: SyntaxError: Expected an assignment target
    |
279 |             filtered = [item for item in filtered
280 | if hasattr(item, "duration_seconds") and item.duration_seconds > = (
281 |     request.min_duration])
    |                          ^
282 |
283 |         if request.max_duration is not None:
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:284:24: SyntaxError: Invalid assignment target
    |
283 |         if request.max_duration is not None:
284 |             filtered = [item for item in filtered
    |                        ^
285 | if hasattr(item, "duration_seconds") and item.duration_seconds < = (
286 |     request.max_duration])
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:285:66: SyntaxError: Expected an expression
    |
283 |         if request.max_duration is not None:
284 |             filtered = [item for item in filtered
285 | if hasattr(item, "duration_seconds") and item.duration_seconds < = (
    |                                                                  ^
286 |     request.max_duration])
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:286:25: SyntaxError: Expected ')', found ']'
    |
284 |             filtered = [item for item in filtered
285 | if hasattr(item, "duration_seconds") and item.duration_seconds < = (
286 |     request.max_duration])
    |                         ^
287 |
288 |         # Apply language filters
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:286:26: SyntaxError: Expected an assignment target
    |
284 |             filtered = [item for item in filtered
285 | if hasattr(item, "duration_seconds") and item.duration_seconds < = (
286 |     request.max_duration])
    |                          ^
287 |
288 |         # Apply language filters
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:299:1: SyntaxError: unindent does not match any outer indentation level
    |
297 |         return filtered
298 |
299 |     def _apply_single_filter(
    | ^
300 |         self,
301 |         history: list[TranscriptionResult],
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:349:1: SyntaxError: unindent does not match any outer indentation level
    |
347 |         return history
348 |
349 |     def _apply_search(
    | ^
350 |         self,
351 |         history: list[TranscriptionResult],
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:386:1: SyntaxError: unindent does not match any outer indentation level
    |
384 |         return filtered
385 |
386 |     def _apply_sorting(
    | ^
387 |         self,
388 |         history: list[TranscriptionResult],
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:409:26: SyntaxError: Expected ',', found name
    |
407 |             return sorted(history,
408 |                          key=lambda x: getattr(x, "duration_seconds", 0)
409 |                          reverse=True)
    |                          ^
410 |
411 |         if sort_order == SortOrder.DURATION_ASC:
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:423:1: SyntaxError: unindent does not match any outer indentation level
    |
421 |         return history
422 |
423 |     def _apply_pagination(
    | ^
424 |         self,
425 |         history: list[TranscriptionResult],
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:441:1: SyntaxError: unindent does not match any outer indentation level
    |
439 |         return history[offset:offset + limit]
440 |
441 |     def _convert_to_history_items(
    | ^
442 |         self,
443 |         history: list[TranscriptionResult],
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:481:17: SyntaxError: Expected ',', found name
    |
479 |                 transcription_id=result.transcription_id,
480 |                 session_id=getattr(result, "session_id", "")
481 |                 text=text,
    |                 ^
482 |                 language=result.language,
483 |                 confidence=result.confidence,
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:505:1: SyntaxError: unindent does not match any outer indentation level
    |
503 |         return items
504 |
505 |     def _calculate_statistics(self, history: list[TranscriptionResult]) -> HistoryStatistics:
    | ^
506 |         """Calculate statistics for transcription history.
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:575:82: SyntaxError: Expected an indented block after `if` statement
    |
573 |         models = []
574 |         for item in history:
575 |             if hasattr(item, "model_configuration") and item.model_configuration:
    |                                                                                  ^
576 | model_name = (
577 |     f"{item.model_configuration.model_type}_{item.model_configuration.model_size}")
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:578:1: SyntaxError: Unexpected indentation
    |
576 | model_name = (
577 |     f"{item.model_configuration.model_type}_{item.model_configuration.model_size}")
578 |                 models.append(model_name)
    | ^
579 |
580 |         most_used_model = max(set(models,
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:580:1: SyntaxError: unindent does not match any outer indentation level
    |
578 |                 models.append(model_name)
579 |
580 |         most_used_model = max(set(models,
    | ^
581 |     ), key=models.count) if models else None
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:588:1: SyntaxError: Unexpected indentation
    |
587 |         # Calculate word and character counts
588 |         total_words = sum(len((item.text or "").split()) for item in completed)
    | ^
589 |         total_characters = sum(len(item.text or "") for item in completed)
    |

src_refactored\application\transcription\use_cases\get_transcription_history_use_case.py:605:10: SyntaxError: Expected dedent, found end of file
    |
603 |             total_words=total_words,
604 |             total_characters=total_characters,
605 |         )
    |          ^
    |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:59:101: E501 Line too long (108 > 100)
   |
59 | class GetTranscriptionResultUseCase(UseCase[GetTranscriptionResultRequest, GetTranscriptionResultResponse]):
   |                                                                                                     ^^^^^^^^ E501
60 |     """Use case for retrieving transcription results.
   |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:102:21: SyntaxError: Expected ',', found string
    |
100 |                         error_message="No transcription ID provided or found in session",
101 |                     )
102 |                     "Missing transcription ID",
    |                     ^
103 |                 )
    |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:126:21: SyntaxError: Expected ',', found name
    |
124 |                         error_message=f"Failed to retrieve transcription: {result_response.error}",
125 |                     )
126 |                     result_response.error,
    |                     ^
127 |                 )
    |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:146:25: SyntaxError: Expected ',', found name
    |
144 |                         success=True,
145 |                         result=self._convert_to_result_data(transcription_result, request)
146 |                         error_message="Transcription was cancelled",
    |                         ^
147 |                     ),
148 |                 )
    |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:155:17: SyntaxError: Expected ',', found FStringStart
    |
153 |                     error_message=f"Unknown transcription state: {transcription_result.state}",
154 |                 )
155 |                 f"Unknown state: {transcription_result.state}",
    |                 ^
156 |             )
    |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:165:17: SyntaxError: Expected ',', found name
    |
163 |                     error_message=error_msg,
164 |                 )
165 |                 error_msg,
    |                 ^
166 |             )
    |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:232:17: SyntaxError: Expected ',', found name
    |
230 |                 success=True,
231 |                 result=self._convert_to_result_data(transcription_result, request)
232 |                 is_processing=True,
    |                 ^
233 |                 progress_percentage=progress_percentage,
234 |                 estimated_time_remaining=estimated_time_remaining,
    |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:290:17: SyntaxError: Expected ',', found name
    |
288 |                 success=True,
289 |                 result=self._convert_to_result_data(transcription_result, request)
290 |                 error_message=transcription_result.error_message or "Transcription failed",
    |                 ^
291 |             ),
292 |         )
    |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:334:29: SyntaxError: Expected ',', found name
    |
332 |                             success=True,
333 |                             result=self._convert_to_result_data(current_result, request)
334 |                             error_message="Transcription was cancelled",
    |                             ^
335 |                         ),
336 |                     )
    |

src_refactored\application\transcription\use_cases\get_transcription_result_use_case.py:345:17: SyntaxError: Expected ',', found name
    |
343 |                 success=True,
344 |                 result=self._convert_to_result_data(transcription_result, request)
345 |                 is_processing=True,
    |                 ^
346 |                 error_message=f"Timeout waiting for completion ({timeout}s)",
347 |             ),
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:88:21: SyntaxError: Expected ',', found string
   |
86 |                         error_message="Transcription is already in progress",
87 |                     )
88 |                     "Transcription already in progress",
   |                     ^
89 |                 )
   |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:99:21: SyntaxError: Expected ',', found name
    |
 97 |                         error_message=f"Invalid audio data: {audio_validation.error}",
 98 |                     )
 99 |                     audio_validation.error,
    |                     ^
100 |                 )
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:103:44: SyntaxError: Expected an indented block after `if` statement
    |
102 |             # Apply model configuration if provided
103 |             if request.model_configuration:
    |                                            ^
104 | config_result = (
105 |     self._transcription_session.configure_model(request.model_configuration))
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:104:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
102 |             # Apply model configuration if provided
103 |             if request.model_configuration:
104 | config_result = (
    | ^
105 |     self._transcription_session.configure_model(request.model_configuration))
106 |                 if config_result.is_failure(,
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:106:1: SyntaxError: Unexpected indentation
    |
104 | config_result = (
105 |     self._transcription_session.configure_model(request.model_configuration))
106 |                 if config_result.is_failure(,
    | ^
107 |     ):
108 |                     return Result.failure(
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:106:45: SyntaxError: Expected an expression or a ')'
    |
104 | config_result = (
105 |     self._transcription_session.configure_model(request.model_configuration))
106 |                 if config_result.is_failure(,
    |                                             ^
107 |     ):
108 |                     return Result.failure(
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:113:25: SyntaxError: Expected ',', found name
    |
111 |                             error_message=f"Model configuration failed: {config_result.error}",
112 |                         )
113 |                         config_result.error,
    |                         ^
114 |                     )
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:117:13: SyntaxError: unindent does not match any outer indentation level
    |
116 |             # Validate model availability
117 |             if self._model_service:
    |             ^
118 |                 model_validation = self._model_service.validate_model_availability(
119 |                     self._transcription_session.get_model_configuration(,
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:119:73: SyntaxError: Expected an expression or a ')'
    |
117 |             if self._model_service:
118 |                 model_validation = self._model_service.validate_model_availability(
119 |                     self._transcription_session.get_model_configuration(,
    |                                                                         ^
120 |     )
121 |                 )
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:120:6: COM812 Trailing comma missing
    |
118 |                 model_validation = self._model_service.validate_model_availability(
119 |                     self._transcription_session.get_model_configuration(,
120 |     )
    |      ^ COM812
121 |                 )
122 |                 if model_validation.is_failure():
    |
    = help: Add trailing comma

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:128:25: SyntaxError: Expected ',', found name
    |
126 |                             error_message=f"Model validation failed: {model_validation.error}",
127 |                         )
128 |                         model_validation.error,
    |                         ^
129 |                     )
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:132:13: SyntaxError: unindent does not match any outer indentation level
    |
131 |             # Perform VAD check if enabled and service available
132 |             if request.enable_vad and self._vad_service:
    |             ^
133 |                 try:
134 |                     vad_result = self._vad_service.detect_speech(request.audio_data,
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:141:33: SyntaxError: Expected ',', found name
    |
139 |                                 success=True,
140 |                                 session_id=self._transcription_session.get_session_id()
141 |                                 error_message="No speech detected in audio",
    |                                 ^
142 |                             ),
143 |                         )
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:152:13: SyntaxError: unindent does not match any outer indentation level
    |
151 |             # Estimate processing duration
152 |             estimated_duration = self._estimate_processing_duration(request.audio_data)
    |             ^
153 |
154 |             # Start transcription session
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:155:1: SyntaxError: Unexpected indentation
    |
154 |             # Start transcription session
155 |             session_id = request.session_id or self._transcription_session.get_session_id()
    | ^
156 |             start_result = self._transcription_session.start_transcription(
157 |                 audio_data=request.audio_data,
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:174:21: SyntaxError: Expected ',', found name
    |
172 |                         error_message=start_result.error,
173 |                     )
174 |                     start_result.error,
    |                     ^
175 |                 )
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:217:18: COM812 Trailing comma missing
    |
215 |                     estimated_duration=estimated_duration,
216 |                     processing_started=processing_started,
217 |                 )
    |                  ^ COM812
218 |             )
    |
    = help: Add trailing comma

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:220:1: SyntaxError: unindent does not match any outer indentation level
    |
218 |             )
219 |
220 |         except Exception as e:
    | ^
221 |             # Handle unexpected errors
222 |             error_msg = f"Unexpected error starting transcription: {e!s}"
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:220:9: SyntaxError: Expected a statement
    |
218 |             )
219 |
220 |         except Exception as e:
    |         ^
221 |             # Handle unexpected errors
222 |             error_msg = f"Unexpected error starting transcription: {e!s}"
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:220:26: SyntaxError: Expected a statement
    |
218 |             )
219 |
220 |         except Exception as e:
    |                          ^
221 |             # Handle unexpected errors
222 |             error_msg = f"Unexpected error starting transcription: {e!s}"
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:220:31: SyntaxError: Expected an expression
    |
218 |             )
219 |
220 |         except Exception as e:
    |                               ^
221 |             # Handle unexpected errors
222 |             error_msg = f"Unexpected error starting transcription: {e!s}"
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:222:1: SyntaxError: Unexpected indentation
    |
220 |         except Exception as e:
221 |             # Handle unexpected errors
222 |             error_msg = f"Unexpected error starting transcription: {e!s}"
    | ^
223 |             if self._error_callback_service:
224 |                 self._error_callback_service.notify_error(
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:233:17: SyntaxError: Expected ',', found name
    |
231 |                     error_message=error_msg,
232 |                 )
233 |                 error_msg,
    |                 ^
234 |             )
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:236:1: SyntaxError: unindent does not match any outer indentation level
    |
234 |             )
235 |
236 |     def _validate_audio_data(self, audio_data: AudioData,
    | ^
237 |     ) -> Result[None]:
238 |         """Validate audio data for transcription.
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:260:1: SyntaxError: unindent does not match any outer indentation level
    |
258 |         return Result.success(None)
259 |
260 |     def _estimate_processing_duration(self, audio_data: AudioData,
    | ^
261 |     ) -> float:
262 |         """Estimate transcription processing duration.
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:281:1: SyntaxError: unindent does not match any outer indentation level
    |
279 |         return max(1.0, audio_data.duration_seconds * base_factor)
280 |
281 |     def _start_background_processing(
    | ^
282 |         self,
283 |         transcription_id: str,
    |

src_refactored\application\transcription\use_cases\start_transcription_use_case.py:348:83: SyntaxError: Expected dedent, found end of file
    |
347 |         except Exception as e:
348 |             return Result.failure(f"Failed to start background processing: {e!s}")
    |                                                                                   ^
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:149:48: SyntaxError: Expected an expression or a ')'
    |
147 |             if request.check_model_file:
148 |                 model_validation = self._validate_model_file(model_config)
149 |                 if model_validation.is_success(,
    |                                                ^
150 |     ):
151 |                     model_info, file_issues = model_validation.value
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:163:49: SyntaxError: Expected an expression or a ')'
    |
161 |             if request.check_system_requirements:
162 |                 system_validation = self._validate_system_requirements(model_config)
163 |                 if system_validation.is_success(,
    |                                                 ^
164 |     ):
165 |                     system_info, system_issues = system_validation.value
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:348:49: SyntaxError: Expected an expression or a ')'
    |
346 |                 try:
347 |                     format_result = self._model_service.validate_model_format(model_path)
348 |                     if format_result.is_success(,
    |                                                 ^
349 |     ):
350 |                         format_info = format_result.value
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:449:77: SyntaxError: Expected an expression or a ')'
    |
447 |             if config.device == "cuda" and self._system_service:
448 |                 try:
449 |                     cuda_available = self._system_service.is_cuda_available(,
    |                                                                             ^
450 |     )
451 |                     if not cuda_available:
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:481:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
479 |             # Get Python version
480 |             import sys
481 | python_version = (
    | ^
482 |     f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:485:1: SyntaxError: Unexpected indentation
    |
484 |             # Check dependencies if service available
485 |             if self._dependency_service:
    | ^
486 |                 try:
487 |                     dep_result = self._dependency_service.check_dependencies(config)
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:488:46: SyntaxError: Expected an expression or a ')'
    |
486 |                 try:
487 |                     dep_result = self._dependency_service.check_dependencies(config)
488 |                     if dep_result.is_success(,
    |                                              ^
489 |     ):
490 |                         dep_info = dep_result.value
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:520:1: SyntaxError: unindent does not match any outer indentation level
    |
518 |             return Result.success((system_info, issues))
519 |
520 |         except Exception as e:
    | ^
521 |             return Result.failure(f"System validation error: {e!s}")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:520:9: SyntaxError: Expected a statement
    |
518 |             return Result.success((system_info, issues))
519 |
520 |         except Exception as e:
    |         ^
521 |             return Result.failure(f"System validation error: {e!s}")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:520:26: SyntaxError: Expected a statement
    |
518 |             return Result.success((system_info, issues))
519 |
520 |         except Exception as e:
    |                          ^
521 |             return Result.failure(f"System validation error: {e!s}")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:520:31: SyntaxError: Expected an expression
    |
518 |             return Result.success((system_info, issues))
519 |
520 |         except Exception as e:
    |                               ^
521 |             return Result.failure(f"System validation error: {e!s}")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:521:1: SyntaxError: Unexpected indentation
    |
520 |         except Exception as e:
521 |             return Result.failure(f"System validation error: {e!s}")
    | ^
522 |
523 |     def _validate_dependencies(self, config: ModelConfiguration,
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:523:1: SyntaxError: unindent does not match any outer indentation level
    |
521 |             return Result.failure(f"System validation error: {e!s}")
522 |
523 |     def _validate_dependencies(self, config: ModelConfiguration,
    | ^
524 |     ) -> list[ValidationIssue]:
525 |         """Validate required dependencies.
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:554:1: SyntaxError: unindent does not match any outer indentation level
    |
552 |         return issues
553 |
554 |     def _validate_configuration_parameters(self, config: ModelConfiguration,
    | ^
555 |     ) -> list[ValidationIssue]:
556 |         """Validate configuration parameters.
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:598:1: SyntaxError: unindent does not match any outer indentation level
    |
596 |         return issues
597 |
598 |     def _validate_language_support(self, config: ModelConfiguration,
    | ^
599 |     ) -> list[ValidationIssue]:
600 |         """Validate language support.
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:628:1: SyntaxError: unindent does not match any outer indentation level
    |
626 |         return issues
627 |
628 |     def _validate_performance(self, config: ModelConfiguration,
    | ^
629 |     ) -> list[ValidationIssue]:
630 |         """Validate performance characteristics.
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:643:43: SyntaxError: Expected an expression or a ')'
    |
641 |             try:
642 |                 perf_result = self._performance_service.test_model_performance(config)
643 |                 if perf_result.is_success(,
    |                                           ^
644 |     ):
645 |                     perf_info = perf_result.value
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:671:1: SyntaxError: unindent does not match any outer indentation level
    |
669 |         return issues
670 |
671 |     def _estimate_memory_usage(self, config: ModelConfiguration,
    | ^
672 |     ) -> float | None:
673 |         """Estimate memory usage for the model.
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:700:1: SyntaxError: unindent does not match any outer indentation level
    |
698 |         return base_memory
699 |
700 |     def _generate_recommendations(
    | ^
701 |         self,
702 |         config: ModelConfiguration,
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:729:92: SyntaxError: Expected an expression
    |
727 |             recommendations.append("Consider using CPU device for better compatibility")
728 |
729 |         if model_info and model_info.model_size_bytes and model_info.model_size_bytes > 5 *
    |                                                                                            ^
730 |     1024 * 1024 * 1024:
731 |             recommendations.append("Consider using a smaller model for better performance")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:730:1: SyntaxError: unindent does not match any outer indentation level
    |
729 |         if model_info and model_info.model_size_bytes and model_info.model_size_bytes > 5 *
730 |     1024 * 1024 * 1024:
    | ^
731 |             recommendations.append("Consider using a smaller model for better performance")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:730:5: SyntaxError: Invalid annotated assignment target
    |
729 |         if model_info and model_info.model_size_bytes and model_info.model_size_bytes > 5 *
730 |     1024 * 1024 * 1024:
    |     ^
731 |             recommendations.append("Consider using a smaller model for better performance")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:730:24: SyntaxError: Expected an expression
    |
729 |         if model_info and model_info.model_size_bytes and model_info.model_size_bytes > 5 *
730 |     1024 * 1024 * 1024:
    |                        ^
731 |             recommendations.append("Consider using a smaller model for better performance")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:731:1: SyntaxError: Unexpected indentation
    |
729 |         if model_info and model_info.model_size_bytes and model_info.model_size_bytes > 5 *
730 |     1024 * 1024 * 1024:
731 |             recommendations.append("Consider using a smaller model for better performance")
    | ^
732 |
733 |         if config.temperature > 0.5:
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:733:1: SyntaxError: unindent does not match any outer indentation level
    |
731 |             recommendations.append("Consider using a smaller model for better performance")
732 |
733 |         if config.temperature > 0.5:
    | ^
734 |             recommendations.append("Lower temperature values typically provide more consistent resul\
735 |     ts")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:734:101: E501 Line too long (101 > 100)
    |
733 |         if config.temperature > 0.5:
734 |             recommendations.append("Lower temperature values typically provide more consistent resul\
    |                                                                                                     ^ E501
735 |     ts")
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:737:1: SyntaxError: unindent does not match any outer indentation level
    |
735 |     ts")
736 |
737 |         return recommendations
    | ^
    |

src_refactored\application\transcription\use_cases\validate_model_use_case.py:737:31: SyntaxError: Expected dedent, found end of file
    |
735 |     ts")
736 |
737 |         return recommendations
    |                               ^
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:232:101: E501 Line too long (101 > 100)
    |
231 |             # Phase 2: Parameter Validation
232 |             self.progress_service.update_progress(session_id, CreatePhase.PARAMETER_VALIDATION, 15.0)
    |                                                                                                     ^ E501
233 |
234 |             # Validate parent widget if required
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:246:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
245 |             # Validate configuration
246 | config_errors = (
    | ^
247 |     self.validation_service.validate_widget_configuration(request.configuration))
248 |             if config_errors:
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:248:1: SyntaxError: Unexpected indentation
    |
246 | config_errors = (
247 |     self.validation_service.validate_widget_configuration(request.configuration))
248 |             if config_errors:
    | ^
249 |                 return self._create_error_response(
250 |                     CreateResult.VALIDATION_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:275:17: SyntaxError: Expected an indented block after `try` statement
    |
273 |             self.progress_service.update_progress(session_id, CreatePhase.WIDGET_CREATION, 30.0)
274 |
275 |             try:
    |                 ^
276 | toggle_widget = (
277 |     self.widget_factory_service.create_toggle_switch(request.parent_widget))
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:276:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
275 |             try:
276 | toggle_widget = (
    | ^
277 |     self.widget_factory_service.create_toggle_switch(request.parent_widget))
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:279:1: SyntaxError: Unexpected indentation
    |
277 |     self.widget_factory_service.create_toggle_switch(request.parent_widget))
278 |
279 |                 if not self.widget_factory_service.validate_widget_creation(toggle_widget,
    | ^
280 |     ):
281 |                     return self._create_error_response(
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:290:101: E501 Line too long (111 > 100)
    |
289 |                 # Set basic properties
290 |                 if not self.widget_factory_service.set_widget_properties(toggle_widget, request.configuration):
    |                                                                                                     ^^^^^^^^^^^ E501
291 |                     return self._create_error_response(
292 |                         CreateResult.INTERNAL_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:299:13: SyntaxError: unindent does not match any outer indentation level
    |
297 |                     )
298 |
299 |             except Exception as e:
    |             ^
300 |                 return self._create_error_response(
301 |                     CreateResult.INTERNAL_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:299:30: SyntaxError: Expected a statement
    |
297 |                     )
298 |
299 |             except Exception as e:
    |                              ^
300 |                 return self._create_error_response(
301 |                     CreateResult.INTERNAL_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:299:35: SyntaxError: Expected an expression
    |
297 |                     )
298 |
299 |             except Exception as e:
    |                                   ^
300 |                 return self._create_error_response(
301 |                     CreateResult.INTERNAL_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:300:1: SyntaxError: Unexpected indentation
    |
299 |             except Exception as e:
300 |                 return self._create_error_response(
    | ^
301 |                     CreateResult.INTERNAL_ERROR,
302 |                     CreatePhase.WIDGET_CREATION,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:309:1: SyntaxError: unindent does not match any outer indentation level
    |
308 |             # Phase 4: Styling Application
309 |             self.progress_service.update_progress(session_id, CreatePhase.STYLING_APPLICATION, 50.0)
    | ^
310 |
311 |             try:
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:311:1: SyntaxError: Unexpected indentation
    |
309 |             self.progress_service.update_progress(session_id, CreatePhase.STYLING_APPLICATION, 50.0)
310 |
311 |             try:
    | ^
312 |                 # Apply custom stylesheet if provided
313 |                 if request.configuration.custom_stylesheet:
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:315:2: SyntaxError: unindent does not match any outer indentation level
    |
313 |                 if request.configuration.custom_stylesheet:
314 |                     stylesheet_errors
315 |  = (
    |  ^
316 |     self.styling_service.validate_stylesheet(request.configuration.custom_stylesheet,)
317 |     )
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:316:85: COM819 Trailing comma prohibited
    |
314 |                     stylesheet_errors
315 |  = (
316 |     self.styling_service.validate_stylesheet(request.configuration.custom_stylesheet,)
    |                                                                                     ^ COM819
317 |     )
318 |                     if stylesheet_errors:
    |
    = help: Remove trailing comma

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:318:1: SyntaxError: Unexpected indentation
    |
316 |     self.styling_service.validate_stylesheet(request.configuration.custom_stylesheet,)
317 |     )
318 |                     if stylesheet_errors:
    | ^
319 |                         return self._create_error_response(
320 |                             CreateResult.STYLING_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:336:17: SyntaxError: unindent does not match any outer indentation level
    |
334 |                             start_time,
335 |                         )
336 |                 elif not self.styling_service.apply_toggle_style(
    |                 ^
337 |                     toggle_widget,
338 |                     request.configuration.style,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:336:22: SyntaxError: Invalid annotated assignment target
    |
334 |                             start_time,
335 |                         )
336 |                 elif not self.styling_service.apply_toggle_style(
    |                      ^
337 |                     toggle_widget,
338 |                     request.configuration.style,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:340:19: SyntaxError: Expected an expression
    |
338 |                     request.configuration.style,
339 |                     request.configuration.size,
340 |                 ):
    |                   ^
341 |                     return self._create_error_response(
342 |                         CreateResult.STYLING_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:341:1: SyntaxError: Unexpected indentation
    |
339 |                     request.configuration.size,
340 |                 ):
341 |                     return self._create_error_response(
    | ^
342 |                         CreateResult.STYLING_ERROR,
343 |                         CreatePhase.STYLING_APPLICATION,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:349:1: SyntaxError: unindent does not match any outer indentation level
    |
347 |                     )
348 |
349 |             except Exception as e:
    | ^
350 |                 return self._create_error_response(
351 |                     CreateResult.STYLING_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:349:13: SyntaxError: Expected a statement
    |
347 |                     )
348 |
349 |             except Exception as e:
    |             ^
350 |                 return self._create_error_response(
351 |                     CreateResult.STYLING_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:349:30: SyntaxError: Expected a statement
    |
347 |                     )
348 |
349 |             except Exception as e:
    |                              ^
350 |                 return self._create_error_response(
351 |                     CreateResult.STYLING_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:349:35: SyntaxError: Expected an expression
    |
347 |                     )
348 |
349 |             except Exception as e:
    |                                   ^
350 |                 return self._create_error_response(
351 |                     CreateResult.STYLING_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:350:1: SyntaxError: Unexpected indentation
    |
349 |             except Exception as e:
350 |                 return self._create_error_response(
    | ^
351 |                     CreateResult.STYLING_ERROR,
352 |                     CreatePhase.STYLING_APPLICATION,
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:359:1: SyntaxError: unindent does not match any outer indentation level
    |
358 |             # Phase 5: Parent Attachment
359 |             self.progress_service.update_progress(session_id, CreatePhase.PARENT_ATTACHMENT, 70.0)
    | ^
360 |
361 |             # Widget is already attached to parent during creation if parent was provided
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:364:1: SyntaxError: Unexpected indentation
    |
363 |             # Phase 6: Event Connection
364 |             self.progress_service.update_progress(session_id, CreatePhase.EVENT_CONNECTION, 85.0)
    | ^
365 |
366 |             connected_signals = []
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:388:17: SyntaxError: Expected ',', found name
    |
386 |                 configuration=request.configuration,
387 |                 creation_timestamp=datetime.utcnow()
388 |                 parent_widget=request.parent_widget,
    |                 ^
389 |                 connected_signals=connected_signals,
390 |             )
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:411:1: SyntaxError: unindent does not match any outer indentation level
    |
409 |             )
410 |
411 |         except Exception as e:
    | ^
412 |             self.logger_service.log_error(
413 |                 "Unexpected error during toggle widget creation",
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:411:9: SyntaxError: Expected a statement
    |
409 |             )
410 |
411 |         except Exception as e:
    |         ^
412 |             self.logger_service.log_error(
413 |                 "Unexpected error during toggle widget creation",
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:411:26: SyntaxError: Expected a statement
    |
409 |             )
410 |
411 |         except Exception as e:
    |                          ^
412 |             self.logger_service.log_error(
413 |                 "Unexpected error during toggle widget creation",
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:411:31: SyntaxError: Expected an expression
    |
409 |             )
410 |
411 |         except Exception as e:
    |                               ^
412 |             self.logger_service.log_error(
413 |                 "Unexpected error during toggle widget creation",
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:412:1: SyntaxError: Unexpected indentation
    |
411 |         except Exception as e:
412 |             self.logger_service.log_error(
    | ^
413 |                 "Unexpected error during toggle widget creation",
414 |                 {"session_id": session_id, "error": str(e)},
    |

src_refactored\application\ui_widgets\use_cases\create_toggle_widget_use_case.py:425:1: SyntaxError: unindent does not match any outer indentation level
    |
423 |             )
424 |
425 |     def _create_error_response(
    | ^
426 |         self,
427 |         result: CreateResult,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:62:46: SyntaxError: Expected an expression or a ')'
   |
60 |     def __post_init__(self):
61 |         if self.timestamp is None:
62 |             self.timestamp = datetime.utcnow(,
   |                                              ^
63 |     )
64 |         if self.context_data is None:
   |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:284:101: E501 Line too long (102 > 100)
    |
283 |             # Validate event type support
284 |             if not self.event_validation_service.validate_event_type_support(request.event.event_type,
    |                                                                                                     ^^ E501
285 |             request.widget_type):
286 |                 return self._create_error_response(
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:290:101: E501 Line too long (125 > 100)
    |
288 |                     HandlePhase.EVENT_VALIDATION,
289 |                     12.5,
290 |                     f"Event type {request.event.event_type.value} not supported for widget type {request.widget_type.value}",
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
291 |                     start_time,
292 |                 )
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:295:58: SyntaxError: Expected an indented block after `if` statement
    |
294 |             # Validate event data
295 |             if request.configuration.validate_event_data:
    |                                                          ^
296 | event_errors = (
297 |     self.event_validation_service.validate_event_data(request.event, request.widget_type))
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:296:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
294 |             # Validate event data
295 |             if request.configuration.validate_event_data:
296 | event_errors = (
    | ^
297 |     self.event_validation_service.validate_event_data(request.event, request.widget_type))
298 |                 if event_errors:
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:298:1: SyntaxError: Unexpected indentation
    |
296 | event_errors = (
297 |     self.event_validation_service.validate_event_data(request.event, request.widget_type))
298 |                 if event_errors:
    | ^
299 |                     return self._create_error_response(
300 |                         HandleResult.VALIDATION_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:308:13: SyntaxError: unindent does not match any outer indentation level
    |
307 |             # Phase 3: Widget Validation
308 |             self.progress_service.update_progress(session_id, HandlePhase.WIDGET_VALIDATION, 25.0)
    |             ^
309 |
310 |             if not self.widget_validation_service.validate_widget(request.widget):
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:310:1: SyntaxError: Unexpected indentation
    |
308 |             self.progress_service.update_progress(session_id, HandlePhase.WIDGET_VALIDATION, 25.0)
309 |
310 |             if not self.widget_validation_service.validate_widget(request.widget):
    | ^
311 |                 return self._create_error_response(
312 |                     HandleResult.WIDGET_NOT_FOUND,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:319:101: E501 Line too long (108 > 100)
    |
317 |                 )
318 |
319 |             if not self.widget_validation_service.validate_widget_type(request.widget, request.widget_type):
    |                                                                                                     ^^^^^^^^ E501
320 |                 return self._create_error_response(
321 |                     HandleResult.VALIDATION_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:329:101: E501 Line too long (116 > 100)
    |
328 |             # Validate widget-event compatibility
329 |             if not self.event_validation_service.validate_widget_event_compatibility(request.widget, request.event):
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
330 |                 return self._create_error_response(
331 |                     HandleResult.VALIDATION_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:357:101: E501 Line too long (132 > 100)
    |
355 |                     HandlePhase.HANDLER_LOOKUP,
356 |                     37.5,
357 |                     f"No handler found for event type {request.event.event_type.value} and widget type {request.widget_type.value}",
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
358 |                     start_time,
359 |                 )
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:367:17: SyntaxError: Expected an indented block after `try` statement
    |
365 |             current_state = self._get_widget_current_state(request.widget, request.widget_type)
366 |
367 |             try:
    |                 ^
368 |                 # Process event with appropriate handler
369 | if request.widget_type = (
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:369:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
367 |             try:
368 |                 # Process event with appropriate handler
369 | if request.widget_type = (
    | ^
370 |     = WidgetType.TOGGLE_SWITCH and request.event.event_type == EventType.MOUSE_CLICK:)
371 | event_result = (
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:369:24: SyntaxError: Expected ':', found '='
    |
367 |             try:
368 |                 # Process event with appropriate handler
369 | if request.widget_type = (
    |                        ^
370 |     = WidgetType.TOGGLE_SWITCH and request.event.event_type == EventType.MOUSE_CLICK:)
371 | event_result = (
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:370:5: SyntaxError: Expected an expression
    |
368 |                 # Process event with appropriate handler
369 | if request.widget_type = (
370 |     = WidgetType.TOGGLE_SWITCH and request.event.event_type == EventType.MOUSE_CLICK:)
    |     ^
371 | event_result = (
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:370:85: SyntaxError: Expected a statement
    |
368 |                 # Process event with appropriate handler
369 | if request.widget_type = (
370 |     = WidgetType.TOGGLE_SWITCH and request.event.event_type == EventType.MOUSE_CLICK:)
    |                                                                                     ^
371 | event_result = (
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:370:86: SyntaxError: Expected a statement
    |
368 |                 # Process event with appropriate handler
369 | if request.widget_type = (
370 |     = WidgetType.TOGGLE_SWITCH and request.event.event_type == EventType.MOUSE_CLICK:)
    |                                                                                      ^
371 | event_result = (
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:370:87: SyntaxError: Expected a statement
    |
368 |                 # Process event with appropriate handler
369 | if request.widget_type = (
370 |     = WidgetType.TOGGLE_SWITCH and request.event.event_type == EventType.MOUSE_CLICK:)
    |                                                                                       ^
371 | event_result = (
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:372:72: COM819 Trailing comma prohibited
    |
370 |     = WidgetType.TOGGLE_SWITCH and request.event.event_type == EventType.MOUSE_CLICK:)
371 | event_result = (
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
    |                                                                        ^ COM819
373 |                     request.event.event_data)
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
    |
    = help: Remove trailing comma

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:373:21: SyntaxError: Expected ')', found name
    |
371 | event_result = (
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
373 |                     request.event.event_data)
    |                     ^
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
375 | event_result = (
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:373:45: SyntaxError: Expected a statement
    |
371 | event_result = (
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
373 |                     request.event.event_data)
    |                                             ^
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
375 | event_result = (
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:373:46: SyntaxError: Expected a statement
    |
371 | event_result = (
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
373 |                     request.event.event_data)
    |                                              ^
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
375 | event_result = (
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:374:1: SyntaxError: Unexpected indentation
    |
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
373 |                     request.event.event_data)
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
    | ^
375 | event_result = (
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:374:17: SyntaxError: Expected a statement
    |
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
373 |                     request.event.event_data)
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
    |                 ^
375 | event_result = (
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:374:22: SyntaxError: Invalid annotated assignment target
    |
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
373 |                     request.event.event_data)
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
    |                      ^
375 | event_result = (
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:374:74: SyntaxError: Expected an expression
    |
372 |     self.event_handler_service.handle_toggle_click_event(request.widget,)
373 |                     request.event.event_data)
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
    |                                                                          ^
375 | event_result = (
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:375:1: SyntaxError: Expected a statement
    |
373 |                     request.event.event_data)
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
375 | event_result = (
    | ^
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
377 |                     request.event.event_data)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:376:72: COM819 Trailing comma prohibited
    |
374 |                 elif request.event.event_type == EventType.VALUE_CHANGED:
375 | event_result = (
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
    |                                                                        ^ COM819
377 |                     request.event.event_data)
378 |                 else:
    |
    = help: Remove trailing comma

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:377:21: SyntaxError: Expected ')', found name
    |
375 | event_result = (
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
377 |                     request.event.event_data)
    |                     ^
378 |                 else:
379 | event_result = (
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:377:45: SyntaxError: Expected a statement
    |
375 | event_result = (
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
377 |                     request.event.event_data)
    |                                             ^
378 |                 else:
379 | event_result = (
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:377:46: SyntaxError: Expected a statement
    |
375 | event_result = (
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
377 |                     request.event.event_data)
    |                                              ^
378 |                 else:
379 | event_result = (
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:378:1: SyntaxError: Unexpected indentation
    |
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
377 |                     request.event.event_data)
378 |                 else:
    | ^
379 | event_result = (
380 |     self.event_handler_service.handle_generic_event(request.widget, request.event))
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:378:17: SyntaxError: Expected a statement
    |
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
377 |                     request.event.event_data)
378 |                 else:
    |                 ^
379 | event_result = (
380 |     self.event_handler_service.handle_generic_event(request.widget, request.event))
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:378:21: SyntaxError: Expected a statement
    |
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
377 |                     request.event.event_data)
378 |                 else:
    |                     ^
379 | event_result = (
380 |     self.event_handler_service.handle_generic_event(request.widget, request.event))
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:378:22: SyntaxError: Expected a statement
    |
376 |     self.event_handler_service.handle_value_change_event(request.widget,)
377 |                     request.event.event_data)
378 |                 else:
    |                      ^
379 | event_result = (
380 |     self.event_handler_service.handle_generic_event(request.widget, request.event))
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:379:1: SyntaxError: Expected a statement
    |
377 |                     request.event.event_data)
378 |                 else:
379 | event_result = (
    | ^
380 |     self.event_handler_service.handle_generic_event(request.widget, request.event))
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:382:1: SyntaxError: Unexpected indentation
    |
380 |     self.event_handler_service.handle_generic_event(request.widget, request.event))
381 |
382 |             except Exception as e:
    | ^
383 |                 return self._create_error_response(
384 |                     HandleResult.HANDLER_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:382:13: SyntaxError: Expected a statement
    |
380 |     self.event_handler_service.handle_generic_event(request.widget, request.event))
381 |
382 |             except Exception as e:
    |             ^
383 |                 return self._create_error_response(
384 |                     HandleResult.HANDLER_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:382:30: SyntaxError: Expected a statement
    |
380 |     self.event_handler_service.handle_generic_event(request.widget, request.event))
381 |
382 |             except Exception as e:
    |                              ^
383 |                 return self._create_error_response(
384 |                     HandleResult.HANDLER_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:382:35: SyntaxError: Expected an expression
    |
380 |     self.event_handler_service.handle_generic_event(request.widget, request.event))
381 |
382 |             except Exception as e:
    |                                   ^
383 |                 return self._create_error_response(
384 |                     HandleResult.HANDLER_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:383:1: SyntaxError: Unexpected indentation
    |
382 |             except Exception as e:
383 |                 return self._create_error_response(
    | ^
384 |                     HandleResult.HANDLER_ERROR,
385 |                     HandlePhase.EVENT_PROCESSING,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:392:13: SyntaxError: Expected a statement
    |
391 |             # Phase 6: State Management
392 |             self.progress_service.update_progress(session_id, HandlePhase.STATE_MANAGEMENT, 62.5)
    |             ^
393 |
394 |             state_changes = {}
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:399:23: SyntaxError: Expected an indented block after `if` statement
    |
397 |                     if self.state_management_service.update_widget_state_from_event(
398 |                         request.widget, request.widget_type, event_result,
399 |                     ):
    |                       ^
400 | new_state = (
401 |     self._get_widget_current_state(request.widget, request.widget_type))
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:400:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
398 |                         request.widget, request.widget_type, event_result,
399 |                     ):
400 | new_state = (
    | ^
401 |     self._get_widget_current_state(request.widget, request.widget_type))
402 |                         state_changes = self.state_management_service.get_state_changes(
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:402:1: SyntaxError: Unexpected indentation
    |
400 | new_state = (
401 |     self._get_widget_current_state(request.widget, request.widget_type))
402 |                         state_changes = self.state_management_service.get_state_changes(
    | ^
403 |                             request.widget, current_state, new_state,
404 |                         )
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:407:1: SyntaxError: Expected a statement
    |
406 |                         # Validate state changes
407 | state_errors = (
    | ^
408 |     self.state_management_service.validate_state_change(request.widget,)
409 |                         state_changes)
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:408:71: COM819 Trailing comma prohibited
    |
406 |                         # Validate state changes
407 | state_errors = (
408 |     self.state_management_service.validate_state_change(request.widget,)
    |                                                                       ^ COM819
409 |                         state_changes)
410 |                         if state_errors:
    |
    = help: Remove trailing comma

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:409:25: SyntaxError: Expected ')', found name
    |
407 | state_errors = (
408 |     self.state_management_service.validate_state_change(request.widget,)
409 |                         state_changes)
    |                         ^
410 |                         if state_errors:
411 |                             self.logger_service.log_warning(
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:409:38: SyntaxError: Expected a statement
    |
407 | state_errors = (
408 |     self.state_management_service.validate_state_change(request.widget,)
409 |                         state_changes)
    |                                      ^
410 |                         if state_errors:
411 |                             self.logger_service.log_warning(
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:409:39: SyntaxError: Expected a statement
    |
407 | state_errors = (
408 |     self.state_management_service.validate_state_change(request.widget,)
409 |                         state_changes)
    |                                       ^
410 |                         if state_errors:
411 |                             self.logger_service.log_warning(
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:410:1: SyntaxError: Unexpected indentation
    |
408 |     self.state_management_service.validate_state_change(request.widget,)
409 |                         state_changes)
410 |                         if state_errors:
    | ^
411 |                             self.logger_service.log_warning(
412 |                                 "State change validation warnings",
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:416:17: SyntaxError: unindent does not match any outer indentation level
    |
414 |                             )
415 |
416 |                 except Exception as e:
    |                 ^
417 |                     return self._create_error_response(
418 |                         HandleResult.STATE_UPDATE_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:416:34: SyntaxError: Expected a statement
    |
414 |                             )
415 |
416 |                 except Exception as e:
    |                                  ^
417 |                     return self._create_error_response(
418 |                         HandleResult.STATE_UPDATE_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:416:39: SyntaxError: Expected an expression
    |
414 |                             )
415 |
416 |                 except Exception as e:
    |                                       ^
417 |                     return self._create_error_response(
418 |                         HandleResult.STATE_UPDATE_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:417:1: SyntaxError: Unexpected indentation
    |
416 |                 except Exception as e:
417 |                     return self._create_error_response(
    | ^
418 |                         HandleResult.STATE_UPDATE_ERROR,
419 |                         HandlePhase.STATE_MANAGEMENT,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:426:1: SyntaxError: unindent does not match any outer indentation level
    |
425 |             # Phase 7: Response Coordination
426 |             self.progress_service.update_progress(session_id, HandlePhase.RESPONSE_COORDINATION, 75.0)
    | ^
427 |
428 |             response_events = []
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:426:101: E501 Line too long (102 > 100)
    |
425 |             # Phase 7: Response Coordination
426 |             self.progress_service.update_progress(session_id, HandlePhase.RESPONSE_COORDINATION, 75.0)
    |                                                                                                     ^^ E501
427 |
428 |             response_events = []
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:428:1: SyntaxError: Unexpected indentation
    |
426 |             self.progress_service.update_progress(session_id, HandlePhase.RESPONSE_COORDINATION, 75.0)
427 |
428 |             response_events = []
    | ^
429 |             if request.configuration.emit_response_events:
430 |                 try:
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:443:101: E501 Line too long (105 > 100)
    |
441 |                     # Propagate event if configured
442 |                     if request.configuration.propagate_event:
443 |                         self.response_coordination_service.propagate_event(request.widget, request.event)
    |                                                                                                     ^^^^^ E501
444 |
445 |                 except Exception as e:
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:488:1: SyntaxError: unindent does not match any outer indentation level
    |
486 |             )
487 |
488 |         except Exception as e:
    | ^
489 |             self.logger_service.log_error(
490 |                 "Unexpected error during widget event handling",
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:488:9: SyntaxError: Expected a statement
    |
486 |             )
487 |
488 |         except Exception as e:
    |         ^
489 |             self.logger_service.log_error(
490 |                 "Unexpected error during widget event handling",
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:488:26: SyntaxError: Expected a statement
    |
486 |             )
487 |
488 |         except Exception as e:
    |                          ^
489 |             self.logger_service.log_error(
490 |                 "Unexpected error during widget event handling",
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:488:31: SyntaxError: Expected an expression
    |
486 |             )
487 |
488 |         except Exception as e:
    |                               ^
489 |             self.logger_service.log_error(
490 |                 "Unexpected error during widget event handling",
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:489:1: SyntaxError: Unexpected indentation
    |
488 |         except Exception as e:
489 |             self.logger_service.log_error(
    | ^
490 |                 "Unexpected error during widget event handling",
491 |                 {"session_id": session_id, "error": str(e)},
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:502:1: SyntaxError: unindent does not match any outer indentation level
    |
500 |             )
501 |
502 |     def _get_widget_current_state(self, widget: Any, widget_type: WidgetType,
    | ^
503 |     ) -> dict[str, Any]:
504 |         """Get current state of widget."""
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:523:1: SyntaxError: unindent does not match any outer indentation level
    |
521 |         return state
522 |
523 |     def _create_error_response(
    | ^
524 |         self,
525 |         result: HandleResult,
    |

src_refactored\application\ui_widgets\use_cases\handle_widget_event_use_case.py:541:10: SyntaxError: Expected dedent, found end of file
    |
539 |             error_message=error_message,
540 |             execution_time_ms=execution_time,
541 |         )
    |          ^
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:43:46: SyntaxError: Expected an expression or a ')'
   |
41 |     def __post_init__(self):
42 |         if self.timestamp is None:
43 |             self.timestamp = datetime.utcnow(,
   |                                              ^
44 |     )
   |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:241:101: E501 Line too long (101 > 100)
    |
239 |                 )
240 |
241 |             if not self.validation_service.validate_widget_type(request.widget, request.widget_type):
    |                                                                                                     ^ E501
242 |                 return self._create_error_response(
243 |                     UpdateResult.VALIDATION_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:254:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
253 |             # Validate new state data
254 | state_errors = (
    | ^
255 |     self.validation_service.validate_state_data(request.new_state, request.widget_type))
256 |             if state_errors:
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:256:1: SyntaxError: Unexpected indentation
    |
254 | state_errors = (
255 |     self.validation_service.validate_state_data(request.new_state, request.widget_type))
256 |             if state_errors:
    | ^
257 |                 return self._create_error_response(
258 |                     UpdateResult.VALIDATION_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:266:1: SyntaxError: Expected a statement
    |
265 |             # Get current state
266 | current_state = (
    | ^
267 |     self.state_service.get_current_state(request.widget, request.widget_type))
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:270:1: SyntaxError: Unexpected indentation
    |
269 |             # Validate state transition if required
270 |             if request.configuration.validate_state_transition:
    | ^
271 |                 transition_errors = self.state_service.validate_state_transition(
272 |                     request.widget, current_state, request.new_state,
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:287:101: E501 Line too long (115 > 100)
    |
286 |             try:
287 |                 if not self.state_service.set_widget_state(request.widget, request.widget_type, request.new_state):
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
288 |                     return self._create_error_response(
289 |                         UpdateResult.INTERNAL_ERROR,
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:309:21: SyntaxError: Expected an indented block after `try` statement
    |
307 |             visual_feedback_applied = False
308 |             if request.configuration.apply_visual_feedback:
309 |                 try:
    |                     ^
310 | if request.widget_type = (
311 |     = WidgetType.TOGGLE_SWITCH and "value" in request.new_state:)
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:310:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
308 |             if request.configuration.apply_visual_feedback:
309 |                 try:
310 | if request.widget_type = (
    | ^
311 |     = WidgetType.TOGGLE_SWITCH and "value" in request.new_state:)
312 | visual_feedback_applied = (
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:310:24: SyntaxError: Expected ':', found '='
    |
308 |             if request.configuration.apply_visual_feedback:
309 |                 try:
310 | if request.widget_type = (
    |                        ^
311 |     = WidgetType.TOGGLE_SWITCH and "value" in request.new_state:)
312 | visual_feedback_applied = (
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:311:5: SyntaxError: Expected an expression
    |
309 |                 try:
310 | if request.widget_type = (
311 |     = WidgetType.TOGGLE_SWITCH and "value" in request.new_state:)
    |     ^
312 | visual_feedback_applied = (
313 |     self.visual_feedback_service.apply_toggle_visual_feedback()
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:311:64: SyntaxError: Expected a statement
    |
309 |                 try:
310 | if request.widget_type = (
311 |     = WidgetType.TOGGLE_SWITCH and "value" in request.new_state:)
    |                                                                ^
312 | visual_feedback_applied = (
313 |     self.visual_feedback_service.apply_toggle_visual_feedback()
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:311:65: SyntaxError: Expected a statement
    |
309 |                 try:
310 | if request.widget_type = (
311 |     = WidgetType.TOGGLE_SWITCH and "value" in request.new_state:)
    |                                                                 ^
312 | visual_feedback_applied = (
313 |     self.visual_feedback_service.apply_toggle_visual_feedback()
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:311:66: SyntaxError: Expected a statement
    |
309 |                 try:
310 | if request.widget_type = (
311 |     = WidgetType.TOGGLE_SWITCH and "value" in request.new_state:)
    |                                                                  ^
312 | visual_feedback_applied = (
313 |     self.visual_feedback_service.apply_toggle_visual_feedback()
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:314:29: SyntaxError: Expected ')', found name
    |
312 | visual_feedback_applied = (
313 |     self.visual_feedback_service.apply_toggle_visual_feedback()
314 |                             request.widget, request.new_state["value"],
    |                             ^
315 |                         )
316 |                     else:
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:315:25: SyntaxError: Expected a statement
    |
313 |     self.visual_feedback_service.apply_toggle_visual_feedback()
314 |                             request.widget, request.new_state["value"],
315 |                         )
    |                         ^
316 |                     else:
317 | visual_feedback_applied = (
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:315:26: SyntaxError: Expected a statement
    |
313 |     self.visual_feedback_service.apply_toggle_visual_feedback()
314 |                             request.widget, request.new_state["value"],
315 |                         )
    |                          ^
316 |                     else:
317 | visual_feedback_applied = (
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:316:1: SyntaxError: Unexpected indentation
    |
314 |                             request.widget, request.new_state["value"],
315 |                         )
316 |                     else:
    | ^
317 | visual_feedback_applied = (
318 |     self.visual_feedback_service.apply_generic_visual_feedback()
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:316:21: SyntaxError: Expected a statement
    |
314 |                             request.widget, request.new_state["value"],
315 |                         )
316 |                     else:
    |                     ^
317 | visual_feedback_applied = (
318 |     self.visual_feedback_service.apply_generic_visual_feedback()
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:316:25: SyntaxError: Expected a statement
    |
314 |                             request.widget, request.new_state["value"],
315 |                         )
316 |                     else:
    |                         ^
317 | visual_feedback_applied = (
318 |     self.visual_feedback_service.apply_generic_visual_feedback()
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:316:26: SyntaxError: Expected a statement
    |
314 |                             request.widget, request.new_state["value"],
315 |                         )
316 |                     else:
    |                          ^
317 | visual_feedback_applied = (
318 |     self.visual_feedback_service.apply_generic_visual_feedback()
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:317:1: SyntaxError: Expected a statement
    |
315 |                         )
316 |                     else:
317 | visual_feedback_applied = (
    | ^
318 |     self.visual_feedback_service.apply_generic_visual_feedback()
319 |                             request.widget, request.widget_type, request.new_state,
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:319:29: SyntaxError: Expected ')', found name
    |
317 | visual_feedback_applied = (
318 |     self.visual_feedback_service.apply_generic_visual_feedback()
319 |                             request.widget, request.widget_type, request.new_state,
    |                             ^
320 |                         )
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:320:25: SyntaxError: Expected a statement
    |
318 |     self.visual_feedback_service.apply_generic_visual_feedback()
319 |                             request.widget, request.widget_type, request.new_state,
320 |                         )
    |                         ^
321 |
322 |                     # Apply animation if requested
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:320:26: SyntaxError: Expected a statement
    |
318 |     self.visual_feedback_service.apply_generic_visual_feedback()
319 |                             request.widget, request.widget_type, request.new_state,
320 |                         )
    |                          ^
321 |
322 |                     # Apply animation if requested
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:323:1: SyntaxError: Unexpected indentation
    |
322 |                     # Apply animation if requested
323 |                     if request.configuration.animate_transition:
    | ^
324 |                         self.visual_feedback_service.animate_state_transition(
325 |                             request.widget, request.configuration.transition_duration_ms,
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:328:17: SyntaxError: unindent does not match any outer indentation level
    |
326 |                         )
327 |
328 |                 except Exception as e:
    |                 ^
329 |                     self.logger_service.log_warning(
330 |                         "Failed to apply visual feedback",
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:328:34: SyntaxError: Expected a statement
    |
326 |                         )
327 |
328 |                 except Exception as e:
    |                                  ^
329 |                     self.logger_service.log_warning(
330 |                         "Failed to apply visual feedback",
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:328:39: SyntaxError: Expected an expression
    |
326 |                         )
327 |
328 |                 except Exception as e:
    |                                       ^
329 |                     self.logger_service.log_warning(
330 |                         "Failed to apply visual feedback",
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:329:1: SyntaxError: Unexpected indentation
    |
328 |                 except Exception as e:
329 |                     self.logger_service.log_warning(
    | ^
330 |                         "Failed to apply visual feedback",
331 |                         {"session_id": session_id, "error": str(e)},
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:335:1: SyntaxError: unindent does not match any outer indentation level
    |
334 |             # Phase 6: Event Emission
335 |             self.progress_service.update_progress(session_id, UpdatePhase.EVENT_EMISSION, 85.0)
    | ^
336 |
337 |             emitted_events = []
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:337:1: SyntaxError: Unexpected indentation
    |
335 |             self.progress_service.update_progress(session_id, UpdatePhase.EVENT_EMISSION, 85.0)
336 |
337 |             emitted_events = []
    | ^
338 |             if request.configuration.emit_change_events:
339 |                 try:
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:362:17: SyntaxError: Expected ',', found name
    |
360 |                 new_state=request.new_state,
361 |                 change_timestamp=datetime.utcnow()
362 |                 visual_feedback_applied=visual_feedback_applied,
    |                 ^
363 |                 events_emitted=emitted_events,
364 |             )
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:385:1: SyntaxError: unindent does not match any outer indentation level
    |
383 |             )
384 |
385 |         except Exception as e:
    | ^
386 |             self.logger_service.log_error(
387 |                 "Unexpected error during widget state update",
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:385:9: SyntaxError: Expected a statement
    |
383 |             )
384 |
385 |         except Exception as e:
    |         ^
386 |             self.logger_service.log_error(
387 |                 "Unexpected error during widget state update",
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:385:26: SyntaxError: Expected a statement
    |
383 |             )
384 |
385 |         except Exception as e:
    |                          ^
386 |             self.logger_service.log_error(
387 |                 "Unexpected error during widget state update",
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:385:31: SyntaxError: Expected an expression
    |
383 |             )
384 |
385 |         except Exception as e:
    |                               ^
386 |             self.logger_service.log_error(
387 |                 "Unexpected error during widget state update",
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:386:1: SyntaxError: Unexpected indentation
    |
385 |         except Exception as e:
386 |             self.logger_service.log_error(
    | ^
387 |                 "Unexpected error during widget state update",
388 |                 {"session_id": session_id, "error": str(e)},
    |

src_refactored\application\ui_widgets\use_cases\update_widget_state_use_case.py:399:1: SyntaxError: unindent does not match any outer indentation level
    |
397 |             )
398 |
399 |     def _create_error_response(
    | ^
400 |         self,
401 |         result: UpdateResult,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:272:17: SyntaxError: Expected ',', found name
    |
270 |                 "Starting worker cleanup",
271 |                 worker_count=len(request.worker_configurations)
272 |                 strategy=request.strategy.value,
    |                 ^
273 |                 cleanup_all=request.cleanup_all_if_empty,
274 |             )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:282:101: E501 Line too long (105 > 100)
    |
281 |             # Phase 2: Identify workers to clean up
282 |             if not self._update_progress(request.progress_callback, CleanupPhase.IDENTIFYING_WORKERS, 5):
    |                                                                                                     ^^^^^ E501
283 |                 response.result = CleanupResult.CANCELLED
284 |                 return response
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:291:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
289 |             if not workers_to_cleanup:
290 |                 response.result = CleanupResult.SUCCESS
291 | response.total_cleanup_time_ms = (
    | ^
292 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
293 |                 self._logger.log_info("No workers found to cleanup")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:293:1: SyntaxError: Unexpected indentation
    |
291 | response.total_cleanup_time_ms = (
292 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
293 |                 self._logger.log_info("No workers found to cleanup")
    | ^
294 |                 return response
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:297:1: SyntaxError: unindent does not match any outer indentation level
    |
296 |             # Phase 3-10: Clean up workers
297 |             cleanup_result = self._cleanup_workers_by_strategy(
    | ^
298 |                 workers_to_cleanup, request.strategy, request.progress_callback,
299 |             )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:301:1: SyntaxError: Unexpected indentation
    |
299 |             )
300 |
301 |             response.worker_statuses = cleanup_result.worker_statuses
    | ^
302 |             response.successful_cleanups
303 |  = (
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:303:1: SyntaxError: unindent does not match any outer indentation level
    |
301 |             response.worker_statuses = cleanup_result.worker_statuses
302 |             response.successful_cleanups
303 |  = (
    | ^
304 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result == CleanupResult.SUCCESS])
305 |             response.failed_cleanups
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:303:2: SyntaxError: Expected a statement
    |
301 |             response.worker_statuses = cleanup_result.worker_statuses
302 |             response.successful_cleanups
303 |  = (
    |  ^
304 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result == CleanupResult.SUCCESS])
305 |             response.failed_cleanups
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:304:101: E501 Line too long (112 > 100)
    |
302 |             response.successful_cleanups
303 |  = (
304 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result == CleanupResult.SUCCESS])
    |                                                                                                     ^^^^^^^^^^^^ E501
305 |             response.failed_cleanups
306 |  = (
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:305:1: SyntaxError: Unexpected indentation
    |
303 |  = (
304 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result == CleanupResult.SUCCESS])
305 |             response.failed_cleanups
    | ^
306 |  = (
307 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result != CleanupResult.SUCCESS])
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:306:1: SyntaxError: unindent does not match any outer indentation level
    |
304 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result == CleanupResult.SUCCESS])
305 |             response.failed_cleanups
306 |  = (
    | ^
307 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result != CleanupResult.SUCCESS])
308 |             response.warnings.extend(cleanup_result.warnings)
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:306:2: SyntaxError: Expected a statement
    |
304 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result == CleanupResult.SUCCESS])
305 |             response.failed_cleanups
306 |  = (
    |  ^
307 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result != CleanupResult.SUCCESS])
308 |             response.warnings.extend(cleanup_result.warnings)
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:307:101: E501 Line too long (112 > 100)
    |
305 |             response.failed_cleanups
306 |  = (
307 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result != CleanupResult.SUCCESS])
    |                                                                                                     ^^^^^^^^^^^^ E501
308 |             response.warnings.extend(cleanup_result.warnings)
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:308:1: SyntaxError: Unexpected indentation
    |
306 |  = (
307 |     [status.worker_type for status in cleanup_result.worker_statuses if status.result != CleanupResult.SUCCESS])
308 |             response.warnings.extend(cleanup_result.warnings)
    | ^
309 |
310 |             # Phase 11: Verify cleanup
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:311:101: E501 Line too long (104 > 100)
    |
310 |             # Phase 11: Verify cleanup
311 |             if not self._update_progress(request.progress_callback, CleanupPhase.VERIFYING_CLEANUP, 95):
    |                                                                                                     ^^^^ E501
312 |                 response.result = CleanupResult.CANCELLED
313 |                 return response
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:318:101: E501 Line too long (101 > 100)
    |
316 |             verification_result = self._verify_cleanup_completion(response.worker_statuses)
317 |             if not verification_result.is_success:
318 |                 response.warnings.append(f"Cleanup verification failed: {verification_result.error_m\
    |                                                                                                     ^ E501
319 |     essage}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:319:5: SyntaxError: f-string: expecting '}'
    |
317 |             if not verification_result.is_success:
318 |                 response.warnings.append(f"Cleanup verification failed: {verification_result.error_m\
319 |     essage}")
    |     ^
320 |
321 |             # Determine overall result
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:319:11: SyntaxError: f-string: single '}' is not allowed
    |
317 |             if not verification_result.is_success:
318 |                 response.warnings.append(f"Cleanup verification failed: {verification_result.error_m\
319 |     essage}")
    |           ^
320 |
321 |             # Determine overall result
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:319:12: SyntaxError: Expected ',', found FStringEnd
    |
317 |             if not verification_result.is_success:
318 |                 response.warnings.append(f"Cleanup verification failed: {verification_result.error_m\
319 |     essage}")
    |            ^
320 |
321 |             # Determine overall result
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:336:1: SyntaxError: Expected a statement
    |
335 |             # Calculate final metrics
336 | response.total_cleanup_time_ms = (
    | ^
337 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
338 |             final_memory = self._get_current_memory_usage()
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:338:1: SyntaxError: Unexpected indentation
    |
336 | response.total_cleanup_time_ms = (
337 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
338 |             final_memory = self._get_current_memory_usage()
    | ^
339 |             if initial_memory is not None and final_memory is not None:
340 |                 response.memory_freed_mb = max(0, initial_memory - final_memory)
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:345:17: SyntaxError: Expected ',', found string
    |
343 |             response.metadata = {
344 |                 "cleanup_timestamp": start_time.isoformat()
345 |                 "strategy_used": request.strategy.value,
    |                 ^
346 |                 "total_workers_cleaned": len(response.worker_statuses)
347 |                 "successful_count": len(response.successful_cleanups)
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:347:17: SyntaxError: Expected ',', found string
    |
345 |                 "strategy_used": request.strategy.value,
346 |                 "total_workers_cleaned": len(response.worker_statuses)
347 |                 "successful_count": len(response.successful_cleanups)
    |                 ^
348 |                 "failed_count": len(response.failed_cleanups)
349 |                 "initial_memory_mb": initial_memory,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:348:17: SyntaxError: Expected ',', found string
    |
346 |                 "total_workers_cleaned": len(response.worker_statuses)
347 |                 "successful_count": len(response.successful_cleanups)
348 |                 "failed_count": len(response.failed_cleanups)
    |                 ^
349 |                 "initial_memory_mb": initial_memory,
350 |                 "final_memory_mb": final_memory,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:349:17: SyntaxError: Expected ',', found string
    |
347 |                 "successful_count": len(response.successful_cleanups)
348 |                 "failed_count": len(response.failed_cleanups)
349 |                 "initial_memory_mb": initial_memory,
    |                 ^
350 |                 "final_memory_mb": final_memory,
351 |                 "memory_freed_mb": response.memory_freed_mb,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:364:1: SyntaxError: unindent does not match any outer indentation level
    |
362 |             )
363 |
364 |         except Exception as e:
    | ^
365 |             self._logger.log_error(f"Unexpected error during worker cleanup: {e!s}")
366 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:364:9: SyntaxError: Expected a statement
    |
362 |             )
363 |
364 |         except Exception as e:
    |         ^
365 |             self._logger.log_error(f"Unexpected error during worker cleanup: {e!s}")
366 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:364:26: SyntaxError: Expected a statement
    |
362 |             )
363 |
364 |         except Exception as e:
    |                          ^
365 |             self._logger.log_error(f"Unexpected error during worker cleanup: {e!s}")
366 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:364:31: SyntaxError: Expected an expression
    |
362 |             )
363 |
364 |         except Exception as e:
    |                               ^
365 |             self._logger.log_error(f"Unexpected error during worker cleanup: {e!s}")
366 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:365:1: SyntaxError: Unexpected indentation
    |
364 |         except Exception as e:
365 |             self._logger.log_error(f"Unexpected error during worker cleanup: {e!s}")
    | ^
366 |             response.error_message = f"Unexpected error: {e!s}"
367 |             response.result = CleanupResult.FAILED
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:369:1: SyntaxError: unindent does not match any outer indentation level
    |
367 |             response.result = CleanupResult.FAILED
368 |
369 |         return response
    | ^
370 |
371 |     def _identify_workers_to_cleanup(
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:371:1: SyntaxError: Unexpected indentation
    |
369 |         return response
370 |
371 |     def _identify_workers_to_cleanup(
    | ^
372 |         self,
373 |         configurations: list[WorkerCleanupConfiguration],
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:393:94: SyntaxError: Expected an expression or a ')'
    |
391 |                     if config.cleanup_enabled:
392 |                         if config.worker_type == WorkerType.ALL:
393 |                             active_workers_result = self._worker_registry.get_active_workers(,
    |                                                                                              ^
394 |     )
395 |                             if active_workers_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:398:30: SyntaxError: Expected an indented block after `else` clause
    |
396 |                                 for worker in active_workers_result.value:
397 |                                     workers_to_cleanup.append((worker, config))
398 |                         else:
    |                              ^
399 | worker_result = (
400 |     self._worker_registry.get_worker_by_type(config.worker_type,)
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:399:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
397 |                                     workers_to_cleanup.append((worker, config))
398 |                         else:
399 | worker_result = (
    | ^
400 |     self._worker_registry.get_worker_by_type(config.worker_type,)
401 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:400:64: COM819 Trailing comma prohibited
    |
398 |                         else:
399 | worker_result = (
400 |     self._worker_registry.get_worker_by_type(config.worker_type,)
    |                                                                ^ COM819
401 |     )
402 |                             if worker_result.is_success and worker_result.value is not None:
    |
    = help: Remove trailing comma

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:402:1: SyntaxError: Unexpected indentation
    |
400 |     self._worker_registry.get_worker_by_type(config.worker_type,)
401 |     )
402 |                             if worker_result.is_success and worker_result.value is not None:
    | ^
403 |                                 workers_to_cleanup.append((worker_result.value, config))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:405:9: SyntaxError: unindent does not match any outer indentation level
    |
403 |                                 workers_to_cleanup.append((worker_result.value, config))
404 |
405 |         except Exception as e:
    |         ^
406 |             self._logger.log_error(f"Error identifying workers to cleanup: {e!s}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:405:26: SyntaxError: Expected a statement
    |
403 |                                 workers_to_cleanup.append((worker_result.value, config))
404 |
405 |         except Exception as e:
    |                          ^
406 |             self._logger.log_error(f"Error identifying workers to cleanup: {e!s}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:405:31: SyntaxError: Expected an expression
    |
403 |                                 workers_to_cleanup.append((worker_result.value, config))
404 |
405 |         except Exception as e:
    |                               ^
406 |             self._logger.log_error(f"Error identifying workers to cleanup: {e!s}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:406:1: SyntaxError: Unexpected indentation
    |
405 |         except Exception as e:
406 |             self._logger.log_error(f"Error identifying workers to cleanup: {e!s}")
    | ^
407 |
408 |         return workers_to_cleanup
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:408:1: SyntaxError: unindent does not match any outer indentation level
    |
406 |             self._logger.log_error(f"Error identifying workers to cleanup: {e!s}")
407 |
408 |         return workers_to_cleanup
    | ^
409 |
410 |     def _cleanup_workers_by_strategy(
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:410:1: SyntaxError: Unexpected indentation
    |
408 |         return workers_to_cleanup
409 |
410 |     def _cleanup_workers_by_strategy(
    | ^
411 |         self,
412 |         workers_to_cleanup: list[tuple[Any, WorkerCleanupConfiguration]],
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:421:1: SyntaxError: Expected a statement
    |
420 |         base_progress = 10  # Starting after identification
421 | progress_per_worker = (
    | ^
422 |     80 // max(1, len(workers_to_cleanup))  # 80% for cleanup, ending at 90%)
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:424:65: SyntaxError: Expected ')', found ':'
    |
422 |     80 // max(1, len(workers_to_cleanup))  # 80% for cleanup, ending at 90%)
423 |
424 |         for i, (worker, config) in enumerate(workers_to_cleanup):
    |                                                                 ^
425 |             current_progress = base_progress + (i * progress_per_worker)
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:428:101: E501 Line too long (109 > 100)
    |
427 |             # Update progress for this worker
428 |             if not self._update_progress(progress_callback, CleanupPhase.STOPPING_WORKERS, current_progress):
    |                                                                                                     ^^^^^^^^^ E501
429 |                 # If cancelled, mark remaining workers as cancelled
430 |                 for j in range(i, len(workers_to_cleanup)):
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:428:109: SyntaxError: Expected 'else', found ':'
    |
427 |             # Update progress for this worker
428 |             if not self._update_progress(progress_callback, CleanupPhase.STOPPING_WORKERS, current_progress):
    |                                                                                                             ^
429 |                 # If cancelled, mark remaining workers as cancelled
430 |                 for j in range(i, len(workers_to_cleanup)):
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:432:21: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
430 |                 for j in range(i, len(workers_to_cleanup)):
431 |                     remaining_worker, remaining_config = workers_to_cleanup[j]
432 |                     worker_statuses.append(WorkerCleanupStatus(
    |                     ^
433 |                         worker_type=remaining_config.worker_type,
434 |                         result=CleanupResult.CANCELLED,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:436:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
434 |                         result=CleanupResult.CANCELLED,
435 |                     ))
436 |                 break
    |                 ^
437 |
438 |             # Clean up this worker
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:439:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
438 |             # Clean up this worker
439 |             status = self._cleanup_single_worker(worker, config, strategy)
    |             ^
440 |             worker_statuses.append(status)
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:440:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
438 |             # Clean up this worker
439 |             status = self._cleanup_single_worker(worker, config, strategy)
440 |             worker_statuses.append(status)
    |             ^
441 |
442 |             if status.result != CleanupResult.SUCCESS:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:440:13: SyntaxError: Invalid annotated assignment target
    |
438 |             # Clean up this worker
439 |             status = self._cleanup_single_worker(worker, config, strategy)
440 |             worker_statuses.append(status)
    |             ^
441 |
442 |             if status.result != CleanupResult.SUCCESS:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:442:54: SyntaxError: Expected 'else', found ':'
    |
440 |             worker_statuses.append(status)
441 |
442 |             if status.result != CleanupResult.SUCCESS:
    |                                                      ^
443 |                 warnings.append(f"Worker {config.worker_type.value} cleanup failed: {status.error_me\
444 |     ssage}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:443:101: E501 Line too long (101 > 100)
    |
442 |             if status.result != CleanupResult.SUCCESS:
443 |                 warnings.append(f"Worker {config.worker_type.value} cleanup failed: {status.error_me\
    |                                                                                                     ^ E501
444 |     ssage}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:444:5: SyntaxError: f-string: expecting '}'
    |
442 |             if status.result != CleanupResult.SUCCESS:
443 |                 warnings.append(f"Worker {config.worker_type.value} cleanup failed: {status.error_me\
444 |     ssage}")
    |     ^
445 |
446 |         return type("CleanupResult", (), {
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:444:10: SyntaxError: f-string: single '}' is not allowed
    |
442 |             if status.result != CleanupResult.SUCCESS:
443 |                 warnings.append(f"Worker {config.worker_type.value} cleanup failed: {status.error_me\
444 |     ssage}")
    |          ^
445 |
446 |         return type("CleanupResult", (), {
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:444:11: SyntaxError: Expected ',', found FStringEnd
    |
442 |             if status.result != CleanupResult.SUCCESS:
443 |                 warnings.append(f"Worker {config.worker_type.value} cleanup failed: {status.error_me\
444 |     ssage}")
    |           ^
445 |
446 |         return type("CleanupResult", (), {
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:446:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
444 |     ssage}")
445 |
446 |         return type("CleanupResult", (), {
    |         ^
447 |             "worker_statuses": worker_statuses,
448 |             "warnings": warnings,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:451:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
449 |         })()
450 |
451 |     def _cleanup_single_worker(
    |     ^
452 |         self,
453 |         worker: Any,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:458:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
456 |     ) -> WorkerCleanupStatus:
457 |         """Clean up a single worker"""
458 |         start_time = datetime.utcnow()
    |         ^
459 |         status = WorkerCleanupStatus(
460 |             worker_type=config.worker_type,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:459:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
457 |         """Clean up a single worker"""
458 |         start_time = datetime.utcnow()
459 |         status = WorkerCleanupStatus(
    |         ^
460 |             worker_type=config.worker_type,
461 |             result=CleanupResult.FAILED,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:464:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
462 |         )
463 |
464 |         try:
    |         ^
465 |             self._logger.log_debug(f"Cleaning up {config.worker_type.value} worker")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:465:13: SyntaxError: Invalid annotated assignment target
    |
464 |         try:
465 |             self._logger.log_debug(f"Cleaning up {config.worker_type.value} worker")
    |             ^
466 |
467 |             # Step 1: Disconnect signals
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:468:41: SyntaxError: Expected 'else', found ':'
    |
467 |             # Step 1: Disconnect signals
468 |             if config.disconnect_signals:
    |                                         ^
469 |                 signal_result = self._signal_management.disconnect_worker_signals(worker)
470 |                 if signal_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:470:44: SyntaxError: Expected 'else', found ':'
    |
468 |             if config.disconnect_signals:
469 |                 signal_result = self._signal_management.disconnect_worker_signals(worker)
470 |                 if signal_result.is_success:
    |                                            ^
471 |                     status.signals_disconnected = True
472 |                 else:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:472:17: SyntaxError: Expected a statement
    |
470 |                 if signal_result.is_success:
471 |                     status.signals_disconnected = True
472 |                 else:
    |                 ^
473 |                     self._logger.log_warning(f"Failed to disconnect signals: {signal_result.error_message}",
474 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:472:21: SyntaxError: Expected a statement
    |
470 |                 if signal_result.is_success:
471 |                     status.signals_disconnected = True
472 |                 else:
    |                     ^
473 |                     self._logger.log_warning(f"Failed to disconnect signals: {signal_result.error_message}",
474 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:473:21: SyntaxError: Invalid annotated assignment target
    |
471 |                     status.signals_disconnected = True
472 |                 else:
473 |                     self._logger.log_warning(f"Failed to disconnect signals: {signal_result.error_message}",
    |                     ^
474 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:473:101: E501 Line too long (108 > 100)
    |
471 |                     status.signals_disconnected = True
472 |                 else:
473 |                     self._logger.log_warning(f"Failed to disconnect signals: {signal_result.error_message}",
    |                                                                                                     ^^^^^^^^ E501
474 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:477:52: SyntaxError: Expected 'else', found ':'
    |
476 |             # Step 2: Stop worker
477 |             if strategy == CleanupStrategy.GRACEFUL:
    |                                                    ^
478 |                 stop_result = self._worker_control.stop_worker(worker, config.graceful_timeout_ms)
479 |             elif strategy == CleanupStrategy.FORCE:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:479:13: SyntaxError: Expected a statement
    |
477 |             if strategy == CleanupStrategy.GRACEFUL:
478 |                 stop_result = self._worker_control.stop_worker(worker, config.graceful_timeout_ms)
479 |             elif strategy == CleanupStrategy.FORCE:
    |             ^
480 | stop_result = (
481 |     self._worker_control.force_stop_worker(worker, config.force_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:479:18: SyntaxError: Invalid annotated assignment target
    |
477 |             if strategy == CleanupStrategy.GRACEFUL:
478 |                 stop_result = self._worker_control.stop_worker(worker, config.graceful_timeout_ms)
479 |             elif strategy == CleanupStrategy.FORCE:
    |                  ^
480 | stop_result = (
481 |     self._worker_control.force_stop_worker(worker, config.force_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:482:13: SyntaxError: Expected a statement
    |
480 | stop_result = (
481 |     self._worker_control.force_stop_worker(worker, config.force_timeout_ms))
482 |             else:  # TIMEOUT_THEN_FORCE
    |             ^
483 |                 stop_result = self._worker_control.stop_worker(worker, config.graceful_timeout_ms)
484 |                 if not stop_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:482:17: SyntaxError: Expected a statement
    |
480 | stop_result = (
481 |     self._worker_control.force_stop_worker(worker, config.force_timeout_ms))
482 |             else:  # TIMEOUT_THEN_FORCE
    |                 ^
483 |                 stop_result = self._worker_control.stop_worker(worker, config.graceful_timeout_ms)
484 |                 if not stop_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:484:46: SyntaxError: Expected 'else', found ':'
    |
482 |             else:  # TIMEOUT_THEN_FORCE
483 |                 stop_result = self._worker_control.stop_worker(worker, config.graceful_timeout_ms)
484 |                 if not stop_result.is_success:
    |                                              ^
485 | stop_result = (
486 |     self._worker_control.force_stop_worker(worker, config.force_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:487:21: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
485 | stop_result = (
486 |     self._worker_control.force_stop_worker(worker, config.force_timeout_ms))
487 |                     status.force_cleanup_used = True
    |                     ^
488 |
489 |             if stop_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:489:38: SyntaxError: Expected 'else', found ':'
    |
487 |                     status.force_cleanup_used = True
488 |
489 |             if stop_result.is_success:
    |                                      ^
490 |                 status.worker_stopped = True
491 |             else:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:491:13: SyntaxError: Expected a statement
    |
489 |             if stop_result.is_success:
490 |                 status.worker_stopped = True
491 |             else:
    |             ^
492 |                 self._logger.log_warning(f"Failed to stop worker: {stop_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:491:17: SyntaxError: Expected a statement
    |
489 |             if stop_result.is_success:
490 |                 status.worker_stopped = True
491 |             else:
    |                 ^
492 |                 self._logger.log_warning(f"Failed to stop worker: {stop_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:495:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
494 |             # Step 3: Stop thread
495 |             thread_result = self._worker_registry.get_worker_thread(worker)
    |             ^
496 |             if thread_result.is_success and thread_result.value is not None:
497 |                 thread = thread_result.value
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:496:76: SyntaxError: Expected 'else', found ':'
    |
494 |             # Step 3: Stop thread
495 |             thread_result = self._worker_registry.get_worker_thread(worker)
496 |             if thread_result.is_success and thread_result.value is not None:
    |                                                                            ^
497 |                 thread = thread_result.value
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:499:56: SyntaxError: Expected 'else', found ':'
    |
497 |                 thread = thread_result.value
498 |
499 |                 if strategy == CleanupStrategy.GRACEFUL:
    |                                                        ^
500 | thread_stop_result = (
501 |     self._thread_management.stop_thread(thread, config.graceful_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:502:17: SyntaxError: Expected a statement
    |
500 | thread_stop_result = (
501 |     self._thread_management.stop_thread(thread, config.graceful_timeout_ms))
502 |                 elif strategy == CleanupStrategy.FORCE:
    |                 ^
503 | thread_stop_result = (
504 |     self._thread_management.force_stop_thread(thread, config.force_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:502:22: SyntaxError: Invalid annotated assignment target
    |
500 | thread_stop_result = (
501 |     self._thread_management.stop_thread(thread, config.graceful_timeout_ms))
502 |                 elif strategy == CleanupStrategy.FORCE:
    |                      ^
503 | thread_stop_result = (
504 |     self._thread_management.force_stop_thread(thread, config.force_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:505:17: SyntaxError: Expected a statement
    |
503 | thread_stop_result = (
504 |     self._thread_management.force_stop_thread(thread, config.force_timeout_ms))
505 |                 else:  # TIMEOUT_THEN_FORCE
    |                 ^
506 | thread_stop_result = (
507 |     self._thread_management.stop_thread(thread, config.graceful_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:505:21: SyntaxError: Expected a statement
    |
503 | thread_stop_result = (
504 |     self._thread_management.force_stop_thread(thread, config.force_timeout_ms))
505 |                 else:  # TIMEOUT_THEN_FORCE
    |                     ^
506 | thread_stop_result = (
507 |     self._thread_management.stop_thread(thread, config.graceful_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:508:57: SyntaxError: Expected 'else', found ':'
    |
506 | thread_stop_result = (
507 |     self._thread_management.stop_thread(thread, config.graceful_timeout_ms))
508 |                     if not thread_stop_result.is_success:
    |                                                         ^
509 | thread_stop_result = (
510 |     self._thread_management.force_stop_thread(thread, config.force_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:511:25: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
509 | thread_stop_result = (
510 |     self._thread_management.force_stop_thread(thread, config.force_timeout_ms))
511 |                         status.force_cleanup_used = True
    |                         ^
512 |
513 |                 if thread_stop_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:513:49: SyntaxError: Expected 'else', found ':'
    |
511 |                         status.force_cleanup_used = True
512 |
513 |                 if thread_stop_result.is_success:
    |                                                 ^
514 |                     status.thread_stopped = True
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:517:50: SyntaxError: Expected 'else', found ':'
    |
516 |                     # Wait for thread completion if requested
517 |                     if config.wait_for_completion:
    |                                                  ^
518 | wait_result = (
519 |     self._thread_management.wait_for_thread(thread, config.graceful_timeout_ms))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:520:54: SyntaxError: Expected 'else', found ':'
    |
518 | wait_result = (
519 |     self._thread_management.wait_for_thread(thread, config.graceful_timeout_ms))
520 |                         if not wait_result.is_success:
    |                                                      ^
521 |                             self._logger.log_warning(f"Thread did not complete within timeout: {wait\
522 |     _result.error_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:521:101: E501 Line too long (101 > 100)
    |
519 |     self._thread_management.wait_for_thread(thread, config.graceful_timeout_ms))
520 |                         if not wait_result.is_success:
521 |                             self._logger.log_warning(f"Thread did not complete within timeout: {wait\
    |                                                                                                     ^ E501
522 |     _result.error_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:522:5: SyntaxError: f-string: expecting '}'
    |
520 |                         if not wait_result.is_success:
521 |                             self._logger.log_warning(f"Thread did not complete within timeout: {wait\
522 |     _result.error_message}")
    |     ^
523 |
524 |                     # Clean up thread resources
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:522:12: SyntaxError: Expected ',', found FStringMiddle
    |
520 |                         if not wait_result.is_success:
521 |                             self._logger.log_warning(f"Thread did not complete within timeout: {wait\
522 |     _result.error_message}")
    |            ^
523 |
524 |                     # Clean up thread resources
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:522:26: SyntaxError: f-string: single '}' is not allowed
    |
520 |                         if not wait_result.is_success:
521 |                             self._logger.log_warning(f"Thread did not complete within timeout: {wait\
522 |     _result.error_message}")
    |                          ^
523 |
524 |                     # Clean up thread resources
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:522:27: SyntaxError: Expected ',', found FStringEnd
    |
520 |                         if not wait_result.is_success:
521 |                             self._logger.log_warning(f"Thread did not complete within timeout: {wait\
522 |     _result.error_message}")
    |                           ^
523 |
524 |                     # Clean up thread resources
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:525:21: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
524 |                     # Clean up thread resources
525 |                     cleanup_result = self._thread_management.cleanup_thread(thread)
    |                     ^
526 |                     if not cleanup_result.is_success:
527 |                         self._logger.log_warning(f"Thread cleanup failed: {cleanup_result.error_mess\
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:526:53: SyntaxError: Expected 'else', found ':'
    |
524 |                     # Clean up thread resources
525 |                     cleanup_result = self._thread_management.cleanup_thread(thread)
526 |                     if not cleanup_result.is_success:
    |                                                     ^
527 |                         self._logger.log_warning(f"Thread cleanup failed: {cleanup_result.error_mess\
528 |     age}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:527:101: E501 Line too long (101 > 100)
    |
525 |                     cleanup_result = self._thread_management.cleanup_thread(thread)
526 |                     if not cleanup_result.is_success:
527 |                         self._logger.log_warning(f"Thread cleanup failed: {cleanup_result.error_mess\
    |                                                                                                     ^ E501
528 |     age}")
529 |                 else:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:528:5: SyntaxError: f-string: expecting '}'
    |
526 |                     if not cleanup_result.is_success:
527 |                         self._logger.log_warning(f"Thread cleanup failed: {cleanup_result.error_mess\
528 |     age}")
    |     ^
529 |                 else:
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:528:8: SyntaxError: f-string: single '}' is not allowed
    |
526 |                     if not cleanup_result.is_success:
527 |                         self._logger.log_warning(f"Thread cleanup failed: {cleanup_result.error_mess\
528 |     age}")
    |        ^
529 |                 else:
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:528:9: SyntaxError: Expected ',', found FStringEnd
    |
526 |                     if not cleanup_result.is_success:
527 |                         self._logger.log_warning(f"Thread cleanup failed: {cleanup_result.error_mess\
528 |     age}")
    |         ^
529 |                 else:
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:529:17: SyntaxError: Expected a statement
    |
527 |                         self._logger.log_warning(f"Thread cleanup failed: {cleanup_result.error_mess\
528 |     age}")
529 |                 else:
    |                 ^
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
531 |     age}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:529:21: SyntaxError: Expected a statement
    |
527 |                         self._logger.log_warning(f"Thread cleanup failed: {cleanup_result.error_mess\
528 |     age}")
529 |                 else:
    |                     ^
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
531 |     age}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:530:21: SyntaxError: Invalid annotated assignment target
    |
528 |     age}")
529 |                 else:
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
    |                     ^
531 |     age}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:530:101: E501 Line too long (101 > 100)
    |
528 |     age}")
529 |                 else:
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
    |                                                                                                     ^ E501
531 |     age}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:531:5: SyntaxError: f-string: expecting '}'
    |
529 |                 else:
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
531 |     age}")
    |     ^
532 |
533 |             # Step 4: Clean up resources
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:531:8: SyntaxError: f-string: single '}' is not allowed
    |
529 |                 else:
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
531 |     age}")
    |        ^
532 |
533 |             # Step 4: Clean up resources
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:531:9: SyntaxError: Expected ',', found FStringEnd
    |
529 |                 else:
530 |                     self._logger.log_warning(f"Failed to stop thread: {thread_stop_result.error_mess\
531 |     age}")
    |         ^
532 |
533 |             # Step 4: Clean up resources
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:534:40: SyntaxError: Expected 'else', found ':'
    |
533 |             # Step 4: Clean up resources
534 |             if config.cleanup_resources:
    |                                        ^
535 | resource_result = (
536 |     self._resource_management.cleanup_worker_resources(worker, config.worker_type))
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:537:46: SyntaxError: Expected 'else', found ':'
    |
535 | resource_result = (
536 |     self._resource_management.cleanup_worker_resources(worker, config.worker_type))
537 |                 if resource_result.is_success:
    |                                              ^
538 |                     status.resources_cleaned = True
539 |                 else:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:539:17: SyntaxError: Expected a statement
    |
537 |                 if resource_result.is_success:
538 |                     status.resources_cleaned = True
539 |                 else:
    |                 ^
540 |                     self._logger.log_warning(f"Resource cleanup failed: {resource_result.error_messa\
541 |     ge}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:539:21: SyntaxError: Expected a statement
    |
537 |                 if resource_result.is_success:
538 |                     status.resources_cleaned = True
539 |                 else:
    |                     ^
540 |                     self._logger.log_warning(f"Resource cleanup failed: {resource_result.error_messa\
541 |     ge}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:540:101: E501 Line too long (101 > 100)
    |
538 |                     status.resources_cleaned = True
539 |                 else:
540 |                     self._logger.log_warning(f"Resource cleanup failed: {resource_result.error_messa\
    |                                                                                                     ^ E501
541 |     ge}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:541:5: SyntaxError: f-string: expecting '}'
    |
539 |                 else:
540 |                     self._logger.log_warning(f"Resource cleanup failed: {resource_result.error_messa\
541 |     ge}")
    |     ^
542 |
543 |                 # Clean up temporary files
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:541:7: SyntaxError: f-string: single '}' is not allowed
    |
539 |                 else:
540 |                     self._logger.log_warning(f"Resource cleanup failed: {resource_result.error_messa\
541 |     ge}")
    |       ^
542 |
543 |                 # Clean up temporary files
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:541:8: SyntaxError: Expected ',', found FStringEnd
    |
539 |                 else:
540 |                     self._logger.log_warning(f"Resource cleanup failed: {resource_result.error_messa\
541 |     ge}")
    |        ^
542 |
543 |                 # Clean up temporary files
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:544:1: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
543 |                 # Clean up temporary files
544 | temp_cleanup_result = (
    | ^
545 |     self._resource_management.cleanup_temporary_files(config.worker_type))
546 |                 if not temp_cleanup_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:546:54: SyntaxError: Expected 'else', found ':'
    |
544 | temp_cleanup_result = (
545 |     self._resource_management.cleanup_temporary_files(config.worker_type))
546 |                 if not temp_cleanup_result.is_success:
    |                                                      ^
547 |                     self._logger.log_warning(f"Temporary file cleanup failed: {temp_cleanup_result.e\
548 |     rror_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:547:101: E501 Line too long (101 > 100)
    |
545 |     self._resource_management.cleanup_temporary_files(config.worker_type))
546 |                 if not temp_cleanup_result.is_success:
547 |                     self._logger.log_warning(f"Temporary file cleanup failed: {temp_cleanup_result.e\
    |                                                                                                     ^ E501
548 |     rror_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:548:5: SyntaxError: f-string: expecting '}'
    |
546 |                 if not temp_cleanup_result.is_success:
547 |                     self._logger.log_warning(f"Temporary file cleanup failed: {temp_cleanup_result.e\
548 |     rror_message}")
    |     ^
549 |
550 |                 # Release GPU memory if applicable
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:548:17: SyntaxError: f-string: single '}' is not allowed
    |
546 |                 if not temp_cleanup_result.is_success:
547 |                     self._logger.log_warning(f"Temporary file cleanup failed: {temp_cleanup_result.e\
548 |     rror_message}")
    |                 ^
549 |
550 |                 # Release GPU memory if applicable
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:548:18: SyntaxError: Expected ',', found FStringEnd
    |
546 |                 if not temp_cleanup_result.is_success:
547 |                     self._logger.log_warning(f"Temporary file cleanup failed: {temp_cleanup_result.e\
548 |     rror_message}")
    |                  ^
549 |
550 |                 # Release GPU memory if applicable
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:551:1: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
550 |                 # Release GPU memory if applicable
551 | gpu_cleanup_result = (
    | ^
552 |     self._resource_management.release_gpu_memory(config.worker_type))
553 |                 if not gpu_cleanup_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:553:53: SyntaxError: Expected 'else', found ':'
    |
551 | gpu_cleanup_result = (
552 |     self._resource_management.release_gpu_memory(config.worker_type))
553 |                 if not gpu_cleanup_result.is_success:
    |                                                     ^
554 |                     self._logger.log_debug(f"GPU memory cleanup not applicable or
555 |     failed: {gpu_cleanup_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:554:46: SyntaxError: f-string: unterminated string
    |
552 |     self._resource_management.release_gpu_memory(config.worker_type))
553 |                 if not gpu_cleanup_result.is_success:
554 |                     self._logger.log_debug(f"GPU memory cleanup not applicable or
    |                                              ^
555 |     failed: {gpu_cleanup_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:554:82: SyntaxError: Expected FStringEnd, found NonLogicalNewline
    |
552 |     self._resource_management.release_gpu_memory(config.worker_type))
553 |                 if not gpu_cleanup_result.is_success:
554 |                     self._logger.log_debug(f"GPU memory cleanup not applicable or
    |                                                                                  ^
555 |     failed: {gpu_cleanup_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:555:11: SyntaxError: Expected ',', found ':'
    |
553 |                 if not gpu_cleanup_result.is_success:
554 |                     self._logger.log_debug(f"GPU memory cleanup not applicable or
555 |     failed: {gpu_cleanup_result.error_message}")
    |           ^
556 |
557 |             # Step 5: Remove from registry
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:555:47: SyntaxError: missing closing quote in string literal
    |
553 |                 if not gpu_cleanup_result.is_success:
554 |                     self._logger.log_debug(f"GPU memory cleanup not applicable or
555 |     failed: {gpu_cleanup_result.error_message}")
    |                                               ^
556 |
557 |             # Step 5: Remove from registry
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:559:46: SyntaxError: Expected 'else', found ':'
    |
557 |             # Step 5: Remove from registry
558 |             registry_result = self._worker_registry.remove_worker(worker, config.worker_type)
559 |             if not registry_result.is_success:
    |                                              ^
560 |                 self._logger.log_warning(f"Failed to remove worker from registry: {registry_result.e\
561 |     rror_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:560:17: SyntaxError: Positional argument cannot follow keyword argument
    |
558 |             registry_result = self._worker_registry.remove_worker(worker, config.worker_type)
559 |             if not registry_result.is_success:
560 |                 self._logger.log_warning(f"Failed to remove worker from registry: {registry_result.e\
    |                 ^
561 |     rror_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:560:101: E501 Line too long (101 > 100)
    |
558 |             registry_result = self._worker_registry.remove_worker(worker, config.worker_type)
559 |             if not registry_result.is_success:
560 |                 self._logger.log_warning(f"Failed to remove worker from registry: {registry_result.e\
    |                                                                                                     ^ E501
561 |     rror_message}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:561:5: SyntaxError: f-string: expecting '}'
    |
559 |             if not registry_result.is_success:
560 |                 self._logger.log_warning(f"Failed to remove worker from registry: {registry_result.e\
561 |     rror_message}")
    |     ^
562 |
563 |             # Step 6: Force garbage collection if requested
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:561:17: SyntaxError: f-string: single '}' is not allowed
    |
559 |             if not registry_result.is_success:
560 |                 self._logger.log_warning(f"Failed to remove worker from registry: {registry_result.e\
561 |     rror_message}")
    |                 ^
562 |
563 |             # Step 6: Force garbage collection if requested
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:561:18: SyntaxError: Expected ',', found FStringEnd
    |
559 |             if not registry_result.is_success:
560 |                 self._logger.log_warning(f"Failed to remove worker from registry: {registry_result.e\
561 |     rror_message}")
    |                  ^
562 |
563 |             # Step 6: Force garbage collection if requested
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:564:47: SyntaxError: Expected 'else', found ':'
    |
563 |             # Step 6: Force garbage collection if requested
564 |             if config.force_garbage_collection:
    |                                               ^
565 |                 gc_result = self._resource_management.force_garbage_collection()
566 |                 if gc_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:564:47: SyntaxError: Expected ',', found ':'
    |
563 |             # Step 6: Force garbage collection if requested
564 |             if config.force_garbage_collection:
    |                                               ^
565 |                 gc_result = self._resource_management.force_garbage_collection()
566 |                 if gc_result.is_success:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:566:40: SyntaxError: Expected 'else', found ':'
    |
564 |             if config.force_garbage_collection:
565 |                 gc_result = self._resource_management.force_garbage_collection()
566 |                 if gc_result.is_success:
    |                                        ^
567 |                     status.memory_freed_mb = gc_result.value
568 |                 else:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:567:21: SyntaxError: Expected a parameter name
    |
565 |                 gc_result = self._resource_management.force_garbage_collection()
566 |                 if gc_result.is_success:
567 |                     status.memory_freed_mb = gc_result.value
    |                     ^
568 |                 else:
569 |                     self._logger.log_warning(f"Garbage collection failed: {gc_result.error_message}"\
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:568:17: SyntaxError: Expected ',', found 'else'
    |
566 |                 if gc_result.is_success:
567 |                     status.memory_freed_mb = gc_result.value
568 |                 else:
    |                 ^
569 |                     self._logger.log_warning(f"Garbage collection failed: {gc_result.error_message}"\
570 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:568:21: SyntaxError: Expected ',', found ':'
    |
566 |                 if gc_result.is_success:
567 |                     status.memory_freed_mb = gc_result.value
568 |                 else:
    |                     ^
569 |                     self._logger.log_warning(f"Garbage collection failed: {gc_result.error_message}"\
570 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:569:21: SyntaxError: Positional argument cannot follow keyword argument
    |
567 |                     status.memory_freed_mb = gc_result.value
568 |                 else:
569 |                     self._logger.log_warning(f"Garbage collection failed: {gc_result.error_message}"\
    |                     ^
570 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:569:101: E501 Line too long (101 > 100)
    |
567 |                     status.memory_freed_mb = gc_result.value
568 |                 else:
569 |                     self._logger.log_warning(f"Garbage collection failed: {gc_result.error_message}"\
    |                                                                                                     ^ E501
570 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:574:81: SyntaxError: Expected 'else', found ':'
    |
572 |             # Determine success
573 |             if status.signals_disconnected and
574 |     status.worker_stopped and status.thread_stopped and status.resources_cleaned:
    |                                                                                 ^
575 |                 status.result = CleanupResult.SUCCESS
576 |             elif status.worker_stopped or status.thread_stopped:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:574:81: SyntaxError: Expected ',', found ':'
    |
572 |             # Determine success
573 |             if status.signals_disconnected and
574 |     status.worker_stopped and status.thread_stopped and status.resources_cleaned:
    |                                                                                 ^
575 |                 status.result = CleanupResult.SUCCESS
576 |             elif status.worker_stopped or status.thread_stopped:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:575:17: SyntaxError: Expected a parameter name
    |
573 |             if status.signals_disconnected and
574 |     status.worker_stopped and status.thread_stopped and status.resources_cleaned:
575 |                 status.result = CleanupResult.SUCCESS
    |                 ^
576 |             elif status.worker_stopped or status.thread_stopped:
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:575:17: SyntaxError: Duplicate keyword argument ""
    |
573 |             if status.signals_disconnected and
574 |     status.worker_stopped and status.thread_stopped and status.resources_cleaned:
575 |                 status.result = CleanupResult.SUCCESS
    |                 ^
576 |             elif status.worker_stopped or status.thread_stopped:
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:576:13: SyntaxError: Expected ',', found 'elif'
    |
574 |     status.worker_stopped and status.thread_stopped and status.resources_cleaned:
575 |                 status.result = CleanupResult.SUCCESS
576 |             elif status.worker_stopped or status.thread_stopped:
    |             ^
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
578 |             else:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:576:18: SyntaxError: Positional argument cannot follow keyword argument
    |
574 |     status.worker_stopped and status.thread_stopped and status.resources_cleaned:
575 |                 status.result = CleanupResult.SUCCESS
576 |             elif status.worker_stopped or status.thread_stopped:
    |                  ^
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
578 |             else:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:576:64: SyntaxError: Expected ',', found ':'
    |
574 |     status.worker_stopped and status.thread_stopped and status.resources_cleaned:
575 |                 status.result = CleanupResult.SUCCESS
576 |             elif status.worker_stopped or status.thread_stopped:
    |                                                                ^
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
578 |             else:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:577:17: SyntaxError: Expected a parameter name
    |
575 |                 status.result = CleanupResult.SUCCESS
576 |             elif status.worker_stopped or status.thread_stopped:
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
    |                 ^
578 |             else:
579 |                 status.result = CleanupResult.FAILED
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:577:17: SyntaxError: Duplicate keyword argument ""
    |
575 |                 status.result = CleanupResult.SUCCESS
576 |             elif status.worker_stopped or status.thread_stopped:
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
    |                 ^
578 |             else:
579 |                 status.result = CleanupResult.FAILED
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:578:13: SyntaxError: Expected ',', found 'else'
    |
576 |             elif status.worker_stopped or status.thread_stopped:
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
578 |             else:
    |             ^
579 |                 status.result = CleanupResult.FAILED
580 |                 status.error_message = "Failed to stop worker and thread"
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:578:17: SyntaxError: Expected ',', found ':'
    |
576 |             elif status.worker_stopped or status.thread_stopped:
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
578 |             else:
    |                 ^
579 |                 status.result = CleanupResult.FAILED
580 |                 status.error_message = "Failed to stop worker and thread"
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:579:17: SyntaxError: Expected a parameter name
    |
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
578 |             else:
579 |                 status.result = CleanupResult.FAILED
    |                 ^
580 |                 status.error_message = "Failed to stop worker and thread"
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:579:17: SyntaxError: Duplicate keyword argument ""
    |
577 |                 status.result = CleanupResult.PARTIAL_SUCCESS
578 |             else:
579 |                 status.result = CleanupResult.FAILED
    |                 ^
580 |                 status.error_message = "Failed to stop worker and thread"
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:580:17: SyntaxError: Expected ',', found name
    |
578 |             else:
579 |                 status.result = CleanupResult.FAILED
580 |                 status.error_message = "Failed to stop worker and thread"
    |                 ^
581 |
582 |             status.cleanup_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:580:17: SyntaxError: Duplicate keyword argument ""
    |
578 |             else:
579 |                 status.result = CleanupResult.FAILED
580 |                 status.error_message = "Failed to stop worker and thread"
    |                 ^
581 |
582 |             status.cleanup_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:582:13: SyntaxError: Expected ',', found name
    |
580 |                 status.error_message = "Failed to stop worker and thread"
581 |
582 |             status.cleanup_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000,
    |             ^
583 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:582:13: SyntaxError: Duplicate keyword argument ""
    |
580 |                 status.error_message = "Failed to stop worker and thread"
581 |
582 |             status.cleanup_time_ms = int((datetime.utcnow() - start_time).total_seconds() * 1000,
    |             ^
583 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:585:13: SyntaxError: Expected ',', found name
    |
583 |     )
584 |
585 |             self._logger.log_debug(
    |             ^
586 |                 f"{config.worker_type.value} worker cleanup completed",
587 |                 result=status.result.value,
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:592:9: SyntaxError: Expected ',', found 'except'
    |
590 |             )
591 |
592 |         except Exception as e:
    |         ^
593 |             status.error_message = f"Unexpected error: {e!s}"
594 |             status.result = CleanupResult.FAILED
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:592:16: SyntaxError: Positional argument cannot follow keyword argument
    |
590 |             )
591 |
592 |         except Exception as e:
    |                ^
593 |             status.error_message = f"Unexpected error: {e!s}"
594 |             status.result = CleanupResult.FAILED
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:592:26: SyntaxError: Expected ',', found 'as'
    |
590 |             )
591 |
592 |         except Exception as e:
    |                          ^
593 |             status.error_message = f"Unexpected error: {e!s}"
594 |             status.result = CleanupResult.FAILED
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:592:29: SyntaxError: Positional argument cannot follow keyword argument
    |
590 |             )
591 |
592 |         except Exception as e:
    |                             ^
593 |             status.error_message = f"Unexpected error: {e!s}"
594 |             status.result = CleanupResult.FAILED
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:592:30: SyntaxError: Expected ',', found ':'
    |
590 |             )
591 |
592 |         except Exception as e:
    |                              ^
593 |             status.error_message = f"Unexpected error: {e!s}"
594 |             status.result = CleanupResult.FAILED
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:593:13: SyntaxError: Expected a parameter name
    |
592 |         except Exception as e:
593 |             status.error_message = f"Unexpected error: {e!s}"
    |             ^
594 |             status.result = CleanupResult.FAILED
595 |             self._logger.log_error(f"Error cleaning up {config.worker_type.value} worker: {e!s}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:593:13: SyntaxError: Duplicate keyword argument ""
    |
592 |         except Exception as e:
593 |             status.error_message = f"Unexpected error: {e!s}"
    |             ^
594 |             status.result = CleanupResult.FAILED
595 |             self._logger.log_error(f"Error cleaning up {config.worker_type.value} worker: {e!s}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:594:13: SyntaxError: Expected ',', found name
    |
592 |         except Exception as e:
593 |             status.error_message = f"Unexpected error: {e!s}"
594 |             status.result = CleanupResult.FAILED
    |             ^
595 |             self._logger.log_error(f"Error cleaning up {config.worker_type.value} worker: {e!s}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:594:13: SyntaxError: Duplicate keyword argument ""
    |
592 |         except Exception as e:
593 |             status.error_message = f"Unexpected error: {e!s}"
594 |             status.result = CleanupResult.FAILED
    |             ^
595 |             self._logger.log_error(f"Error cleaning up {config.worker_type.value} worker: {e!s}")
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:595:13: SyntaxError: Expected ',', found name
    |
593 |             status.error_message = f"Unexpected error: {e!s}"
594 |             status.result = CleanupResult.FAILED
595 |             self._logger.log_error(f"Error cleaning up {config.worker_type.value} worker: {e!s}")
    |             ^
596 |
597 |         return status
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:595:98: SyntaxError: Expected ')', found newline
    |
593 |             status.error_message = f"Unexpected error: {e!s}"
594 |             status.result = CleanupResult.FAILED
595 |             self._logger.log_error(f"Error cleaning up {config.worker_type.value} worker: {e!s}")
    |                                                                                                  ^
596 |
597 |         return status
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:597:1: SyntaxError: Unexpected indentation
    |
595 |             self._logger.log_error(f"Error cleaning up {config.worker_type.value} worker: {e!s}")
596 |
597 |         return status
    | ^
598 |
599 |     def _verify_cleanup_completion(
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:599:1: SyntaxError: unindent does not match any outer indentation level
    |
597 |         return status
598 |
599 |     def _verify_cleanup_completion(
    | ^
600 |     self,
601 |     worker_statuses: list[WorkerCleanupStatus]) -> Result[None]:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:613:101: E501 Line too long (106 > 100)
    |
611 |                         # Check if worker is still active
612 |                         if self._worker_registry.is_worker_active(worker_result.value):
613 |                             failed_verifications.append(f"{status.worker_type.value} worker still active",
    |                                                                                                     ^^^^^^ E501
614 |     )
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:624:5: SyntaxError: unindent does not match any outer indentation level
    |
622 |             return Result.failure(f"Verification error: {e!s}")
623 |
624 |     def _get_current_memory_usage(self) -> float | None:
    |     ^
625 |         """Get current memory usage"""
626 |         try:
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:627:72: SyntaxError: Expected an expression or a ')'
    |
625 |         """Get current memory usage"""
626 |         try:
627 |             memory_result = self._resource_management.get_memory_usage(,
    |                                                                        ^
628 |     )
629 |             return memory_result.value if memory_result.is_success else None
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:633:5: SyntaxError: unindent does not match any outer indentation level
    |
631 |             return None
632 |
633 |     def _update_progress(self, callback: ProgressCallback | None, phase: CleanupPhase, percentage: int,
    |     ^
634 |     ) -> bool:
635 |         """Update progress and check for cancellation"""
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:633:101: E501 Line too long (103 > 100)
    |
631 |             return None
632 |
633 |     def _update_progress(self, callback: ProgressCallback | None, phase: CleanupPhase, percentage: int,
    |                                                                                                     ^^^ E501
634 |     ) -> bool:
635 |         """Update progress and check for cancellation"""
    |

src_refactored\application\worker_management\use_cases\cleanup_worker_use_case.py:642:20: SyntaxError: Expected dedent, found end of file
    |
640 |                 phase=phase.value,
641 |             )
642 |         return True
    |                    ^
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:288:101: E501 Line too long (108 > 100)
    |
287 |             # Phase 1: Initialize
288 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.INITIALIZING, 0):
    |                                                                                                     ^^^^^^^^ E501
289 |                 response.result = LLMInitializationResult.CANCELLED
290 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:299:49: SyntaxError: Expected an indented block after `if` statement
    |
298 |             config_validation = self._validate_configuration(request.configuration)
299 |             if not config_validation.is_success:
    |                                                 ^
300 | response.error_message = (
301 |     f"Configuration validation failed: {config_validation.error_message}")
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:300:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
298 |             config_validation = self._validate_configuration(request.configuration)
299 |             if not config_validation.is_success:
300 | response.error_message = (
    | ^
301 |     f"Configuration validation failed: {config_validation.error_message}")
302 |                 response.result = LLMInitializationResult.CONFIGURATION_ERROR
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:302:1: SyntaxError: Unexpected indentation
    |
300 | response.error_message = (
301 |     f"Configuration validation failed: {config_validation.error_message}")
302 |                 response.result = LLMInitializationResult.CONFIGURATION_ERROR
    | ^
303 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:306:1: SyntaxError: unindent does not match any outer indentation level
    |
305 |             # Phase 3: Check dependencies
306 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.CHECKING_DEPENDENCIES, 10):
    | ^
307 |                 response.result = LLMInitializationResult.CANCELLED
308 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:306:101: E501 Line too long (118 > 100)
    |
305 |             # Phase 3: Check dependencies
306 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.CHECKING_DEPENDENCIES, 10):
    |                                                                                                     ^^^^^^^^^^^^^^^^^^ E501
307 |                 response.result = LLMInitializationResult.CANCELLED
308 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:310:1: SyntaxError: unindent does not match any outer indentation level
    |
308 |                 return response
309 |
310 |             if request.validate_dependencies:
    | ^
311 | dependency_result = (
312 |     self._dependency_validation.validate_llm_dependencies(request.configuration,)
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:311:1: SyntaxError: Expected an indented block after `if` statement
    |
310 |             if request.validate_dependencies:
311 | dependency_result = (
    | ^
312 |     self._dependency_validation.validate_llm_dependencies(request.configuration,)
313 |     )
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:312:80: COM819 Trailing comma prohibited
    |
310 |             if request.validate_dependencies:
311 | dependency_result = (
312 |     self._dependency_validation.validate_llm_dependencies(request.configuration,)
    |                                                                                ^ COM819
313 |     )
314 |                 if not dependency_result.is_success:
    |
    = help: Remove trailing comma

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:314:1: SyntaxError: Unexpected indentation
    |
312 |     self._dependency_validation.validate_llm_dependencies(request.configuration,)
313 |     )
314 |                 if not dependency_result.is_success:
    | ^
315 | response.error_message = (
316 |     f"Dependency validation failed: {dependency_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:314:53: SyntaxError: Expected an indented block after `if` statement
    |
312 |     self._dependency_validation.validate_llm_dependencies(request.configuration,)
313 |     )
314 |                 if not dependency_result.is_success:
    |                                                     ^
315 | response.error_message = (
316 |     f"Dependency validation failed: {dependency_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:317:1: SyntaxError: Unexpected indentation
    |
315 | response.error_message = (
316 |     f"Dependency validation failed: {dependency_result.error_message}")
317 |                     response.result = LLMInitializationResult.DEPENDENCY_FAILED
    | ^
318 |                     return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:321:1: SyntaxError: unindent does not match any outer indentation level
    |
320 |             # Phase 4: Clean up existing worker
321 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.CLEANING_UP_EXISTING, 15):
    | ^
322 |                 response.result = LLMInitializationResult.CANCELLED
323 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:321:101: E501 Line too long (117 > 100)
    |
320 |             # Phase 4: Clean up existing worker
321 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.CLEANING_UP_EXISTING, 15):
    |                                                                                                     ^^^^^^^^^^^^^^^^^ E501
322 |                 response.result = LLMInitializationResult.CANCELLED
323 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:325:1: SyntaxError: unindent does not match any outer indentation level
    |
323 |                 return response
324 |
325 |             if request.cleanup_existing:
    | ^
326 |                 cleanup_result = self._worker_cleanup.cleanup_existing_llm_worker()
327 |                 if cleanup_result.is_success:
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:333:13: SyntaxError: unindent does not match any outer indentation level
    |
332 |             # Phase 5: Load model (if preload is enabled)
333 |             model_load_start = datetime.utcnow(,
    |             ^
334 |     )
335 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.LOADING_MODEL, 25):
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:333:48: SyntaxError: Expected an expression or a ')'
    |
332 |             # Phase 5: Load model (if preload is enabled)
333 |             model_load_start = datetime.utcnow(,
    |                                                ^
334 |     )
335 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.LOADING_MODEL, 25):
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:335:1: SyntaxError: Unexpected indentation
    |
333 |             model_load_start = datetime.utcnow(,
334 |     )
335 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.LOADING_MODEL, 25):
    | ^
336 |                 response.result = LLMInitializationResult.CANCELLED
337 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:335:101: E501 Line too long (110 > 100)
    |
333 |             model_load_start = datetime.utcnow(,
334 |     )
335 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.LOADING_MODEL, 25):
    |                                                                                                     ^^^^^^^^^^ E501
336 |                 response.result = LLMInitializationResult.CANCELLED
337 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:339:60: SyntaxError: Expected ':', found '='
    |
337 |                 return response
338 |
339 | if request.configuration.preload_model or request.strategy = (
    |                                                            ^
340 |     = LLMWorkerStrategy.PRELOAD_MODEL:)
341 |                 model_result = self._model_service.load_model(
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:340:5: SyntaxError: Expected an expression
    |
339 | if request.configuration.preload_model or request.strategy = (
340 |     = LLMWorkerStrategy.PRELOAD_MODEL:)
    |     ^
341 |                 model_result = self._model_service.load_model(
342 |                     request.configuration.model_name,
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:340:38: SyntaxError: Expected a statement
    |
339 | if request.configuration.preload_model or request.strategy = (
340 |     = LLMWorkerStrategy.PRELOAD_MODEL:)
    |                                      ^
341 |                 model_result = self._model_service.load_model(
342 |                     request.configuration.model_name,
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:340:39: SyntaxError: Expected a statement
    |
339 | if request.configuration.preload_model or request.strategy = (
340 |     = LLMWorkerStrategy.PRELOAD_MODEL:)
    |                                       ^
341 |                 model_result = self._model_service.load_model(
342 |                     request.configuration.model_name,
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:340:40: SyntaxError: Expected a statement
    |
339 | if request.configuration.preload_model or request.strategy = (
340 |     = LLMWorkerStrategy.PRELOAD_MODEL:)
    |                                        ^
341 |                 model_result = self._model_service.load_model(
342 |                     request.configuration.model_name,
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:341:1: SyntaxError: Unexpected indentation
    |
339 | if request.configuration.preload_model or request.strategy = (
340 |     = LLMWorkerStrategy.PRELOAD_MODEL:)
341 |                 model_result = self._model_service.load_model(
    | ^
342 |                     request.configuration.model_name,
343 |                     request.configuration.quantization_level,
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:350:1: SyntaxError: Unexpected indentation
    |
348 | response.model_load_time_ms = (
349 |     int((datetime.utcnow() - model_load_start).total_seconds() * 1000))
350 |                 else:
    | ^
351 |                     response.error_message = f"Model loading failed: {model_result.error_message}"
352 |                     response.result = LLMInitializationResult.MODEL_LOAD_FAILED
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:350:17: SyntaxError: Expected a statement
    |
348 | response.model_load_time_ms = (
349 |     int((datetime.utcnow() - model_load_start).total_seconds() * 1000))
350 |                 else:
    |                 ^
351 |                     response.error_message = f"Model loading failed: {model_result.error_message}"
352 |                     response.result = LLMInitializationResult.MODEL_LOAD_FAILED
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:350:21: SyntaxError: Expected a statement
    |
348 | response.model_load_time_ms = (
349 |     int((datetime.utcnow() - model_load_start).total_seconds() * 1000))
350 |                 else:
    |                     ^
351 |                     response.error_message = f"Model loading failed: {model_result.error_message}"
352 |                     response.result = LLMInitializationResult.MODEL_LOAD_FAILED
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:350:22: SyntaxError: Expected a statement
    |
348 | response.model_load_time_ms = (
349 |     int((datetime.utcnow() - model_load_start).total_seconds() * 1000))
350 |                 else:
    |                      ^
351 |                     response.error_message = f"Model loading failed: {model_result.error_message}"
352 |                     response.result = LLMInitializationResult.MODEL_LOAD_FAILED
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:351:1: SyntaxError: Unexpected indentation
    |
349 |     int((datetime.utcnow() - model_load_start).total_seconds() * 1000))
350 |                 else:
351 |                     response.error_message = f"Model loading failed: {model_result.error_message}"
    | ^
352 |                     response.result = LLMInitializationResult.MODEL_LOAD_FAILED
353 |                     return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:356:13: SyntaxError: unindent does not match any outer indentation level
    |
355 |             # Phase 6: Create worker
356 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.CREATING_WORKER, 40):
    |             ^
357 |                 response.result = LLMInitializationResult.CANCELLED
358 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:356:101: E501 Line too long (112 > 100)
    |
355 |             # Phase 6: Create worker
356 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.CREATING_WORKER, 40):
    |                                                                                                     ^^^^^^^^^^^^ E501
357 |                 response.result = LLMInitializationResult.CANCELLED
358 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:360:1: SyntaxError: unindent does not match any outer indentation level
    |
358 |                 return response
359 |
360 |             worker_result = self._llm_worker_factory.create_llm_worker(
    | ^
361 |                 request.configuration.model_name,
362 |                 request.configuration.quantization_level,
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:367:1: SyntaxError: Unexpected indentation
    |
365 |             )
366 |
367 |             if not worker_result.is_success:
    | ^
368 |                 response.error_message = f"Worker creation failed: {worker_result.error_message}"
369 |                 response.result = LLMInitializationResult.FAILED
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:376:101: E501 Line too long (112 > 100)
    |
375 |             # Phase 7: Create thread
376 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.CREATING_THREAD, 55):
    |                                                                                                     ^^^^^^^^^^^^ E501
377 |                 response.result = LLMInitializationResult.CANCELLED
378 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:390:101: E501 Line too long (113 > 100)
    |
389 |             # Phase 8: Move worker to thread
390 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.MOVING_TO_THREAD, 65):
    |                                                                                                     ^^^^^^^^^^^^^ E501
391 |                 response.result = LLMInitializationResult.CANCELLED
392 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:395:43: SyntaxError: Expected an indented block after `if` statement
    |
394 |             move_result = self._thread_management.move_llm_worker_to_thread(worker, thread)
395 |             if not move_result.is_success:
    |                                           ^
396 | response.error_message = (
397 |     f"Failed to move worker to thread: {move_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:398:1: SyntaxError: Unexpected indentation
    |
396 | response.error_message = (
397 |     f"Failed to move worker to thread: {move_result.error_message}")
398 |                 response.result = LLMInitializationResult.FAILED
    | ^
399 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:402:1: SyntaxError: unindent does not match any outer indentation level
    |
401 |             # Phase 9: Connect signals
402 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.CONNECTING_SIGNALS, 75):
    | ^
403 |                 response.result = LLMInitializationResult.CANCELLED
404 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:402:101: E501 Line too long (115 > 100)
    |
401 |             # Phase 9: Connect signals
402 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.CONNECTING_SIGNALS, 75):
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
403 |                 response.result = LLMInitializationResult.CANCELLED
404 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:406:1: SyntaxError: unindent does not match any outer indentation level
    |
404 |                 return response
405 |
406 |             signal_result = self._signal_connection.connect_llm_worker_signals(worker)
    | ^
407 |             if signal_result.is_success:
408 |                 response.signals_connected = True
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:407:1: SyntaxError: Unexpected indentation
    |
406 |             signal_result = self._signal_connection.connect_llm_worker_signals(worker)
407 |             if signal_result.is_success:
    | ^
408 |                 response.signals_connected = True
409 |             else:
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:415:101: E501 Line too long (112 > 100)
    |
414 |             # Phase 10: Start worker
415 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.STARTING_WORKER, 85):
    |                                                                                                     ^^^^^^^^^^^^ E501
416 |                 response.result = LLMInitializationResult.CANCELLED
417 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:435:101: E501 Line too long (101 > 100)
    |
433 |             verification_result = self._verify_initialization(worker, thread)
434 |             if not verification_result.is_success:
435 |                 response.warnings.append(f"Verification failed: {verification_result.error_message}"\
    |                                                                                                     ^ E501
436 |     )
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:448:101: E501 Line too long (107 > 100)
    |
447 |             # Phase 12: Complete
448 |             if not self._update_progress(request.progress_callback, LLMInitializationPhase.COMPLETED, 100):
    |                                                                                                     ^^^^^^^ E501
449 |                 response.result = LLMInitializationResult.CANCELLED
450 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:458:1: SyntaxError: Unexpected indentation
    |
457 |             # Add metadata
458 |             response.metadata = {
    | ^
459 |                 "initialization_timestamp": start_time.isoformat()
460 |                 "strategy_used": request.strategy.value,
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:460:17: SyntaxError: Expected ',', found string
    |
458 |             response.metadata = {
459 |                 "initialization_timestamp": start_time.isoformat()
460 |                 "strategy_used": request.strategy.value,
    |                 ^
461 |                 "model_name": request.configuration.model_name.value,
462 |                 "quantization_level": request.configuration.quantization_level.value,
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:482:1: SyntaxError: unindent does not match any outer indentation level
    |
480 |             )
481 |
482 |         except Exception as e:
    | ^
483 |             self._logger.log_error(f"Unexpected error during LLM worker initialization: {e!s}")
484 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:482:9: SyntaxError: Expected a statement
    |
480 |             )
481 |
482 |         except Exception as e:
    |         ^
483 |             self._logger.log_error(f"Unexpected error during LLM worker initialization: {e!s}")
484 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:482:26: SyntaxError: Expected a statement
    |
480 |             )
481 |
482 |         except Exception as e:
    |                          ^
483 |             self._logger.log_error(f"Unexpected error during LLM worker initialization: {e!s}")
484 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:482:31: SyntaxError: Expected an expression
    |
480 |             )
481 |
482 |         except Exception as e:
    |                               ^
483 |             self._logger.log_error(f"Unexpected error during LLM worker initialization: {e!s}")
484 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:483:1: SyntaxError: Unexpected indentation
    |
482 |         except Exception as e:
483 |             self._logger.log_error(f"Unexpected error during LLM worker initialization: {e!s}")
    | ^
484 |             response.error_message = f"Unexpected error: {e!s}"
485 |             response.result = LLMInitializationResult.FAILED
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:487:1: SyntaxError: unindent does not match any outer indentation level
    |
485 |             response.result = LLMInitializationResult.FAILED
486 |
487 |         return response
    | ^
488 |
489 |     def _validate_configuration(self, config: LLMWorkerConfiguration,
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:489:1: SyntaxError: Unexpected indentation
    |
487 |         return response
488 |
489 |     def _validate_configuration(self, config: LLMWorkerConfiguration,
    | ^
490 |     ) -> Result[None]:
491 |         """Validate LLM worker configuration"""
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:513:101: E501 Line too long (101 > 100)
    |
511 |             )
512 |             if not compatibility_result.is_success:
513 |                 return Result.failure(f"Model compatibility check failed: {compatibility_result.erro\
    |                                                                                                     ^ E501
514 |     r_message}")
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:514:5: SyntaxError: f-string: expecting '}'
    |
512 |             if not compatibility_result.is_success:
513 |                 return Result.failure(f"Model compatibility check failed: {compatibility_result.erro\
514 |     r_message}")
    |     ^
515 |
516 |             # Check memory requirements if specified
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:514:14: SyntaxError: f-string: single '}' is not allowed
    |
512 |             if not compatibility_result.is_success:
513 |                 return Result.failure(f"Model compatibility check failed: {compatibility_result.erro\
514 |     r_message}")
    |              ^
515 |
516 |             # Check memory requirements if specified
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:514:15: SyntaxError: Expected ',', found FStringEnd
    |
512 |             if not compatibility_result.is_success:
513 |                 return Result.failure(f"Model compatibility check failed: {compatibility_result.erro\
514 |     r_message}")
    |               ^
515 |
516 |             # Check memory requirements if specified
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:522:85: SyntaxError: f-string: unterminated string
    |
520 |                 )
521 |                 if memory_req_result.is_success and memory_req_result.value > config.max_memory_mb:
522 |                     return Result.failure(f"Model requires {memory_req_result.value}MB but limit is
    |                                                                                     ^
523 |     {config.max_memory_mb}MB")
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:523:27: SyntaxError: Expected FStringEnd, found name
    |
521 |                 if memory_req_result.is_success and memory_req_result.value > config.max_memory_mb:
522 |                     return Result.failure(f"Model requires {memory_req_result.value}MB but limit is
523 |     {config.max_memory_mb}MB")
    |                           ^
524 |
525 |             return Result.success(None)
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:523:29: SyntaxError: missing closing quote in string literal
    |
521 |                 if memory_req_result.is_success and memory_req_result.value > config.max_memory_mb:
522 |                     return Result.failure(f"Model requires {memory_req_result.value}MB but limit is
523 |     {config.max_memory_mb}MB")
    |                             ^
524 |
525 |             return Result.success(None)
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:523:31: SyntaxError: Expected ',', found newline
    |
521 |                 if memory_req_result.is_success and memory_req_result.value > config.max_memory_mb:
522 |                     return Result.failure(f"Model requires {memory_req_result.value}MB but limit is
523 |     {config.max_memory_mb}MB")
    |                               ^
524 |
525 |             return Result.success(None)
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:525:13: SyntaxError: Expected ')', found dedent
    |
523 |     {config.max_memory_mb}MB")
524 |
525 |             return Result.success(None)
    |             ^
526 |
527 |         except Exception as e:
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:550:101: E501 Line too long (101 > 100)
    |
548 |             signal_verification = self._signal_connection.verify_signal_connections(worker)
549 |             if not signal_verification.is_success:
550 |                 return Result.failure(f"Signal verification failed: {signal_verification.error_messa\
    |                                                                                                     ^ E501
551 |     ge}")
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:551:5: SyntaxError: f-string: expecting '}'
    |
549 |             if not signal_verification.is_success:
550 |                 return Result.failure(f"Signal verification failed: {signal_verification.error_messa\
551 |     ge}")
    |     ^
552 |
553 |             return Result.success(None)
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:551:7: SyntaxError: f-string: single '}' is not allowed
    |
549 |             if not signal_verification.is_success:
550 |                 return Result.failure(f"Signal verification failed: {signal_verification.error_messa\
551 |     ge}")
    |       ^
552 |
553 |             return Result.success(None)
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:551:8: SyntaxError: Expected ',', found FStringEnd
    |
549 |             if not signal_verification.is_success:
550 |                 return Result.failure(f"Signal verification failed: {signal_verification.error_messa\
551 |     ge}")
    |        ^
552 |
553 |             return Result.success(None)
    |

src_refactored\application\worker_management\use_cases\initialize_llm_worker_use_case.py:568:20: SyntaxError: Expected a statement
    |
566 |                 phase=phase.value,
567 |             )
568 |         return True
    |                    ^
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:241:17: SyntaxError: Expected ',', found name
    |
239 |                 "Starting worker initialization",
240 |                 worker_count=len(request.worker_configurations)
241 |                 strategy=request.strategy.value,
    |                 ^
242 |                 cleanup_existing=request.cleanup_existing,
243 |             )
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:246:101: E501 Line too long (105 > 100)
    |
245 |             # Phase 1: Initialize
246 |             if not self._update_progress(request.progress_callback, InitializationPhase.INITIALIZING, 0):
    |                                                                                                     ^^^^^ E501
247 |                 response.result = InitializationResult.CANCELLED
248 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:251:101: E501 Line too long (117 > 100)
    |
250 |             # Phase 2: Validate configuration and dependencies
251 |             if not self._update_progress(request.progress_callback, InitializationPhase.VALIDATING_CONFIGURATION, 5):
    |                                                                                                     ^^^^^^^^^^^^^^^^^ E501
252 |                 response.result = InitializationResult.CANCELLED
253 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:258:53: SyntaxError: Expected an indented block after `if` statement
    |
256 |                 validation_result = self._validate_all_dependencies(request.worker_configurations,
257 |     )
258 |                 if not validation_result.is_success:
    |                                                     ^
259 | response.error_message = (
260 |     f"Dependency validation failed: {validation_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:259:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
257 |     )
258 |                 if not validation_result.is_success:
259 | response.error_message = (
    | ^
260 |     f"Dependency validation failed: {validation_result.error_message}")
261 |                     response.result = InitializationResult.DEPENDENCY_FAILED
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:261:1: SyntaxError: Unexpected indentation
    |
259 | response.error_message = (
260 |     f"Dependency validation failed: {validation_result.error_message}")
261 |                     response.result = InitializationResult.DEPENDENCY_FAILED
    | ^
262 |                     return response
263 |                 response.dependencies_validated = True
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:263:1: SyntaxError: unindent does not match any outer indentation level
    |
261 |                     response.result = InitializationResult.DEPENDENCY_FAILED
262 |                     return response
263 |                 response.dependencies_validated = True
    | ^
264 |
265 |             # Phase 3: Clean up existing workers
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:266:1: SyntaxError: Unexpected indentation
    |
265 |             # Phase 3: Clean up existing workers
266 |             if not self._update_progress(request.progress_callback, InitializationPhase.CLEANING_UP_EXISTING, 10):
    | ^
267 |                 response.result = InitializationResult.CANCELLED
268 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:266:101: E501 Line too long (114 > 100)
    |
265 |             # Phase 3: Clean up existing workers
266 |             if not self._update_progress(request.progress_callback, InitializationPhase.CLEANING_UP_EXISTING, 10):
    |                                                                                                     ^^^^^^^^^^^^^^ E501
267 |                 response.result = InitializationResult.CANCELLED
268 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:287:101: E501 Line too long (112 > 100)
    |
285 |                 else:
286 |                     initialization_order = worker_types
287 |                     response.warnings.append(f"Could not determine optimal order: {order_result.error_message}",
    |                                                                                                     ^^^^^^^^^^^^ E501
288 |     )
289 |             else:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:303:1: SyntaxError: Unexpected indentation
    |
301 |             response.worker_statuses = init_result.worker_statuses
302 |             response.successful_workers
303 |              =  [status.worker_type for status in init_result.worker_statuses if status.initialized]
    | ^
304 |             response.failed_workers
305 |  = (
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:303:14: SyntaxError: Expected a statement
    |
301 |             response.worker_statuses = init_result.worker_statuses
302 |             response.successful_workers
303 |              =  [status.worker_type for status in init_result.worker_statuses if status.initialized]
    |              ^
304 |             response.failed_workers
305 |  = (
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:304:13: SyntaxError: Expected a statement
    |
302 |             response.successful_workers
303 |              =  [status.worker_type for status in init_result.worker_statuses if status.initialized]
304 |             response.failed_workers
    |             ^
305 |  = (
306 |     [status.worker_type for status in init_result.worker_statuses if not status.initialized])
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:305:1: SyntaxError: unindent does not match any outer indentation level
    |
303 |              =  [status.worker_type for status in init_result.worker_statuses if status.initialized]
304 |             response.failed_workers
305 |  = (
    | ^
306 |     [status.worker_type for status in init_result.worker_statuses if not status.initialized])
307 |             response.warnings.extend(init_result.warnings)
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:305:2: SyntaxError: Expected a statement
    |
303 |              =  [status.worker_type for status in init_result.worker_statuses if status.initialized]
304 |             response.failed_workers
305 |  = (
    |  ^
306 |     [status.worker_type for status in init_result.worker_statuses if not status.initialized])
307 |             response.warnings.extend(init_result.warnings)
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:307:1: SyntaxError: Unexpected indentation
    |
305 |  = (
306 |     [status.worker_type for status in init_result.worker_statuses if not status.initialized])
307 |             response.warnings.extend(init_result.warnings)
    | ^
308 |
309 |             # Phase 11: Verify initialization
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:310:101: E501 Line too long (118 > 100)
    |
309 |             # Phase 11: Verify initialization
310 |             if not self._update_progress(request.progress_callback, InitializationPhase.VERIFYING_INITIALIZATION, 95):
    |                                                                                                     ^^^^^^^^^^^^^^^^^^ E501
311 |                 response.result = InitializationResult.CANCELLED
312 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:324:101: E501 Line too long (104 > 100)
    |
323 |             # Phase 12: Complete
324 |             if not self._update_progress(request.progress_callback, InitializationPhase.COMPLETED, 100):
    |                                                                                                     ^^^^ E501
325 |                 response.result = InitializationResult.CANCELLED
326 |                 return response
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:329:1: SyntaxError: Expected a statement
    |
328 |             # Set final response data
329 | response.total_initialization_time_ms = (
    | ^
330 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:333:1: SyntaxError: Unexpected indentation
    |
332 |             # Add metadata
333 |             response.metadata = {
    | ^
334 |                 "initialization_timestamp": start_time.isoformat()
335 |                 "strategy_used": request.strategy.value,
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:335:17: SyntaxError: Expected ',', found string
    |
333 |             response.metadata = {
334 |                 "initialization_timestamp": start_time.isoformat()
335 |                 "strategy_used": request.strategy.value,
    |                 ^
336 |                 "total_workers_requested": len(request.worker_configurations)
337 |                 "successful_count": len(response.successful_workers)
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:337:17: SyntaxError: Expected ',', found string
    |
335 |                 "strategy_used": request.strategy.value,
336 |                 "total_workers_requested": len(request.worker_configurations)
337 |                 "successful_count": len(response.successful_workers)
    |                 ^
338 |                 "failed_count": len(response.failed_workers)
339 |                 "cleanup_performed": response.cleanup_performed,
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:338:17: SyntaxError: Expected ',', found string
    |
336 |                 "total_workers_requested": len(request.worker_configurations)
337 |                 "successful_count": len(response.successful_workers)
338 |                 "failed_count": len(response.failed_workers)
    |                 ^
339 |                 "cleanup_performed": response.cleanup_performed,
340 |                 "dependencies_validated": response.dependencies_validated,
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:339:17: SyntaxError: Expected ',', found string
    |
337 |                 "successful_count": len(response.successful_workers)
338 |                 "failed_count": len(response.failed_workers)
339 |                 "cleanup_performed": response.cleanup_performed,
    |                 ^
340 |                 "dependencies_validated": response.dependencies_validated,
341 |                 "memory_usage_mb": self._get_current_memory_usage()
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:341:68: COM812 Trailing comma missing
    |
339 |                 "cleanup_performed": response.cleanup_performed,
340 |                 "dependencies_validated": response.dependencies_validated,
341 |                 "memory_usage_mb": self._get_current_memory_usage()
    |                                                                    ^ COM812
342 |             }
    |
    = help: Add trailing comma

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:352:1: SyntaxError: unindent does not match any outer indentation level
    |
350 |             )
351 |
352 |         except Exception as e:
    | ^
353 |             self._logger.log_error(f"Unexpected error during worker initialization: {e!s}")
354 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:352:9: SyntaxError: Expected a statement
    |
350 |             )
351 |
352 |         except Exception as e:
    |         ^
353 |             self._logger.log_error(f"Unexpected error during worker initialization: {e!s}")
354 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:352:26: SyntaxError: Expected a statement
    |
350 |             )
351 |
352 |         except Exception as e:
    |                          ^
353 |             self._logger.log_error(f"Unexpected error during worker initialization: {e!s}")
354 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:352:31: SyntaxError: Expected an expression
    |
350 |             )
351 |
352 |         except Exception as e:
    |                               ^
353 |             self._logger.log_error(f"Unexpected error during worker initialization: {e!s}")
354 |             response.error_message = f"Unexpected error: {e!s}"
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:353:1: SyntaxError: Unexpected indentation
    |
352 |         except Exception as e:
353 |             self._logger.log_error(f"Unexpected error during worker initialization: {e!s}")
    | ^
354 |             response.error_message = f"Unexpected error: {e!s}"
355 |             response.result = InitializationResult.FAILED
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:357:1: SyntaxError: unindent does not match any outer indentation level
    |
355 |             response.result = InitializationResult.FAILED
356 |
357 |         return response
    | ^
358 |
359 |     def _validate_all_dependencies(self, configurations: list[WorkerConfiguration]) -> Result[None]:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:359:1: SyntaxError: Unexpected indentation
    |
357 |         return response
358 |
359 |     def _validate_all_dependencies(self, configurations: list[WorkerConfiguration]) -> Result[None]:
    | ^
360 |         """Validate dependencies for all worker configurations"""
361 |         try:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:363:35: SyntaxError: Expected an indented block after `if` statement
    |
361 |         try:
362 |             for config in configurations:
363 |                 if config.enabled:
    |                                   ^
364 | validation_result = (
365 |     self._dependency_validation.validate_worker_dependencies(config.worker_type,)
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:364:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
362 |             for config in configurations:
363 |                 if config.enabled:
364 | validation_result = (
    | ^
365 |     self._dependency_validation.validate_worker_dependencies(config.worker_type,)
366 |                     config)
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:365:80: COM819 Trailing comma prohibited
    |
363 |                 if config.enabled:
364 | validation_result = (
365 |     self._dependency_validation.validate_worker_dependencies(config.worker_type,)
    |                                                                                ^ COM819
366 |                     config)
367 |                     if not validation_result.is_success:
    |
    = help: Remove trailing comma

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:366:21: SyntaxError: Expected ')', found name
    |
364 | validation_result = (
365 |     self._dependency_validation.validate_worker_dependencies(config.worker_type,)
366 |                     config)
    |                     ^
367 |                     if not validation_result.is_success:
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:366:27: SyntaxError: Expected a statement
    |
364 | validation_result = (
365 |     self._dependency_validation.validate_worker_dependencies(config.worker_type,)
366 |                     config)
    |                           ^
367 |                     if not validation_result.is_success:
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:366:28: SyntaxError: Expected a statement
    |
364 | validation_result = (
365 |     self._dependency_validation.validate_worker_dependencies(config.worker_type,)
366 |                     config)
    |                            ^
367 |                     if not validation_result.is_success:
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:367:1: SyntaxError: Unexpected indentation
    |
365 |     self._dependency_validation.validate_worker_dependencies(config.worker_type,)
366 |                     config)
367 |                     if not validation_result.is_success:
    | ^
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
369 |     alidation_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:368:101: E501 Line too long (101 > 100)
    |
366 |                     config)
367 |                     if not validation_result.is_success:
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
    |                                                                                                     ^ E501
369 |     alidation_result.error_message}")
370 |             return Result.success(None)
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:369:5: SyntaxError: f-string: expecting '}'
    |
367 |                     if not validation_result.is_success:
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
369 |     alidation_result.error_message}")
    |     ^
370 |             return Result.success(None)
371 |         except Exception as e:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:369:21: SyntaxError: Expected ',', found FStringMiddle
    |
367 |                     if not validation_result.is_success:
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
369 |     alidation_result.error_message}")
    |                     ^
370 |             return Result.success(None)
371 |         except Exception as e:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:369:35: SyntaxError: f-string: single '}' is not allowed
    |
367 |                     if not validation_result.is_success:
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
369 |     alidation_result.error_message}")
    |                                   ^
370 |             return Result.success(None)
371 |         except Exception as e:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:369:36: SyntaxError: Expected ',', found FStringEnd
    |
367 |                     if not validation_result.is_success:
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
369 |     alidation_result.error_message}")
    |                                    ^
370 |             return Result.success(None)
371 |         except Exception as e:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:370:13: SyntaxError: unindent does not match any outer indentation level
    |
368 |                         return Result.failure(f"Validation failed for {config.worker_type.value}: {v\
369 |     alidation_result.error_message}")
370 |             return Result.success(None)
    |             ^
371 |         except Exception as e:
372 |             return Result.failure(f"Dependency validation error: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:371:1: SyntaxError: Unexpected indentation
    |
369 |     alidation_result.error_message}")
370 |             return Result.success(None)
371 |         except Exception as e:
    | ^
372 |             return Result.failure(f"Dependency validation error: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:371:9: SyntaxError: Expected a statement
    |
369 |     alidation_result.error_message}")
370 |             return Result.success(None)
371 |         except Exception as e:
    |         ^
372 |             return Result.failure(f"Dependency validation error: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:371:26: SyntaxError: Expected a statement
    |
369 |     alidation_result.error_message}")
370 |             return Result.success(None)
371 |         except Exception as e:
    |                          ^
372 |             return Result.failure(f"Dependency validation error: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:371:31: SyntaxError: Expected an expression
    |
369 |     alidation_result.error_message}")
370 |             return Result.success(None)
371 |         except Exception as e:
    |                               ^
372 |             return Result.failure(f"Dependency validation error: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:372:1: SyntaxError: Unexpected indentation
    |
370 |             return Result.success(None)
371 |         except Exception as e:
372 |             return Result.failure(f"Dependency validation error: {e!s}")
    | ^
373 |
374 |     def _initialize_workers_sequential(
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:374:5: SyntaxError: unindent does not match any outer indentation level
    |
372 |             return Result.failure(f"Dependency validation error: {e!s}")
373 |
374 |     def _initialize_workers_sequential(
    |     ^
375 |         self,
376 |         configurations: list[WorkerConfiguration],
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:402:101: E501 Line too long (111 > 100)
    |
400 |             # Update progress for this worker
401 |             phase_name = f"initializing_{worker_type.value}"
402 |             if not self._update_progress(progress_callback, InitializationPhase(phase_name), current_progress):
    |                                                                                                     ^^^^^^^^^^^ E501
403 |                 # If cancelled, mark remaining workers as failed
404 |                 for remaining_type in initialization_order[i:]:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:424:1: SyntaxError: unindent does not match any outer indentation level
    |
422 |         })()
423 |
424 |     def _initialize_workers_parallel(
    | ^
425 |         self,
426 |         configurations: list[WorkerConfiguration],
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:435:1: SyntaxError: unindent does not match any outer indentation level
    |
433 |         return self._initialize_workers_sequential(configurations, worker_types, progress_callback)
434 |
435 |     def _initialize_single_worker(self, config: WorkerConfiguration,
    | ^
436 |     ) -> WorkerInitializationStatus:
437 |         """Initialize a single worker"""
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:456:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
455 |             # Create and setup thread
456 | thread_result = (
    | ^
457 |     self._thread_management.create_thread(f"{config.worker_type.value}_thread"))
458 |             if not thread_result.is_success:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:458:1: SyntaxError: Unexpected indentation
    |
456 | thread_result = (
457 |     self._thread_management.create_thread(f"{config.worker_type.value}_thread"))
458 |             if not thread_result.is_success:
    | ^
459 |                 status.error_message = f"Thread creation failed: {thread_result.error_message}"
460 |                 return status
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:466:43: SyntaxError: Expected an indented block after `if` statement
    |
464 |             # Move worker to thread
465 |             move_result = self._thread_management.move_worker_to_thread(worker, thread)
466 |             if not move_result.is_success:
    |                                           ^
467 | status.error_message = (
468 |     f"Failed to move worker to thread: {move_result.error_message}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:469:1: SyntaxError: Unexpected indentation
    |
467 | status.error_message = (
468 |     f"Failed to move worker to thread: {move_result.error_message}")
469 |                 return status
    | ^
470 |
471 |             # Connect signals
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:474:1: SyntaxError: Unexpected indentation
    |
472 | signal_result = (
473 |     self._signal_connection.connect_worker_signals(worker, config.worker_type))
474 |             if not signal_result.is_success:
    | ^
475 |                 status.error_message = f"Signal connection failed: {signal_result.error_message}"
476 |                 return status
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:490:1: SyntaxError: Expected a statement
    |
488 |             status.initialized = True
489 |             status.result = InitializationResult.SUCCESS
490 | status.initialization_time_ms = (
    | ^
491 |     int((datetime.utcnow() - start_time).total_seconds() * 1000))
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:494:1: SyntaxError: Unexpected indentation
    |
493 |             # Get memory usage if available
494 |             memory_result = self._worker_cleanup.get_memory_usage(,
    | ^
495 |     )
496 |             if memory_result.is_success:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:494:67: SyntaxError: Expected an expression or a ')'
    |
493 |             # Get memory usage if available
494 |             memory_result = self._worker_cleanup.get_memory_usage(,
    |                                                                   ^
495 |     )
496 |             if memory_result.is_success:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:504:1: SyntaxError: unindent does not match any outer indentation level
    |
502 |             )
503 |
504 |         except Exception as e:
    | ^
505 |             status.error_message = f"Unexpected error: {e!s}"
506 |             self._logger.log_error(f"Error initializing {config.worker_type.value} worker: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:504:9: SyntaxError: Expected a statement
    |
502 |             )
503 |
504 |         except Exception as e:
    |         ^
505 |             status.error_message = f"Unexpected error: {e!s}"
506 |             self._logger.log_error(f"Error initializing {config.worker_type.value} worker: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:504:26: SyntaxError: Expected a statement
    |
502 |             )
503 |
504 |         except Exception as e:
    |                          ^
505 |             status.error_message = f"Unexpected error: {e!s}"
506 |             self._logger.log_error(f"Error initializing {config.worker_type.value} worker: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:504:31: SyntaxError: Expected an expression
    |
502 |             )
503 |
504 |         except Exception as e:
    |                               ^
505 |             status.error_message = f"Unexpected error: {e!s}"
506 |             self._logger.log_error(f"Error initializing {config.worker_type.value} worker: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:505:1: SyntaxError: Unexpected indentation
    |
504 |         except Exception as e:
505 |             status.error_message = f"Unexpected error: {e!s}"
    | ^
506 |             self._logger.log_error(f"Error initializing {config.worker_type.value} worker: {e!s}")
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:508:1: SyntaxError: unindent does not match any outer indentation level
    |
506 |             self._logger.log_error(f"Error initializing {config.worker_type.value} worker: {e!s}")
507 |
508 |         return status
    | ^
509 |
510 |     def _create_worker_by_type(self, config: WorkerConfiguration,
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:510:1: SyntaxError: Unexpected indentation
    |
508 |         return status
509 |
510 |     def _create_worker_by_type(self, config: WorkerConfiguration,
    | ^
511 |     ) -> Result[Any]:
512 |         """Create worker based on worker type"""
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:518:43: SyntaxError: missing closing quote in string literal
    |
516 |             if config.worker_type == WorkerType.MODEL:
517 |                 if not config.model_name or not config.quantization_level:
518 |                     return Result.failure("Model name and
    |                                           ^
519 |     quantization level required for model worker")
520 |                 return self._worker_factory.create_model_worker(config.model_name, config.quantization_level)
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:519:18: SyntaxError: Expected ',', found name
    |
517 |                 if not config.model_name or not config.quantization_level:
518 |                     return Result.failure("Model name and
519 |     quantization level required for model worker")
    |                  ^
520 |                 return self._worker_factory.create_model_worker(config.model_name, config.quantization_level)
521 |             if config.worker_type == WorkerType.LLM:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:519:24: SyntaxError: Expected ',', found name
    |
517 |                 if not config.model_name or not config.quantization_level:
518 |                     return Result.failure("Model name and
519 |     quantization level required for model worker")
    |                        ^
520 |                 return self._worker_factory.create_model_worker(config.model_name, config.quantization_level)
521 |             if config.worker_type == WorkerType.LLM:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:519:24: SyntaxError: Unparenthesized generator expression cannot be used here
    |
517 |                 if not config.model_name or not config.quantization_level:
518 |                     return Result.failure("Model name and
519 |     quantization level required for model worker")
    |                        ^
520 |                 return self._worker_factory.create_model_worker(config.model_name, config.quantization_level)
521 |             if config.worker_type == WorkerType.LLM:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:519:43: SyntaxError: Expected 'in', found name
    |
517 |                 if not config.model_name or not config.quantization_level:
518 |                     return Result.failure("Model name and
519 |     quantization level required for model worker")
    |                                           ^
520 |                 return self._worker_factory.create_model_worker(config.model_name, config.quantization_level)
521 |             if config.worker_type == WorkerType.LLM:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:519:49: SyntaxError: missing closing quote in string literal
    |
517 |                 if not config.model_name or not config.quantization_level:
518 |                     return Result.failure("Model name and
519 |     quantization level required for model worker")
    |                                                 ^
520 |                 return self._worker_factory.create_model_worker(config.model_name, config.quantization_level)
521 |             if config.worker_type == WorkerType.LLM:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:519:51: SyntaxError: Expected ')', found newline
    |
517 |                 if not config.model_name or not config.quantization_level:
518 |                     return Result.failure("Model name and
519 |     quantization level required for model worker")
    |                                                   ^
520 |                 return self._worker_factory.create_model_worker(config.model_name, config.quantization_level)
521 |             if config.worker_type == WorkerType.LLM:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:520:101: E501 Line too long (109 > 100)
    |
518 |                     return Result.failure("Model name and
519 |     quantization level required for model worker")
520 |                 return self._worker_factory.create_model_worker(config.model_name, config.quantization_level)
    |                                                                                                     ^^^^^^^^^ E501
521 |             if config.worker_type == WorkerType.LLM:
522 |                 if not config.llm_model_name or not config.llm_quantization_level:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:523:43: SyntaxError: missing closing quote in string literal
    |
521 |             if config.worker_type == WorkerType.LLM:
522 |                 if not config.llm_model_name or not config.llm_quantization_level:
523 |                     return Result.failure("LLM model name and
    |                                           ^
524 |     quantization level required for LLM worker")
525 |                 return self._worker_factory.create_llm_worker(config.llm_model_name, config.llm_quantization_level)
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:524:18: SyntaxError: Expected ',', found name
    |
522 |                 if not config.llm_model_name or not config.llm_quantization_level:
523 |                     return Result.failure("LLM model name and
524 |     quantization level required for LLM worker")
    |                  ^
525 |                 return self._worker_factory.create_llm_worker(config.llm_model_name, config.llm_quantization_level)
526 |             if config.worker_type == WorkerType.LISTENER:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:524:24: SyntaxError: Expected ',', found name
    |
522 |                 if not config.llm_model_name or not config.llm_quantization_level:
523 |                     return Result.failure("LLM model name and
524 |     quantization level required for LLM worker")
    |                        ^
525 |                 return self._worker_factory.create_llm_worker(config.llm_model_name, config.llm_quantization_level)
526 |             if config.worker_type == WorkerType.LISTENER:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:524:24: SyntaxError: Unparenthesized generator expression cannot be used here
    |
522 |                 if not config.llm_model_name or not config.llm_quantization_level:
523 |                     return Result.failure("LLM model name and
524 |     quantization level required for LLM worker")
    |                        ^
525 |                 return self._worker_factory.create_llm_worker(config.llm_model_name, config.llm_quantization_level)
526 |             if config.worker_type == WorkerType.LISTENER:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:524:41: SyntaxError: Expected 'in', found name
    |
522 |                 if not config.llm_model_name or not config.llm_quantization_level:
523 |                     return Result.failure("LLM model name and
524 |     quantization level required for LLM worker")
    |                                         ^
525 |                 return self._worker_factory.create_llm_worker(config.llm_model_name, config.llm_quantization_level)
526 |             if config.worker_type == WorkerType.LISTENER:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:524:47: SyntaxError: missing closing quote in string literal
    |
522 |                 if not config.llm_model_name or not config.llm_quantization_level:
523 |                     return Result.failure("LLM model name and
524 |     quantization level required for LLM worker")
    |                                               ^
525 |                 return self._worker_factory.create_llm_worker(config.llm_model_name, config.llm_quantization_level)
526 |             if config.worker_type == WorkerType.LISTENER:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:524:49: SyntaxError: Expected ')', found newline
    |
522 |                 if not config.llm_model_name or not config.llm_quantization_level:
523 |                     return Result.failure("LLM model name and
524 |     quantization level required for LLM worker")
    |                                                 ^
525 |                 return self._worker_factory.create_llm_worker(config.llm_model_name, config.llm_quantization_level)
526 |             if config.worker_type == WorkerType.LISTENER:
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:525:101: E501 Line too long (115 > 100)
    |
523 |                     return Result.failure("LLM model name and
524 |     quantization level required for LLM worker")
525 |                 return self._worker_factory.create_llm_worker(config.llm_model_name, config.llm_quantization_level)
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
526 |             if config.worker_type == WorkerType.LISTENER:
527 |                 return self._worker_factory.create_listener_worker()
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:537:67: SyntaxError: Expected an expression or a ')'
    |
535 |         """Get current memory usage"""
536 |         try:
537 |             memory_result = self._worker_cleanup.get_memory_usage(,
    |                                                                   ^
538 |     )
539 |             return memory_result.value if memory_result.is_success else None
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:543:101: E501 Line too long (110 > 100)
    |
541 |             return None
542 |
543 |     def _update_progress(self, callback: ProgressCallback | None, phase: InitializationPhase, percentage: int,
    |                                                                                                     ^^^^^^^^^^ E501
544 |     ) -> bool:
545 |         """Update progress and check for cancellation"""
    |

src_refactored\application\worker_management\use_cases\initialize_workers_use_case.py:552:20: SyntaxError: Expected a statement
    |
550 |                 phase=phase.value,
551 |             )
552 |         return True
    |                    ^
    |

src_refactored\domain\application_lifecycle\entities\shutdown_configuration.py:27:29: SyntaxError: Expected an indented block after function definition
   |
25 |     force_exit_on_timeout: bool = True
26 |
27 |     def __post_init__(self):
   |                             ^
28 |         # Generate ID based on key configuration settings
29 | config_id = (
   |

src_refactored\domain\application_lifecycle\entities\shutdown_configuration.py:31:1: SyntaxError: Unexpected indentation
   |
29 | config_id = (
30 |     f"shutdown_{self.worker_timeout_seconds}_{self.graceful_timeout_seconds}_{self.save_state}")
31 |         super().__init__(config_id)
   | ^
32 |
33 |     def is_graceful_shutdown(self) -> bool:
   |

src_refactored\domain\application_lifecycle\entities\shutdown_configuration.py:33:1: SyntaxError: unindent does not match any outer indentation level
   |
31 |         super().__init__(config_id)
32 |
33 |     def is_graceful_shutdown(self) -> bool:
   | ^
34 |         """Check if graceful shutdown is configured."""
35 |         return self.save_state and self.save_window_state and not self.force_worker_termination
   |

src_refactored\domain\application_lifecycle\entities\shutdown_configuration.py:37:1: SyntaxError: unindent does not match any outer indentation level
   |
35 |         return self.save_state and self.save_window_state and not self.force_worker_termination
36 |
37 |     def is_aggressive_shutdown(self) -> bool:
   | ^
38 |         """Check if aggressive shutdown is configured."""
39 |         return self.force_worker_termination and self.force_exit_on_timeout
   |

src_refactored\domain\application_lifecycle\entities\shutdown_configuration.py:41:1: SyntaxError: unindent does not match any outer indentation level
   |
39 |         return self.force_worker_termination and self.force_exit_on_timeout
40 |
41 |     def should_cleanup_resources(self) -> bool:
   | ^
42 |         """Check if resource cleanup is enabled."""
43 |         return self.cleanup_temp_files or self.save_state or self.save_window_state
   |

src_refactored\domain\application_lifecycle\entities\shutdown_configuration.py:45:1: SyntaxError: unindent does not match any outer indentation level
   |
43 |         return self.cleanup_temp_files or self.save_state or self.save_window_state
44 |
45 |     def get_total_timeout(self) -> int:
   | ^
46 |         """Calculate total shutdown timeout."""
47 |         return self.worker_timeout_seconds + self.graceful_timeout_seconds
   |

src_refactored\domain\application_lifecycle\entities\shutdown_configuration.py:49:1: SyntaxError: unindent does not match any outer indentation level
   |
47 |         return self.worker_timeout_seconds + self.graceful_timeout_seconds
48 |
49 |     def is_state_preservation_enabled(self) -> bool:
   | ^
50 |         """Check if state preservation is enabled."""
51 |         return self.save_state or self.save_window_state
   |

src_refactored\domain\application_lifecycle\entities\shutdown_configuration.py:53:1: SyntaxError: unindent does not match any outer indentation level
   |
51 |         return self.save_state or self.save_window_state
52 |
53 |     def __invariants__(self) -> None:
   | ^
54 |         """Validate entity invariants."""
55 |         if self.worker_timeout_seconds < 0:
   |

src_refactored\domain\application_lifecycle\entities\shutdown_configuration.py:64:6: SyntaxError: Expected dedent, found end of file
   |
62 |             msg = "Worker timeout cannot be zero without force termination"
63 |             raise ValueError(msg,
64 |     )
   |      ^
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:32:29: SyntaxError: Expected an indented block after function definition
   |
30 |     cleanup_on_exit: bool = True
31 |
32 |     def __post_init__(self):
   |                             ^
33 |         # Generate ID based on configuration
34 | config_id = (
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:36:1: SyntaxError: Unexpected indentation
   |
34 | config_id = (
35 |     f"{self.check_method.value}_{self.socket_port}_{self.activation_timeout_seconds}")
36 |         super().__init__(config_id)
   | ^
37 |
38 |     def is_socket_based(self) -> bool:
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:38:1: SyntaxError: unindent does not match any outer indentation level
   |
36 |         super().__init__(config_id)
37 |
38 |     def is_socket_based(self) -> bool:
   | ^
39 |         """Check if configuration uses socket-based checking."""
40 |         return self.check_method == InstanceCheckMethod.SOCKET_BINDING
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:42:1: SyntaxError: unindent does not match any outer indentation level
   |
40 |         return self.check_method == InstanceCheckMethod.SOCKET_BINDING
41 |
42 |     def is_file_lock_based(self) -> bool:
   | ^
43 |         """Check if configuration uses file lock-based checking."""
44 |         return self.check_method == InstanceCheckMethod.FILE_LOCK
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:46:1: SyntaxError: unindent does not match any outer indentation level
   |
44 |         return self.check_method == InstanceCheckMethod.FILE_LOCK
45 |
46 |     def is_mutex_based(self) -> bool:
   | ^
47 |         """Check if configuration uses mutex-based checking."""
48 |         return self.check_method == InstanceCheckMethod.NAMED_MUTEX
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:50:1: SyntaxError: unindent does not match any outer indentation level
   |
48 |         return self.check_method == InstanceCheckMethod.NAMED_MUTEX
49 |
50 |     def is_process_based(self) -> bool:
   | ^
51 |         """Check if configuration uses process-based checking."""
52 |         return self.check_method == InstanceCheckMethod.PROCESS_CHECK
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:54:1: SyntaxError: unindent does not match any outer indentation level
   |
52 |         return self.check_method == InstanceCheckMethod.PROCESS_CHECK
53 |
54 |     def get_socket_address(self,
   | ^
55 |     ) -> tuple[str, int]:
56 |         """Get socket address tuple."""
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:59:1: SyntaxError: unindent does not match any outer indentation level
   |
57 |         return (self.socket_host, self.socket_port)
58 |
59 |     def get_total_timeout(self) -> float:
   | ^
60 |         """Calculate total timeout including retries."""
61 |         return self.activation_timeout_seconds + (self.retry_attempts * self.retry_delay_seconds)
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:63:1: SyntaxError: unindent does not match any outer indentation level
   |
61 |         return self.activation_timeout_seconds + (self.retry_attempts * self.retry_delay_seconds)
62 |
63 |     def __invariants__(self) -> None:
   | ^
64 |         """Validate entity invariants."""
65 |         if self.socket_port <= 0 or self.socket_port > 65535:
   |

src_refactored\domain\application_lifecycle\entities\single_instance_configuration.py:86:6: SyntaxError: Expected dedent, found end of file
   |
84 |             msg = "Mutex name required for named mutex method"
85 |             raise ValueError(msg,
86 |     )
   |      ^
   |

src_refactored\domain\application_lifecycle\entities\startup_configuration.py:37:101: E501 Line too long (105 > 100)
   |
35 |             self.environment_variables = {
36 |                 "PYGAME_HIDE_SUPPORT_PROMPT": "hide",
37 |                 "PYTHONWARNINGS": "ignore::DeprecationWarning,ignore::SyntaxWarning,ignore::UserWarning",
   |                                                                                                     ^^^^^ E501
38 |                 "QT_LOGGING_RULES": "qt.gui.imageio=false;*.debug=false;qt.qpa.*=false",
39 |             }
   |

src_refactored\domain\application_lifecycle\entities\startup_configuration.py:77:74: PLR2004 Magic value used in comparison, consider replacing `65535` with a constant variable
   |
75 |             msg = "App name cannot be empty"
76 |             raise ValueError(msg)
77 |         if self.single_instance_port <= 0 or self.single_instance_port > 65535:
   |                                                                          ^^^^^ PLR2004
78 |             msg = "Single instance port must be between 1 and 65535"
79 |             raise ValueError(msg)
   |

src_refactored\domain\application_lifecycle\entities\window_info.py:72:56: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
   |
70 |             msg = "Window must have a handle"
71 |             raise ValueError(msg)
72 |         if self.rect is not None and len(self.rect) != 4:
   |                                                        ^ PLR2004
73 |             msg = "Window rect must have 4 coordinates"
74 |             raise ValueError(msg,
   |

src_refactored\domain\audio\entities\audio_device.py:43:13: SyntaxError: Expected ',', found name
   |
41 |             self.default_sample_rate,
42 |             tuple(self.supported_sample_rates)
43 |             self.latency_low,
   |             ^
44 |             self.latency_high,
45 |             self.host_api,
   |

src_refactored\domain\audio\entities\audio_file.py:44:70: SyntaxError: Expected an expression or a ')'
   |
42 |         try:
43 |             path_obj = Path(self.path)
44 |             if path_obj.is_absolute() and not path_obj.parent.exists(,
   |                                                                      ^
45 |     ):
46 |                 # Allow non-existent absolute paths for future creation
   |

src_refactored\domain\audio\entities\audio_file.py:157:31: SyntaxError: Expected an expression or a ')'
    |
155 |         """Update last accessed timestamp."""
156 |         self.last_accessed = datetime.now()
157 |         self.update_timestamp(,
    |                               ^
158 |     )
    |

src_refactored\domain\audio\entities\audio_session.py:98:40: SyntaxError: Expected an expression or a ')'
    |
 97 |         self.state = SessionState.PREPARING
 98 |         self.started_at = datetime.now(,
    |                                        ^
 99 |     )
100 |         self.recorded_data_size = 0
    |

src_refactored\domain\audio\entities\audio_session.py:165:101: E501 Line too long (101 > 100)
    |
163 |             # Business rule: Check minimum duration
164 |             if not actual_duration.is_minimum_duration:
165 |                 self.fail_session(f"Recording too short: {actual_duration.seconds}s. Minimum: {self.\
    |                                                                                                     ^ E501
166 |     minimum_duration.seconds}s")
167 |                 return
    |

src_refactored\domain\audio\entities\audio_session.py:175:46: SyntaxError: Expected an expression or a ')'
    |
174 |             # Success - complete the session
175 |             self.completed_at = datetime.now(,
    |                                              ^
176 |     )
177 |             self.state = SessionState.COMPLETED
    |

src_refactored\domain\audio\entities\audio_session.py:195:42: SyntaxError: Expected an expression or a ')'
    |
193 |         self.state = SessionState.FAILED
194 |         self.error_message = error_message
195 |         self.completed_at = datetime.now(,
    |                                          ^
196 |     )
    |

src_refactored\domain\audio\entities\recording_state.py:103:101: E501 Line too long (114 > 100)
    |
101 |         # Check if hotkey combination is no longer pressed
102 |         if not self._is_hotkey_combination_pressed():
103 |             if self.current_phase in [RecordingPhase.KEY_PRESSED, RecordingPhase.STARTING, RecordingPhase.ACTIVE]:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
104 |                 self._transition_to_phase(RecordingPhase.STOPPING)
    |

src_refactored\domain\audio\entities\recording_state.py:158:31: SyntaxError: Expected an expression or a ')'
    |
156 |         self.hotkey_combination = new_combination
157 |         self.keys_currently_pressed.clear()  # Clear any stale key states
158 |         self.update_timestamp(,
    |                               ^
159 |     )
    |

src_refactored\domain\audio\value_objects\__init__.py:13:40: F401 `.audio_format.AudioFormatType` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
11 | )
12 | from .audio_data import AudioBuffer, AudioData, StreamMetrics, StreamState
13 | from .audio_format import AudioFormat, AudioFormatType, BitDepth
   |                                        ^^^^^^^^^^^^^^^ F401
14 | from .audio_operations import (
15 |     AudioChunk,
   |
   = help: Add unused import `AudioFormatType` to __all__

src_refactored\domain\audio\value_objects\__init__.py:13:57: F401 `.audio_format.BitDepth` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
11 | )
12 | from .audio_data import AudioBuffer, AudioData, StreamMetrics, StreamState
13 | from .audio_format import AudioFormat, AudioFormatType, BitDepth
   |                                                         ^^^^^^^^ F401
14 | from .audio_operations import (
15 |     AudioChunk,
   |
   = help: Add unused import `BitDepth` to __all__

src_refactored\domain\audio\value_objects\__init__.py:73:5: F811 Redefinition of unused `ValidationCategory` from line 66
   |
71 | )
72 | from .validation_operations import (
73 |     ValidationCategory,
   |     ^^^^^^^^^^^^^^^^^^ F811
74 |     ValidationIssue,
75 |     ValidationResult,
   |
   = help: Remove definition: `ValidationCategory`

src_refactored\domain\audio\value_objects\__init__.py:74:5: F811 Redefinition of unused `ValidationIssue` from line 67
   |
72 | from .validation_operations import (
73 |     ValidationCategory,
74 |     ValidationIssue,
   |     ^^^^^^^^^^^^^^^ F811
75 |     ValidationResult,
76 |     ValidationRule,
   |
   = help: Remove definition: `ValidationIssue`

src_refactored\domain\audio\value_objects\__init__.py:75:5: F811 Redefinition of unused `ValidationResult` from line 68
   |
73 |     ValidationCategory,
74 |     ValidationIssue,
75 |     ValidationResult,
   |     ^^^^^^^^^^^^^^^^ F811
76 |     ValidationRule,
77 |     ValidationSeverity,
   |
   = help: Remove definition: `ValidationResult`

src_refactored\domain\audio\value_objects\__init__.py:76:5: F811 Redefinition of unused `ValidationRule` from line 69
   |
74 |     ValidationIssue,
75 |     ValidationResult,
76 |     ValidationRule,
   |     ^^^^^^^^^^^^^^ F811
77 |     ValidationSeverity,
78 |     ValidationType,
   |
   = help: Remove definition: `ValidationRule`

src_refactored\domain\audio\value_objects\__init__.py:77:5: F811 Redefinition of unused `ValidationSeverity` from line 70
   |
75 |     ValidationResult,
76 |     ValidationRule,
77 |     ValidationSeverity,
   |     ^^^^^^^^^^^^^^^^^^ F811
78 |     ValidationType,
79 | )
   |
   = help: Remove definition: `ValidationSeverity`

src_refactored\domain\audio\value_objects\audio_configuration.py:46:54: PLR2004 Magic value used in comparison, consider replacing `8192` with a constant variable
   |
44 |             msg = "Only mono and stereo audio supported"
45 |             raise ValueError(msg)
46 |         if self.chunk_size <= 0 or self.chunk_size > 8192:
   |                                                      ^^^^ PLR2004
47 |             msg = "Chunk size must be between 1 and 8192"
48 |             raise ValueError(msg)
   |

src_refactored\domain\audio\value_objects\audio_configuration.py:107:67: PLR2004 Magic value used in comparison, consider replacing `9` with a constant variable
    |
105 |             msg = "Unsupported bit depth"
106 |             raise ValueError(msg)
107 |         if self.compression_level < 0 or self.compression_level > 9:
    |                                                                   ^ PLR2004
108 |             msg = "Compression level must be between 0 and 9"
109 |             raise ValueError(msg)
    |

src_refactored\domain\audio\value_objects\audio_configuration.py:180:25: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
178 |             msg = "Volume must be between 0 and 1"
179 |             raise ValueError(msg)
180 |         if self.speed < 0.1 or self.speed > 4.0:
    |                         ^^^ PLR2004
181 |             msg = "Speed must be between 0.1 and 4.0"
182 |             raise ValueError(msg)
    |

src_refactored\domain\audio\value_objects\audio_configuration.py:180:45: PLR2004 Magic value used in comparison, consider replacing `4.0` with a constant variable
    |
178 |             msg = "Volume must be between 0 and 1"
179 |             raise ValueError(msg)
180 |         if self.speed < 0.1 or self.speed > 4.0:
    |                                             ^^^ PLR2004
181 |             msg = "Speed must be between 0.1 and 4.0"
182 |             raise ValueError(msg)
    |

src_refactored\domain\audio\value_objects\audio_data.py:159:13: SyntaxError: Expected ',', found name
    |
157 |             self.buffer_id,
158 |             tuple(self.data)
159 |             self.max_size,
    |             ^
160 |             self.current_size,
161 |             self.is_full,
    |

src_refactored\domain\audio\value_objects\audio_format.py:51:5: SyntaxError: Expected a statement
   |
50 |         # Validate channels (mono or stereo,
51 |     )
   |     ^
52 |         if self.channels not in [1, 2]:
53 |             msg = f"Invalid channels: {self.channels}. Must be 1 (mono) or 2 (stereo)"
   |

src_refactored\domain\audio\value_objects\audio_format.py:51:6: SyntaxError: Expected a statement
   |
50 |         # Validate channels (mono or stereo,
51 |     )
   |      ^
52 |         if self.channels not in [1, 2]:
53 |             msg = f"Invalid channels: {self.channels}. Must be 1 (mono) or 2 (stereo)"
   |

src_refactored\domain\audio\value_objects\audio_format.py:52:1: SyntaxError: Unexpected indentation
   |
50 |         # Validate channels (mono or stereo,
51 |     )
52 |         if self.channels not in [1, 2]:
   | ^
53 |             msg = f"Invalid channels: {self.channels}. Must be 1 (mono) or 2 (stereo)"
54 |             raise ValueError(msg)
   |

src_refactored\domain\audio\value_objects\audio_format.py:115:1: SyntaxError: Expected a statement
    |
115 | @dataclass(frozen=True)
    | ^
116 | class SampleRate(ValueObject):
117 |     """Value object for audio sample rate with validation."""
    |

src_refactored\domain\audio\value_objects\audio_quality.py:101:49: PLR2004 Magic value used in comparison, consider replacing `120` with a constant variable
    |
100 |     def __post_init__(self):
101 |         if self.decibels < 0 or self.decibels > 120:
    |                                                 ^^^ PLR2004
102 |             msg = f"Noise level must be between 0 and 120 dB, got: {self.decibels}"
103 |             raise ValueError(msg)
    |

src_refactored\domain\audio\value_objects\audio_quality.py:108:32: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
    |
106 |     def is_quiet(self) -> bool:
107 |         """Check if noise level is considered quiet."""
108 |         return self.decibels < 30
    |                                ^^ PLR2004
109 |
110 |     @property
    |

src_refactored\domain\audio\value_objects\audio_quality.py:113:16: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
    |
111 |     def is_moderate(self) -> bool:
112 |         """Check if noise level is moderate."""
113 |         return 30 <= self.decibels <= 60
    |                ^^ PLR2004
114 |
115 |     @property
    |

src_refactored\domain\audio\value_objects\audio_quality.py:113:39: PLR2004 Magic value used in comparison, consider replacing `60` with a constant variable
    |
111 |     def is_moderate(self) -> bool:
112 |         """Check if noise level is moderate."""
113 |         return 30 <= self.decibels <= 60
    |                                       ^^ PLR2004
114 |
115 |     @property
    |

src_refactored\domain\audio\value_objects\audio_quality.py:118:32: PLR2004 Magic value used in comparison, consider replacing `60` with a constant variable
    |
116 |     def is_loud(self) -> bool:
117 |         """Check if noise level is loud."""
118 |         return self.decibels > 60
    |                                ^^ PLR2004
119 |
120 |     @property
    |

src_refactored\domain\audio\value_objects\audio_track.py:273:17: SyntaxError: Expected ',', found string
    |
271 |             metadata={
272 |                 "recording_start": self.start_time.isoformat()
273 |                 "recording_end": self.end_time.isoformat() if self.end_time else None,
    |                 ^
274 |                 "device_name": self.device_name,
275 |                 "notes": self.notes,
    |

src_refactored\domain\audio\value_objects\audio_track.py:297:31: SyntaxError: Expected an expression or a ')'
    |
295 |     def _get_equality_components(self) -> tuple:
296 |         return (
297 |             self.data.tobytes(,
    |                               ^
298 |     ) if self.data is not None else None,
299 |             self.metadata,
    |

src_refactored\domain\audio\value_objects\duration.py:58:31: PLR2004 Magic value used in comparison, consider replacing `5.0` with a constant variable
   |
56 |     def is_short(self) -> bool:
57 |         """Check if duration is considered short (< 5 seconds)."""
58 |         return self.seconds < 5.0
   |                               ^^^ PLR2004
59 |
60 |     @property
   |

src_refactored\domain\audio\value_objects\duration.py:63:31: PLR2004 Magic value used in comparison, consider replacing `60.0` with a constant variable
   |
61 |     def is_long(self) -> bool:
62 |         """Check if duration is considered long (> 60 seconds)."""
63 |         return self.seconds > 60.0
   |                               ^^^^ PLR2004
64 |
65 |     def format_time(self) -> str:
   |

src_refactored\domain\audio\value_objects\listener_operations.py:65:9: SIM102 Use a single `if` statement instead of nested `if` statements
   |
63 |       def __invariants__(self) -> None:
64 |           """Validate listener event data invariants."""
65 | /         if self.event_type == ListenerEvent.STATE_CHANGED:
66 | |             if self.state_before is None or self.state_after is None:
   | |_____________________________________________________________________^ SIM102
67 |                   msg = "State change events must have before and after states"
68 |                   raise ValueError(msg)
   |
   = help: Combine `if` statements using `and`

src_refactored\domain\audio\value_objects\listener_operations.py:72:9: SIM102 Use a single `if` statement instead of nested `if` statements
   |
70 |               msg = "Error events must have an error message"
71 |               raise ValueError(msg)
72 | /         if self.event_type == ListenerEvent.TRANSCRIPTION_COMPLETED:
73 | |             if not self.transcription_text:
   | |___________________________________________^ SIM102
74 |                   msg = "Transcription completed events must have transcription text"
75 |                   raise ValueError(msg)
   |
   = help: Combine `if` statements using `and`

src_refactored\domain\audio\value_objects\playback_result.py:34:101: E501 Line too long (112 > 100)
   |
32 |     def is_file_related(self) -> bool:
33 |         """Check if the result is related to file issues."""
34 |         return self in [PlaybackResult.FILE_ERROR, PlaybackResult.FORMAT_ERROR, PlaybackResult.PERMISSION_ERROR]
   |                                                                                                     ^^^^^^^^^^^^ E501
35 |
36 |     @property
   |

src_refactored\domain\audio\value_objects\sample_rate.py:44:30: PLR2004 Magic value used in comparison, consider replacing `16000` with a constant variable
   |
42 |     def is_speech_quality(self) -> bool:
43 |         """Check if sample rate is suitable for speech recognition."""
44 |         return self.value >= 16000
   |                              ^^^^^ PLR2004
45 |
46 |     @property
   |

src_refactored\domain\audio\value_objects\service_requests.py:78:51: SyntaxError: Expected an expression or a ')'
   |
77 |     def _get_equality_components(self) -> tuple:
78 |         return (*super()._get_equality_components(,
   |                                                   ^
79 |     ), self.configuration, self.device_id)
   |

src_refactored\domain\audio\value_objects\service_requests.py:91:101: E501 Line too long (105 > 100)
   |
90 |     def _get_equality_components(self) -> tuple:
91 |         return (*super()._get_equality_components(), self.configuration, self.device_id, self.audio_data)
   |                                                                                                     ^^^^^ E501
   |

src_refactored\domain\audio\value_objects\service_requests.py:103:101: E501 Line too long (106 > 100)
    |
102 |     def _get_equality_components(self) -> tuple:
103 |         return (*super()._get_equality_components(), self.configuration, self.device_id, self.buffer_size)
    |                                                                                                     ^^^^^^ E501
    |

src_refactored\domain\audio\value_objects\service_requests.py:116:17: SyntaxError: Starred expression cannot be used here
    |
115 |     def _get_equality_components(self) -> tuple:
116 |         return (*super()._get_equality_components(,
    |                 ^
117 |     )
118 |         self.device_id, self.test_duration_seconds, self.sample_rate, self.audio_format)
    |

src_refactored\domain\audio\value_objects\service_requests.py:116:51: SyntaxError: Expected an expression or a ')'
    |
115 |     def _get_equality_components(self) -> tuple:
116 |         return (*super()._get_equality_components(,
    |                                                   ^
117 |     )
118 |         self.device_id, self.test_duration_seconds, self.sample_rate, self.audio_format)
    |

src_refactored\domain\audio\value_objects\service_requests.py:118:9: SyntaxError: Expected ')', found name
    |
116 |         return (*super()._get_equality_components(,
117 |     )
118 |         self.device_id, self.test_duration_seconds, self.sample_rate, self.audio_format)
    |         ^
119 |
120 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:118:88: SyntaxError: Expected a statement
    |
116 |         return (*super()._get_equality_components(,
117 |     )
118 |         self.device_id, self.test_duration_seconds, self.sample_rate, self.audio_format)
    |                                                                                        ^
119 |
120 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:118:89: SyntaxError: Expected a statement
    |
116 |         return (*super()._get_equality_components(,
117 |     )
118 |         self.device_id, self.test_duration_seconds, self.sample_rate, self.audio_format)
    |                                                                                         ^
119 |
120 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:185:51: SyntaxError: Expected an expression or a ')'
    |
184 |     def _get_equality_components(self) -> tuple:
185 |         return (*super()._get_equality_components(,
    |                                                   ^
186 |     ), self.stream_id, self.frames_processed, self.latency_ms)
    |

src_refactored\domain\audio\value_objects\service_requests.py:199:17: SyntaxError: Starred expression cannot be used here
    |
198 |     def _get_equality_components(self) -> tuple:
199 |         return (*super()._get_equality_components()
    |                 ^
200 |         self.stream_id, self.actual_sample_rate, self.actual_buffer_size, self.device_latency_ms)
    |

src_refactored\domain\audio\value_objects\service_requests.py:200:9: SyntaxError: Expected ')', found name
    |
198 |     def _get_equality_components(self) -> tuple:
199 |         return (*super()._get_equality_components()
200 |         self.stream_id, self.actual_sample_rate, self.actual_buffer_size, self.device_latency_ms)
    |         ^
    |

src_refactored\domain\audio\value_objects\service_requests.py:200:97: SyntaxError: Expected a statement
    |
198 |     def _get_equality_components(self) -> tuple:
199 |         return (*super()._get_equality_components()
200 |         self.stream_id, self.actual_sample_rate, self.actual_buffer_size, self.device_latency_ms)
    |                                                                                                 ^
    |

src_refactored\domain\audio\value_objects\service_requests.py:200:98: SyntaxError: Expected a statement
    |
198 |     def _get_equality_components(self) -> tuple:
199 |         return (*super()._get_equality_components()
200 |         self.stream_id, self.actual_sample_rate, self.actual_buffer_size, self.device_latency_ms)
    |                                                                                                  ^
    |

src_refactored\domain\audio\value_objects\service_requests.py:213:17: SyntaxError: Starred expression cannot be used here
    |
212 |     def _get_equality_components(self) -> tuple:
213 |         return (*super()._get_equality_components(,
    |                 ^
214 |     )
215 |         self.buffer_id, self.frames_written, self.frames_read, self.buffer_utilization)
    |

src_refactored\domain\audio\value_objects\service_requests.py:213:51: SyntaxError: Expected an expression or a ')'
    |
212 |     def _get_equality_components(self) -> tuple:
213 |         return (*super()._get_equality_components(,
    |                                                   ^
214 |     )
215 |         self.buffer_id, self.frames_written, self.frames_read, self.buffer_utilization)
    |

src_refactored\domain\audio\value_objects\service_requests.py:215:9: SyntaxError: Expected ')', found name
    |
213 |         return (*super()._get_equality_components(,
214 |     )
215 |         self.buffer_id, self.frames_written, self.frames_read, self.buffer_utilization)
    |         ^
216 |
217 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:215:87: SyntaxError: Expected a statement
    |
213 |         return (*super()._get_equality_components(,
214 |     )
215 |         self.buffer_id, self.frames_written, self.frames_read, self.buffer_utilization)
    |                                                                                       ^
216 |
217 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:215:88: SyntaxError: Expected a statement
    |
213 |         return (*super()._get_equality_components(,
214 |     )
215 |         self.buffer_id, self.frames_written, self.frames_read, self.buffer_utilization)
    |                                                                                        ^
216 |
217 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:239:17: SyntaxError: Starred expression cannot be used here
    |
238 |     def _get_equality_components(self) -> tuple:
239 |         return (*super()._get_equality_components(,
    |                 ^
240 |     )
241 |         self.device_count, self.default_input_device, self.default_output_device)
    |

src_refactored\domain\audio\value_objects\service_requests.py:239:51: SyntaxError: Expected an expression or a ')'
    |
238 |     def _get_equality_components(self) -> tuple:
239 |         return (*super()._get_equality_components(,
    |                                                   ^
240 |     )
241 |         self.device_count, self.default_input_device, self.default_output_device)
    |

src_refactored\domain\audio\value_objects\service_requests.py:241:9: SyntaxError: Expected ')', found name
    |
239 |         return (*super()._get_equality_components(,
240 |     )
241 |         self.device_count, self.default_input_device, self.default_output_device)
    |         ^
242 |
243 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:241:81: SyntaxError: Expected a statement
    |
239 |         return (*super()._get_equality_components(,
240 |     )
241 |         self.device_count, self.default_input_device, self.default_output_device)
    |                                                                                 ^
242 |
243 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:241:82: SyntaxError: Expected a statement
    |
239 |         return (*super()._get_equality_components(,
240 |     )
241 |         self.device_count, self.default_input_device, self.default_output_device)
    |                                                                                  ^
242 |
243 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:261:17: SyntaxError: Starred expression cannot be used here
    |
260 |     def _get_equality_components(self) -> tuple:
261 |         return (*super()._get_equality_components(,
    |                 ^
262 |     )
263 |         self.device_id, self.test_passed, self.latency_ms, self.max_sample_rate, tuple(self.supported_formats))
    |

src_refactored\domain\audio\value_objects\service_requests.py:261:51: SyntaxError: Expected an expression or a ')'
    |
260 |     def _get_equality_components(self) -> tuple:
261 |         return (*super()._get_equality_components(,
    |                                                   ^
262 |     )
263 |         self.device_id, self.test_passed, self.latency_ms, self.max_sample_rate, tuple(self.supported_formats))
    |

src_refactored\domain\audio\value_objects\service_requests.py:263:9: SyntaxError: Expected ')', found name
    |
261 |         return (*super()._get_equality_components(,
262 |     )
263 |         self.device_id, self.test_passed, self.latency_ms, self.max_sample_rate, tuple(self.supported_formats))
    |         ^
264 |
265 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:263:101: E501 Line too long (111 > 100)
    |
261 |         return (*super()._get_equality_components(,
262 |     )
263 |         self.device_id, self.test_passed, self.latency_ms, self.max_sample_rate, tuple(self.supported_formats))
    |                                                                                                     ^^^^^^^^^^^ E501
264 |
265 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:263:111: SyntaxError: Expected a statement
    |
261 |         return (*super()._get_equality_components(,
262 |     )
263 |         self.device_id, self.test_passed, self.latency_ms, self.max_sample_rate, tuple(self.supported_formats))
    |                                                                                                               ^
264 |
265 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\service_requests.py:263:112: SyntaxError: Expected a statement
    |
261 |         return (*super()._get_equality_components(,
262 |     )
263 |         self.device_id, self.test_passed, self.latency_ms, self.max_sample_rate, tuple(self.supported_formats))
    |                                                                                                                ^
264 |
265 |     def __invariants__(self) -> None:
    |

src_refactored\domain\audio\value_objects\status_metrics.py:84:30: SyntaxError: Expected an indented block after `if` statement
   |
83 |         bits_per_sample = 16  # Default assumption
84 |         if self.audio_format:
   |                              ^
85 |             # Map format to bit depth (simplified,
86 |     )
   |

src_refactored\domain\audio\value_objects\status_metrics.py:86:5: SyntaxError: Expected a statement
   |
84 |         if self.audio_format:
85 |             # Map format to bit depth (simplified,
86 |     )
   |     ^
87 |             format_bits = {
88 |                 AudioFormat.PCM_16: 16,
   |

src_refactored\domain\audio\value_objects\status_metrics.py:86:6: SyntaxError: Expected a statement
   |
84 |         if self.audio_format:
85 |             # Map format to bit depth (simplified,
86 |     )
   |      ^
87 |             format_bits = {
88 |                 AudioFormat.PCM_16: 16,
   |

src_refactored\domain\audio\value_objects\status_metrics.py:87:1: SyntaxError: Unexpected indentation
   |
85 |             # Map format to bit depth (simplified,
86 |     )
87 |             format_bits = {
   | ^
88 |                 AudioFormat.PCM_16: 16,
89 |                 AudioFormat.PCM_24: 24,
   |

src_refactored\domain\audio\value_objects\status_metrics.py:95:1: SyntaxError: unindent does not match any outer indentation level
   |
93 |             bits_per_sample = format_bits.get(self.audio_format, 16)
94 |
95 |         return int(self.sample_rate.value * self.channels * bits_per_sample)
   | ^
96 |
97 |     @property
   |

src_refactored\domain\audio\value_objects\status_metrics.py:177:1: SyntaxError: Unexpected indentation
    |
175 | remaining_seconds = (
176 |     max(0, self.total_duration.total_seconds - self.current_position.total_seconds))
177 |         return Duration.from_seconds(remaining_seconds)
    | ^
178 |
179 |     @property
    |

src_refactored\domain\audio\value_objects\status_metrics.py:179:1: SyntaxError: unindent does not match any outer indentation level
    |
177 |         return Duration.from_seconds(remaining_seconds)
178 |
179 |     @property
    | ^
180 |     def effective_volume(self) -> float:
181 |         """Get effective volume (considering mute state)."""
    |

src_refactored\domain\audio\value_objects\status_metrics.py:180:1: SyntaxError: Expected class, function definition or async function definition after decorator
    |
179 |     @property
180 |     def effective_volume(self) -> float:
    | ^
181 |         """Get effective volume (considering mute state)."""
182 |         return 0.0 if self.is_muted else self.volume_level
    |

src_refactored\domain\audio\value_objects\status_metrics.py:199:1: SyntaxError: Expected a statement
    |
199 | @dataclass(frozen=True)
    | ^
200 | class RecordingMetrics(ValueObject):
201 |     """Recording performance metrics."""
    |

src_refactored\domain\audio\value_objects\validation.py:229:13: SyntaxError: Expected ',', found name
    |
227 |             self.is_valid,
228 |             tuple(self.issues)
229 |             self.audio_info,
    |             ^
230 |             self.validation_time,
231 |             tuple(self.rules_applied),
    |

src_refactored\domain\audio\value_objects\validation_operations.py:95:13: SyntaxError: Expected ',', found name
   |
93 |             self.field_path,
94 |             str(self.actual_value)
95 |             str(self.expected_value),
   |             ^
96 |         )
   |

src_refactored\domain\audio\value_objects\validation_operations.py:121:13: SyntaxError: Expected ',', found name
    |
119 |             self.is_valid,
120 |             tuple(self.issues)
121 |             self.validation_type,
    |             ^
122 |             self.timestamp,
123 |         )
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:142:17: TRY300 Consider moving this statement to an `else` block
    |
141 |                 self._change_status(ProcessorStatus.RUNNING)
142 |                 return True
    |                 ^^^^^^^^^^^ TRY300
143 |
144 |             except Exception as e:
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:144:20: BLE001 Do not catch blind exception: `Exception`
    |
142 |                 return True
143 |
144 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
145 |                 self._change_status(ProcessorStatus.ERROR)
146 |                 self._handle_error(e)
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:167:17: TRY300 Consider moving this statement to an `else` block
    |
165 |                 self._processing_thread = None
166 |                 self._change_status(ProcessorStatus.STOPPED)
167 |                 return True
    |                 ^^^^^^^^^^^ TRY300
168 |
169 |             except Exception as e:
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:169:20: BLE001 Do not catch blind exception: `Exception`
    |
167 |                 return True
168 |
169 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
170 |                 self._change_status(ProcessorStatus.ERROR)
171 |                 self._handle_error(e)
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:239:41: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
237 |             self.total_samples_processed += len(samples)
238 |             self.total_chunks_processed += 1
239 |             self.last_processing_time = datetime.now()
    |                                         ^^^^^^^^^^^^^^ DTZ005
240 |
241 |             # Update average processing time
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\domain\audio_visualization\entities\audio_processor.py:249:24: BLE001 Do not catch blind exception: `Exception`
    |
247 |                 try:
248 |                     self.data_callback(waveform)
249 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
250 |                     self._handle_error(e)
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:252:13: TRY300 Consider moving this statement to an `else` block
    |
250 |                     self._handle_error(e)
251 |
252 |             return waveform
    |             ^^^^^^^^^^^^^^^ TRY300
253 |
254 |         except Exception as e:
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:254:16: BLE001 Do not catch blind exception: `Exception`
    |
252 |             return waveform
253 |
254 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
255 |             self.processing_errors += 1
256 |             self._handle_error(e)
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:279:101: E501 Line too long (113 > 100)
    |
277 |             "total_chunks_processed": self.total_chunks_processed,
278 |             "processing_errors": self.processing_errors,
279 |             "last_processing_time": self.last_processing_time.isoformat() if self.last_processing_time else None,
    |                                                                                                     ^^^^^^^^^^^^^ E501
280 |             "average_processing_time_ms": self.average_processing_time_ms,
281 |             "sample_rate": self.config.sample_rate,
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:316:27: NPY002 Replace legacy `np.random.normal` call with `np.random.Generator`
    |
314 |             try:
315 |                 # Generate dummy audio data for testing
316 |                 samples = np.random.normal(0, 0.1, self.config.chunk_size).astype(np.float32)
    |                           ^^^^^^^^^^^^^^^^ NPY002
317 |                 self.process_samples(samples)
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:321:20: BLE001 Do not catch blind exception: `Exception`
    |
319 |                 time.sleep(interval)
320 |
321 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
322 |                 self._handle_error(e)
323 |                 break
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:371:13: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    |
370 |           if self.status_callback and old_status != new_status:
371 | /             try:
372 | |                 self.status_callback(new_status)
373 | |             except Exception:
374 | |                 # Don't let callback errors affect status change
375 | |                 pass
    | |____________________^ SIM105
376 |
377 |       def _handle_error(self, error: Exception,
    |
    = help: Replace with `contextlib.suppress(Exception)`

src_refactored\domain\audio_visualization\entities\audio_processor.py:373:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
371 |               try:
372 |                   self.status_callback(new_status)
373 | /             except Exception:
374 | |                 # Don't let callback errors affect status change
375 | |                 pass
    | |____________________^ S110
376 |
377 |       def _handle_error(self, error: Exception,
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:373:20: BLE001 Do not catch blind exception: `Exception`
    |
371 |             try:
372 |                 self.status_callback(new_status)
373 |             except Exception:
    |                    ^^^^^^^^^ BLE001
374 |                 # Don't let callback errors affect status change
375 |                 pass
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:381:13: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    |
379 |           """Handle processing errors."""
380 |           if self.error_callback:
381 | /             try:
382 | |                 self.error_callback(error)
383 | |             except Exception:
384 | |                 # Don't let callback errors cause more errors
385 | |                 pass
    | |____________________^ SIM105
386 |
387 |       def is_running(self) -> bool:
    |
    = help: Replace with `contextlib.suppress(Exception)`

src_refactored\domain\audio_visualization\entities\audio_processor.py:383:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
381 |               try:
382 |                   self.error_callback(error)
383 | /             except Exception:
384 | |                 # Don't let callback errors cause more errors
385 | |                 pass
    | |____________________^ S110
386 |
387 |       def is_running(self) -> bool:
    |

src_refactored\domain\audio_visualization\entities\audio_processor.py:383:20: BLE001 Do not catch blind exception: `Exception`
    |
381 |             try:
382 |                 self.error_callback(error)
383 |             except Exception:
    |                    ^^^^^^^^^ BLE001
384 |                 # Don't let callback errors cause more errors
385 |                 pass
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:210:40: SyntaxError: Expected an expression or a ')'
    |
208 |             # Create frame
209 |             frame = VisualizationFrame(
210 |                 timestamp=datetime.now(,
    |                                        ^
211 |     )
212 |                 data=vis_data,
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:212:17: SyntaxError: Expected ',', found name
    |
210 |                 timestamp=datetime.now(,
211 |     )
212 |                 data=vis_data,
    |                 ^
213 |                 settings=self.settings,
214 |                 metadata={
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:486:1: SyntaxError: Unexpected indentation
    |
485 |         # Update average render time
486 |         alpha = 0.1  # Smoothing factor
    | ^
487 |         if self.statistics.average_render_time_ms == 0.0:
488 |             self.statistics.average_render_time_ms = render_time_ms
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:510:5: SyntaxError: unindent does not match any outer indentation level
    |
508 |     ) / time_span
509 |
510 |     def _change_status(self, new_status: VisualizerStatus,
    |     ^
511 |     ) -> None:
512 |         """Change visualizer status and notify callback."""
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:523:5: SyntaxError: unindent does not match any outer indentation level
    |
521 |                 pass
522 |
523 |     def _handle_error(self, error: Exception,
    |     ^
524 |     ) -> None:
525 |         """Handle rendering errors."""
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:533:5: SyntaxError: unindent does not match any outer indentation level
    |
531 |                 pass
532 |
533 |     def is_running(self) -> bool:
    |     ^
534 |         """Check if visualizer is running."""
535 |         return self.status == VisualizerStatus.RUNNING
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:537:1: SyntaxError: unindent does not match any outer indentation level
    |
535 |         return self.status == VisualizerStatus.RUNNING
536 |
537 |     def is_stopped(self) -> bool:
    | ^
538 |         """Check if visualizer is stopped."""
539 |         return self.status == VisualizerStatus.STOPPED
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:541:1: SyntaxError: unindent does not match any outer indentation level
    |
539 |         return self.status == VisualizerStatus.STOPPED
540 |
541 |     def is_paused(self) -> bool:
    | ^
542 |         """Check if visualizer is paused."""
543 |         return self.status == VisualizerStatus.PAUSED
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:545:1: SyntaxError: unindent does not match any outer indentation level
    |
543 |         return self.status == VisualizerStatus.PAUSED
544 |
545 |     def has_error(self) -> bool:
    | ^
546 |         """Check if visualizer has an error."""
547 |         return self.status == VisualizerStatus.ERROR
    |

src_refactored\domain\audio_visualization\entities\visualizer.py:547:53: SyntaxError: Expected dedent, found end of file
    |
545 |     def has_error(self) -> bool:
546 |         """Check if visualizer has an error."""
547 |         return self.status == VisualizerStatus.ERROR
    |                                                     ^
    |

src_refactored\domain\audio_visualization\value_objects\audio_buffer.py:298:13: SyntaxError: Expected ',', found string
    |
296 |         return {
297 |             "count": len(self.data)
298 |             "total_duration": self.get_total_duration()
    |             ^
299 |             "total_samples": self.get_total_samples()
300 |             "average_rms": self.get_average_level()
    |

src_refactored\domain\audio_visualization\value_objects\audio_buffer.py:299:13: SyntaxError: Expected ',', found string
    |
297 |             "count": len(self.data)
298 |             "total_duration": self.get_total_duration()
299 |             "total_samples": self.get_total_samples()
    |             ^
300 |             "average_rms": self.get_average_level()
301 |             "peak_level": self.get_peak_level()
    |

src_refactored\domain\audio_visualization\value_objects\audio_buffer.py:300:13: SyntaxError: Expected ',', found string
    |
298 |             "total_duration": self.get_total_duration()
299 |             "total_samples": self.get_total_samples()
300 |             "average_rms": self.get_average_level()
    |             ^
301 |             "peak_level": self.get_peak_level()
302 |             "fill_percentage": self.get_fill_percentage()
    |

src_refactored\domain\audio_visualization\value_objects\audio_buffer.py:301:13: SyntaxError: Expected ',', found string
    |
299 |             "total_samples": self.get_total_samples()
300 |             "average_rms": self.get_average_level()
301 |             "peak_level": self.get_peak_level()
    |             ^
302 |             "fill_percentage": self.get_fill_percentage()
303 |             "is_full": self.is_full(),
    |

src_refactored\domain\audio_visualization\value_objects\audio_buffer.py:302:13: SyntaxError: Expected ',', found string
    |
300 |             "average_rms": self.get_average_level()
301 |             "peak_level": self.get_peak_level()
302 |             "fill_percentage": self.get_fill_percentage()
    |             ^
303 |             "is_full": self.is_full(),
304 |         }
    |

src_refactored\domain\audio_visualization\value_objects\audio_buffer.py:303:13: SyntaxError: Expected ',', found string
    |
301 |             "peak_level": self.get_peak_level()
302 |             "fill_percentage": self.get_fill_percentage()
303 |             "is_full": self.is_full(),
    |             ^
304 |         }
    |

src_refactored\domain\audio_visualization\value_objects\visualization_settings.py:102:47: PLR2004 Magic value used in comparison, consider replacing `120.0` with a constant variable
    |
100 |             raise ValueError(msg)
101 |
102 |         if not (1.0 <= self.update_rate_hz <= 120.0):
    |                                               ^^^^^ PLR2004
103 |             msg = "Update rate must be between 1 and 120 Hz"
104 |             raise ValueError(msg)
    |

src_refactored\domain\audio_visualization\value_objects\visualization_settings.py:110:17: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
108 |             raise ValueError(msg)
109 |
110 |         if not (0.1 <= self.sensitivity <= 10.0):
    |                 ^^^ PLR2004
111 |             msg = "Sensitivity must be between 0.1 and 10.0"
112 |             raise ValueError(msg)
    |

src_refactored\domain\audio_visualization\value_objects\visualization_settings.py:110:44: PLR2004 Magic value used in comparison, consider replacing `10.0` with a constant variable
    |
108 |             raise ValueError(msg)
109 |
110 |         if not (0.1 <= self.sensitivity <= 10.0):
    |                                            ^^^^ PLR2004
111 |             msg = "Sensitivity must be between 0.1 and 10.0"
112 |             raise ValueError(msg)
    |

src_refactored\domain\audio_visualization\value_objects\visualization_settings.py:136:17: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
134 |             raise ValueError(msg)
135 |
136 |         if not (0.1 <= self.normalization_target <= 1.0):
    |                 ^^^ PLR2004
137 |             msg = "Normalization target must be between 0.1 and 1.0"
138 |             raise ValueError(msg)
    |

src_refactored\domain\audio_visualization\value_objects\visualization_settings.py:140:50: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
138 |             raise ValueError(msg)
139 |
140 |         if not (0.0 <= self.silence_threshold <= 0.1):
    |                                                  ^^^ PLR2004
141 |             msg = "Silence threshold must be between 0.0 and 0.1"
142 |             raise ValueError(msg,
    |

src_refactored\domain\audio_visualization\value_objects\visualization_settings.py:290:39: PLR2004 Magic value used in comparison, consider replacing `15.0` with a constant variable
    |
288 |     def is_real_time(self) -> bool:
289 |         """Check if settings are suitable for real-time visualization."""
290 |         return self.update_rate_hz >= 15.0 and self.buffer_size <= 200
    |                                       ^^^^ PLR2004
291 |
292 |     def requires_fft(self) -> bool:
    |

src_refactored\domain\audio_visualization\value_objects\visualization_settings.py:290:68: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
288 |     def is_real_time(self) -> bool:
289 |         """Check if settings are suitable for real-time visualization."""
290 |         return self.update_rate_hz >= 15.0 and self.buffer_size <= 200
    |                                                                    ^^^ PLR2004
291 |
292 |     def requires_fft(self) -> bool:
    |

src_refactored\domain\audio_visualization\value_objects\waveform_data.py:125:13: SyntaxError: Expected ',', found name
    |
123 |             duration_ms=new_duration,
124 |             rms_level=min(new_rms, 1.0)
125 |             peak_level=min(new_peak, 1.0)
    |             ^
126 |             timestamp_ms=self.timestamp_ms,
127 |         )
    |

src_refactored\domain\audio_visualization\value_objects\waveform_data.py:126:13: SyntaxError: Expected ',', found name
    |
124 |             rms_level=min(new_rms, 1.0)
125 |             peak_level=min(new_peak, 1.0)
126 |             timestamp_ms=self.timestamp_ms,
    |             ^
127 |         )
    |

src_refactored\domain\audio_visualization\value_objects\waveform_data.py:135:36: SyntaxError: Unparenthesized generator expression cannot be used here
    |
134 |         scale_factor = target_peak / self.peak_level
135 |         normalized_samples = tuple(sample * scale_factor for sample in self.samples,
    |                                    ^
136 |     )
    |

src_refactored\domain\audio_visualization\value_objects\waveform_data.py:143:13: SyntaxError: Expected ',', found name
    |
141 |             duration_ms=self.duration_ms,
142 |             rms_level=min(self.rms_level * scale_factor, 1.0)
143 |             peak_level=min(self.peak_level * scale_factor, 1.0)
    |             ^
144 |             timestamp_ms=self.timestamp_ms,
145 |         )
    |

src_refactored\domain\audio_visualization\value_objects\waveform_data.py:144:13: SyntaxError: Expected ',', found name
    |
142 |             rms_level=min(self.rms_level * scale_factor, 1.0)
143 |             peak_level=min(self.peak_level * scale_factor, 1.0)
144 |             timestamp_ms=self.timestamp_ms,
    |             ^
145 |         )
    |

src_refactored\domain\audio_visualization\value_objects\waveform_data.py:174:13: SyntaxError: Expected ',', found name
    |
172 |             duration_ms=self.duration_ms,
173 |             rms_level=min(new_rms, 1.0)
174 |             peak_level=min(new_peak, 1.0)
    |             ^
175 |             timestamp_ms=self.timestamp_ms,
176 |         )
    |

src_refactored\domain\audio_visualization\value_objects\waveform_data.py:175:13: SyntaxError: Expected ',', found name
    |
173 |             rms_level=min(new_rms, 1.0)
174 |             peak_level=min(new_peak, 1.0)
175 |             timestamp_ms=self.timestamp_ms,
    |             ^
176 |         )
    |

src_refactored\domain\common\abstractions.py:274:38: SyntaxError: Expected an expression or a ')'
    |
272 |             object.__setattr__(self, "entity_id", str(uuid.uuid4()))
273 |         if not self.created_at:
274 |             current_time = time.time(,
    |                                      ^
275 |     )
276 |             object.__setattr__(self, "created_at", current_time)
    |

src_refactored\domain\common\entities\download_progress.py:43:25: PLR2004 Magic value used in comparison, consider replacing `1024` with a constant variable
   |
41 |     def format_human_readable(self) -> str:
42 |         """Format as human-readable string."""
43 |         if self.bytes < 1024:
   |                         ^^^^ PLR2004
44 |             return f"{self.bytes} B"
45 |         if self.bytes < 1024 * 1024:
   |

src_refactored\domain\common\entities\download_progress.py:64:36: PLR2004 Magic value used in comparison, consider replacing `1024` with a constant variable
   |
62 |     def format_human_readable(self) -> str:
63 |         """Format as human-readable string."""
64 |         if self.bytes_per_second < 1024:
   |                                    ^^^^ PLR2004
65 |             return f"{self.bytes_per_second:.1f} B/s"
66 |         if self.bytes_per_second < 1024 * 1024:
   |

src_refactored\domain\common\entities\download_progress.py:102:101: E501 Line too long (134 > 100)
    |
101 |         message = (
102 |             f"Downloading {self.filename}: {self.downloaded_size.format_human_readable()} / {self.total_size.format_human_readable()}"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
103 |         )
104 |         if self.transfer_rate.bytes_per_second > 0:
    |

src_refactored\domain\common\entities\processing_status.py:49:9: SyntaxError: Expected ',', found name
   |
47 |         state=ProcessingState.PENDING,
48 |         progress=ProgressPercentage(0.0)
49 |         message="Initializing...",
   |         ^
50 |     ))
   |

src_refactored\domain\common\entities\processing_status.py:68:13: SyntaxError: Expected ',', found name
   |
66 |             state=ProcessingState.COMPLETED,
67 |             progress=ProgressPercentage(100.0)
68 |             message=message,
   |             ^
69 |         )
70 |         self.updated_at = datetime.now()
   |

src_refactored\domain\common\entity.py:63:29: SyntaxError: Expected an expression or a ')'
   |
61 |             msg = "Entity ID cannot be None"
62 |             raise ValueError(msg)
63 |         self.__invariants__(,
   |                             ^
64 |     )
   |

src_refactored\domain\common\progress_callback.py:96:13: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    |
 94 |           """Report progress to all registered callbacks."""
 95 |           for callback in self.callbacks:
 96 | /             try:
 97 | |                 callback(progress, message, error)
 98 | |             except Exception:
 99 | |                 # Silently ignore callback errors to prevent cascading failures
100 | |                 pass
    | |____________________^ SIM105
    |
    = help: Replace with `contextlib.suppress(Exception)`

src_refactored\domain\common\progress_callback.py:98:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
 96 |               try:
 97 |                   callback(progress, message, error)
 98 | /             except Exception:
 99 | |                 # Silently ignore callback errors to prevent cascading failures
100 | |                 pass
    | |____________________^ S110
    |

src_refactored\domain\common\progress_callback.py:98:20: BLE001 Do not catch blind exception: `Exception`
    |
 96 |             try:
 97 |                 callback(progress, message, error)
 98 |             except Exception:
    |                    ^^^^^^^^^ BLE001
 99 |                 # Silently ignore callback errors to prevent cascading failures
100 |                 pass
    |

src_refactored\domain\common\result.py:42:20: BLE001 Do not catch blind exception: `Exception`
   |
40 |             try:
41 |                 return Result.success(func(self.value))
42 |             except Exception as e:
   |                    ^^^^^^^^^ BLE001
43 |                 return Result.failure(str(e))
44 |         return Result.failure(self.error or "Unknown error")
   |

src_refactored\domain\common\value_object.py:15:7: B024 `ValueObject` is an abstract base class, but it has no abstract methods or properties
   |
14 | @dataclass(frozen=True)
15 | class ValueObject(ABC):
   |       ^^^^^^^^^^^ B024
16 |     """
17 |     Base class for all value objects in the domain.
   |

src_refactored\domain\common\value_object.py:41:37: PLR2004 Magic value used in comparison, consider replacing `100.0` with a constant variable
   |
40 |     def __post_init__(self):
41 |         if not 0.0 <= self.value <= 100.0:
   |                                     ^^^^^ PLR2004
42 |             msg = f"Progress percentage must be between 0 and 100, got {self.value}"
43 |             raise ValueError(msg)
   |

src_refactored\domain\common\value_objects.py:23:25: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
   |
22 |     def __post_init__(self):
23 |         if self.width < 100 or self.width > 3840:
   |                         ^^^ PLR2004
24 |             msg = f"Invalid width: {self.width}. Must be between 100 and 3840."
25 |             raise ValueError(msg)
   |

src_refactored\domain\common\value_objects.py:23:45: PLR2004 Magic value used in comparison, consider replacing `3840` with a constant variable
   |
22 |     def __post_init__(self):
23 |         if self.width < 100 or self.width > 3840:
   |                                             ^^^^ PLR2004
24 |             msg = f"Invalid width: {self.width}. Must be between 100 and 3840."
25 |             raise ValueError(msg)
   |

src_refactored\domain\common\value_objects.py:26:26: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
   |
24 |             msg = f"Invalid width: {self.width}. Must be between 100 and 3840."
25 |             raise ValueError(msg)
26 |         if self.height < 100 or self.height > 2160:
   |                          ^^^ PLR2004
27 |             msg = f"Invalid height: {self.height}. Must be between 100 and 2160."
28 |             raise ValueError(msg)
   |

src_refactored\domain\common\value_objects.py:26:47: PLR2004 Magic value used in comparison, consider replacing `2160` with a constant variable
   |
24 |             msg = f"Invalid width: {self.width}. Must be between 100 and 3840."
25 |             raise ValueError(msg)
26 |         if self.height < 100 or self.height > 2160:
   |                                               ^^^^ PLR2004
27 |             msg = f"Invalid height: {self.height}. Must be between 100 and 2160."
28 |             raise ValueError(msg)
   |

src_refactored\domain\common\value_objects.py:55:29: PLR2004 Magic value used in comparison, consider replacing `8` with a constant variable
   |
53 |             msg = f"Invalid theme: {self.theme}"
54 |             raise ValueError(msg)
55 |         if self.font_size < 8 or self.font_size > 72:
   |                             ^ PLR2004
56 |             msg = f"Invalid font size: {self.font_size}"
57 |             raise ValueError(msg)
   |

src_refactored\domain\common\value_objects.py:55:51: PLR2004 Magic value used in comparison, consider replacing `72` with a constant variable
   |
53 |             msg = f"Invalid theme: {self.theme}"
54 |             raise ValueError(msg)
55 |         if self.font_size < 8 or self.font_size > 72:
   |                                                   ^^ PLR2004
56 |             msg = f"Invalid font size: {self.font_size}"
57 |             raise ValueError(msg)
   |

src_refactored\domain\common\value_objects.py:69:52: PLR2004 Magic value used in comparison, consider replacing `7` with a constant variable
   |
67 |     ) -> bool:
68 |         """Validate color format (hex or rgb)."""
69 |         if color.startswith("#") and len(color) == 7:
   |                                                    ^ PLR2004
70 |             try:
71 |                 int(color[1:], 16)
   |

src_refactored\domain\common\value_objects.py:72:17: TRY300 Consider moving this statement to an `else` block
   |
70 |             try:
71 |                 int(color[1:], 16)
72 |                 return True
   |                 ^^^^^^^^^^^ TRY300
73 |             except ValueError:
74 |                 return False
   |

src_refactored\domain\common\value_objects.py:139:31: PLR2004 Magic value used in comparison, consider replacing `64` with a constant variable
    |
137 |             msg = f"Invalid bit depth: {self.bit_depth}"
138 |             raise ValueError(msg)
139 |         if self.buffer_size < 64 or self.buffer_size > 8192:
    |                               ^^ PLR2004
140 |             msg = f"Invalid buffer size: {self.buffer_size}"
141 |             raise ValueError(msg)
    |

src_refactored\domain\common\value_objects.py:139:56: PLR2004 Magic value used in comparison, consider replacing `8192` with a constant variable
    |
137 |             msg = f"Invalid bit depth: {self.bit_depth}"
138 |             raise ValueError(msg)
139 |         if self.buffer_size < 64 or self.buffer_size > 8192:
    |                                                        ^^^^ PLR2004
140 |             msg = f"Invalid buffer size: {self.buffer_size}"
141 |             raise ValueError(msg)
    |

src_refactored\domain\common\value_objects.py:167:10: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
165 |     def __post_init__(self):
166 |         if self.language and len(self.language,
167 |     ) != 2:
    |          ^ PLR2004
168 |             msg = f"Language must be 2-character code, got: {self.language}"
169 |             raise ValueError(msg)
    |

src_refactored\domain\common\value_objects.py:203:53: PLR2004 Magic value used in comparison, consider replacing `4096` with a constant variable
    |
202 |     def __post_init__(self):
203 |         if self.max_tokens < 1 or self.max_tokens > 4096:
    |                                                     ^^^^ PLR2004
204 |             msg = f"Invalid max_tokens: {self.max_tokens}"
205 |             raise ValueError(msg)
    |

src_refactored\domain\common\value_objects.py:206:43: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
    |
204 |             msg = f"Invalid max_tokens: {self.max_tokens}"
205 |             raise ValueError(msg)
206 |         if not 0.0 <= self.temperature <= 2.0:
    |                                           ^^^ PLR2004
207 |             msg = f"Invalid temperature: {self.temperature}"
208 |             raise ValueError(msg)
    |

src_refactored\domain\main_window\entities\main_window.py:99:68: SyntaxError: Expected an expression or a ')'
    |
 97 |         """Create a new main window."""
 98 |         try:
 99 |             window_id = f"main_window_{datetime.utcnow().timestamp(,
    |                                                                    ^
100 |     )}"
101 |             window = cls(window_id, configuration, ui_layout, visualization)
    |

src_refactored\domain\main_window\entities\ui_layout.py:170:101: E501 Line too long (101 > 100)
    |
168 |                 widget_result = layout.add_widget(widget_name, geometry, z_order)
169 |                 if not widget_result.is_success:
170 |                     return Result.failure(f"Failed to add widget {widget_name}: {widget_result.error\
    |                                                                                                     ^ E501
171 |     ()}")
    |

src_refactored\domain\main_window\entities\ui_layout.py:254:101: E501 Line too long (101 > 100)
    |
252 |             child_result = self.remove_widget(child_name)
253 |             if not child_result.is_success:
254 |                 return Result.failure(f"Failed to remove child widget {child_name}: {child_result.er\
    |                                                                                                     ^ E501
255 |     ror()}")
    |

src_refactored\domain\main_window\entities\ui_layout.py:255:5: SyntaxError: f-string: expecting '}'
    |
253 |             if not child_result.is_success:
254 |                 return Result.failure(f"Failed to remove child widget {child_name}: {child_result.er\
255 |     ror()}")
    |     ^
256 |
257 |         # Remove from widgets and z-order stack
    |

src_refactored\domain\main_window\entities\ui_layout.py:255:8: SyntaxError: Expected ',', found FStringMiddle
    |
253 |             if not child_result.is_success:
254 |                 return Result.failure(f"Failed to remove child widget {child_name}: {child_result.er\
255 |     ror()}")
    |        ^
256 |
257 |         # Remove from widgets and z-order stack
    |

src_refactored\domain\main_window\entities\ui_layout.py:255:10: SyntaxError: f-string: single '}' is not allowed
    |
253 |             if not child_result.is_success:
254 |                 return Result.failure(f"Failed to remove child widget {child_name}: {child_result.er\
255 |     ror()}")
    |          ^
256 |
257 |         # Remove from widgets and z-order stack
    |

src_refactored\domain\main_window\entities\ui_layout.py:255:11: SyntaxError: Expected ',', found FStringEnd
    |
253 |             if not child_result.is_success:
254 |                 return Result.failure(f"Failed to remove child widget {child_name}: {child_result.er\
255 |     ror()}")
    |           ^
256 |
257 |         # Remove from widgets and z-order stack
    |

src_refactored\domain\main_window\entities\ui_layout.py:350:13: SyntaxError: Expected ',', found name
    |
348 |         self._z_order_stack = sorted(
349 |             self._widgets.keys()
350 |             key=lambda name: self._widgets[name].z_order.value,
    |             ^
351 |         )
    |

src_refactored\domain\main_window\entities\visualization_integration.py:70:30: PLR2004 Magic value used in comparison, consider replacing `255` with a constant variable
   |
68 |         if self.buffer_size <= 0:
69 |             return Result.failure("Buffer size must be positive")
70 |         if not all(0 <= c <= 255 for c in self.color):
   |                              ^^^ PLR2004
71 |             return Result.failure("Color values must be between 0 and 255")
72 |         return Result.success(None)
   |

src_refactored\domain\main_window\entities\visualization_integration.py:148:16: BLE001 Do not catch blind exception: `Exception`
    |
147 |             return Result.success(integration)
148 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
149 |             return Result.failure(f"Failed to create visualization integration: {e!s}")
    |

src_refactored\domain\main_window\entities\visualization_integration.py:215:16: BLE001 Do not catch blind exception: `Exception`
    |
213 |             self.mark_as_updated()
214 |             return Result.success(None)
215 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
216 |             return Result.failure(f"Failed to update waveform data: {e!s}")
    |

src_refactored\domain\main_window\entities\visualization_integration.py:390:13: TRY004 Prefer `TypeError` exception for invalid type
    |
388 |         if not isinstance(self._state, VisualizationState):
389 |             msg = "Invalid visualization state"
390 |             raise ValueError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^ TRY004
391 |         if not isinstance(self._data_history, list):
392 |             msg = "Data history must be a list"
    |

src_refactored\domain\main_window\entities\visualization_integration.py:393:13: TRY004 Prefer `TypeError` exception for invalid type
    |
391 |         if not isinstance(self._data_history, list):
392 |             msg = "Data history must be a list"
393 |             raise ValueError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^ TRY004
394 |         if self._max_history_size <= 0:
395 |             msg = "Max history size must be positive"
    |

src_refactored\domain\main_window\entities\window_configuration.py:123:17: SyntaxError: Expected ',', found name
    |
121 |                 dimensions=dimensions,
122 |                 icon_path=icon_result.value()
123 |                 size_policy=WindowSizePolicy.FIXED,
    |                 ^
124 |                 flags={WindowFlags.ACCEPT_DROPS},
125 |             )
    |

src_refactored\domain\main_window\value_objects\color_palette.py:212:13: SyntaxError: Expected ',', found name
    |
210 |         colors = {
211 |             ColorRole.WINDOW: Color.from_rgb(240, 240, 240)
212 |             ColorRole.WINDOW_TEXT: Color.from_rgb(0, 0, 0)
    |             ^
213 |             ColorRole.BASE: Color.from_rgb(255, 255, 255)
214 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:213:13: SyntaxError: Expected ',', found name
    |
211 |             ColorRole.WINDOW: Color.from_rgb(240, 240, 240)
212 |             ColorRole.WINDOW_TEXT: Color.from_rgb(0, 0, 0)
213 |             ColorRole.BASE: Color.from_rgb(255, 255, 255)
    |             ^
214 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
215 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:214:13: SyntaxError: Expected ',', found name
    |
212 |             ColorRole.WINDOW_TEXT: Color.from_rgb(0, 0, 0)
213 |             ColorRole.BASE: Color.from_rgb(255, 255, 255)
214 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
    |             ^
215 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
216 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:215:13: SyntaxError: Expected ',', found name
    |
213 |             ColorRole.BASE: Color.from_rgb(255, 255, 255)
214 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
215 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
    |             ^
216 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
217 |             ColorRole.TEXT: Color.from_rgb(0, 0, 0)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:216:13: SyntaxError: Expected ',', found name
    |
214 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
215 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
216 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
    |             ^
217 |             ColorRole.TEXT: Color.from_rgb(0, 0, 0)
218 |             ColorRole.BUTTON: Color.from_rgb(240, 240, 240)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:217:13: SyntaxError: Expected ',', found name
    |
215 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
216 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
217 |             ColorRole.TEXT: Color.from_rgb(0, 0, 0)
    |             ^
218 |             ColorRole.BUTTON: Color.from_rgb(240, 240, 240)
219 |             ColorRole.BUTTON_TEXT: Color.from_rgb(0, 0, 0)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:218:13: SyntaxError: Expected ',', found name
    |
216 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
217 |             ColorRole.TEXT: Color.from_rgb(0, 0, 0)
218 |             ColorRole.BUTTON: Color.from_rgb(240, 240, 240)
    |             ^
219 |             ColorRole.BUTTON_TEXT: Color.from_rgb(0, 0, 0)
220 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 255, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:219:13: SyntaxError: Expected ',', found name
    |
217 |             ColorRole.TEXT: Color.from_rgb(0, 0, 0)
218 |             ColorRole.BUTTON: Color.from_rgb(240, 240, 240)
219 |             ColorRole.BUTTON_TEXT: Color.from_rgb(0, 0, 0)
    |             ^
220 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 255, 255)
221 |             ColorRole.LINK: Color.from_rgb(0, 0, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:220:13: SyntaxError: Expected ',', found name
    |
218 |             ColorRole.BUTTON: Color.from_rgb(240, 240, 240)
219 |             ColorRole.BUTTON_TEXT: Color.from_rgb(0, 0, 0)
220 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 255, 255)
    |             ^
221 |             ColorRole.LINK: Color.from_rgb(0, 0, 255)
222 |             ColorRole.HIGHLIGHT: Color.from_rgb(0, 120, 215)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:221:13: SyntaxError: Expected ',', found name
    |
219 |             ColorRole.BUTTON_TEXT: Color.from_rgb(0, 0, 0)
220 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 255, 255)
221 |             ColorRole.LINK: Color.from_rgb(0, 0, 255)
    |             ^
222 |             ColorRole.HIGHLIGHT: Color.from_rgb(0, 120, 215)
223 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(255, 255, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:222:13: SyntaxError: Expected ',', found name
    |
220 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 255, 255)
221 |             ColorRole.LINK: Color.from_rgb(0, 0, 255)
222 |             ColorRole.HIGHLIGHT: Color.from_rgb(0, 120, 215)
    |             ^
223 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(255, 255, 255)
224 |             ColorRole.LIGHT: Color.from_rgb(255, 255, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:223:13: SyntaxError: Expected ',', found name
    |
221 |             ColorRole.LINK: Color.from_rgb(0, 0, 255)
222 |             ColorRole.HIGHLIGHT: Color.from_rgb(0, 120, 215)
223 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(255, 255, 255)
    |             ^
224 |             ColorRole.LIGHT: Color.from_rgb(255, 255, 255)
225 |             ColorRole.MIDLIGHT: Color.from_rgb(227, 227, 227)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:224:13: SyntaxError: Expected ',', found name
    |
222 |             ColorRole.HIGHLIGHT: Color.from_rgb(0, 120, 215)
223 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(255, 255, 255)
224 |             ColorRole.LIGHT: Color.from_rgb(255, 255, 255)
    |             ^
225 |             ColorRole.MIDLIGHT: Color.from_rgb(227, 227, 227)
226 |             ColorRole.DARK: Color.from_rgb(160, 160, 160)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:225:13: SyntaxError: Expected ',', found name
    |
223 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(255, 255, 255)
224 |             ColorRole.LIGHT: Color.from_rgb(255, 255, 255)
225 |             ColorRole.MIDLIGHT: Color.from_rgb(227, 227, 227)
    |             ^
226 |             ColorRole.DARK: Color.from_rgb(160, 160, 160)
227 |             ColorRole.MID: Color.from_rgb(160, 160, 160)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:226:13: SyntaxError: Expected ',', found name
    |
224 |             ColorRole.LIGHT: Color.from_rgb(255, 255, 255)
225 |             ColorRole.MIDLIGHT: Color.from_rgb(227, 227, 227)
226 |             ColorRole.DARK: Color.from_rgb(160, 160, 160)
    |             ^
227 |             ColorRole.MID: Color.from_rgb(160, 160, 160)
228 |             ColorRole.SHADOW: Color.from_rgb(105, 105, 105),
    |

src_refactored\domain\main_window\value_objects\color_palette.py:227:13: SyntaxError: Expected ',', found name
    |
225 |             ColorRole.MIDLIGHT: Color.from_rgb(227, 227, 227)
226 |             ColorRole.DARK: Color.from_rgb(160, 160, 160)
227 |             ColorRole.MID: Color.from_rgb(160, 160, 160)
    |             ^
228 |             ColorRole.SHADOW: Color.from_rgb(105, 105, 105),
229 |         }
    |

src_refactored\domain\main_window\value_objects\color_palette.py:228:13: SyntaxError: Expected ',', found name
    |
226 |             ColorRole.DARK: Color.from_rgb(160, 160, 160)
227 |             ColorRole.MID: Color.from_rgb(160, 160, 160)
228 |             ColorRole.SHADOW: Color.from_rgb(105, 105, 105),
    |             ^
229 |         }
230 |         return cls(colors, PaletteTheme.LIGHT)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:241:13: SyntaxError: Expected ',', found name
    |
239 |         colors = {
240 |             ColorRole.WINDOW: Color.from_rgb(53, 53, 53)
241 |             ColorRole.WINDOW_TEXT: Color.from_rgb(255, 255, 255)
    |             ^
242 |             ColorRole.BASE: Color.from_rgb(25, 25, 25)
243 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(53, 53, 53)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:242:13: SyntaxError: Expected ',', found name
    |
240 |             ColorRole.WINDOW: Color.from_rgb(53, 53, 53)
241 |             ColorRole.WINDOW_TEXT: Color.from_rgb(255, 255, 255)
242 |             ColorRole.BASE: Color.from_rgb(25, 25, 25)
    |             ^
243 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(53, 53, 53)
244 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(0, 0, 0)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:243:13: SyntaxError: Expected ',', found name
    |
241 |             ColorRole.WINDOW_TEXT: Color.from_rgb(255, 255, 255)
242 |             ColorRole.BASE: Color.from_rgb(25, 25, 25)
243 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(53, 53, 53)
    |             ^
244 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(0, 0, 0)
245 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(255, 255, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:244:13: SyntaxError: Expected ',', found name
    |
242 |             ColorRole.BASE: Color.from_rgb(25, 25, 25)
243 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(53, 53, 53)
244 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(0, 0, 0)
    |             ^
245 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(255, 255, 255)
246 |             ColorRole.TEXT: Color.from_rgb(255, 255, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:245:13: SyntaxError: Expected ',', found name
    |
243 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(53, 53, 53)
244 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(0, 0, 0)
245 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(255, 255, 255)
    |             ^
246 |             ColorRole.TEXT: Color.from_rgb(255, 255, 255)
247 |             ColorRole.BUTTON: Color.from_rgb(53, 53, 53)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:246:13: SyntaxError: Expected ',', found name
    |
244 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(0, 0, 0)
245 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(255, 255, 255)
246 |             ColorRole.TEXT: Color.from_rgb(255, 255, 255)
    |             ^
247 |             ColorRole.BUTTON: Color.from_rgb(53, 53, 53)
248 |             ColorRole.BUTTON_TEXT: Color.from_rgb(255, 255, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:247:13: SyntaxError: Expected ',', found name
    |
245 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(255, 255, 255)
246 |             ColorRole.TEXT: Color.from_rgb(255, 255, 255)
247 |             ColorRole.BUTTON: Color.from_rgb(53, 53, 53)
    |             ^
248 |             ColorRole.BUTTON_TEXT: Color.from_rgb(255, 255, 255)
249 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 0, 0)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:248:13: SyntaxError: Expected ',', found name
    |
246 |             ColorRole.TEXT: Color.from_rgb(255, 255, 255)
247 |             ColorRole.BUTTON: Color.from_rgb(53, 53, 53)
248 |             ColorRole.BUTTON_TEXT: Color.from_rgb(255, 255, 255)
    |             ^
249 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 0, 0)
250 |             ColorRole.LINK: Color.from_rgb(42, 130, 218)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:249:13: SyntaxError: Expected ',', found name
    |
247 |             ColorRole.BUTTON: Color.from_rgb(53, 53, 53)
248 |             ColorRole.BUTTON_TEXT: Color.from_rgb(255, 255, 255)
249 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 0, 0)
    |             ^
250 |             ColorRole.LINK: Color.from_rgb(42, 130, 218)
251 |             ColorRole.HIGHLIGHT: Color.from_rgb(42, 130, 218)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:250:13: SyntaxError: Expected ',', found name
    |
248 |             ColorRole.BUTTON_TEXT: Color.from_rgb(255, 255, 255)
249 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 0, 0)
250 |             ColorRole.LINK: Color.from_rgb(42, 130, 218)
    |             ^
251 |             ColorRole.HIGHLIGHT: Color.from_rgb(42, 130, 218)
252 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(0, 0, 0)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:251:13: SyntaxError: Expected ',', found name
    |
249 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 0, 0)
250 |             ColorRole.LINK: Color.from_rgb(42, 130, 218)
251 |             ColorRole.HIGHLIGHT: Color.from_rgb(42, 130, 218)
    |             ^
252 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(0, 0, 0)
253 |             ColorRole.LIGHT: Color.from_rgb(95, 95, 95)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:252:13: SyntaxError: Expected ',', found name
    |
250 |             ColorRole.LINK: Color.from_rgb(42, 130, 218)
251 |             ColorRole.HIGHLIGHT: Color.from_rgb(42, 130, 218)
252 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(0, 0, 0)
    |             ^
253 |             ColorRole.LIGHT: Color.from_rgb(95, 95, 95)
254 |             ColorRole.MIDLIGHT: Color.from_rgb(74, 74, 74)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:253:13: SyntaxError: Expected ',', found name
    |
251 |             ColorRole.HIGHLIGHT: Color.from_rgb(42, 130, 218)
252 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(0, 0, 0)
253 |             ColorRole.LIGHT: Color.from_rgb(95, 95, 95)
    |             ^
254 |             ColorRole.MIDLIGHT: Color.from_rgb(74, 74, 74)
255 |             ColorRole.DARK: Color.from_rgb(35, 35, 35)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:254:13: SyntaxError: Expected ',', found name
    |
252 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(0, 0, 0)
253 |             ColorRole.LIGHT: Color.from_rgb(95, 95, 95)
254 |             ColorRole.MIDLIGHT: Color.from_rgb(74, 74, 74)
    |             ^
255 |             ColorRole.DARK: Color.from_rgb(35, 35, 35)
256 |             ColorRole.MID: Color.from_rgb(44, 44, 44)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:255:13: SyntaxError: Expected ',', found name
    |
253 |             ColorRole.LIGHT: Color.from_rgb(95, 95, 95)
254 |             ColorRole.MIDLIGHT: Color.from_rgb(74, 74, 74)
255 |             ColorRole.DARK: Color.from_rgb(35, 35, 35)
    |             ^
256 |             ColorRole.MID: Color.from_rgb(44, 44, 44)
257 |             ColorRole.SHADOW: Color.from_rgb(20, 20, 20),
    |

src_refactored\domain\main_window\value_objects\color_palette.py:256:13: SyntaxError: Expected ',', found name
    |
254 |             ColorRole.MIDLIGHT: Color.from_rgb(74, 74, 74)
255 |             ColorRole.DARK: Color.from_rgb(35, 35, 35)
256 |             ColorRole.MID: Color.from_rgb(44, 44, 44)
    |             ^
257 |             ColorRole.SHADOW: Color.from_rgb(20, 20, 20),
258 |         }
    |

src_refactored\domain\main_window\value_objects\color_palette.py:257:13: SyntaxError: Expected ',', found name
    |
255 |             ColorRole.DARK: Color.from_rgb(35, 35, 35)
256 |             ColorRole.MID: Color.from_rgb(44, 44, 44)
257 |             ColorRole.SHADOW: Color.from_rgb(20, 20, 20),
    |             ^
258 |         }
259 |         return cls(colors, PaletteTheme.DARK)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:273:13: SyntaxError: Expected ',', found name
    |
271 |         colors = {
272 |             ColorRole.WINDOW: Color.from_rgb(240, 240, 240)
273 |             ColorRole.WINDOW_TEXT: Color.from_rgb(0, 0, 0)
    |             ^
274 |             ColorRole.BASE: Color.from_rgb(255, 255, 255)
275 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:274:13: SyntaxError: Expected ',', found name
    |
272 |             ColorRole.WINDOW: Color.from_rgb(240, 240, 240)
273 |             ColorRole.WINDOW_TEXT: Color.from_rgb(0, 0, 0)
274 |             ColorRole.BASE: Color.from_rgb(255, 255, 255)
    |             ^
275 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
276 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:275:13: SyntaxError: Expected ',', found name
    |
273 |             ColorRole.WINDOW_TEXT: Color.from_rgb(0, 0, 0)
274 |             ColorRole.BASE: Color.from_rgb(255, 255, 255)
275 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
    |             ^
276 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
277 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:276:13: SyntaxError: Expected ',', found name
    |
274 |             ColorRole.BASE: Color.from_rgb(255, 255, 255)
275 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
276 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
    |             ^
277 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
278 |             ColorRole.TEXT: Color.from_rgb(0, 0, 0)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:277:13: SyntaxError: Expected ',', found name
    |
275 |             ColorRole.ALTERNATE_BASE: Color.from_rgb(247, 247, 247)
276 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
277 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
    |             ^
278 |             ColorRole.TEXT: Color.from_rgb(0, 0, 0)
279 |             ColorRole.BUTTON: red_color,
    |

src_refactored\domain\main_window\value_objects\color_palette.py:278:13: SyntaxError: Expected ',', found name
    |
276 |             ColorRole.TOOLTIP_BASE: Color.from_rgb(255, 255, 220)
277 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
278 |             ColorRole.TEXT: Color.from_rgb(0, 0, 0)
    |             ^
279 |             ColorRole.BUTTON: red_color,
280 |             ColorRole.BUTTON_TEXT: Color.from_rgb(255, 255, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:279:13: SyntaxError: Expected ',', found name
    |
277 |             ColorRole.TOOLTIP_TEXT: Color.from_rgb(0, 0, 0)
278 |             ColorRole.TEXT: Color.from_rgb(0, 0, 0)
279 |             ColorRole.BUTTON: red_color,
    |             ^
280 |             ColorRole.BUTTON_TEXT: Color.from_rgb(255, 255, 255)
281 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 255, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:281:13: SyntaxError: Expected ',', found name
    |
279 |             ColorRole.BUTTON: red_color,
280 |             ColorRole.BUTTON_TEXT: Color.from_rgb(255, 255, 255)
281 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 255, 255)
    |             ^
282 |             ColorRole.LINK: red_color,
283 |             ColorRole.HIGHLIGHT: red_color,
    |

src_refactored\domain\main_window\value_objects\color_palette.py:282:13: SyntaxError: Expected ',', found name
    |
280 |             ColorRole.BUTTON_TEXT: Color.from_rgb(255, 255, 255)
281 |             ColorRole.BRIGHT_TEXT: Color.from_rgb(255, 255, 255)
282 |             ColorRole.LINK: red_color,
    |             ^
283 |             ColorRole.HIGHLIGHT: red_color,
284 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(255, 255, 255)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:285:13: SyntaxError: Expected ',', found name
    |
283 |             ColorRole.HIGHLIGHT: red_color,
284 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(255, 255, 255)
285 |             ColorRole.LIGHT: red_color.lighter(1.3)
    |             ^
286 |             ColorRole.MIDLIGHT: red_color.lighter(1.1)
287 |             ColorRole.DARK: red_color.darker(0.7)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:286:13: SyntaxError: Expected ',', found name
    |
284 |             ColorRole.HIGHLIGHTED_TEXT: Color.from_rgb(255, 255, 255)
285 |             ColorRole.LIGHT: red_color.lighter(1.3)
286 |             ColorRole.MIDLIGHT: red_color.lighter(1.1)
    |             ^
287 |             ColorRole.DARK: red_color.darker(0.7)
288 |             ColorRole.MID: red_color.darker(0.8)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:287:13: SyntaxError: Expected ',', found name
    |
285 |             ColorRole.LIGHT: red_color.lighter(1.3)
286 |             ColorRole.MIDLIGHT: red_color.lighter(1.1)
287 |             ColorRole.DARK: red_color.darker(0.7)
    |             ^
288 |             ColorRole.MID: red_color.darker(0.8)
289 |             ColorRole.SHADOW: red_color.darker(0.5),
    |

src_refactored\domain\main_window\value_objects\color_palette.py:288:13: SyntaxError: Expected ',', found name
    |
286 |             ColorRole.MIDLIGHT: red_color.lighter(1.1)
287 |             ColorRole.DARK: red_color.darker(0.7)
288 |             ColorRole.MID: red_color.darker(0.8)
    |             ^
289 |             ColorRole.SHADOW: red_color.darker(0.5),
290 |         }
    |

src_refactored\domain\main_window\value_objects\color_palette.py:289:13: SyntaxError: Expected ',', found name
    |
287 |             ColorRole.DARK: red_color.darker(0.7)
288 |             ColorRole.MID: red_color.darker(0.8)
289 |             ColorRole.SHADOW: red_color.darker(0.5),
    |             ^
290 |         }
291 |         return cls(colors, PaletteTheme.CUSTOM)
    |

src_refactored\domain\main_window\value_objects\color_palette.py:295:101: E501 Line too long (102 > 100)
    |
293 |     @classmethod
294 |     def from_dict(cls,
295 | color_dict: dict[str, str | tuple[int, int, int] | tuple[int, int, int, int]], theme: PaletteTheme = (
    |                                                                                                     ^^ E501
296 |     PaletteTheme.CUSTOM,),
297 |     ) -> Result[ColorPalette]:
    |

src_refactored\domain\main_window\value_objects\color_palette.py:325:101: E501 Line too long (101 > 100)
    |
323 |                         color = Color.from_rgb(*color_value)
324 |                     else:
325 |                         return Result.failure(f"Invalid color tuple length for {role_name}: {len(col\
    |                                                                                                     ^ E501
326 |     or_value)}")
327 |                 else:
    |

src_refactored\domain\main_window\value_objects\color_palette.py:326:5: SyntaxError: Expected ',', found name
    |
324 |                     else:
325 |                         return Result.failure(f"Invalid color tuple length for {role_name}: {len(col\
326 |     or_value)}")
    |     ^
327 |                 else:
328 |                     return Result.failure(f"Invalid color value type for {role_name}: {type(color_value)}",
    |

src_refactored\domain\main_window\value_objects\color_palette.py:328:101: E501 Line too long (107 > 100)
    |
326 |     or_value)}")
327 |                 else:
328 |                     return Result.failure(f"Invalid color value type for {role_name}: {type(color_value)}",
    |                                                                                                     ^^^^^^^ E501
329 |     )
    |

src_refactored\domain\main_window\value_objects\icon_path.py:21:28: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
19 |     """
20 |
21 |     SUPPORTED_EXTENSIONS = {".ico", ".png", ".jpg", ".jpeg", ".bmp", ".gif", ".svg"}
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
22 |
23 |     def __init__(self, path: str,
   |

src_refactored\domain\main_window\value_objects\icon_path.py:76:16: BLE001 Do not catch blind exception: `Exception`
   |
74 |         try:
75 |             return cls.from_string(str(path))
76 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
77 |             return Result.failure(f"Failed to create IconPath from Path: {e!s}")
   |

src_refactored\domain\main_window\value_objects\icon_path.py:97:20: PTH113 `os.path.isfile()` should be replaced by `Path.is_file()`
   |
95 |         """
96 |         try:
97 |             return os.path.isfile(self.value)
   |                    ^^^^^^^^^^^^^^ PTH113
98 |         except (OSError, TypeError):
99 |             return False
   |

src_refactored\domain\main_window\value_objects\icon_path.py:107:16: PTH117 `os.path.isabs()` should be replaced by `Path.is_absolute()`
    |
105 |             True if path is absolute, False otherwise
106 |         """
107 |         return os.path.isabs(self.value)
    |                ^^^^^^^^^^^^^ PTH117
108 |
109 |     def is_relative(self) -> bool:
    |

src_refactored\domain\main_window\value_objects\icon_path.py:123:16: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
121 |             File extension including the dot (e.g., '.ico')
122 |         """
123 |         return os.path.splitext(self.value)[1].lower()
    |                ^^^^^^^^^^^^^^^^ PTH122
124 |
125 |     def get_filename(self) -> str:
    |

src_refactored\domain\main_window\value_objects\icon_path.py:131:16: PTH119 `os.path.basename()` should be replaced by `Path.name`
    |
129 |             Filename with extension
130 |         """
131 |         return os.path.basename(self.value)
    |                ^^^^^^^^^^^^^^^^ PTH119
132 |
133 |     def get_filename_without_extension(self) -> str:
    |

src_refactored\domain\main_window\value_objects\icon_path.py:139:16: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
137 |             Filename without extension
138 |         """
139 |         return os.path.splitext(self.get_filename())[0]
    |                ^^^^^^^^^^^^^^^^ PTH122
140 |
141 |     def get_directory(self) -> str:
    |

src_refactored\domain\main_window\value_objects\icon_path.py:147:16: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
145 |             Directory path containing the icon
146 |         """
147 |         return os.path.dirname(self.value)
    |                ^^^^^^^^^^^^^^^ PTH120
148 |
149 |     def to_absolute(self, base_path: str | None = None) -> Result[IconPath]:
    |

src_refactored\domain\main_window\value_objects\icon_path.py:163:33: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
162 |             if base_path:
163 |                 absolute_path = os.path.join(base_path, self.value)
    |                                 ^^^^^^^^^^^^ PTH118
164 |             else:
165 |                 absolute_path = os.path.abspath(self.value)
    |

src_refactored\domain\main_window\value_objects\icon_path.py:165:33: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
    |
163 |                 absolute_path = os.path.join(base_path, self.value)
164 |             else:
165 |                 absolute_path = os.path.abspath(self.value)
    |                                 ^^^^^^^^^^^^^^^ PTH100
166 |
167 |             return IconPath.from_string(absolute_path)
    |

src_refactored\domain\main_window\value_objects\icon_path.py:168:16: BLE001 Do not catch blind exception: `Exception`
    |
167 |             return IconPath.from_string(absolute_path)
168 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
169 |             return Result.failure(f"Failed to convert to absolute path: {e!s}",
170 |     )
    |

src_refactored\domain\main_window\value_objects\icon_path.py:188:16: BLE001 Do not catch blind exception: `Exception`
    |
186 |             relative_path = os.path.relpath(self.value, base_path)
187 |             return IconPath.from_string(relative_path)
188 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
189 |             return Result.failure(f"Failed to convert to relative path: {e!s}")
    |

src_refactored\domain\main_window\value_objects\icon_path.py:251:28: PLR2004 Magic value used in comparison, consider replacing `260` with a constant variable
    |
250 |             # Check path length (Windows limitation)
251 |             if len(path) > 260:
    |                            ^^^ PLR2004
252 |                 return False
    |

src_refactored\domain\main_window\value_objects\icon_path.py:256:13: TRY300 Consider moving this statement to an `else` block
    |
254 |             # Try to create Path object to validate
255 |             Path(path)
256 |             return True
    |             ^^^^^^^^^^^ TRY300
257 |         except (ValueError, OSError):
258 |             return False
    |

src_refactored\domain\main_window\value_objects\opacity_level.py:48:13: TRY004 Prefer `TypeError` exception for invalid type
   |
46 |         if not isinstance(value, int | float):
47 |             msg = f"Opacity value must be a number, got {type(value)}"
48 |             raise ValueError(msg)
   |             ^^^^^^^^^^^^^^^^^^^^^ TRY004
49 |
50 |         value = float(value)
   |

src_refactored\domain\main_window\value_objects\opacity_level.py:94:40: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
   |
92 |                 return Result.failure(f"Percentage must be a number, got {type(percentage)}")
93 |
94 |             if not (0 <= percentage <= 100):
   |                                        ^^^ PLR2004
95 |                 return Result.failure(f"Percentage must be between 0 and 100, got {percentage}")
   |

src_refactored\domain\main_window\value_objects\opacity_level.py:99:16: BLE001 Do not catch blind exception: `Exception`
    |
 97 |             opacity_value = percentage / 100.0
 98 |             return Result.success(cls(opacity_value))
 99 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
100 |             return Result.failure(f"Failed to create opacity from percentage: {e!s}")
    |

src_refactored\domain\main_window\value_objects\z_order_level.py:66:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
64 |             except (ValueError, TypeError):
65 |                 msg = f"Z-order value must be an integer, got {type(value)}"
66 |                 raise ValueError(msg)
   |                 ^^^^^^^^^^^^^^^^^^^^^ B904
67 |
68 |         if not (self.MIN_Z_ORDER <= value <= self.MAX_Z_ORDER):
   |

src_refactored\domain\main_window\value_objects\z_order_level.py:264:25: PLR2004 Magic value used in comparison, consider replacing `-500` with a constant variable
    |
262 |             ZOrderCategory based on the value range
263 |         """
264 |         if self.value < -500:
    |                         ^^^^ PLR2004
265 |             return ZOrderCategory.BACKGROUND_LAYER
266 |         if self.value < 0:
    |

src_refactored\domain\main_window\value_objects\z_order_level.py:268:25: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
266 |         if self.value < 0:
267 |             return ZOrderCategory.CONTENT_LAYER
268 |         if self.value < 1000:
    |                         ^^^^ PLR2004
269 |             return ZOrderCategory.UI_LAYER
270 |         if self.value < 10000:
    |

src_refactored\domain\main_window\value_objects\z_order_level.py:270:25: PLR2004 Magic value used in comparison, consider replacing `10000` with a constant variable
    |
268 |         if self.value < 1000:
269 |             return ZOrderCategory.UI_LAYER
270 |         if self.value < 10000:
    |                         ^^^^^ PLR2004
271 |             return ZOrderCategory.OVERLAY_LAYER
272 |         if self.value < 50000:
    |

src_refactored\domain\main_window\value_objects\z_order_level.py:272:25: PLR2004 Magic value used in comparison, consider replacing `50000` with a constant variable
    |
270 |         if self.value < 10000:
271 |             return ZOrderCategory.OVERLAY_LAYER
272 |         if self.value < 50000:
    |                         ^^^^^ PLR2004
273 |             return ZOrderCategory.MODAL_LAYER
274 |         return ZOrderCategory.SYSTEM_LAYER
    |

src_refactored\domain\media\entities\batch_processing_session.py:131:49: SyntaxError: Expected an expression or a ')'
    |
129 |                 # Add audio files directly to transcription queue
130 |                 self.transcription_queue.append(media_file.file_path)
131 |             elif media_file.requires_conversion(,
    |                                                 ^
132 |     ):
133 |                 # Create conversion job for video files
    |

src_refactored\domain\media\entities\batch_processing_session.py:205:101: E501 Line too long (103 > 100)
    |
203 |     def cancel(self) -> None:
204 |         """Cancel the processing session."""
205 |         if self.status not in [SessionStatus.PENDING, SessionStatus.IN_PROGRESS, SessionStatus.PAUSED]:
    |                                                                                                     ^^^ E501
206 |             msg = f"Cannot cancel session in status: {self.status}"
207 |             raise ValueError(msg)
    |

src_refactored\domain\media\entities\batch_processing_session.py:344:13: SyntaxError: Expected ',', found string
    |
342 |         return {
343 |             "id": str(self.id)
344 |             "name": self.name,
    |             ^
345 |             "status": self.status.value,
346 |             "current_file_index": self.current_file_index,
    |

src_refactored\domain\media\entities\batch_processing_session.py:349:13: SyntaxError: Expected ',', found string
    |
347 |             "total_files_count": self.total_files_count,
348 |             "progress_percentage": self.get_progress_percentage()
349 |             "started_at": self.started_at.isoformat() if self.started_at else None,
    |             ^
350 |             "completed_at": self.completed_at.isoformat() if self.completed_at else None,
351 |             "paused_at": self.paused_at.isoformat() if self.paused_at else None,
    |

src_refactored\domain\media\entities\batch_processing_session.py:355:101: E501 Line too long (114 > 100)
    |
353 |             "media_files": [f.to_dict() for f in self.media_files],
354 |             "conversion_jobs": [j.to_dict() for j in self.conversion_jobs],
355 |             "session_duration": self.get_session_duration().to_seconds() if self.get_session_duration() else None,
    |                                                                                                     ^^^^^^^^^^^^^^ E501
356 |             "estimated_remaining_time": self.estimate_remaining_processing_time().to_seconds()
357 |             "metadata": self.metadata,
    |

src_refactored\domain\media\entities\batch_processing_session.py:357:13: SyntaxError: Expected ',', found string
    |
355 |             "session_duration": self.get_session_duration().to_seconds() if self.get_session_duration() else None,
356 |             "estimated_remaining_time": self.estimate_remaining_processing_time().to_seconds()
357 |             "metadata": self.metadata,
    |             ^
358 |         }
    |

src_refactored\domain\media\entities\conversion_job.py:76:40: SyntaxError: Expected an expression or a ')'
   |
75 |         self.status = ConversionStatus.IN_PROGRESS
76 |         self.started_at = datetime.now(,
   |                                        ^
77 |     )
78 |         self.progress_percentage = 0.0
   |

src_refactored\domain\media\entities\conversion_job.py:188:101: E501 Line too long (111 > 100)
    |
186 |     ) -> bool:
187 |         """Check if job is finished (completed, failed, or cancelled)."""
188 |         return self.status in [ConversionStatus.COMPLETED, ConversionStatus.FAILED, ConversionStatus.CANCELLED]
    |                                                                                                     ^^^^^^^^^^^ E501
189 |
190 |     def has_output_data(self) -> bool:
    |

src_refactored\domain\media\entities\conversion_job.py:210:54: SyntaxError: Expected an expression or a ')'
    |
208 |         if self.source_file.duration:
209 |             estimated_seconds = self.target_quality.estimate_processing_time(
210 |                 self.source_file.duration.to_seconds(,
    |                                                      ^
211 |     ),
212 |             )
    |

src_refactored\domain\media\entities\conversion_job.py:262:13: SyntaxError: Expected ',', found string
    |
260 |         return {
261 |             "id": str(self.id)
262 |             "source_file_id": str(self.source_file.id)
    |             ^
263 |             "source_file_path": self.source_file.file_path,
264 |             "target_quality": self.target_quality.to_dict()
    |

src_refactored\domain\media\entities\conversion_job.py:263:13: SyntaxError: Expected ',', found string
    |
261 |             "id": str(self.id)
262 |             "source_file_id": str(self.source_file.id)
263 |             "source_file_path": self.source_file.file_path,
    |             ^
264 |             "target_quality": self.target_quality.to_dict()
265 |             "status": self.status.value,
    |

src_refactored\domain\media\entities\conversion_job.py:265:13: SyntaxError: Expected ',', found string
    |
263 |             "source_file_path": self.source_file.file_path,
264 |             "target_quality": self.target_quality.to_dict()
265 |             "status": self.status.value,
    |             ^
266 |             "progress_percentage": self.progress_percentage,
267 |             "started_at": self.started_at.isoformat() if self.started_at else None,
    |

src_refactored\domain\media\entities\conversion_job.py:271:101: E501 Line too long (108 > 100)
    |
269 |             "error_message": self.error_message,
270 |             "output_file_path": self.output_file_path,
271 |             "estimated_duration": self.estimated_duration.to_seconds() if self.estimated_duration else None,
    |                                                                                                     ^^^^^^^^ E501
272 |             "actual_duration": self.actual_duration.to_seconds() if self.actual_duration else None,
273 |             "output_size_mb": self.get_output_size_mb()
    |

src_refactored\domain\media\entities\conversion_job.py:274:13: SyntaxError: Expected ',', found string
    |
272 |             "actual_duration": self.actual_duration.to_seconds() if self.actual_duration else None,
273 |             "output_size_mb": self.get_output_size_mb()
274 |             "metadata": self.metadata,
    |             ^
275 |         }
    |

src_refactored\domain\media\entities\media_file.py:144:38: SyntaxError: Expected an expression or a ')'
    |
142 |     def is_large_file(self, threshold_mb: float = 100) -> bool:
143 |         """Check if this is considered a large file."""
144 |         return self.get_file_size_mb(,
    |                                      ^
145 |     ) > threshold_mb
    |

src_refactored\domain\media\entities\media_file.py:151:41: SyntaxError: Expected an expression or a ')'
    |
149 |         if not self.duration:
150 |             return False
151 |         return self.duration.to_minutes(,
    |                                         ^
152 |     ) > threshold_minutes
    |

src_refactored\domain\media\entities\media_file.py:185:13: SyntaxError: Expected ',', found string
    |
183 |         return {
184 |             "id": str(self.id)
185 |             "file_path": self.file_path,
    |             ^
186 |             "file_format": {
187 |                 "extension": self.file_format.extension,
    |

src_refactored\domain\media\entities\media_file.py:195:13: SyntaxError: Expected ',', found string
    |
193 |             "duration": self.duration.to_seconds() if self.duration else None,
194 |             "created_at": self.created_at.isoformat()
195 |             "last_modified": self.last_modified.isoformat() if self.last_modified else None,
    |             ^
196 |             "metadata": self.metadata,
197 |         }
    |

src_refactored\domain\media\value_objects\conversion_quality.py:28:15: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
27 |       # Quality presets
28 |       PRESETS = {
   |  _______________^
29 | |         QualityPreset.LOW: {
30 | |             "sample_rate": 8000,
31 | |             "channels": 1,
32 | |             "bit_rate": 64,
33 | |             "format": "wav",
34 | |         },
35 | |         QualityPreset.MEDIUM: {
36 | |             "sample_rate": 22050,
37 | |             "channels": 1,
38 | |             "bit_rate": 128,
39 | |             "format": "wav",
40 | |         },
41 | |         QualityPreset.HIGH: {
42 | |             "sample_rate": 44100,
43 | |             "channels": 2,
44 | |             "bit_rate": 320,
45 | |             "format": "wav",
46 | |         },
47 | |         QualityPreset.TRANSCRIPTION_OPTIMIZED: {
48 | |             "sample_rate": 16000,
49 | |             "channels": 1,
50 | |             "bit_rate": 128,
51 | |             "format": "wav",
52 | |         },
53 | |     }
   | |_____^ RUF012
54 |
55 |       def __post_init__(self):
   |

src_refactored\domain\media\value_objects\conversion_quality.py:155:33: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
153 |     def is_stereo(self) -> bool:
154 |         """Check if output is stereo (two channels)."""
155 |         return self.channels == 2
    |                                 ^ PLR2004
156 |
157 |     def is_high_quality(self) -> bool:
    |

src_refactored\domain\media\value_objects\conversion_quality.py:165:34: PLR2004 Magic value used in comparison, consider replacing `16000` with a constant variable
    |
163 |         return (
164 |             self.preset == QualityPreset.TRANSCRIPTION_OPTIMIZED or
165 |             (self.sample_rate == 16000 and self.channels == 1)
    |                                  ^^^^^ PLR2004
166 |         )
    |

src_refactored\domain\media\value_objects\file_format.py:28:21: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
27 |       # Supported formats
28 |       AUDIO_FORMATS = {
   |  _____________________^
29 | |         ".mp3": ("audio/mpeg", "MP3 Audio"),
30 | |         ".wav": ("audio/wav", "WAV Audio"),
31 | |     }
   | |_____^ RUF012
32 |
33 |       VIDEO_FORMATS = {
   |

src_refactored\domain\media\value_objects\file_format.py:33:21: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
31 |       }
32 |
33 |       VIDEO_FORMATS = {
   |  _____________________^
34 | |         ".mp4": ("video/mp4", "MP4 Video"),
35 | |         ".avi": ("video/x-msvideo", "AVI Video"),
36 | |         ".mkv": ("video/x-matroska", "MKV Video"),
37 | |         ".mov": ("video/quicktime", "QuickTime Video"),
38 | |         ".flv": ("video/x-flv", "FLV Video"),
39 | |         ".wmv": ("video/x-ms-wmv", "WMV Video"),
40 | |     }
   | |_____^ RUF012
41 |
42 |       def __post_init__(self):
   |

src_refactored\domain\media\value_objects\media_duration.py:68:40: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
66 |             # Parse time components
67 |             time_components = time_part.split(":")
68 |             if len(time_components) != 3:
   |                                        ^ PLR2004
69 |                 msg = "Invalid timestamp format"
70 |                 raise ValueError(msg)
   |

src_refactored\domain\media\value_objects\media_duration.py:70:17: TRY301 Abstract `raise` to an inner function
   |
68 |             if len(time_components) != 3:
69 |                 msg = "Invalid timestamp format"
70 |                 raise ValueError(msg)
   |                 ^^^^^^^^^^^^^^^^^^^^^ TRY301
71 |
72 |             hours = int(time_components[0])
   |

src_refactored\domain\progress_management\entities\download_progress.py:319:38: SyntaxError: Expected an expression or a ')'
    |
317 |     def get_average_speed(self) -> float | None:
318 |         """Get average download speed in bytes per second."""
319 |         duration = self.get_duration(,
    |                                      ^
320 |     )
321 |         if duration is None or duration <= 0:
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:142:101: E501 Line too long (102 > 100)
    |
140 |     ) -> bool:
141 |         """Start reparenting operation."""
142 |         if self._state not in [ProgressBarState.ATTACHED, ProgressBarState.ACTIVE] or self._is_moving:
    |                                                                                                     ^^ E501
143 |             return False
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:163:14: SyntaxError: Expected an indented block after `else` clause
    |
161 |             self._current_parent = self._target_parent
162 |             self._state = ProgressBarState.ACTIVE
163 |         else:
    |              ^
164 |             # Restore to previous parent on failure
165 | self._state = (
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:168:1: SyntaxError: Unexpected indentation
    |
166 |     ProgressBarState.ATTACHED if self._current_parent else ProgressBarState.IDLE)
167 |
168 |         self._target_parent = None
    | ^
169 |         self._operation_start_time = None
170 |         self._is_moving = False
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:175:1: SyntaxError: unindent does not match any outer indentation level
    |
173 |         return True
174 |
175 |     def start_restoration(self,
    | ^
176 |     ) -> bool:
177 |         """Start restoration to original parent."""
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:192:1: SyntaxError: unindent does not match any outer indentation level
    |
190 |         return True
191 |
192 |     def complete_restoration(self, success: bool = True) -> bool:
    | ^
193 |         """Complete restoration operation."""
194 |         if self._state != ProgressBarState.RESTORING or not self._is_moving:
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:210:1: SyntaxError: unindent does not match any outer indentation level
    |
208 |         return True
209 |
210 |     def detach(self) -> bool:
    | ^
211 |         """Detach progress bar from all parents."""
212 |         if self._state == ProgressBarState.DETACHED or self._is_moving:
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:220:30: SyntaxError: Expected an expression or a ')'
    |
218 |         self._operation_count += 1
219 |
220 |         self.mark_as_updated(,
    |                              ^
221 |     )
222 |         return True
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:224:1: SyntaxError: unindent does not match any outer indentation level
    |
222 |         return True
223 |
224 |     def error(self, error_message: str,
    | ^
225 |     ) -> bool:
226 |         """Mark lifecycle as error state."""
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:239:1: SyntaxError: unindent does not match any outer indentation level
    |
237 |         return True
238 |
239 |     def reset(self) -> bool:
    | ^
240 |         """Reset lifecycle to idle state."""
241 |         self._state = ProgressBarState.IDLE
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:255:1: SyntaxError: unindent does not match any outer indentation level
    |
253 |         return True
254 |
255 |     def update_current_parent_geometry(self, geometry: ProgressBarGeometry,
    | ^
256 |     ) -> bool:
257 |         """Update current parent geometry."""
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:274:1: SyntaxError: unindent does not match any outer indentation level
    |
272 |         return True
273 |
274 |     def update_visibility(self, visible: bool,
    | ^
275 |     ) -> bool:
276 |         """Update visibility state."""
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:293:1: SyntaxError: unindent does not match any outer indentation level
    |
291 |         return True
292 |
293 |     def set_custom_data(self, key: str, value: Any,
    | ^
294 |     ) -> None:
295 |         """Set custom data for the lifecycle."""
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:299:1: SyntaxError: unindent does not match any outer indentation level
    |
297 |         self.mark_as_updated()
298 |
299 |     def get_custom_data(self, key: str, default: Any = None,
    | ^
300 |     ) -> Any:
301 |         """Get custom data from the lifecycle."""
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:304:1: SyntaxError: unindent does not match any outer indentation level
    |
302 |         return self._custom_data.get(key, default)
303 |
304 |     def get_operation_duration(self) -> float | None:
    | ^
305 |         """Get current operation duration in seconds."""
306 |         if not self._operation_start_time:
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:311:1: SyntaxError: unindent does not match any outer indentation level
    |
309 |         return (datetime.now() - self._operation_start_time).total_seconds()
310 |
311 |     def is_operation_timeout(self) -> bool:
    | ^
312 |         """Check if current operation has timed out."""
313 |         if not self._configuration.timeout_seconds or not self._operation_start_time:
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:319:1: SyntaxError: unindent does not match any outer indentation level
    |
317 |         return duration is not None and duration > self._configuration.timeout_seconds
318 |
319 |     def can_start_operation(self) -> bool:
    | ^
320 |         """Check if a new operation can be started."""
321 |         return not self._is_moving and self._state not in [ProgressBarState.DETACHED, ProgressBarState.ERROR]
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:321:101: E501 Line too long (109 > 100)
    |
319 |     def can_start_operation(self) -> bool:
320 |         """Check if a new operation can be started."""
321 |         return not self._is_moving and self._state not in [ProgressBarState.DETACHED, ProgressBarState.ERROR]
    |                                                                                                     ^^^^^^^^^ E501
322 |
323 |     def should_auto_restore(self) -> bool:
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:323:1: SyntaxError: unindent does not match any outer indentation level
    |
321 |         return not self._is_moving and self._state not in [ProgressBarState.DETACHED, ProgressBarState.ERROR]
322 |
323 |     def should_auto_restore(self) -> bool:
    | ^
324 |         """Check if should auto-restore to original parent."""
325 |         return (
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:332:1: SyntaxError: unindent does not match any outer indentation level
    |
330 |         )
331 |
332 |     def get_restore_target(self) -> ParentContext | None:
    | ^
333 |         """Get restoration target parent."""
334 |         return self._original_parent
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:337:1: SyntaxError: unindent does not match any outer indentation level
    |
336 |     # Properties
337 |     @property
    | ^
338 |     def configuration(self) -> ProgressBarConfiguration:
339 |         """Get lifecycle configuration."""
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:338:1: SyntaxError: Expected class, function definition or async function definition after decorator
    |
336 |     # Properties
337 |     @property
338 |     def configuration(self) -> ProgressBarConfiguration:
    | ^
339 |         """Get lifecycle configuration."""
340 |         return self._configuration
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:417:101: E501 Line too long (109 > 100)
    |
415 |     )
416 |
417 |         if self._is_moving and self._state not in [ProgressBarState.REPARENTING, ProgressBarState.RESTORING]:
    |                                                                                                     ^^^^^^^^^ E501
418 |             msg = "Moving flag can only be set during reparenting or restoring"
419 |             raise ValueError(msg)
    |

src_refactored\domain\progress_management\entities\progress_bar_lifecycle.py:419:34: SyntaxError: Expected dedent, found end of file
    |
417 |         if self._is_moving and self._state not in [ProgressBarState.REPARENTING, ProgressBarState.RESTORING]:
418 |             msg = "Moving flag can only be set during reparenting or restoring"
419 |             raise ValueError(msg)
    |                                  ^
    |

src_refactored\domain\progress_management\entities\progress_session.py:198:30: SyntaxError: Expected an expression or a ')'
    |
196 |             self.complete()
197 |
198 |         self.mark_as_updated(,
    |                              ^
199 |     )
200 |         return True
    |

src_refactored\domain\progress_management\value_objects\progress_percentage.py:185:30: SyntaxError: Expected an expression or a ')'
    |
183 |     def __float__(self) -> float:
184 |         """Float representation of progress percentage."""
185 |         return self.to_float(,
    |                              ^
186 |     )
    |

src_refactored\domain\progress_management\value_objects\progress_state.py:68:101: E501 Line too long (102 > 100)
   |
67 |         # Validate movement state consistency
68 |         if self.is_progress_bar_moving and self.movement_state == ProgressBarMovementState.STATIONARY:
   |                                                                                                     ^^ E501
69 |             msg = "Progress bar cannot be moving while in stationary movement state"
70 |             raise ValueError(msg)
   |

src_refactored\domain\progress_management\value_objects\progress_state.py:72:101: E501 Line too long (106 > 100)
   |
70 |             raise ValueError(msg)
71 |
72 |         if not self.is_progress_bar_moving and self.movement_state != ProgressBarMovementState.STATIONARY:
   |                                                                                                     ^^^^^^ E501
73 |             msg = "Progress bar must be moving for non-stationary movement states"
74 |             raise ValueError(msg)
   |

src_refactored\domain\progress_management\value_objects\progress_state.py:265:101: E501 Line too long (111 > 100)
    |
263 |         return self.__class__(
264 |             state_type=(
265 |                 ProgressStateType.IDLE if self.state_type == ProgressStateType.DOWNLOADING else self.state_type
    |                                                                                                     ^^^^^^^^^^^ E501
266 |             ),
267 |             is_downloading_model=False,
    |

src_refactored\domain\settings\entities\hotkey_binding.py:55:1: SyntaxError: Unexpected indentation
   |
53 |     field(default=None, init=False))
54 |
55 |     def __post_init__(self):
   | ^
56 |         """Initialize the hotkey binding entity."""
57 |         super().__post_init__()
   |

src_refactored\domain\settings\entities\hotkey_binding.py:66:13: SyntaxError: Expected ',', found name
   |
64 |         modifier_keys = [
65 |             KeyInfo("CTRL", KeyType.MODIFIER, "Ctrl")
66 |             KeyInfo("ALT", KeyType.MODIFIER, "Alt")
   |             ^
67 |             KeyInfo("SHIFT", KeyType.MODIFIER, "Shift")
68 |             KeyInfo("META", KeyType.MODIFIER, "Meta"),
   |

src_refactored\domain\settings\entities\hotkey_binding.py:67:13: SyntaxError: Expected ',', found name
   |
65 |             KeyInfo("CTRL", KeyType.MODIFIER, "Ctrl")
66 |             KeyInfo("ALT", KeyType.MODIFIER, "Alt")
67 |             KeyInfo("SHIFT", KeyType.MODIFIER, "Shift")
   |             ^
68 |             KeyInfo("META", KeyType.MODIFIER, "Meta"),
69 |         ]
   |

src_refactored\domain\settings\entities\hotkey_binding.py:68:13: SyntaxError: Expected ',', found name
   |
66 |             KeyInfo("ALT", KeyType.MODIFIER, "Alt")
67 |             KeyInfo("SHIFT", KeyType.MODIFIER, "Shift")
68 |             KeyInfo("META", KeyType.MODIFIER, "Meta"),
   |             ^
69 |         ]
   |

src_refactored\domain\settings\entities\hotkey_binding.py:79:13: SyntaxError: Expected ',', found name
   |
77 |         special_keys = [
78 |             KeyInfo("ESC", KeyType.SPECIAL, "Escape")
79 |             KeyInfo("TAB", KeyType.SPECIAL, "Tab")
   |             ^
80 |             KeyInfo("CAPS", KeyType.SPECIAL, "Caps Lock")
81 |             KeyInfo("SPACE", KeyType.SPECIAL, "Space"),
   |

src_refactored\domain\settings\entities\hotkey_binding.py:80:13: SyntaxError: Expected ',', found name
   |
78 |             KeyInfo("ESC", KeyType.SPECIAL, "Escape")
79 |             KeyInfo("TAB", KeyType.SPECIAL, "Tab")
80 |             KeyInfo("CAPS", KeyType.SPECIAL, "Caps Lock")
   |             ^
81 |             KeyInfo("SPACE", KeyType.SPECIAL, "Space"),
82 |         ]
   |

src_refactored\domain\settings\entities\hotkey_binding.py:81:13: SyntaxError: Expected ',', found name
   |
79 |             KeyInfo("TAB", KeyType.SPECIAL, "Tab")
80 |             KeyInfo("CAPS", KeyType.SPECIAL, "Caps Lock")
81 |             KeyInfo("SPACE", KeyType.SPECIAL, "Space"),
   |             ^
82 |         ]
   |

src_refactored\domain\settings\entities\hotkey_binding.py:117:17: SyntaxError: Expected an indented block after `try` statement
    |
116 |         if len(self._pressed_keys) > 0:
117 |             try:
    |                 ^
118 |                 # Create new combination from pressed keys
119 | combination_string = (
    |

src_refactored\domain\settings\entities\hotkey_binding.py:119:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
117 |             try:
118 |                 # Create new combination from pressed keys
119 | combination_string = (
    | ^
120 |     "+".join(sorted(self._pressed_keys, key=self._get_key_sort_priority)))
121 |                 new_combination = KeyCombination.from_string(combination_string)
    |

src_refactored\domain\settings\entities\hotkey_binding.py:121:1: SyntaxError: Unexpected indentation
    |
119 | combination_string = (
120 |     "+".join(sorted(self._pressed_keys, key=self._get_key_sort_priority)))
121 |                 new_combination = KeyCombination.from_string(combination_string)
    | ^
122 |
123 |                 # Validate the new combination
    |

src_refactored\domain\settings\entities\hotkey_binding.py:138:1: SyntaxError: unindent does not match any outer indentation level
    |
136 |                 return False
137 |
138 |             except ValueError:
    | ^
139 |                 # Invalid combination format
140 |                 self._pressed_keys.clear()
    |

src_refactored\domain\settings\entities\hotkey_binding.py:138:13: SyntaxError: Expected a statement
    |
136 |                 return False
137 |
138 |             except ValueError:
    |             ^
139 |                 # Invalid combination format
140 |                 self._pressed_keys.clear()
    |

src_refactored\domain\settings\entities\hotkey_binding.py:138:31: SyntaxError: Expected an expression
    |
136 |                 return False
137 |
138 |             except ValueError:
    |                               ^
139 |                 # Invalid combination format
140 |                 self._pressed_keys.clear()
    |

src_refactored\domain\settings\entities\hotkey_binding.py:140:1: SyntaxError: Unexpected indentation
    |
138 |             except ValueError:
139 |                 # Invalid combination format
140 |                 self._pressed_keys.clear()
    | ^
141 |                 return False
    |

src_refactored\domain\settings\entities\hotkey_binding.py:143:1: SyntaxError: unindent does not match any outer indentation level
    |
141 |                 return False
142 |
143 |         return False
    | ^
144 |
145 |     def add_pressed_key(self, key_name: str,
    |

src_refactored\domain\settings\entities\hotkey_binding.py:145:1: SyntaxError: Unexpected indentation
    |
143 |         return False
144 |
145 |     def add_pressed_key(self, key_name: str,
    | ^
146 |     ) -> bool:
147 |         """Add a key to the currently pressed keys during recording."""
    |

src_refactored\domain\settings\entities\hotkey_binding.py:279:101: E501 Line too long (107 > 100)
    |
277 |         modifier_keys = {"CTRL", "ALT", "SHIFT", "META"}
278 |         if not any(key in modifier_keys for key in self.current_combination.keys):
279 |             errors.append("Combination must include at least one modifier key (Ctrl, Alt, Shift, or Meta)")
    |                                                                                                     ^^^^^^^ E501
280 |
281 |         # Check for invalid keys
    |

src_refactored\domain\settings\entities\hotkey_binding.py:299:52: SyntaxError: Expected a statement
    |
297 |         """Create a hotkey binding from a combination string."""
298 |         combination = KeyCombination.from_string(combination_string)
299 |         return cls(current_combination=combination)
    |                                                    ^
    |

src_refactored\domain\settings\entities\settings_configuration.py:95:61: SyntaxError: Expected an expression or a ')'
   |
93 |         """Get a setting value with optional default."""
94 |         if self._cached_settings is None:
95 |             self._cached_settings = self.load_configuration(,
   |                                                             ^
96 |     )
   |

src_refactored\domain\settings\entities\settings_configuration.py:161:13: SyntaxError: Expected ',', found string
    |
159 |             "quantization": lambda v: isinstance(v, str) and v in ["Full", "Quantized"],
160 |             "recording_sound_enabled": lambda v: isinstance(v, bool)
161 |             "sound_file_path": lambda v: isinstance(v, str)
    |             ^
162 |             "output_srt": lambda v: isinstance(v, bool)
163 |             "recording_key": lambda v: isinstance(v, str) and len(v.strip()) > 0,
    |

src_refactored\domain\settings\entities\settings_configuration.py:162:13: SyntaxError: Expected ',', found string
    |
160 |             "recording_sound_enabled": lambda v: isinstance(v, bool)
161 |             "sound_file_path": lambda v: isinstance(v, str)
162 |             "output_srt": lambda v: isinstance(v, bool)
    |             ^
163 |             "recording_key": lambda v: isinstance(v, str) and len(v.strip()) > 0,
164 |             "llm_enabled": lambda v: isinstance(v, bool)
    |

src_refactored\domain\settings\entities\settings_configuration.py:163:13: SyntaxError: Expected ',', found string
    |
161 |             "sound_file_path": lambda v: isinstance(v, str)
162 |             "output_srt": lambda v: isinstance(v, bool)
163 |             "recording_key": lambda v: isinstance(v, str) and len(v.strip()) > 0,
    |             ^
164 |             "llm_enabled": lambda v: isinstance(v, bool)
165 |             "llm_model": lambda v: isinstance(v, str) and len(v.strip()) > 0,
    |

src_refactored\domain\settings\entities\settings_configuration.py:165:13: SyntaxError: Expected ',', found string
    |
163 |             "recording_key": lambda v: isinstance(v, str) and len(v.strip()) > 0,
164 |             "llm_enabled": lambda v: isinstance(v, bool)
165 |             "llm_model": lambda v: isinstance(v, str) and len(v.strip()) > 0,
    |             ^
166 |             "llm_quantization": lambda v: isinstance(v, str) and v in ["Full", "Quantized"],
167 |             "llm_prompt": lambda v: isinstance(v, str) and len(v.strip()) > 0,
    |

src_refactored\domain\settings\entities\settings_configuration.py:200:13: SyntaxError: Expected ',', found string
    |
198 |         return {
199 |             "Model": self._cached_settings.get("model", "Unknown")
200 |             "Quantization": self._cached_settings.get("quantization", "Unknown")
    |             ^
201 |             "Recording Sound": "Enabled" if self._cached_settings.get("recording_sound_enabled") else "Disabled",
202 |             "SRT Output": "Enabled" if self._cached_settings.get("output_srt") else "Disabled",
    |

src_refactored\domain\settings\entities\settings_configuration.py:201:13: SyntaxError: Expected ',', found string
    |
199 |             "Model": self._cached_settings.get("model", "Unknown")
200 |             "Quantization": self._cached_settings.get("quantization", "Unknown")
201 |             "Recording Sound": "Enabled" if self._cached_settings.get("recording_sound_enabled") else "Disabled",
    |             ^
202 |             "SRT Output": "Enabled" if self._cached_settings.get("output_srt") else "Disabled",
203 |             "Recording Key": self._cached_settings.get("recording_key", "Not Set")
    |

src_refactored\domain\settings\entities\settings_configuration.py:201:101: E501 Line too long (113 > 100)
    |
199 |             "Model": self._cached_settings.get("model", "Unknown")
200 |             "Quantization": self._cached_settings.get("quantization", "Unknown")
201 |             "Recording Sound": "Enabled" if self._cached_settings.get("recording_sound_enabled") else "Disabled",
    |                                                                                                     ^^^^^^^^^^^^^ E501
202 |             "SRT Output": "Enabled" if self._cached_settings.get("output_srt") else "Disabled",
203 |             "Recording Key": self._cached_settings.get("recording_key", "Not Set")
    |

src_refactored\domain\settings\entities\settings_configuration.py:204:13: SyntaxError: Expected ',', found string
    |
202 |             "SRT Output": "Enabled" if self._cached_settings.get("output_srt") else "Disabled",
203 |             "Recording Key": self._cached_settings.get("recording_key", "Not Set")
204 |             "LLM Processing": "Enabled" if self._cached_settings.get("llm_enabled") else "Disabled",
    |             ^
205 |             "LLM Model": self._cached_settings.get("llm_model", "Not Set"),
206 |         }
    |

src_refactored\domain\settings\entities\user_preferences.py:43:58: SyntaxError: Expected an expression or a ')'
   |
42 |         # Validate that audio configuration is compatible with model requirements
43 |         if not self.audio_config.is_optimized_for_speech(,
   |                                                          ^
44 |     ) and self.model_config.model_type in [
45 |             ModelType.WHISPER_TURBO, ModelType.LITE_WHISPER_TURBO, ModelType.LITE_WHISPER_TURBO_FAST,
   |

src_refactored\domain\settings\entities\user_preferences.py:45:101: E501 Line too long (101 > 100)
   |
43 |         if not self.audio_config.is_optimized_for_speech(,
44 |     ) and self.model_config.model_type in [
45 |             ModelType.WHISPER_TURBO, ModelType.LITE_WHISPER_TURBO, ModelType.LITE_WHISPER_TURBO_FAST,
   |                                                                                                     ^ E501
46 |         ]:
47 |             # Log warning but don't fail - user might want different audio settings
   |

src_refactored\domain\settings\entities\user_preferences.py:55:13: SyntaxError: Expected ',', found name
   |
53 |         return cls(
54 |             recording_key=KeyCombination.from_string("CTRL+SHIFT+R")
55 |             model_config=ModelConfiguration(
   |             ^
56 |                 model_type=ModelType.LITE_WHISPER_TURBO,
57 |                 quantization=Quantization.QUANTIZED,
   |

src_refactored\domain\settings\entities\user_preferences.py:60:13: SyntaxError: Expected ',', found name
   |
58 |                 use_gpu=True,
59 |             )
60 |             llm_config=LLMConfiguration.create_default()
   |             ^
61 |             audio_config=AudioConfiguration.create_default()
62 |             output_srt_enabled=True,
   |

src_refactored\domain\settings\entities\user_preferences.py:61:13: SyntaxError: Expected ',', found name
   |
59 |             )
60 |             llm_config=LLMConfiguration.create_default()
61 |             audio_config=AudioConfiguration.create_default()
   |             ^
62 |             output_srt_enabled=True,
63 |         )
   |

src_refactored\domain\settings\entities\user_preferences.py:62:13: SyntaxError: Expected ',', found name
   |
60 |             llm_config=LLMConfiguration.create_default()
61 |             audio_config=AudioConfiguration.create_default()
62 |             output_srt_enabled=True,
   |             ^
63 |         )
   |

src_refactored\domain\settings\entities\user_preferences.py:216:13: SyntaxError: Expected ',', found string
    |
214 |         return {
215 |             "recording_key": self.recording_key.to_string()
216 |             "model_type": self.model_config.model_type.value,
    |             ^
217 |             "model_quantization": self.model_config.quantization.value,
218 |             "model_use_gpu": self.model_config.use_gpu,
    |

src_refactored\domain\settings\entities\user_preferences.py:232:101: E501 Line too long (138 > 100)
    |
230 | …nable_noise_reduction,
231 | …config.recording_sound_enabled,
232 | …_config.recording_sound_path) if self.audio_config.recording_sound_path else None,
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
233 | …d,
234 | …
    |

src_refactored\domain\settings\entities\user_preferences.py:247:13: SyntaxError: Expected ',', found name
    |
245 |             quantization=Quantization.from_string(data.get("model_quantization", "Quantized")),
246 |             use_gpu=data.get("model_use_gpu", True)
247 |             max_memory=data.get("model_max_memory"),
    |             ^
248 |         )
    |

src_refactored\domain\settings\entities\user_preferences.py:253:13: SyntaxError: Expected ',', found name
    |
251 |         llm_config = LLMConfiguration(
252 |             model_name=data.get("llm_model_name", "llama-3.2-3b-instruct")
253 |             quantization=Quantization.from_string(data.get("llm_quantization", "Quantized")),
    |             ^
254 | system_prompt = (
255 |     data.get("llm_system_prompt", LLMConfiguration.create_default().system_prompt),)
    |

src_refactored\domain\settings\entities\user_preferences.py:256:13: SyntaxError: Expected ',', found name
    |
254 | system_prompt = (
255 |     data.get("llm_system_prompt", LLMConfiguration.create_default().system_prompt),)
256 |             max_tokens=data.get("llm_max_tokens", 512)
    |             ^
257 |             temperature=data.get("llm_temperature", 0.7)
258 |             enabled=data.get("llm_enabled", False),
    |

src_refactored\domain\settings\entities\user_preferences.py:257:13: SyntaxError: Expected ',', found name
    |
255 |     data.get("llm_system_prompt", LLMConfiguration.create_default().system_prompt),)
256 |             max_tokens=data.get("llm_max_tokens", 512)
257 |             temperature=data.get("llm_temperature", 0.7)
    |             ^
258 |             enabled=data.get("llm_enabled", False),
259 |         )
    |

src_refactored\domain\settings\entities\user_preferences.py:258:13: SyntaxError: Expected ',', found name
    |
256 |             max_tokens=data.get("llm_max_tokens", 512)
257 |             temperature=data.get("llm_temperature", 0.7)
258 |             enabled=data.get("llm_enabled", False),
    |             ^
259 |         )
    |

src_refactored\domain\settings\entities\user_preferences.py:268:13: SyntaxError: Expected ',', found name
    |
266 |         audio_config = AudioConfiguration(
267 |             sample_rate=data.get("audio_sample_rate", 16000)
268 |             channels=data.get("audio_channels", 1)
    |             ^
269 |             bit_depth=data.get("audio_bit_depth", 16)
270 |             buffer_size=data.get("audio_buffer_size", 1024)
    |

src_refactored\domain\settings\entities\user_preferences.py:269:13: SyntaxError: Expected ',', found name
    |
267 |             sample_rate=data.get("audio_sample_rate", 16000)
268 |             channels=data.get("audio_channels", 1)
269 |             bit_depth=data.get("audio_bit_depth", 16)
    |             ^
270 |             buffer_size=data.get("audio_buffer_size", 1024)
271 |             enable_noise_reduction=data.get("audio_noise_reduction", True)
    |

src_refactored\domain\settings\entities\user_preferences.py:270:13: SyntaxError: Expected ',', found name
    |
268 |             channels=data.get("audio_channels", 1)
269 |             bit_depth=data.get("audio_bit_depth", 16)
270 |             buffer_size=data.get("audio_buffer_size", 1024)
    |             ^
271 |             enable_noise_reduction=data.get("audio_noise_reduction", True)
272 |             recording_sound_enabled=data.get("audio_recording_sound_enabled", False)
    |

src_refactored\domain\settings\entities\user_preferences.py:271:13: SyntaxError: Expected ',', found name
    |
269 |             bit_depth=data.get("audio_bit_depth", 16)
270 |             buffer_size=data.get("audio_buffer_size", 1024)
271 |             enable_noise_reduction=data.get("audio_noise_reduction", True)
    |             ^
272 |             recording_sound_enabled=data.get("audio_recording_sound_enabled", False)
273 |             recording_sound_path=recording_sound_path,
    |

src_refactored\domain\settings\entities\user_preferences.py:272:13: SyntaxError: Expected ',', found name
    |
270 |             buffer_size=data.get("audio_buffer_size", 1024)
271 |             enable_noise_reduction=data.get("audio_noise_reduction", True)
272 |             recording_sound_enabled=data.get("audio_recording_sound_enabled", False)
    |             ^
273 |             recording_sound_path=recording_sound_path,
274 |         )
    |

src_refactored\domain\settings\entities\user_preferences.py:273:13: SyntaxError: Expected ',', found name
    |
271 |             enable_noise_reduction=data.get("audio_noise_reduction", True)
272 |             recording_sound_enabled=data.get("audio_recording_sound_enabled", False)
273 |             recording_sound_path=recording_sound_path,
    |             ^
274 |         )
    |

src_refactored\domain\settings\value_objects\audio_configuration.py:92:33: PLR2004 Magic value used in comparison, consider replacing `44100` with a constant variable
   |
90 |         """Check if this is a high-quality configuration."""
91 |         return (
92 |             self.sample_rate >= 44100 and
   |                                 ^^^^^ PLR2004
93 |             self.bit_depth >= 16 and
94 |             self.channels >= 1
   |

src_refactored\domain\settings\value_objects\audio_configuration.py:93:31: PLR2004 Magic value used in comparison, consider replacing `16` with a constant variable
   |
91 |         return (
92 |             self.sample_rate >= 44100 and
93 |             self.bit_depth >= 16 and
   |                               ^^ PLR2004
94 |             self.channels >= 1
95 |         )
   |

src_refactored\domain\settings\value_objects\audio_configuration.py:100:33: PLR2004 Magic value used in comparison, consider replacing `16000` with a constant variable
    |
 98 |         """Check if this configuration is optimized for speech recognition."""
 99 |         return (
100 |             self.sample_rate == 16000 and
    |                                 ^^^^^ PLR2004
101 |             self.channels == 1 and
102 |             self.bit_depth == 16
    |

src_refactored\domain\settings\value_objects\audio_configuration.py:102:31: PLR2004 Magic value used in comparison, consider replacing `16` with a constant variable
    |
100 |             self.sample_rate == 16000 and
101 |             self.channels == 1 and
102 |             self.bit_depth == 16
    |                               ^^ PLR2004
103 |         )
    |

src_refactored\domain\settings\value_objects\file_path.py:35:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
33 |     def exists(self) -> bool:
34 |         """Check if the file exists."""
35 |         return os.path.exists(self.path)
   |                ^^^^^^^^^^^^^^ PTH110
36 |
37 |     def is_file(self) -> bool:
   |

src_refactored\domain\settings\value_objects\file_path.py:39:16: PTH113 `os.path.isfile()` should be replaced by `Path.is_file()`
   |
37 |     def is_file(self) -> bool:
38 |         """Check if the path points to a file."""
39 |         return os.path.isfile(self.path)
   |                ^^^^^^^^^^^^^^ PTH113
40 |
41 |     def is_directory(self) -> bool:
   |

src_refactored\domain\settings\value_objects\file_path.py:43:16: PTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`
   |
41 |     def is_directory(self) -> bool:
42 |         """Check if the path points to a directory."""
43 |         return os.path.isdir(self.path)
   |                ^^^^^^^^^^^^^ PTH112
44 |
45 |     def get_extension(self) -> str:
   |

src_refactored\domain\settings\value_objects\file_path.py:47:16: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
   |
45 |     def get_extension(self) -> str:
46 |         """Get the file extension (lowercase)."""
47 |         return os.path.splitext(self.path)[1].lower()
   |                ^^^^^^^^^^^^^^^^ PTH122
48 |
49 |     def get_filename(self) -> str:
   |

src_refactored\domain\settings\value_objects\file_path.py:51:16: PTH119 `os.path.basename()` should be replaced by `Path.name`
   |
49 |     def get_filename(self) -> str:
50 |         """Get the filename without directory."""
51 |         return os.path.basename(self.path)
   |                ^^^^^^^^^^^^^^^^ PTH119
52 |
53 |     def get_directory(self) -> str:
   |

src_refactored\domain\settings\value_objects\file_path.py:55:16: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
53 |     def get_directory(self) -> str:
54 |         """Get the directory path."""
55 |         return os.path.dirname(self.path)
   |                ^^^^^^^^^^^^^^^ PTH120
56 |
57 |     def is_absolute(self) -> bool:
   |

src_refactored\domain\settings\value_objects\file_path.py:59:16: PTH117 `os.path.isabs()` should be replaced by `Path.is_absolute()`
   |
57 |     def is_absolute(self) -> bool:
58 |         """Check if the path is absolute."""
59 |         return os.path.isabs(self.path)
   |                ^^^^^^^^^^^^^ PTH117
60 |
61 |     def to_absolute(self) -> FilePath:
   |

src_refactored\domain\settings\value_objects\file_path.py:63:30: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
61 |     def to_absolute(self) -> FilePath:
62 |         """Convert to absolute path."""
63 |         return FilePath(path=os.path.abspath(self.path))
   |                              ^^^^^^^^^^^^^^^ PTH100
64 |
65 |     def __str__(self) -> str:
   |

src_refactored\domain\settings\value_objects\file_path.py:74:28: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
72 |     """Value object for audio file paths with format validation."""
73 |
74 |     SUPPORTED_EXTENSIONS = {".mp3", ".wav", ".m4a", ".flac", ".ogg"}
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
75 |
76 |     def __post_init__(self):
   |

src_refactored\domain\settings\value_objects\file_path.py:98:28: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
 96 |     """Value object for model file paths with validation."""
 97 |
 98 |     SUPPORTED_EXTENSIONS = {".onnx", ".bin", ".pt", ".pth"}
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
 99 |
100 |     def __post_init__(self):
    |

src_refactored\domain\settings\value_objects\llm_configuration.py:37:43: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
   |
35 |             raise ValueError(msg)
36 |
37 |         if not 0.0 <= self.temperature <= 2.0:
   |                                           ^^^ PLR2004
38 |             msg = "Temperature must be between 0.0 and 2.0"
39 |             raise ValueError(msg)
   |

src_refactored\domain\settings\value_objects\llm_configuration.py:53:101: E501 Line too long (110 > 100)
   |
51 |             system_prompt=(
52 |                 "You are a helpful assistant that improves transcribed text by correcting errors, "
53 |                 "adding proper punctuation, and enhancing readability while maintaining the original meaning."
   |                                                                                                     ^^^^^^^^^^ E501
54 |             ),
55 |             max_tokens=512,
   |

src_refactored\domain\settings\value_objects\model_configuration.py:71:56: SyntaxError: Expected an expression or a ')'
   |
70 |         # GPU usage validation
71 |         if self.use_gpu and not self._is_gpu_available(,
   |                                                        ^
72 |     ):
73 |             # Note: In a real implementation, you might want to just log a warning
   |

src_refactored\domain\settings\value_objects\model_configuration.py:82:101: E501 Line too long (111 > 100)
   |
80 |             import onnxruntime as ort
81 |             providers = ort.get_available_providers()
82 |             return any(provider in providers for provider in ["CUDAExecutionProvider", "DmlExecutionProvider"])
   |                                                                                                     ^^^^^^^^^^^ E501
83 |         except ImportError:
84 |             return False
   |

src_refactored\domain\system_integration\entities\event_system_integration.py:417:37: SyntaxError: Expected an expression or a ')'
    |
416 |             # Clear processed events
417 |             self._event_queue.clear(,
    |                                     ^
418 |     )
    |

src_refactored\domain\system_integration\entities\event_system_integration.py:543:13: SyntaxError: Expected ',', found string
    |
541 |             "handler_id": handler_id,
542 |             "total_processed": len(processing_times)
543 |             "error_count": error_count,
    |             ^
544 |             "success_rate": 1.0 - (error_count / max(1, len(processing_times))),
545 |             "avg_processing_time_ms": sum(processing_times) / max(1, len(processing_times)),
    |

src_refactored\domain\system_integration\entities\event_system_integration.py:563:13: SyntaxError: Expected ',', found string
    |
561 |             "total_errors": total_errors,
562 |             "current_queue_size": len(self._event_queue)
563 |             "registered_handlers": len(self._handlers)
    |             ^
564 |             "active_filters": len([f for f in self._filters.values() if f.enabled]),
565 |             "events_by_type": dict(self._event_count)
    |

src_refactored\domain\system_integration\entities\event_system_integration.py:564:13: SyntaxError: Expected ',', found string
    |
562 |             "current_queue_size": len(self._event_queue)
563 |             "registered_handlers": len(self._handlers)
564 |             "active_filters": len([f for f in self._filters.values() if f.enabled]),
    |             ^
565 |             "events_by_type": dict(self._event_count)
566 |             "error_rate": total_errors / max(1, total_events)
    |

src_refactored\domain\system_integration\entities\event_system_integration.py:566:13: SyntaxError: Expected ',', found string
    |
564 |             "active_filters": len([f for f in self._filters.values() if f.enabled]),
565 |             "events_by_type": dict(self._event_count)
566 |             "error_rate": total_errors / max(1, total_events)
    |             ^
567 |             "is_processing": self._is_processing,
568 |             "is_paused": self._processing_paused,
    |

src_refactored\domain\system_integration\entities\event_system_integration.py:567:13: SyntaxError: Expected ',', found string
    |
565 |             "events_by_type": dict(self._event_count)
566 |             "error_rate": total_errors / max(1, total_events)
567 |             "is_processing": self._is_processing,
    |             ^
568 |             "is_paused": self._processing_paused,
569 |         }
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:140:13: SyntaxError: Expected ',', found string
    |
138 |                 label="Show",
139 |             )
140 |             "settings": TrayAction(
    |             ^
141 |                 action_type=TrayActionType.SETTINGS,
142 |                 label="Settings",
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:144:13: SyntaxError: Expected ',', found string
    |
142 |                 label="Settings",
143 |             )
144 |             "exit": TrayAction(
    |             ^
145 |                 action_type=TrayActionType.EXIT,
146 |                 label="Exit",
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:235:13: SyntaxError: Expected ',', found name
    |
233 |         updated_action = TrayAction(
234 |             action_type=updates.get("action_type", action.action_type)
235 |             label=updates.get("label", action.label)
    |             ^
236 |             callback=updates.get("callback", action.callback)
237 |             enabled=updates.get("enabled", action.enabled)
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:236:13: SyntaxError: Expected ',', found name
    |
234 |             action_type=updates.get("action_type", action.action_type)
235 |             label=updates.get("label", action.label)
236 |             callback=updates.get("callback", action.callback)
    |             ^
237 |             enabled=updates.get("enabled", action.enabled)
238 |             visible=updates.get("visible", action.visible),
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:237:13: SyntaxError: Expected ',', found name
    |
235 |             label=updates.get("label", action.label)
236 |             callback=updates.get("callback", action.callback)
237 |             enabled=updates.get("enabled", action.enabled)
    |             ^
238 |             visible=updates.get("visible", action.visible),
239 |         )
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:238:13: SyntaxError: Expected ',', found name
    |
236 |             callback=updates.get("callback", action.callback)
237 |             enabled=updates.get("enabled", action.enabled)
238 |             visible=updates.get("visible", action.visible),
    |             ^
239 |         )
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:280:13: SyntaxError: Expected ',', found name
    |
278 |         self._configuration = TrayConfiguration(
279 |             icon_path=updates.get("icon_path", self._configuration.icon_path)
280 |             tooltip=updates.get("tooltip", self._configuration.tooltip)
    |             ^
281 | show_notifications = (
282 |     updates.get("show_notifications", self._configuration.show_notifications))
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:281:1: SyntaxError: Expected ',', found name
    |
279 |             icon_path=updates.get("icon_path", self._configuration.icon_path)
280 |             tooltip=updates.get("tooltip", self._configuration.tooltip)
281 | show_notifications = (
    | ^
282 |     updates.get("show_notifications", self._configuration.show_notifications))
283 | auto_hide_on_close = (
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:283:1: SyntaxError: Expected ',', found name
    |
281 | show_notifications = (
282 |     updates.get("show_notifications", self._configuration.show_notifications))
283 | auto_hide_on_close = (
    | ^
284 |     updates.get("auto_hide_on_close", self._configuration.auto_hide_on_close))
285 | double_click_action = (
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:285:1: SyntaxError: Expected ',', found name
    |
283 | auto_hide_on_close = (
284 |     updates.get("auto_hide_on_close", self._configuration.auto_hide_on_close))
285 | double_click_action = (
    | ^
286 |     updates.get("double_click_action", self._configuration.double_click_action)),
287 |         )
    |

src_refactored\domain\system_integration\entities\system_tray_integration.py:351:13: SyntaxError: Expected ',', found string
    |
349 |             "error_message": self._error_message,
350 |             "action_count": len(self._actions)
351 |             "visible_actions": len(self.get_visible_actions()),
    |             ^
352 |             "enabled_actions": len(self.get_enabled_actions()),
353 |             "configuration": {
    |

src_refactored\domain\system_integration\entities\worker_thread_coordination.py:171:57: SyntaxError: Expected an expression or a ')'
    |
169 |         self._threads[thread_id] = configuration
170 |         self._thread_states[thread_id] = ThreadState.CREATED
171 |         self._thread_metrics[thread_id] = ThreadMetrics(,
    |                                                         ^
172 |     )
    |

src_refactored\domain\system_integration\entities\worker_thread_coordination.py:452:13: SyntaxError: Expected ',', found string
    |
450 |             "coordination_id": self._coordination_id,
451 |             "total_threads": len(self._threads)
452 |             "running_threads": running_count,
    |             ^
453 |             "error_threads": error_count,
454 |             "total_errors": total_errors,
    |

src_refactored\domain\system_integration\entities\worker_thread_coordination.py:472:61: SyntaxError: Expected an expression or a ')'
    |
470 |         """Reset metrics for all threads."""
471 |         for thread_id in self._threads:
472 |             self._thread_metrics[thread_id] = ThreadMetrics(,
    |                                                             ^
473 |     )
    |

src_refactored\domain\system_integration\value_objects\thread_reference.py:169:13: SyntaxError: Expected ',', found name
    |
167 |             thread_id=data["thread_id"],
168 |             reference_type=ThreadReferenceType(data["reference_type"])
169 |             thread_name=data.get("thread_name")
    |             ^
170 |             created_at=created_at,
171 |         )
    |

src_refactored\domain\system_integration\value_objects\thread_reference.py:170:13: SyntaxError: Expected ',', found name
    |
168 |             reference_type=ThreadReferenceType(data["reference_type"])
169 |             thread_name=data.get("thread_name")
170 |             created_at=created_at,
    |             ^
171 |         )
    |

src_refactored\domain\system_integration\value_objects\tray_icon_path.py:76:43: SyntaxError: Expected an expression or a ')'
   |
74 |         """Check if the tray icon file exists."""
75 |         try:
76 |             return Path(self.path).exists(,
   |                                           ^
77 |     )
78 |         except (OSError, ValueError):
   |

src_refactored\domain\system_integration\value_objects\tray_icon_path.py:105:38: SyntaxError: Expected an expression or a ')'
    |
103 |             path_obj = Path(self.path)
104 |             if path_obj.exists():
105 |                 return path_obj.stat(,
    |                                      ^
106 |     ).st_size
107 |             return None
    |

src_refactored\domain\system_integration\value_objects\tray_icon_path.py:172:37: SyntaxError: Expected an expression or a ')'
    |
171 |             # Check if it's a file (not directory)
172 |             if not path_obj.is_file(,
    |                                     ^
173 |     ):
174 |                 return False
    |

src_refactored\domain\transcription\entities\model_instance.py:86:31: SyntaxError: Expected an expression or a ')'
   |
85 |     def __post_init__(self):
86 |         super().__post_init__(,
   |                               ^
87 |     )
   |

src_refactored\domain\transcription\entities\model_instance.py:111:31: SyntaxError: Expected an expression or a ')'
    |
109 |         self.download_progress = 0.0
110 |         self.error_message = None
111 |         self.update_timestamp(,
    |                               ^
112 |     )
    |

src_refactored\domain\transcription\entities\model_instance.py:155:31: SyntaxError: Expected an expression or a ')'
    |
153 |         self.state = ModelState.INITIALIZING
154 |         self.download_progress = 100.0
155 |         self.update_timestamp(,
    |                               ^
156 |     )
    |

src_refactored\domain\transcription\entities\model_instance.py:175:70: SyntaxError: Expected an expression or a ')'
    |
174 |         # Calculate load time
175 |         load_time = (datetime.now() - self.created_at).total_seconds(,
    |                                                                      ^
176 |     ) if hasattr(self, "created_at") else 0.0
    |

src_refactored\domain\transcription\entities\model_instance.py:194:31: SyntaxError: Expected an expression or a ')'
    |
192 |         self.state = ModelState.FAILED
193 |         self.error_message = error_message
194 |         self.update_timestamp(,
    |                               ^
195 |     )
    |

src_refactored\domain\transcription\entities\model_instance.py:227:31: SyntaxError: Expected an expression or a ')'
    |
226 |         self.state = ModelState.UPDATING
227 |         self.update_timestamp(,
    |                               ^
228 |     )
    |

src_refactored\domain\transcription\entities\model_instance.py:380:101: E501 Line too long (107 > 100)
    |
378 |         """Get usage statistics for the model."""
379 |         return {
380 |             "total_usage_time": (datetime.now() - self.loaded_at).total_seconds() if self.loaded_at else 0,
    |                                                                                                     ^^^^^^^ E501
381 |             "last_used": self.last_used.isoformat() if self.last_used else None,
382 |             "state": self.state.value,
    |

src_refactored\domain\transcription\entities\transcription_result.py:205:41: SyntaxError: Expected an expression or a ')'
    |
204 |         # Generate final text
205 |         final_text = self.get_full_text(,
    |                                         ^
206 |     )
    |

src_refactored\domain\transcription\entities\transcription_result.py:216:13: SyntaxError: Expected ',', found name
    |
214 |             final_text=final_text,
215 |             segment_count=len(self.segments)
216 |             processing_duration=self.processing_duration,
    |             ^
217 |             confidence=self.overall_confidence,
218 |         )
    |

src_refactored\domain\transcription\entities\transcription_result.py:229:42: SyntaxError: Expected an expression or a ')'
    |
227 |         self.status = TranscriptionStatus.FAILED
228 |         self.error_message = error_message
229 |         self.completed_at = datetime.now(,
    |                                          ^
230 |     )
    |

src_refactored\domain\transcription\entities\transcription_result.py:406:101: E501 Line too long (118 > 100)
    |
404 |                 "model_version": self.model_version,
405 |                 "processed_at": self.completed_at.isoformat() if self.completed_at else None,
406 |                 "processing_duration_seconds": self.processing_duration.seconds if self.processing_duration else None,
    |                                                                                                     ^^^^^^^^^^^^^^^^^^ E501
407 |             },
408 |         }
    |

src_refactored\domain\transcription\entities\transcription_result.py:486:50: SyntaxError: Expected an expression
    |
484 |             if segment.duration.seconds > 30:  # Very long segments might indicate issues
485 |                 return False
486 |             if segment.duration.seconds < 0.1 and
    |                                                  ^
487 |     not segment.text.is_empty:  # Very short segments with content
488 |                 return False
    |

src_refactored\domain\transcription\entities\transcription_result.py:487:5: SyntaxError: Invalid annotated assignment target
    |
485 |                 return False
486 |             if segment.duration.seconds < 0.1 and
487 |     not segment.text.is_empty:  # Very short segments with content
    |     ^
488 |                 return False
    |

src_refactored\domain\transcription\entities\transcription_result.py:487:67: SyntaxError: Expected an expression
    |
485 |                 return False
486 |             if segment.duration.seconds < 0.1 and
487 |     not segment.text.is_empty:  # Very short segments with content
    |                                                                   ^
488 |                 return False
    |

src_refactored\domain\transcription\entities\transcription_result.py:488:1: SyntaxError: Unexpected indentation
    |
486 |             if segment.duration.seconds < 0.1 and
487 |     not segment.text.is_empty:  # Very short segments with content
488 |                 return False
    | ^
489 |
490 |         return True
    |

src_refactored\domain\transcription\entities\transcription_result.py:490:1: SyntaxError: unindent does not match any outer indentation level
    |
488 |                 return False
489 |
490 |         return True
    | ^
    |

src_refactored\domain\transcription\entities\transcription_segment.py:40:101: E501 Line too long (110 > 100)
   |
38 |         if self.start_time.seconds >= self.end_time.seconds:
39 |             msg = (
40 |                 f"Start time ({self.start_time.seconds}s) must be before end time ({self.end_time.seconds}s)")
   |                                                                                                     ^^^^^^^^^^ E501
41 |             raise ValueError(msg)
   |

src_refactored\domain\transcription\entities\transcription_segment.py:44:36: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
   |
43 |         # Business rule: Segments should not be too short (unless it's the only segment)
44 |         if self.duration.seconds < 0.1 and not self.text.is_empty:
   |                                    ^^^ PLR2004
45 |             msg = f"Segment too short: {self.duration.seconds}s"
46 |             raise ValueError(msg)
   |

src_refactored\domain\transcription\value_objects\confidence_score.py:42:25: PLR2004 Magic value used in comparison, consider replacing `0.2` with a constant variable
   |
40 |     def level(self) -> ConfidenceLevel:
41 |         """Categorize confidence score into discrete levels."""
42 |         if self.value < 0.2:
   |                         ^^^ PLR2004
43 |             return ConfidenceLevel.VERY_LOW
44 |         if self.value < 0.4:
   |

src_refactored\domain\transcription\value_objects\confidence_score.py:44:25: PLR2004 Magic value used in comparison, consider replacing `0.4` with a constant variable
   |
42 |         if self.value < 0.2:
43 |             return ConfidenceLevel.VERY_LOW
44 |         if self.value < 0.4:
   |                         ^^^ PLR2004
45 |             return ConfidenceLevel.LOW
46 |         if self.value < 0.6:
   |

src_refactored\domain\transcription\value_objects\confidence_score.py:46:25: PLR2004 Magic value used in comparison, consider replacing `0.6` with a constant variable
   |
44 |         if self.value < 0.4:
45 |             return ConfidenceLevel.LOW
46 |         if self.value < 0.6:
   |                         ^^^ PLR2004
47 |             return ConfidenceLevel.MEDIUM
48 |         if self.value < 0.8:
   |

src_refactored\domain\transcription\value_objects\confidence_score.py:48:25: PLR2004 Magic value used in comparison, consider replacing `0.8` with a constant variable
   |
46 |         if self.value < 0.6:
47 |             return ConfidenceLevel.MEDIUM
48 |         if self.value < 0.8:
   |                         ^^^ PLR2004
49 |             return ConfidenceLevel.HIGH
50 |         return ConfidenceLevel.VERY_HIGH
   |

src_refactored\domain\transcription\value_objects\confidence_score.py:60:30: PLR2004 Magic value used in comparison, consider replacing `0.6` with a constant variable
   |
58 |     def is_reliable(self) -> bool:
59 |         """Check if confidence is high enough to be considered reliable."""
60 |         return self.value >= 0.6
   |                              ^^^ PLR2004
61 |
62 |     @property
   |

src_refactored\domain\transcription\value_objects\confidence_score.py:65:30: PLR2004 Magic value used in comparison, consider replacing `0.8` with a constant variable
   |
63 |     def is_very_reliable(self) -> bool:
64 |         """Check if confidence is very high."""
65 |         return self.value >= 0.8
   |                              ^^^ PLR2004
66 |
67 |     @property
   |

src_refactored\domain\transcription\value_objects\confidence_score.py:70:29: PLR2004 Magic value used in comparison, consider replacing `0.4` with a constant variable
   |
68 |     def is_questionable(self) -> bool:
69 |         """Check if confidence is low enough to be questionable."""
70 |         return self.value < 0.4
   |                             ^^^ PLR2004
71 |
72 |     @property
   |

src_refactored\domain\transcription\value_objects\download_progress.py:31:40: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
   |
29 |             raise ValueError(msg)
30 |
31 |         if not 0 <= self.percentage <= 100:
   |                                        ^^^ PLR2004
32 |             msg = "Percentage must be between 0 and 100"
33 |             raise ValueError(msg)
   |

src_refactored\domain\transcription\value_objects\transcription_text.py:32:32: PLR2004 Magic value used in comparison, consider replacing `1_000_000` with a constant variable
   |
31 |         # Validate maximum length (prevent memory issues)
32 |         if len(self.content) > 1_000_000:  # 1 million characters
   |                                ^^^^^^^^^ PLR2004
33 |             msg = f"Transcription text too long: {len(self.content)} characters"
34 |             raise ValueError(msg)
   |

src_refactored\domain\transcription\value_objects\transcription_text.py:115:17: PLW2901 `for` loop variable `sentence` overwritten by assignment target
    |
113 |             if sentence.strip():
114 |                 # Capitalize first letter
115 |                 sentence = sentence.strip()
    |                 ^^^^^^^^ PLW2901
116 |                 if sentence:
117 |                     sentence = sentence[0].upper() + sentence[1:]
    |

src_refactored\domain\transcription\value_objects\transcription_text.py:117:21: PLW2901 `for` loop variable `sentence` overwritten by assignment target
    |
115 |                 sentence = sentence.strip()
116 |                 if sentence:
117 |                     sentence = sentence[0].upper() + sentence[1:]
    |                     ^^^^^^^^ PLW2901
118 |                 capitalized_sentences.append(sentence)
    |

src_refactored\domain\ui_coordination\entities\animation_controller.py:178:13: SyntaxError: Expected ',', found name
    |
176 |             element_type=element_type,
177 |             start_time=datetime.now()
178 |             completion_callback=completion_callback,
    |             ^
179 |         )
    |

src_refactored\domain\ui_coordination\entities\animation_controller.py:243:55: SyntaxError: Expected an expression or a ')'
    |
241 |                     # Call completion callback
242 |                     if animation.completion_callback:
243 |                         animation.completion_callback(,
    |                                                       ^
244 |     )
    |

src_refactored\domain\ui_coordination\entities\animation_controller.py:388:37: SyntaxError: Expected an expression or a ')'
    |
386 |         self.active_animations.clear()
387 |         self.animation_groups.clear()
388 |         self.update_callbacks.clear(,
    |                                     ^
389 |     )
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:64:1: SyntaxError: Unexpected indentation
   |
62 |     UIElementState.hidden(ElementType.PROGRESS_BAR))
63 |
64 |     def start_recording_mode(self) -> dict[ElementType, AnimationState]:
   | ^
65 |         """Start recording mode with coordinated animations."""
66 |         if self.is_recording:
   |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:73:1: SyntaxError: Expected a statement
   |
72 |         # Show and fade in visualizer
73 | self.element_states[ElementType.VISUALIZER] = (
   | ^
74 |     UIElementState.visible_enabled(ElementType.VISUALIZER))
75 |         animations[ElementType.VISUALIZER] = AnimationState.fade_in(duration_ms=500)
   |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:75:1: SyntaxError: Unexpected indentation
   |
73 | self.element_states[ElementType.VISUALIZER] = (
74 |     UIElementState.visible_enabled(ElementType.VISUALIZER))
75 |         animations[ElementType.VISUALIZER] = AnimationState.fade_in(duration_ms=500)
   | ^
76 |
77 |         # Dim other elements
   |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:84:1: SyntaxError: Expected a statement
   |
83 |         # Hide instruction completely
84 | self.element_states[ElementType.INSTRUCTION] = (
   | ^
85 |     UIElementState.hidden(ElementType.INSTRUCTION))
86 |         animations[ElementType.INSTRUCTION] = AnimationState.fade_out(duration_ms=500)
   |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:86:1: SyntaxError: Unexpected indentation
   |
84 | self.element_states[ElementType.INSTRUCTION] = (
85 |     UIElementState.hidden(ElementType.INSTRUCTION))
86 |         animations[ElementType.INSTRUCTION] = AnimationState.fade_out(duration_ms=500)
   | ^
87 |
88 |         # Store active animations
   |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:93:1: SyntaxError: unindent does not match any outer indentation level
   |
91 |         return animations
92 |
93 |     def stop_recording_mode(self) -> dict[ElementType, AnimationState]:
   | ^
94 |         """Stop recording mode and restore UI elements."""
95 |         if not self.is_recording:
   |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:114:1: SyntaxError: Unexpected indentation
    |
112 | self.element_states[ElementType.INSTRUCTION] = (
113 |     UIElementState.visible_enabled(ElementType.INSTRUCTION))
114 |         animations[ElementType.INSTRUCTION] = AnimationState.fade_in(duration_ms=500)
    | ^
115 |
116 |         # Store active animations
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:121:1: SyntaxError: unindent does not match any outer indentation level
    |
119 |         return animations
120 |
121 |     def start_download_mode(self, filename: str,
    | ^
122 |     ) -> None:
123 |         """Start download mode and disable settings."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:143:1: SyntaxError: unindent does not match any outer indentation level
    |
141 |         self._hide_instruction_during_process()
142 |
143 |     def update_download_progress(self, filename: str, percentage: int,
    | ^
144 |     ) -> None:
145 |         """Update download progress."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:154:1: SyntaxError: Unexpected indentation
    |
153 |         # Update message
154 |         download_message = MessageDisplay.download_progress(filename, percentage)
    | ^
155 |         self.current_message = download_message
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:161:5: SyntaxError: unindent does not match any outer indentation level
    |
159 |             self.complete_download_mode()
160 |
161 |     def complete_download_mode(self) -> None:
    |     ^
162 |         """Complete download mode and restore UI."""
163 |         if not self.is_downloading:
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:183:1: SyntaxError: Unexpected indentation
    |
182 |         # Clear current message
183 |         self.current_message = None
    | ^
184 |
185 |         # Show instruction again
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:188:1: SyntaxError: unindent does not match any outer indentation level
    |
186 |         self._show_instruction_after_process()
187 |
188 |     def start_transcription_mode(self, hold_message: bool = True,
    | ^
189 |     ) -> None:
190 |         """Start transcription mode."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:197:1: SyntaxError: unindent does not match any outer indentation level
    |
195 |         self.display_message(transcription_message)
196 |
197 |     def update_transcription_progress(self, percentage: int,
    | ^
198 |     ) -> None:
199 |         """Update transcription progress."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:208:1: SyntaxError: Unexpected indentation
    |
207 |         # Update message if we have one
208 |         if self.current_message and self.current_message.is_progress_message():
    | ^
209 |             self.current_message = self.current_message.with_progress(percentage)
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:211:5: SyntaxError: unindent does not match any outer indentation level
    |
209 |             self.current_message = self.current_message.with_progress(percentage)
210 |
211 |     def complete_transcription_mode(self, success_message: str | None = None) -> None:
    |     ^
212 |         """Complete transcription mode."""
213 |         if not self.is_transcribing:
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:224:38: SyntaxError: Expected an indented block after `if` statement
    |
223 |         # Hide progress bar after delay if not in batch mode
224 |         if not self.is_in_batch_mode:
    |                                      ^
225 | self.element_states[ElementType.PROGRESS_BAR] = (
226 |     UIElementState.hidden(ElementType.PROGRESS_BAR,)
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:226:51: COM819 Trailing comma prohibited
    |
224 |         if not self.is_in_batch_mode:
225 | self.element_states[ElementType.PROGRESS_BAR] = (
226 |     UIElementState.hidden(ElementType.PROGRESS_BAR,)
    |                                                   ^ COM819
227 |     )
228 |             self.current_message = None
    |
    = help: Remove trailing comma

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:228:1: SyntaxError: Unexpected indentation
    |
226 |     UIElementState.hidden(ElementType.PROGRESS_BAR,)
227 |     )
228 |             self.current_message = None
    | ^
229 |
230 |     def display_message(self, message: MessageDisplay,
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:230:1: SyntaxError: unindent does not match any outer indentation level
    |
228 |             self.current_message = None
229 |
230 |     def display_message(self, message: MessageDisplay,
    | ^
231 |     ) -> None:
232 |         """Display a message, handling priority and queue."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:244:5: SyntaxError: unindent does not match any outer indentation level
    |
242 |             self.message_queue.append(message)
243 |
244 |     def clear_current_message(self) -> MessageDisplay | None:
    |     ^
245 |         """Clear current message and show next in queue."""
246 |         cleared_message = self.current_message
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:255:1: SyntaxError: unindent does not match any outer indentation level
    |
253 |         return cleared_message
254 |
255 |     def update_instruction_text(self, key_combination: str,
    | ^
256 |     ) -> None:
257 |         """Update instruction text with current key combination."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:269:56: COM812 Trailing comma missing
    |
267 |         self.element_states[ElementType.INSTRUCTION] = UIElementState.visible_enabled(
268 |             ElementType.INSTRUCTION,
269 |             text=instruction_message.get_display_text()
    |                                                        ^ COM812
270 |         )
    |
    = help: Add trailing comma

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:272:1: SyntaxError: unindent does not match any outer indentation level
    |
270 |         )
271 |
272 |     def _hide_instruction_during_process(self) -> None:
    | ^
273 |         """Hide instruction text during processes like download."""
274 |         if ElementType.INSTRUCTION in self.element_states:
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:283:5: SyntaxError: unindent does not match any outer indentation level
    |
281 |             )
282 |
283 |     def _show_instruction_after_process(self) -> None:
    |     ^
284 |         """Show instruction text after processes complete."""
285 |         if ElementType.INSTRUCTION in self.element_states:
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:295:5: SyntaxError: unindent does not match any outer indentation level
    |
293 |             )
294 |
295 |     def get_element_state(self, element_type: ElementType,
    |     ^
296 |     ) -> UIElementState | None:
297 |         """Get current state of a UI element."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:300:1: SyntaxError: unindent does not match any outer indentation level
    |
298 |         return self.element_states.get(element_type)
299 |
300 |     def get_active_animation(self, element_type: ElementType,
    | ^
301 |     ) -> AnimationState | None:
302 |         """Get active animation for an element."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:305:1: SyntaxError: unindent does not match any outer indentation level
    |
303 |         return self.active_animations.get(element_type)
304 |
305 |     def complete_animation(self, element_type: ElementType,
    | ^
306 |     ) -> None:
307 |         """Mark an animation as complete."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:310:1: SyntaxError: unindent does not match any outer indentation level
    |
308 |         self.active_animations.pop(element_type, None)
309 |
310 |     def is_element_animating(self, element_type: ElementType,
    | ^
311 |     ) -> bool:
312 |         """Check if an element is currently animating."""
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:315:1: SyntaxError: unindent does not match any outer indentation level
    |
313 |         return element_type in self.active_animations
314 |
315 |     def get_current_ui_mode(self) -> str:
    | ^
316 |         """Get a description of the current UI mode."""
317 |         if self.is_recording:
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:327:1: SyntaxError: unindent does not match any outer indentation level
    |
325 |         return "idle"
326 |
327 |     def reset_to_idle_state(self) -> None:
    | ^
328 |         """Reset UI to idle state."""
329 |         self.is_recording = False
    |

src_refactored\domain\ui_coordination\entities\ui_coordinator.py:339:42: SyntaxError: Expected dedent, found end of file
    |
338 |         # Reset to default states
339 |         self._initialize_default_states()
    |                                          ^
    |

src_refactored\domain\ui_coordination\value_objects\event_system.py:99:7: B024 `ICommand` is an abstract base class, but it has no abstract methods or properties
    |
 99 | class ICommand(ABC):
    |       ^^^^^^^^ B024
100 |     """Base interface for commands in CQRS pattern."""
    |

src_refactored\domain\ui_coordination\value_objects\message_display.py:65:54: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
   |
64 |         if self.progress_percentage is not None:
65 |             if not (0 <= self.progress_percentage <= 100):
   |                                                      ^^^ PLR2004
66 |                 msg = "Progress percentage must be between 0 and 100"
67 |                 raise ValueError(msg)
   |

src_refactored\domain\ui_coordination\value_objects\message_display.py:119:54: ARG003 Unused class method argument: `hold`
    |
118 |     @classmethod
119 |     def transcription_progress(cls, percentage: int, hold: bool = True,
    |                                                      ^^^^ ARG003
120 |     ) -> "MessageDisplay":
121 |         """Create a transcription progress message."""
    |

src_refactored\domain\ui_coordination\value_objects\message_display.py:130:26: ARG003 Unused class method argument: `text`
    |
129 |     @classmethod
130 |     def instruction(cls, text: str, key_combination: str,
    |                          ^^^^ ARG003
131 |     ) -> "MessageDisplay":
132 |         """Create an instruction message."""
    |

src_refactored\domain\ui_coordination\value_objects\message_display.py:143:101: E501 Line too long (108 > 100)
    |
141 |     ) -> "MessageDisplay":
142 |         """Create a new message with updated progress."""
143 |         if self.message_type not in [MessageType.PROGRESS, MessageType.DOWNLOAD, MessageType.TRANSCRIPTION]:
    |                                                                                                     ^^^^^^^^ E501
144 |             msg = "Progress updates only valid for progress-type messages"
145 |             raise ValueError(msg)
    |

src_refactored\domain\ui_coordination\value_objects\message_display.py:168:101: E501 Line too long (107 > 100)
    |
166 |     def is_progress_message(self) -> bool:
167 |         """Check if this is a progress-related message."""
168 |         return self.message_type in [MessageType.PROGRESS, MessageType.DOWNLOAD, MessageType.TRANSCRIPTION]
    |                                                                                                     ^^^^^^^ E501
169 |
170 |     def get_display_text(self) -> str:
    |

src_refactored\domain\ui_coordination\value_objects\ui_element_state.py:120:24: SyntaxError: Expected ',', found float
    |
118 |             interaction=InteractionState.DISABLED,
119 |             progress_value=value,
120 |             opacity=1.0.0,
    |                        ^
121 |         )
    |

src_refactored\domain\ui_coordination\value_objects\ui_element_state.py:177:101: E501 Line too long (109 > 100)
    |
175 |     def is_in_transition(self) -> bool:
176 |         """Check if element is in a transition state."""
177 |         return self.visibility in [VisibilityState.FADING_IN, VisibilityState.FADING_OUT] or self.is_animated
    |                                                                                                     ^^^^^^^^^ E501
    |

src_refactored\domain\ui_widgets\entities\toggle_widget.py:62:49: SyntaxError: Expected an expression or a ')'
   |
60 |         """Create a new toggle widget with default or provided configuration."""
61 |         if configuration is None:
62 |             configuration = ToggleConfiguration(,
   |                                                 ^
63 |     )
   |

src_refactored\domain\ui_widgets\entities\widget_state.py:159:80: SyntaxError: Expected a statement
    |
157 |     def has_visual_state_changed(self) -> bool:
158 |         """Check if visual state has changed."""
159 | return self._previous_visual_state is not None and self._previous_visual_state ! = (
    |                                                                                ^
160 |     self._visual_state)
    |

src_refactored\domain\ui_widgets\entities\widget_state.py:159:82: SyntaxError: Expected a statement
    |
157 |     def has_visual_state_changed(self) -> bool:
158 |         """Check if visual state has changed."""
159 | return self._previous_visual_state is not None and self._previous_visual_state ! = (
    |                                                                                  ^
160 |     self._visual_state)
    |

src_refactored\domain\ui_widgets\entities\widget_state.py:162:1: SyntaxError: Unexpected indentation
    |
160 |     self._visual_state)
161 |
162 |     def has_interaction_state_changed(self) -> bool:
    | ^
163 |         """Check if interaction state has changed."""
164 | return self._previous_interaction_state is not None and self._previous_interaction_state ! = (
    |

src_refactored\domain\ui_widgets\entities\widget_state.py:164:1: SyntaxError: Expected a statement
    |
162 |     def has_interaction_state_changed(self) -> bool:
163 |         """Check if interaction state has changed."""
164 | return self._previous_interaction_state is not None and self._previous_interaction_state ! = (
    | ^
165 |     self._interaction_state)
    |

src_refactored\domain\ui_widgets\entities\widget_state.py:164:90: SyntaxError: Expected a statement
    |
162 |     def has_interaction_state_changed(self) -> bool:
163 |         """Check if interaction state has changed."""
164 | return self._previous_interaction_state is not None and self._previous_interaction_state ! = (
    |                                                                                          ^
165 |     self._interaction_state)
    |

src_refactored\domain\ui_widgets\entities\widget_state.py:164:92: SyntaxError: Expected a statement
    |
162 |     def has_interaction_state_changed(self) -> bool:
163 |         """Check if interaction state has changed."""
164 | return self._previous_interaction_state is not None and self._previous_interaction_state ! = (
    |                                                                                            ^
165 |     self._interaction_state)
    |

src_refactored\domain\ui_widgets\entities\widget_state.py:168:1: SyntaxError: Unexpected indentation
    |
167 |     # Properties
168 |     @property
    | ^
169 |     def visual_state(self) -> VisualState:
170 |         """Get current visual state."""
    |

src_refactored\domain\ui_widgets\entities\widget_state.py:215:34: SyntaxError: Expected a statement
    |
213 |         if not self._is_enabled and self._interaction_state not in [InteractionState.LOCKED]:
214 |             msg = "Disabled widget must have locked interaction state"
215 |             raise ValueError(msg)
    |                                  ^
    |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:57:21: SyntaxError: Expected ',', found ':'
   |
55 |     def with_constraints(self, min_width: int | None = None, min_height: int | None = None,
56 | max_width: int | None = (
57 |     None, max_height: int | None = None) -> WidgetDimensions:)
   |                     ^
58 |         """Create new dimensions with updated size constraints."""
59 |         return WidgetDimensions(
   |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:57:34: SyntaxError: Expected ',', found '='
   |
55 |     def with_constraints(self, min_width: int | None = None, min_height: int | None = None,
56 | max_width: int | None = (
57 |     None, max_height: int | None = None) -> WidgetDimensions:)
   |                                  ^
58 |         """Create new dimensions with updated size constraints."""
59 |         return WidgetDimensions(
   |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:57:42: SyntaxError: Expected ')', found '->'
   |
55 |     def with_constraints(self, min_width: int | None = None, min_height: int | None = None,
56 | max_width: int | None = (
57 |     None, max_height: int | None = None) -> WidgetDimensions:)
   |                                          ^
58 |         """Create new dimensions with updated size constraints."""
59 |         return WidgetDimensions(
   |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:57:62: SyntaxError: Expected a simple statement
   |
55 |     def with_constraints(self, min_width: int | None = None, min_height: int | None = None,
56 | max_width: int | None = (
57 |     None, max_height: int | None = None) -> WidgetDimensions:)
   |                                                              ^
58 |         """Create new dimensions with updated size constraints."""
59 |         return WidgetDimensions(
   |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:57:63: SyntaxError: Expected a statement
   |
55 |     def with_constraints(self, min_width: int | None = None, min_height: int | None = None,
56 | max_width: int | None = (
57 |     None, max_height: int | None = None) -> WidgetDimensions:)
   |                                                               ^
58 |         """Create new dimensions with updated size constraints."""
59 |         return WidgetDimensions(
   |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:58:1: SyntaxError: Unexpected indentation
   |
56 | max_width: int | None = (
57 |     None, max_height: int | None = None) -> WidgetDimensions:)
58 |         """Create new dimensions with updated size constraints."""
   | ^
59 |         return WidgetDimensions(
60 |             width=self.width,
   |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:80:13: SyntaxError: Expected ',', found name
   |
78 |             width=int(self.width * factor,
79 |     )
80 |             height=int(self.height * factor)
   |             ^
81 |             x=int(self.x * factor) if self.x is not None else None,
82 |             y=int(self.y * factor) if self.y is not None else None,
   |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:81:13: SyntaxError: Expected ',', found name
   |
79 |     )
80 |             height=int(self.height * factor)
81 |             x=int(self.x * factor) if self.x is not None else None,
   |             ^
82 |             y=int(self.y * factor) if self.y is not None else None,
83 |             min_width=int(self.min_width * factor) if self.min_width is not None else None,
   |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:183:21: SyntaxError: Expected ',', found ':'
    |
181 |     def create_flexible(cls, width: int, height: int, min_width: int, min_height: int,
182 | max_width: int | None = (
183 |     None, max_height: int | None = None) -> WidgetDimensions:)
    |                     ^
184 |         """Create flexible dimensions with constraints."""
185 |         return cls(
    |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:183:34: SyntaxError: Expected ',', found '='
    |
181 |     def create_flexible(cls, width: int, height: int, min_width: int, min_height: int,
182 | max_width: int | None = (
183 |     None, max_height: int | None = None) -> WidgetDimensions:)
    |                                  ^
184 |         """Create flexible dimensions with constraints."""
185 |         return cls(
    |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:183:42: SyntaxError: Expected ')', found '->'
    |
181 |     def create_flexible(cls, width: int, height: int, min_width: int, min_height: int,
182 | max_width: int | None = (
183 |     None, max_height: int | None = None) -> WidgetDimensions:)
    |                                          ^
184 |         """Create flexible dimensions with constraints."""
185 |         return cls(
    |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:183:62: SyntaxError: Expected a simple statement
    |
181 |     def create_flexible(cls, width: int, height: int, min_width: int, min_height: int,
182 | max_width: int | None = (
183 |     None, max_height: int | None = None) -> WidgetDimensions:)
    |                                                              ^
184 |         """Create flexible dimensions with constraints."""
185 |         return cls(
    |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:183:63: SyntaxError: Expected a statement
    |
181 |     def create_flexible(cls, width: int, height: int, min_width: int, min_height: int,
182 | max_width: int | None = (
183 |     None, max_height: int | None = None) -> WidgetDimensions:)
    |                                                               ^
184 |         """Create flexible dimensions with constraints."""
185 |         return cls(
    |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:184:1: SyntaxError: Unexpected indentation
    |
182 | max_width: int | None = (
183 |     None, max_height: int | None = None) -> WidgetDimensions:)
184 |         """Create flexible dimensions with constraints."""
    | ^
185 |         return cls(
186 |             width=width,
    |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:194:5: SyntaxError: Expected a statement
    |
192 |         )
193 |
194 |     def __invariants__(self) -> None:
    |     ^
195 |         """Validate widget dimensions invariants."""
196 |         if self.width <= 0:
    |

src_refactored\domain\ui_widgets\value_objects\widget_dimensions.py:240:6: SyntaxError: Expected a statement
    |
238 |             msg = "Height cannot be greater than maximum height"
239 |             raise ValueError(msg,
240 |     )
    |      ^
    |

src_refactored\domain\ui_widgets\value_objects\widget_styling.py:360:101: E501 Line too long (112 > 100)
    |
358 |             properties.extend(["border", "border-radius"])
359 |         if self.font:
360 |             properties.extend(["font-family", "font-size", "font-weight", "font-style", "color", "line-height"])
    |                                                                                                     ^^^^^^^^^^^^ E501
361 |         if self.padding:
362 |             properties.append("padding")
    |

src_refactored\domain\ui_widgets\value_objects\widget_styling.py:415:13: SyntaxError: Expected ',', found name
    |
413 |             background_color=ColorValue(bg_color,
414 |     )
415 |             border=BorderStyling(radius=border_radius)
    |             ^
416 |             font=FontStyling(color=ColorValue(text_color), weight=FontWeight.NORMAL),
417 |             padding="8px 16px",
    |

src_refactored\domain\ui_widgets\value_objects\widget_styling.py:416:13: SyntaxError: Expected ',', found name
    |
414 |     )
415 |             border=BorderStyling(radius=border_radius)
416 |             font=FontStyling(color=ColorValue(text_color), weight=FontWeight.NORMAL),
    |             ^
417 |             padding="8px 16px",
418 |             cursor="pointer",
    |

src_refactored\infrastructure\audio\audio_file_repository.py:157:21: SyntaxError: Expected ',', found name
    |
155 |                     operation_type=FileOperationType.SAVE,
156 |                     file_path=str(file_path)
157 |                     bytes_processed=0,
    |                     ^
158 |                     total_bytes=total_bytes,
159 |                     percentage=0.0,
    |

src_refactored\infrastructure\audio\audio_file_repository.py:191:17: SyntaxError: Expected ',', found name
    |
189 |                 source=FileSource.RECORDING,
190 |                 title=request.metadata.get("title")
191 |                 description=request.metadata.get("description")
    |                 ^
192 |                 tags=request.metadata.get("tags", []),
193 |             )
    |

src_refactored\infrastructure\audio\audio_file_repository.py:192:17: SyntaxError: Expected ',', found name
    |
190 |                 title=request.metadata.get("title")
191 |                 description=request.metadata.get("description")
192 |                 tags=request.metadata.get("tags", []),
    |                 ^
193 |             )
    |

src_refactored\infrastructure\audio\audio_file_repository.py:250:37: SyntaxError: Expected an expression or a ')'
    |
249 |             # Check if file exists
250 |             if not file_path.exists(,
    |                                     ^
251 |     ):
252 |                 return AudioFileOperationResult(
    |

src_refactored\infrastructure\audio\audio_file_repository.py:265:21: SyntaxError: Expected ',', found name
    |
263 |                     operation_type=FileOperationType.LOAD,
264 |                     file_path=str(file_path)
265 |                     bytes_processed=0,
    |                     ^
266 |                     total_bytes=file_size,
267 |                     percentage=0.0,
    |

src_refactored\infrastructure\audio\audio_file_repository.py:410:61: SyntaxError: Expected 'else', found ':'
    |
408 | estimated_size_mb = (
409 |     (len(request.audio_data.samples) * 2) / (1024 * 1024)  # Rough estimate for 16-bit)
410 |         if estimated_size_mb > self._config.max_file_size_mb:
    |                                                             ^
411 |             return AudioFileOperationResult(
412 |                 result=FileOperationResult.FAILURE,
    |

src_refactored\infrastructure\audio\audio_file_repository.py:418:86: SyntaxError: Expected 'else', found ':'
    |
417 |         # Validate audio data
418 |         if request.audio_data.samples is None or len(request.audio_data.samples) == 0:
    |                                                                                      ^
419 |             return AudioFileOperationResult(
420 |                 result=FileOperationResult.INVALID_FORMAT,
    |

src_refactored\infrastructure\audio\audio_file_repository.py:424:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
422 |             )
423 |
424 |         return AudioFileOperationResult(result=FileOperationResult.SUCCESS)
    |         ^
425 |
426 |     def _convert_audio_to_wav_bytes(self, audio_data: AudioData,
    |

src_refactored\infrastructure\audio\audio_file_repository.py:426:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
424 |         return AudioFileOperationResult(result=FileOperationResult.SUCCESS)
425 |
426 |     def _convert_audio_to_wav_bytes(self, audio_data: AudioData,
    |     ^
427 |     ) -> bytes:
428 |         """Convert AudioData to WAV format bytes."""
    |

src_refactored\infrastructure\audio\audio_file_repository.py:429:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
427 |     ) -> bytes:
428 |         """Convert AudioData to WAV format bytes."""
429 |         with io.BytesIO() as wav_buffer:
    |         ^
430 |             with wave.open(wav_buffer, "wb") as wav_file:
431 |                 wav_file.setnchannels(audio_data.channels)
    |

src_refactored\infrastructure\audio\audio_file_repository.py:430:13: SyntaxError: Expected a simple statement
    |
428 |         """Convert AudioData to WAV format bytes."""
429 |         with io.BytesIO() as wav_buffer:
430 |             with wave.open(wav_buffer, "wb") as wav_file:
    |             ^
431 |                 wav_file.setnchannels(audio_data.channels)
432 |                 wav_file.setsampwidth(2)  # 16-bit
    |

src_refactored\infrastructure\audio\audio_file_repository.py:432:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
430 |             with wave.open(wav_buffer, "wb") as wav_file:
431 |                 wav_file.setnchannels(audio_data.channels)
432 |                 wav_file.setsampwidth(2)  # 16-bit
    |                 ^
433 |                 wav_file.setframerate(audio_data.sample_rate)
    |

src_refactored\infrastructure\audio\audio_file_repository.py:433:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
431 |                 wav_file.setnchannels(audio_data.channels)
432 |                 wav_file.setsampwidth(2)  # 16-bit
433 |                 wav_file.setframerate(audio_data.sample_rate)
    |                 ^
434 |
435 |                 # Convert samples to bytes
    |

src_refactored\infrastructure\audio\audio_file_repository.py:433:17: SyntaxError: Invalid annotated assignment target
    |
431 |                 wav_file.setnchannels(audio_data.channels)
432 |                 wav_file.setsampwidth(2)  # 16-bit
433 |                 wav_file.setframerate(audio_data.sample_rate)
    |                 ^
434 |
435 |                 # Convert samples to bytes
    |

src_refactored\infrastructure\audio\audio_file_repository.py:436:56: SyntaxError: Expected 'else', found ':'
    |
435 |                 # Convert samples to bytes
436 |                 if audio_data.samples.dtype != np.int16:
    |                                                        ^
437 |                     # Convert to int16 if needed
438 |                     samples_int16 = (audio_data.samples * 32767).astype(np.int16)
    |

src_refactored\infrastructure\audio\audio_file_repository.py:439:17: SyntaxError: Expected newline, found 'else'
    |
437 |                     # Convert to int16 if needed
438 |                     samples_int16 = (audio_data.samples * 32767).astype(np.int16)
439 |                 else:
    |                 ^
440 |                     samples_int16 = audio_data.samples
    |

src_refactored\infrastructure\audio\audio_file_repository.py:439:21: SyntaxError: Expected a statement
    |
437 |                     # Convert to int16 if needed
438 |                     samples_int16 = (audio_data.samples * 32767).astype(np.int16)
439 |                 else:
    |                     ^
440 |                     samples_int16 = audio_data.samples
    |

src_refactored\infrastructure\audio\audio_file_repository.py:442:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
440 |                     samples_int16 = audio_data.samples
441 |
442 |                 wav_file.writeframes(samples_int16.tobytes())
    |                 ^
443 |
444 |             wav_buffer.seek(0)
    |

src_refactored\infrastructure\audio\audio_file_repository.py:444:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
442 |                 wav_file.writeframes(samples_int16.tobytes())
443 |
444 |             wav_buffer.seek(0)
    |             ^
445 |             return wav_buffer.read(,
446 |     )
    |

src_refactored\infrastructure\audio\audio_file_repository.py:445:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
444 |             wav_buffer.seek(0)
445 |             return wav_buffer.read(,
    |             ^
446 |     )
    |

src_refactored\infrastructure\audio\audio_file_repository.py:445:36: SyntaxError: Expected an expression or a ')'
    |
444 |             wav_buffer.seek(0)
445 |             return wav_buffer.read(,
    |                                    ^
446 |     )
    |

src_refactored\infrastructure\audio\audio_file_repository.py:448:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
446 |     )
447 |
448 |     def _backup_existing_file(self, file_path: Path,
    |     ^
449 |     ) -> None:
450 |         """Create a backup of an existing file."""
    |

src_refactored\infrastructure\audio\audio_file_repository.py:451:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
449 |     ) -> None:
450 |         """Create a backup of an existing file."""
451 |         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    |         ^
452 |         backup_path = file_path.with_suffix(f".{timestamp}.bak{file_path.suffix}")
453 |         file_path.rename(backup_path)
    |

src_refactored\infrastructure\audio\audio_file_repository.py:452:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
450 |         """Create a backup of an existing file."""
451 |         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
452 |         backup_path = file_path.with_suffix(f".{timestamp}.bak{file_path.suffix}")
    |         ^
453 |         file_path.rename(backup_path)
    |

src_refactored\infrastructure\audio\audio_file_repository.py:453:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
451 |         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
452 |         backup_path = file_path.with_suffix(f".{timestamp}.bak{file_path.suffix}")
453 |         file_path.rename(backup_path)
    |         ^
454 |
455 |     def _generate_operation_id(self) -> str:
    |

src_refactored\infrastructure\audio\audio_file_repository.py:455:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
453 |         file_path.rename(backup_path)
454 |
455 |     def _generate_operation_id(self) -> str:
    |     ^
456 |         """Generate a unique operation ID."""
457 |         return f"op_{datetime.now().strftime('%Y%m%d_%H%M%S_%f')}"
    |

src_refactored\infrastructure\audio\audio_file_repository.py:457:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
455 |     def _generate_operation_id(self) -> str:
456 |         """Generate a unique operation ID."""
457 |         return f"op_{datetime.now().strftime('%Y%m%d_%H%M%S_%f')}"
    |         ^
458 |
459 |     def get_configuration(self) -> AudioFileRepositoryConfiguration:
    |

src_refactored\infrastructure\audio\audio_file_repository.py:459:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
457 |         return f"op_{datetime.now().strftime('%Y%m%d_%H%M%S_%f')}"
458 |
459 |     def get_configuration(self) -> AudioFileRepositoryConfiguration:
    |     ^
460 |         """Get the current configuration."""
461 |         return self._config
    |

src_refactored\infrastructure\audio\audio_file_repository.py:461:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
459 |     def get_configuration(self) -> AudioFileRepositoryConfiguration:
460 |         """Get the current configuration."""
461 |         return self._config
    |         ^
462 |
463 |     def update_configuration(self, config: AudioFileRepositoryConfiguration,
    |

src_refactored\infrastructure\audio\audio_file_repository.py:463:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
461 |         return self._config
462 |
463 |     def update_configuration(self, config: AudioFileRepositoryConfiguration,
    |     ^
464 |     ) -> None:
465 |         """Update the repository configuration."""
    |

src_refactored\infrastructure\audio\audio_file_repository.py:466:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
464 |     ) -> None:
465 |         """Update the repository configuration."""
466 |         self._config = config
    |         ^
467 |
468 |         # Ensure output directory exists if auto-create is enabled
    |

src_refactored\infrastructure\audio\audio_file_repository.py:469:48: SyntaxError: Expected 'else', found ':'
    |
468 |         # Ensure output directory exists if auto-create is enabled
469 |         if self._config.auto_create_directories:
    |                                                ^
470 |             os.makedirs(self._config.default_output_directory, exist_ok=True)
    |

src_refactored\infrastructure\audio\audio_file_repository.py:470:78: SyntaxError: unexpected EOF while parsing
    |
468 |         # Ensure output directory exists if auto-create is enabled
469 |         if self._config.auto_create_directories:
470 |             os.makedirs(self._config.default_output_directory, exist_ok=True)
    |                                                                              ^
    |

src_refactored\infrastructure\audio\audio_playback_service.py:289:43: SyntaxError: Expected an expression or a ')'
    |
287 |         self._pause_event = threading.Event()
288 |         self._seek_event = threading.Event()
289 |         self._audio_buffer: Queue = Queue(,
    |                                           ^
290 |     )
291 |         self._stream_id: str | None = None
    |

src_refactored\infrastructure\audio\audio_playback_service.py:355:21: SyntaxError: Expected ',', found name
    |
353 |                     "Playback operation failed",
354 |                     error=str(e)
355 |                     operation=request.operation.value,
    |                     ^
356 |                     execution_time=time.time() - start_time,
357 |                 )
    |

src_refactored\infrastructure\audio\audio_playback_service.py:368:101: E501 Line too long (114 > 100)
    |
367 |     def _handle_initialize(self,
368 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
369 |         """Handle playback service initialization."""
370 |         try:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:416:21: SyntaxError: Expected ',', found name
    |
414 |                     "Playback service initialized",
415 |                     available_devices=len(devices)
416 |                     execution_time=time.time() - start_time,
    |                     ^
417 |                 )
    |

src_refactored\infrastructure\audio\audio_playback_service.py:440:101: E501 Line too long (114 > 100)
    |
439 |     def _handle_load_audio(self,
440 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
441 |         """Handle audio loading."""
442 |         if not self._state.initialized:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:466:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
464 |                     )
465 |
466 | load_success, audio_data, file_info, load_error = (
    | ^
467 |     self._file_service.load_file(request.file_path))
468 |                 if not load_success:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:468:1: SyntaxError: Unexpected indentation
    |
466 | load_success, audio_data, file_info, load_error = (
467 |     self._file_service.load_file(request.file_path))
468 |                 if not load_success:
    | ^
469 |                     return AudioPlaybackServiceResponse(
470 |                         result=PlaybackResult.FILE_ERROR,
    |

src_refactored\infrastructure\audio\audio_playback_service.py:492:1: SyntaxError: unindent does not match any outer indentation level
    |
490 |                 )
491 |
492 |             elif request.audio_data is not None:
    | ^
493 |                 # Load from raw data
494 |                 self._track_counter += 1
    |

src_refactored\infrastructure\audio\audio_playback_service.py:492:13: SyntaxError: Expected a statement
    |
490 |                 )
491 |
492 |             elif request.audio_data is not None:
    |             ^
493 |                 # Load from raw data
494 |                 self._track_counter += 1
    |

src_refactored\infrastructure\audio\audio_playback_service.py:492:18: SyntaxError: Invalid annotated assignment target
    |
490 |                 )
491 |
492 |             elif request.audio_data is not None:
    |                  ^
493 |                 # Load from raw data
494 |                 self._track_counter += 1
    |

src_refactored\infrastructure\audio\audio_playback_service.py:492:49: SyntaxError: Expected an expression
    |
490 |                 )
491 |
492 |             elif request.audio_data is not None:
    |                                                 ^
493 |                 # Load from raw data
494 |                 self._track_counter += 1
    |

src_refactored\infrastructure\audio\audio_playback_service.py:494:1: SyntaxError: Unexpected indentation
    |
492 |             elif request.audio_data is not None:
493 |                 # Load from raw data
494 |                 self._track_counter += 1
    | ^
495 |                 track_id = f"track_{self._track_counter}_{int(time.time())}"
    |

src_refactored\infrastructure\audio\audio_playback_service.py:509:1: SyntaxError: unindent does not match any outer indentation level
    |
507 |                 )
508 |
509 |             if not track:
    | ^
510 |                 return AudioPlaybackServiceResponse(
511 |                     result=PlaybackResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_playback_service.py:518:1: SyntaxError: unindent does not match any outer indentation level
    |
517 |             # Validate audio data compatibility
518 |             if track.data is not None:
    | ^
519 |                 data_valid,
520 | data_error = (
    |

src_refactored\infrastructure\audio\audio_playback_service.py:519:27: COM818 Trailing comma on bare tuple prohibited
    |
517 |             # Validate audio data compatibility
518 |             if track.data is not None:
519 |                 data_valid,
    |                           ^ COM818
520 | data_error = (
521 |     self._validation_service.validate_audio_data(track.data, self._state.current_config))
    |

src_refactored\infrastructure\audio\audio_playback_service.py:522:1: SyntaxError: Unexpected indentation
    |
520 | data_error = (
521 |     self._validation_service.validate_audio_data(track.data, self._state.current_config))
522 |                 if not data_valid:
    | ^
523 |                     warnings.append(f"Audio data validation warning: {data_error}")
    |

src_refactored\infrastructure\audio\audio_playback_service.py:526:13: SyntaxError: unindent does not match any outer indentation level
    |
525 |             # Update state
526 |             self._state.current_track = track
    |             ^
527 |             self._state.processing_state = PlaybackState.READY
    |

src_refactored\infrastructure\audio\audio_playback_service.py:527:1: SyntaxError: Unexpected indentation
    |
525 |             # Update state
526 |             self._state.current_track = track
527 |             self._state.processing_state = PlaybackState.READY
    | ^
528 |
529 |             if self._state.status:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:557:1: SyntaxError: unindent does not match any outer indentation level
    |
555 |             )
556 |
557 |         except Exception as e:
    | ^
558 |             error_message = f"Failed to load audio: {e!s}"
559 |             return AudioPlaybackServiceResponse(
    |

src_refactored\infrastructure\audio\audio_playback_service.py:557:9: SyntaxError: Expected a statement
    |
555 |             )
556 |
557 |         except Exception as e:
    |         ^
558 |             error_message = f"Failed to load audio: {e!s}"
559 |             return AudioPlaybackServiceResponse(
    |

src_refactored\infrastructure\audio\audio_playback_service.py:557:26: SyntaxError: Expected a statement
    |
555 |             )
556 |
557 |         except Exception as e:
    |                          ^
558 |             error_message = f"Failed to load audio: {e!s}"
559 |             return AudioPlaybackServiceResponse(
    |

src_refactored\infrastructure\audio\audio_playback_service.py:557:31: SyntaxError: Expected an expression
    |
555 |             )
556 |
557 |         except Exception as e:
    |                               ^
558 |             error_message = f"Failed to load audio: {e!s}"
559 |             return AudioPlaybackServiceResponse(
    |

src_refactored\infrastructure\audio\audio_playback_service.py:558:1: SyntaxError: Unexpected indentation
    |
557 |         except Exception as e:
558 |             error_message = f"Failed to load audio: {e!s}"
    | ^
559 |             return AudioPlaybackServiceResponse(
560 |                 result=PlaybackResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_playback_service.py:566:1: SyntaxError: unindent does not match any outer indentation level
    |
564 |             )
565 |
566 |     def _handle_start_playback(self,
    | ^
567 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
568 |         """Handle playback start."""
    |

src_refactored\infrastructure\audio\audio_playback_service.py:567:101: E501 Line too long (114 > 100)
    |
566 |     def _handle_start_playback(self,
567 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
568 |         """Handle playback start."""
569 |         if not self._state.initialized:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:592:27: COM818 Trailing comma on bare tuple prohibited
    |
591 |             # Create output stream
592 |             stream_success,
    |                           ^ COM818
593 | stream_id, stream_error = (
594 |     self._stream_service.create_output_stream(self._state.current_config))
    |

src_refactored\infrastructure\audio\audio_playback_service.py:593:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
591 |             # Create output stream
592 |             stream_success,
593 | stream_id, stream_error = (
    | ^
594 |     self._stream_service.create_output_stream(self._state.current_config))
595 |             if not stream_success:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:595:1: SyntaxError: Unexpected indentation
    |
593 | stream_id, stream_error = (
594 |     self._stream_service.create_output_stream(self._state.current_config))
595 |             if not stream_success:
    | ^
596 |                 return AudioPlaybackServiceResponse(
597 |                     result=PlaybackResult.DEVICE_ERROR,
    |

src_refactored\infrastructure\audio\audio_playback_service.py:630:17: SyntaxError: Expected ',', found name
    |
628 |                 target=self._playback_worker,
629 |                 args=(request.enable_real_time_callback,)
630 |                 daemon=True,
    |                 ^
631 |             )
632 |             self._playback_thread.start()
    |

src_refactored\infrastructure\audio\audio_playback_service.py:651:1: SyntaxError: unindent does not match any outer indentation level
    |
649 |             )
650 |
651 |         except Exception as e:
    | ^
652 |             error_message = f"Failed to start playback: {e!s}"
653 |             return AudioPlaybackServiceResponse(
    |

src_refactored\infrastructure\audio\audio_playback_service.py:651:9: SyntaxError: Expected a statement
    |
649 |             )
650 |
651 |         except Exception as e:
    |         ^
652 |             error_message = f"Failed to start playback: {e!s}"
653 |             return AudioPlaybackServiceResponse(
    |

src_refactored\infrastructure\audio\audio_playback_service.py:651:26: SyntaxError: Expected a statement
    |
649 |             )
650 |
651 |         except Exception as e:
    |                          ^
652 |             error_message = f"Failed to start playback: {e!s}"
653 |             return AudioPlaybackServiceResponse(
    |

src_refactored\infrastructure\audio\audio_playback_service.py:651:31: SyntaxError: Expected an expression
    |
649 |             )
650 |
651 |         except Exception as e:
    |                               ^
652 |             error_message = f"Failed to start playback: {e!s}"
653 |             return AudioPlaybackServiceResponse(
    |

src_refactored\infrastructure\audio\audio_playback_service.py:652:1: SyntaxError: Unexpected indentation
    |
651 |         except Exception as e:
652 |             error_message = f"Failed to start playback: {e!s}"
    | ^
653 |             return AudioPlaybackServiceResponse(
654 |                 result=PlaybackResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_playback_service.py:660:1: SyntaxError: unindent does not match any outer indentation level
    |
658 |             )
659 |
660 |     def _handle_stop_playback(self,
    | ^
661 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
662 |         """Handle playback stop."""
    |

src_refactored\infrastructure\audio\audio_playback_service.py:661:101: E501 Line too long (114 > 100)
    |
660 |     def _handle_stop_playback(self,
661 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
662 |         """Handle playback stop."""
663 |         try:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:714:5: SyntaxError: unindent does not match any outer indentation level
    |
712 |             )
713 |
714 |     def _handle_pause_playback(self,
    |     ^
715 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
716 |         """Handle playback pause."""
    |

src_refactored\infrastructure\audio\audio_playback_service.py:715:101: E501 Line too long (114 > 100)
    |
714 |     def _handle_pause_playback(self,
715 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
716 |         """Handle playback pause."""
717 |         try:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:751:5: SyntaxError: unindent does not match any outer indentation level
    |
749 |             )
750 |
751 |     def _handle_resume_playback(self,
    |     ^
752 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
753 |         """Handle playback resume."""
    |

src_refactored\infrastructure\audio\audio_playback_service.py:752:101: E501 Line too long (114 > 100)
    |
751 |     def _handle_resume_playback(self,
752 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
753 |         """Handle playback resume."""
754 |         try:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:788:5: SyntaxError: unindent does not match any outer indentation level
    |
786 |             )
787 |
788 |     def _handle_seek_position(self,
    |     ^
789 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
790 |         """Handle seek position."""
    |

src_refactored\infrastructure\audio\audio_playback_service.py:789:101: E501 Line too long (114 > 100)
    |
788 |     def _handle_seek_position(self,
789 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
790 |         """Handle seek position."""
791 |         if request.position is None:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:843:5: SyntaxError: unindent does not match any outer indentation level
    |
841 |             )
842 |
843 |     def _handle_set_volume(self,
    |     ^
844 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
845 |         """Handle volume setting."""
    |

src_refactored\infrastructure\audio\audio_playback_service.py:844:101: E501 Line too long (114 > 100)
    |
843 |     def _handle_set_volume(self,
844 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
845 |         """Handle volume setting."""
846 |         if request.volume is None:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:896:5: SyntaxError: unindent does not match any outer indentation level
    |
894 |             )
895 |
896 |     def _handle_set_speed(self,
    |     ^
897 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
898 |         """Handle speed setting."""
    |

src_refactored\infrastructure\audio\audio_playback_service.py:897:101: E501 Line too long (114 > 100)
    |
896 |     def _handle_set_speed(self,
897 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
898 |         """Handle speed setting."""
899 |         if request.speed is None:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:949:5: SyntaxError: unindent does not match any outer indentation level
    |
947 |             )
948 |
949 |     def _handle_get_playback_status(self,
    |     ^
950 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
951 |         """Handle playback status retrieval."""
    |

src_refactored\infrastructure\audio\audio_playback_service.py:950:101: E501 Line too long (114 > 100)
    |
949 |     def _handle_get_playback_status(self,
950 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
951 |         """Handle playback status retrieval."""
952 |         try:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:984:5: SyntaxError: unindent does not match any outer indentation level
    |
982 |             )
983 |
984 |     def _handle_queue_audio(self,
    |     ^
985 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
986 |         """Handle audio queueing."""
    |

src_refactored\infrastructure\audio\audio_playback_service.py:985:101: E501 Line too long (114 > 100)
    |
984 |     def _handle_queue_audio(self,
985 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^ E501
986 |         """Handle audio queueing."""
987 |         if not request.track and not request.file_path and request.audio_data is None:
    |

src_refactored\infrastructure\audio\audio_playback_service.py:1022:59: COM812 Trailing comma missing
     |
1020 |                 operation_successful=True,
1021 |                 track_id=track.track_id,
1022 |                 queue_size=len(self._state.playback_queue)
     |                                                           ^ COM812
1023 |             )
     |
     = help: Add trailing comma

src_refactored\infrastructure\audio\audio_playback_service.py:1045:5: SyntaxError: unindent does not match any outer indentation level
     |
1043 |             )
1044 |
1045 |     def _handle_clear_queue(self,
     |     ^
1046 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
1047 |         """Handle queue clearing."""
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1046:101: E501 Line too long (114 > 100)
     |
1045 |     def _handle_clear_queue(self,
1046 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
     |                                                                                                     ^^^^^^^^^^^^^^ E501
1047 |         """Handle queue clearing."""
1048 |         try:
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1077:5: SyntaxError: unindent does not match any outer indentation level
     |
1075 |             )
1076 |
1077 |     def _handle_cleanup(self,
     |     ^
1078 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
1079 |         """Handle playback service cleanup."""
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1078:101: E501 Line too long (114 > 100)
     |
1077 |     def _handle_cleanup(self,
1078 |     request: AudioPlaybackServiceRequest, start_time: float, warnings: list[str]) -> AudioPlaybackServiceResponse:
     |                                                                                                     ^^^^^^^^^^^^^^ E501
1079 |         """Handle playback service cleanup."""
1080 |         try:
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1124:5: SyntaxError: unindent does not match any outer indentation level
     |
1122 |             )
1123 |
1124 |     def _playback_worker(self, enable_callback: bool,
     |     ^
1125 |     ) -> None:
1126 |         """Worker thread for audio playback."""
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1155:44: SyntaxError: Expected an expression or a ')'
     |
1153 |                         self._seek_position = None
1154 |
1155 |                     self._seek_event.clear(,
     |                                            ^
1156 |     )
1157 |                     self._state.processing_state = PlaybackState.PLAYING
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1171:52: SyntaxError: Expected an indented block after `if` statement
     |
1170 |                 # Apply volume
1171 |                 if config and config.volume != 1.0:
     |                                                    ^
1172 | volume_success, volume_chunk, volume_error = (
1173 |     self._processing_service.apply_volume()
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1172:1: SyntaxError: Expected `except` or `finally` after `try` block
     |
1170 |                 # Apply volume
1171 |                 if config and config.volume != 1.0:
1172 | volume_success, volume_chunk, volume_error = (
     | ^
1173 |     self._processing_service.apply_volume()
1174 |                         chunk, config.volume, config.volume_mode,
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1174:25: SyntaxError: Expected ')', found name
     |
1172 | volume_success, volume_chunk, volume_error = (
1173 |     self._processing_service.apply_volume()
1174 |                         chunk, config.volume, config.volume_mode,
     |                         ^
1175 |                     )
1176 |                     if volume_success and volume_chunk is not None:
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1175:21: SyntaxError: Expected a statement
     |
1173 |     self._processing_service.apply_volume()
1174 |                         chunk, config.volume, config.volume_mode,
1175 |                     )
     |                     ^
1176 |                     if volume_success and volume_chunk is not None:
1177 |                         processed_chunk = volume_chunk
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1175:22: SyntaxError: Expected a statement
     |
1173 |     self._processing_service.apply_volume()
1174 |                         chunk, config.volume, config.volume_mode,
1175 |                     )
     |                      ^
1176 |                     if volume_success and volume_chunk is not None:
1177 |                         processed_chunk = volume_chunk
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1176:1: SyntaxError: Unexpected indentation
     |
1174 |                         chunk, config.volume, config.volume_mode,
1175 |                     )
1176 |                     if volume_success and volume_chunk is not None:
     | ^
1177 |                         processed_chunk = volume_chunk
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1180:17: SyntaxError: unindent does not match any outer indentation level
     |
1179 |                 # Apply speed change
1180 |                 if config and config.speed != 1.0:
     |                 ^
1181 | speed_success, speed_chunk, speed_error = (
1182 |     self._processing_service.apply_speed_change()
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1181:1: SyntaxError: Expected an indented block after `if` statement
     |
1179 |                 # Apply speed change
1180 |                 if config and config.speed != 1.0:
1181 | speed_success, speed_chunk, speed_error = (
     | ^
1182 |     self._processing_service.apply_speed_change()
1183 |                         processed_chunk, config.speed,
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1183:25: SyntaxError: Expected ')', found name
     |
1181 | speed_success, speed_chunk, speed_error = (
1182 |     self._processing_service.apply_speed_change()
1183 |                         processed_chunk, config.speed,
     |                         ^
1184 |                     )
1185 |                     if speed_success and speed_chunk is not None:
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1184:21: SyntaxError: Expected a statement
     |
1182 |     self._processing_service.apply_speed_change()
1183 |                         processed_chunk, config.speed,
1184 |                     )
     |                     ^
1185 |                     if speed_success and speed_chunk is not None:
1186 |                         processed_chunk = speed_chunk
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1184:22: SyntaxError: Expected a statement
     |
1182 |     self._processing_service.apply_speed_change()
1183 |                         processed_chunk, config.speed,
1184 |                     )
     |                      ^
1185 |                     if speed_success and speed_chunk is not None:
1186 |                         processed_chunk = speed_chunk
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1185:1: SyntaxError: Unexpected indentation
     |
1183 |                         processed_chunk, config.speed,
1184 |                     )
1185 |                     if speed_success and speed_chunk is not None:
     | ^
1186 |                         processed_chunk = speed_chunk
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1189:17: SyntaxError: unindent does not match any outer indentation level
     |
1188 |                 # Apply equalizer
1189 |                 if config and config.enable_equalizer and config.equalizer_bands:
     |                 ^
1190 |                     eq_success, eq_chunk, eq_error = self._processing_service.apply_equalizer(
1191 |                         processed_chunk, config.equalizer_bands,
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1197:17: SyntaxError: unindent does not match any outer indentation level
     |
1196 |                 # Write to stream
1197 |                 if self._stream_id:
     |                 ^
1198 | write_success, write_error = (
1199 |     self._stream_service.write_stream(self._stream_id, processed_chunk))
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1198:1: SyntaxError: Expected an indented block after `if` statement
     |
1196 |                 # Write to stream
1197 |                 if self._stream_id:
1198 | write_success, write_error = (
     | ^
1199 |     self._stream_service.write_stream(self._stream_id, processed_chunk))
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1201:1: SyntaxError: Unexpected indentation
     |
1199 |     self._stream_service.write_stream(self._stream_id, processed_chunk))
1200 |
1201 |                     if not write_success:
     | ^
1202 |                         if self._logger_service:
1203 |                             self._logger_service.log_warning(
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1215:17: SyntaxError: unindent does not match any outer indentation level
     |
1214 |                 # Update position
1215 |                 current_sample = end_sample
     |                 ^
1216 |                 self._current_position = current_sample / sample_rate
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1216:1: SyntaxError: Unexpected indentation
     |
1214 |                 # Update position
1215 |                 current_sample = end_sample
1216 |                 self._current_position = current_sample / sample_rate
     | ^
1217 |
1218 |                 if self._state.status:
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1229:45: COM812 Trailing comma missing
     |
1227 | …                     self._logger_service.log_warning(
1228 | …                         "Error in playback callback",
1229 | …                         error=str(e)
     |                                       ^ COM812
1230 | …                     )
     |
     = help: Add trailing comma

src_refactored\infrastructure\audio\audio_playback_service.py:1240:1: SyntaxError: unindent does not match any outer indentation level
     |
1239 |             # Playback finished
1240 |             if not self._stop_event.is_set():
     | ^
1241 |                 # Handle loop mode
1242 |                 if config and config.mode == PlaybackMode.LOOP:
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1257:9: SyntaxError: unindent does not match any outer indentation level
     |
1255 |                         self._state.status.is_playing = False
1256 |
1257 |         except Exception as e:
     |         ^
1258 |             if self._logger_service:
1259 |                 self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1257:26: SyntaxError: Expected a statement
     |
1255 |                         self._state.status.is_playing = False
1256 |
1257 |         except Exception as e:
     |                          ^
1258 |             if self._logger_service:
1259 |                 self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1257:31: SyntaxError: Expected an expression
     |
1255 |                         self._state.status.is_playing = False
1256 |
1257 |         except Exception as e:
     |                               ^
1258 |             if self._logger_service:
1259 |                 self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1258:1: SyntaxError: Unexpected indentation
     |
1257 |         except Exception as e:
1258 |             if self._logger_service:
     | ^
1259 |                 self._logger_service.log_error(
1260 |                     "Error in playback worker",
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1261:33: COM812 Trailing comma missing
     |
1259 |                 self._logger_service.log_error(
1260 |                     "Error in playback worker",
1261 |                     error=str(e)
     |                                 ^ COM812
1262 |                 )
     |
     = help: Add trailing comma

src_refactored\infrastructure\audio\audio_playback_service.py:1268:5: SyntaxError: unindent does not match any outer indentation level
     |
1266 |                 self._state.status.last_error = str(e)
1267 |
1268 |     def get_current_track(self) -> AudioTrack | None:
     |     ^
1269 |         """Get current track."""
1270 |         return self._state.current_track
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1272:1: SyntaxError: unindent does not match any outer indentation level
     |
1270 |         return self._state.current_track
1271 |
1272 |     def get_playback_queue(self) -> list[AudioTrack]:
     | ^
1273 |         """Get playback queue."""
1274 |         return self._state.playback_queue.copy()
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1276:1: SyntaxError: unindent does not match any outer indentation level
     |
1274 |         return self._state.playback_queue.copy()
1275 |
1276 |     def get_state(self) -> AudioPlaybackServiceState:
     | ^
1277 |         """Get current service state."""
1278 |         return self._state
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1280:1: SyntaxError: unindent does not match any outer indentation level
     |
1278 |         return self._state
1279 |
1280 |     def get_status(self) -> PlaybackStatus | None:
     | ^
1281 |         """Get current playback status."""
1282 |         return self._state.status
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1284:1: SyntaxError: unindent does not match any outer indentation level
     |
1282 |         return self._state.status
1283 |
1284 |     def get_metrics(self) -> PlaybackMetrics | None:
     | ^
1285 |         """Get playback metrics."""
1286 |         return self._state.metrics
     |

src_refactored\infrastructure\audio\audio_playback_service.py:1286:35: SyntaxError: Expected dedent, found end of file
     |
1284 |     def get_metrics(self) -> PlaybackMetrics | None:
1285 |         """Get playback metrics."""
1286 |         return self._state.metrics
     |                                   ^
     |

src_refactored\infrastructure\audio\audio_processor.py:158:16: BLE001 Do not catch blind exception: `Exception`
    |
156 |             self.processing_started.emit()
157 |
158 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
159 |             self.processing_error.emit(f"Failed to start audio processing: {e!s}")
160 |             self._running = False
    |

src_refactored\infrastructure\audio\audio_processor.py:178:16: BLE001 Do not catch blind exception: `Exception`
    |
176 |             self.processing_stopped.emit()
177 |
178 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
179 |             self.processing_error.emit(f"Error stopping audio processing: {e!s}")
    |

src_refactored\infrastructure\audio\audio_processor.py:204:101: E501 Line too long (107 > 100)
    |
203 |             if not capture_result.is_success:
204 |                 self.processing_error.emit(f"Failed to initialize audio capture: {capture_result.error()}")
    |                                                                                                     ^^^^^^^ E501
205 |                 return
    |

src_refactored\infrastructure\audio\audio_processor.py:209:45: FBT003 Boolean positional value in function call
    |
207 |             # Start audio capture
208 |             self._audio_capture_service.start_capture()
209 |             self.device_status_changed.emit(True)
    |                                             ^^^^ FBT003
210 |
211 |             # Main processing loop
    |

src_refactored\infrastructure\audio\audio_processor.py:250:24: BLE001 Do not catch blind exception: `Exception`
    |
248 |                             self._data_callback(processed_data)
249 |
250 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
251 |                     self._processing_errors += 1
252 |                     self.processing_error.emit(f"Error in processing loop: {e!s}")
    |

src_refactored\infrastructure\audio\audio_processor.py:254:16: BLE001 Do not catch blind exception: `Exception`
    |
252 |                     self.processing_error.emit(f"Error in processing loop: {e!s}")
253 |
254 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
255 |             self.processing_error.emit(f"Fatal error in audio processor: {e!s}")
    |

src_refactored\infrastructure\audio\audio_processor.py:261:49: FBT003 Boolean positional value in function call
    |
259 |             try:
260 |                 self._audio_capture_service.stop_capture()
261 |                 self.device_status_changed.emit(False)
    |                                                 ^^^^^ FBT003
262 |             except Exception as e:
263 |                 self.processing_error.emit(f"Error during cleanup: {e!s}")
    |

src_refactored\infrastructure\audio\audio_processor.py:262:20: BLE001 Do not catch blind exception: `Exception`
    |
260 |                 self._audio_capture_service.stop_capture()
261 |                 self.device_status_changed.emit(False)
262 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
263 |                 self.processing_error.emit(f"Error during cleanup: {e!s}")
    |

src_refactored\infrastructure\audio\audio_processor.py:294:16: BLE001 Do not catch blind exception: `Exception`
    |
292 |             return samples.astype(np.float32)
293 |
294 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
295 |             self.processing_error.emit(f"Error processing audio chunk: {e!s}")
296 |             return None
    |

src_refactored\infrastructure\audio\audio_processor.py:320:13: TRY300 Consider moving this statement to an `else` block
    |
319 |                 return samples * normalization_factor
320 |             return samples
    |             ^^^^^^^^^^^^^^ TRY300
321 |
322 |         except Exception:
    |

src_refactored\infrastructure\audio\audio_processor.py:322:16: BLE001 Do not catch blind exception: `Exception`
    |
320 |             return samples
321 |
322 |         except Exception:
    |                ^^^^^^^^^ BLE001
323 |             return samples
    |

src_refactored\infrastructure\audio\audio_processor.py:340:16: BLE001 Do not catch blind exception: `Exception`
    |
338 |             return samples * mask
339 |
340 |         except Exception:
    |                ^^^^^^^^^ BLE001
341 |             return samples
    |

src_refactored\infrastructure\audio\audio_processor.py:369:16: BLE001 Do not catch blind exception: `Exception`
    |
367 |                 self._level_callback(self._current_audio_level)
368 |
369 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
370 |             self.processing_error.emit(f"Error updating audio level: {e!s}")
    |

src_refactored\infrastructure\audio\audio_processor.py:392:16: BLE001 Do not catch blind exception: `Exception`
    |
390 |                 )
391 |
392 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
393 |             self.processing_error.emit(f"Error managing audio buffer: {e!s}")
    |

src_refactored\infrastructure\audio\audio_processor.py:416:16: BLE001 Do not catch blind exception: `Exception`
    |
414 |                 return np.concatenate(chunks) if chunks else np.array([], dtype=np.float32)
415 |
416 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
417 |             self.processing_error.emit(f"Error retrieving buffer data: {e!s}")
418 |             return np.array([], dtype=np.float32)
    |

src_refactored\infrastructure\audio\audio_processor.py:427:16: BLE001 Do not catch blind exception: `Exception`
    |
425 |                 self.buffer_status_changed.emit(0, self._max_buffer_size)
426 |
427 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
428 |             self.processing_error.emit(f"Error clearing buffer: {e!s}")
    |

src_refactored\infrastructure\audio\audio_processor.py:521:12: PLR2004 Magic value used in comparison, consider replacing `256` with a constant variable
    |
519 |             chunk_size: New chunk size
520 |         """
521 |         if 256 <= chunk_size <= 4096:
    |            ^^^ PLR2004
522 |             self._processing_config = self._processing_config.with_chunk_size(chunk_size)
523 |         else:
    |

src_refactored\infrastructure\audio\audio_processor.py:521:33: PLR2004 Magic value used in comparison, consider replacing `4096` with a constant variable
    |
519 |             chunk_size: New chunk size
520 |         """
521 |         if 256 <= chunk_size <= 4096:
    |                                 ^^^^ PLR2004
522 |             self._processing_config = self._processing_config.with_chunk_size(chunk_size)
523 |         else:
    |

src_refactored\infrastructure\audio\audio_processor.py:532:12: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
530 |             gain_factor: New gain factor (0.1 to 10.0)
531 |         """
532 |         if 0.1 <= gain_factor <= 10.0:
    |            ^^^ PLR2004
533 |             self._processing_config = self._processing_config.with_gain_factor(gain_factor)
534 |         else:
    |

src_refactored\infrastructure\audio\audio_processor.py:532:34: PLR2004 Magic value used in comparison, consider replacing `10.0` with a constant variable
    |
530 |             gain_factor: New gain factor (0.1 to 10.0)
531 |         """
532 |         if 0.1 <= gain_factor <= 10.0:
    |                                  ^^^^ PLR2004
533 |             self._processing_config = self._processing_config.with_gain_factor(gain_factor)
534 |         else:
    |

src_refactored\infrastructure\audio\audio_processor.py:561:16: BLE001 Do not catch blind exception: `Exception`
    |
559 |         try:
560 |             return self._audio_capture_service.get_available_devices()
561 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
562 |             self.processing_error.emit(f"Error getting available devices: {e!s}")
563 |             return []
    |

src_refactored\infrastructure\audio\audio_processor.py:576:16: BLE001 Do not catch blind exception: `Exception`
    |
574 |         try:
575 |             return self._audio_capture_service.test_device(device_name)
576 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
577 |             self.processing_error.emit(f"Error testing device {device_name}: {e!s}")
578 |             return False
    |

src_refactored\infrastructure\audio\audio_processor.py:591:16: BLE001 Do not catch blind exception: `Exception`
    |
589 |         try:
590 |             return self._audio_capture_service.get_device_info(device_name)
591 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
592 |             self.processing_error.emit(f"Error getting device info for {device_name}: {e!s}")
593 |             return {}
    |

src_refactored\infrastructure\audio\audio_processor.py:613:16: BLE001 Do not catch blind exception: `Exception`
    |
611 |             self._paused = False
612 |
613 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
614 |             self.processing_error.emit(f"Error during cleanup: {e!s}")
    |

src_refactored\infrastructure\audio\audio_processor.py:630:12: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
628 |             size: Maximum number of chunks to keep in buffer
629 |         """
630 |         if 10 <= size <= 1000:
    |            ^^ PLR2004
631 |             self._max_buffer_size = size
632 |         else:
    |

src_refactored\infrastructure\audio\audio_processor.py:630:26: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
628 |             size: Maximum number of chunks to keep in buffer
629 |         """
630 |         if 10 <= size <= 1000:
    |                          ^^^^ PLR2004
631 |             self._max_buffer_size = size
632 |         else:
    |

src_refactored\infrastructure\audio\audio_processor.py:670:16: BLE001 Do not catch blind exception: `Exception`
    |
668 |             }
669 |
670 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
671 |             self.processing_error.emit(f"Error exporting buffer data: {e!s}")
672 |             return {}
    |

src_refactored\infrastructure\audio\audio_processor.py:688:36: PLR2004 Magic value used in comparison, consider replacing `256` with a constant variable
    |
687 |             # Check chunk size
688 |             if config.chunk_size < 256 or config.chunk_size > 4096:
    |                                    ^^^ PLR2004
689 |                 return False
    |

src_refactored\infrastructure\audio\audio_processor.py:688:63: PLR2004 Magic value used in comparison, consider replacing `4096` with a constant variable
    |
687 |             # Check chunk size
688 |             if config.chunk_size < 256 or config.chunk_size > 4096:
    |                                                               ^^^^ PLR2004
689 |                 return False
    |

src_refactored\infrastructure\audio\audio_processor.py:696:13: TRY300 Consider moving this statement to an `else` block
    |
695 |             # Check gain factor
696 |             return not (config.gain_factor < 0.1 or config.gain_factor > 10.0)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
697 |
698 |         except Exception:
    |

src_refactored\infrastructure\audio\audio_processor.py:696:46: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
695 |             # Check gain factor
696 |             return not (config.gain_factor < 0.1 or config.gain_factor > 10.0)
    |                                              ^^^ PLR2004
697 |
698 |         except Exception:
    |

src_refactored\infrastructure\audio\audio_processor.py:696:74: PLR2004 Magic value used in comparison, consider replacing `10.0` with a constant variable
    |
695 |             # Check gain factor
696 |             return not (config.gain_factor < 0.1 or config.gain_factor > 10.0)
    |                                                                          ^^^^ PLR2004
697 |
698 |         except Exception:
    |

src_refactored\infrastructure\audio\audio_processor.py:698:16: BLE001 Do not catch blind exception: `Exception`
    |
696 |             return not (config.gain_factor < 0.1 or config.gain_factor > 10.0)
697 |
698 |         except Exception:
    |                ^^^^^^^^^ BLE001
699 |             return False
    |

src_refactored\infrastructure\audio\audio_recording_service.py:332:21: SyntaxError: Expected ',', found name
    |
330 |                     "Recording operation failed",
331 |                     error=str(e)
332 |                     operation=request.operation.value,
    |                     ^
333 |                     execution_time=time.time() - start_time,
334 |                 )
    |

src_refactored\infrastructure\audio\audio_recording_service.py:345:101: E501 Line too long (116 > 100)
    |
344 |     def _handle_initialize(self,
345 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
346 |         """Handle recording service initialization."""
347 |         try:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:376:21: SyntaxError: Expected ',', found name
    |
374 |                     "Recording service initialized",
375 |                     available_devices=len(devices)
376 |                     execution_time=time.time() - start_time,
    |                     ^
377 |                 )
    |

src_refactored\infrastructure\audio\audio_recording_service.py:400:101: E501 Line too long (116 > 100)
    |
399 |     def _handle_start_recording(self,
400 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
401 |         """Handle recording start."""
402 |         if not self._state.initialized:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:418:13: SyntaxError: Expected an indented block after `try` statement
    |
416 |             )
417 |
418 |         try:
    |             ^
419 |             # Validate configuration
420 | config_valid, config_error = (
    |

src_refactored\infrastructure\audio\audio_recording_service.py:420:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
418 |         try:
419 |             # Validate configuration
420 | config_valid, config_error = (
    | ^
421 |     self._validation_service.validate_configuration(request.config))
422 |             if not config_valid:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:422:1: SyntaxError: Unexpected indentation
    |
420 | config_valid, config_error = (
421 |     self._validation_service.validate_configuration(request.config))
422 |             if not config_valid:
    | ^
423 |                 return AudioRecordingServiceResponse(
424 |                     result=RecordingResult.FORMAT_ERROR,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:438:17: SyntaxError: Expected ',', found name
    |
436 |                 recording_id=recording_id,
437 |                 start_time=time.time()
438 |                 sample_rate=request.config.sample_rate,
    |                 ^
439 |                 channels=request.config.channels,
440 |                 bit_depth=request.config.bit_depth,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:445:1: SyntaxError: Expected a statement
    |
444 |             # Create audio stream
445 | stream_success, stream_id, stream_error = (
    | ^
446 |     self._stream_service.create_input_stream(request.config))
447 |             if not stream_success:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:447:1: SyntaxError: Unexpected indentation
    |
445 | stream_success, stream_id, stream_error = (
446 |     self._stream_service.create_input_stream(request.config))
447 |             if not stream_success:
    | ^
448 |                 return AudioRecordingServiceResponse(
449 |                     result=RecordingResult.DEVICE_ERROR,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:471:1: SyntaxError: Expected a statement
    |
469 |                 filename = request.config.filename_template.format(timestamp=timestamp,
470 |     )
471 | file_path = (
    | ^
472 |     request.config.output_directory / f"{filename}.{request.config.format.value}")
    |

src_refactored\infrastructure\audio\audio_recording_service.py:474:1: SyntaxError: Unexpected indentation
    |
472 |     request.config.output_directory / f"{filename}.{request.config.format.value}")
473 |
474 |                 file_success, file_error = self._file_service.create_file(file_path, request.config)
    | ^
475 |                 if not file_success:
476 |                     warnings.append(f"Failed to create file: {file_error}")
    |

src_refactored\infrastructure\audio\audio_recording_service.py:482:13: SyntaxError: unindent does not match any outer indentation level
    |
481 |             # Update state
482 |             self._state.current_config = request.config
    |             ^
483 |             self._state.current_recording_id = recording_id
484 |             self._state.active_recordings[recording_id] = metadata
    |

src_refactored\infrastructure\audio\audio_recording_service.py:483:1: SyntaxError: Unexpected indentation
    |
481 |             # Update state
482 |             self._state.current_config = request.config
483 |             self._state.current_recording_id = recording_id
    | ^
484 |             self._state.active_recordings[recording_id] = metadata
485 |             self._state.processing_state = RecordingState.RECORDING
    |

src_refactored\infrastructure\audio\audio_recording_service.py:497:17: SyntaxError: Expected ',', found name
    |
495 | args = (
496 |     (recording_id, stream_id, request.config, file_path, request.enable_real_time_callback))
497 |                 daemon=True,
    |                 ^
498 |             )
499 |             self._recording_threads[recording_id] = recording_thread
    |

src_refactored\infrastructure\audio\audio_recording_service.py:519:1: SyntaxError: unindent does not match any outer indentation level
    |
517 |             )
518 |
519 |         except Exception as e:
    | ^
520 |             error_message = f"Failed to start recording: {e!s}"
521 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:519:9: SyntaxError: Expected a statement
    |
517 |             )
518 |
519 |         except Exception as e:
    |         ^
520 |             error_message = f"Failed to start recording: {e!s}"
521 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:519:26: SyntaxError: Expected a statement
    |
517 |             )
518 |
519 |         except Exception as e:
    |                          ^
520 |             error_message = f"Failed to start recording: {e!s}"
521 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:519:31: SyntaxError: Expected an expression
    |
517 |             )
518 |
519 |         except Exception as e:
    |                               ^
520 |             error_message = f"Failed to start recording: {e!s}"
521 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:520:1: SyntaxError: Unexpected indentation
    |
519 |         except Exception as e:
520 |             error_message = f"Failed to start recording: {e!s}"
    | ^
521 |             return AudioRecordingServiceResponse(
522 |                 result=RecordingResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:528:1: SyntaxError: unindent does not match any outer indentation level
    |
526 |             )
527 |
528 |     def _handle_stop_recording(self,
    | ^
529 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
530 |         """Handle recording stop."""
    |

src_refactored\infrastructure\audio\audio_recording_service.py:529:101: E501 Line too long (116 > 100)
    |
528 |     def _handle_stop_recording(self,
529 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
530 |         """Handle recording stop."""
531 |         recording_id = request.recording_id or self._state.current_recording_id
    |

src_refactored\infrastructure\audio\audio_recording_service.py:555:43: SyntaxError: Expected an expression or a ')'
    |
553 |             # Update metadata
554 |             metadata = self._state.active_recordings[recording_id]
555 |             metadata.end_time = time.time(,
    |                                           ^
556 |     )
557 |             metadata.duration = metadata.end_time - metadata.start_time
    |

src_refactored\infrastructure\audio\audio_recording_service.py:561:26: SyntaxError: Expected an indented block after `if` statement
    |
559 |             # Finalize file if exists
560 |             file_path = metadata.file_path
561 |             if file_path:
    |                          ^
562 | finalize_success, finalize_error = (
563 |     self._file_service.finalize_file(file_path, metadata))
    |

src_refactored\infrastructure\audio\audio_recording_service.py:562:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
560 |             file_path = metadata.file_path
561 |             if file_path:
562 | finalize_success, finalize_error = (
    | ^
563 |     self._file_service.finalize_file(file_path, metadata))
564 |                 if not finalize_success:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:564:1: SyntaxError: Unexpected indentation
    |
562 | finalize_success, finalize_error = (
563 |     self._file_service.finalize_file(file_path, metadata))
564 |                 if not finalize_success:
    | ^
565 |                     warnings.append(f"Failed to finalize file: {finalize_error}")
    |

src_refactored\infrastructure\audio\audio_recording_service.py:573:13: SyntaxError: unindent does not match any outer indentation level
    |
572 |             # Update state
573 |             self._state.processing_state = RecordingState.READY
    |             ^
574 |             self._state.status.is_recording = False
575 |             self._state.current_recording_id = None
    |

src_refactored\infrastructure\audio\audio_recording_service.py:574:1: SyntaxError: Unexpected indentation
    |
572 |             # Update state
573 |             self._state.processing_state = RecordingState.READY
574 |             self._state.status.is_recording = False
    | ^
575 |             self._state.current_recording_id = None
    |

src_refactored\infrastructure\audio\audio_recording_service.py:600:1: SyntaxError: unindent does not match any outer indentation level
    |
598 |             )
599 |
600 |         except Exception as e:
    | ^
601 |             error_message = f"Failed to stop recording: {e!s}"
602 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:600:9: SyntaxError: Expected a statement
    |
598 |             )
599 |
600 |         except Exception as e:
    |         ^
601 |             error_message = f"Failed to stop recording: {e!s}"
602 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:600:26: SyntaxError: Expected a statement
    |
598 |             )
599 |
600 |         except Exception as e:
    |                          ^
601 |             error_message = f"Failed to stop recording: {e!s}"
602 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:600:31: SyntaxError: Expected an expression
    |
598 |             )
599 |
600 |         except Exception as e:
    |                               ^
601 |             error_message = f"Failed to stop recording: {e!s}"
602 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:601:1: SyntaxError: Unexpected indentation
    |
600 |         except Exception as e:
601 |             error_message = f"Failed to stop recording: {e!s}"
    | ^
602 |             return AudioRecordingServiceResponse(
603 |                 result=RecordingResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:609:1: SyntaxError: unindent does not match any outer indentation level
    |
607 |             )
608 |
609 |     def _handle_pause_recording(self,
    | ^
610 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
611 |         """Handle recording pause."""
    |

src_refactored\infrastructure\audio\audio_recording_service.py:610:101: E501 Line too long (116 > 100)
    |
609 |     def _handle_pause_recording(self,
610 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
611 |         """Handle recording pause."""
612 |         recording_id = request.recording_id or self._state.current_recording_id
    |

src_refactored\infrastructure\audio\audio_recording_service.py:651:5: SyntaxError: unindent does not match any outer indentation level
    |
649 |             )
650 |
651 |     def _handle_resume_recording(self,
    |     ^
652 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
653 |         """Handle recording resume."""
    |

src_refactored\infrastructure\audio\audio_recording_service.py:652:101: E501 Line too long (116 > 100)
    |
651 |     def _handle_resume_recording(self,
652 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
653 |         """Handle recording resume."""
654 |         recording_id = request.recording_id or self._state.current_recording_id
    |

src_refactored\infrastructure\audio\audio_recording_service.py:693:5: SyntaxError: unindent does not match any outer indentation level
    |
691 |             )
692 |
693 |     def _handle_save_recording(self,
    |     ^
694 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
695 |         """Handle recording save."""
    |

src_refactored\infrastructure\audio\audio_recording_service.py:694:101: E501 Line too long (116 > 100)
    |
693 |     def _handle_save_recording(self,
694 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
695 |         """Handle recording save."""
696 |         recording_id = request.recording_id or self._state.current_recording_id
    |

src_refactored\infrastructure\audio\audio_recording_service.py:728:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
727 |             # Create file
728 | file_success, file_error = (
    | ^
729 |     self._file_service.create_file(request.file_path, self._state.current_config))
730 |             if not file_success:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:730:1: SyntaxError: Unexpected indentation
    |
728 | file_success, file_error = (
729 |     self._file_service.create_file(request.file_path, self._state.current_config))
730 |             if not file_success:
    | ^
731 |                 return AudioRecordingServiceResponse(
732 |                     result=RecordingResult.FILE_ERROR,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:743:59: SyntaxError: Expected an expression or a ')'
    |
741 |                 while not queue.empty():
742 |                     try:
743 |                         recording_data = queue.get_nowait(,
    |                                                           ^
744 |     )
745 |                         write_success,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:745:38: COM818 Trailing comma on bare tuple prohibited
    |
743 |                         recording_data = queue.get_nowait(,
744 |     )
745 |                         write_success,
    |                                      ^ COM818
746 | write_error = (
747 |     self._file_service.write_data(request.file_path, recording_data.data))
    |

src_refactored\infrastructure\audio\audio_recording_service.py:746:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
744 |     )
745 |                         write_success,
746 | write_error = (
    | ^
747 |     self._file_service.write_data(request.file_path, recording_data.data))
748 |                         if not write_success:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:748:1: SyntaxError: Unexpected indentation
    |
746 | write_error = (
747 |     self._file_service.write_data(request.file_path, recording_data.data))
748 |                         if not write_success:
    | ^
749 |                             warnings.append(f"Failed to write data chunk: {write_error}")
750 |                     except Empty:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:750:21: SyntaxError: unindent does not match any outer indentation level
    |
748 |                         if not write_success:
749 |                             warnings.append(f"Failed to write data chunk: {write_error}")
750 |                     except Empty:
    |                     ^
751 |                         break
    |

src_refactored\infrastructure\audio\audio_recording_service.py:750:34: SyntaxError: Expected an expression
    |
748 |                         if not write_success:
749 |                             warnings.append(f"Failed to write data chunk: {write_error}")
750 |                     except Empty:
    |                                  ^
751 |                         break
    |

src_refactored\infrastructure\audio\audio_recording_service.py:751:1: SyntaxError: Unexpected indentation
    |
749 |                             warnings.append(f"Failed to write data chunk: {write_error}")
750 |                     except Empty:
751 |                         break
    | ^
752 |
753 |             # Finalize file
    |

src_refactored\infrastructure\audio\audio_recording_service.py:754:1: SyntaxError: unindent does not match any outer indentation level
    |
753 |             # Finalize file
754 |             metadata.file_path = request.file_path
    | ^
755 | finalize_success, finalize_error = (
756 |     self._file_service.finalize_file(request.file_path, metadata))
    |

src_refactored\infrastructure\audio\audio_recording_service.py:757:1: SyntaxError: Unexpected indentation
    |
755 | finalize_success, finalize_error = (
756 |     self._file_service.finalize_file(request.file_path, metadata))
757 |             if not finalize_success:
    | ^
758 |                 warnings.append(f"Failed to finalize file: {finalize_error}")
    |

src_refactored\infrastructure\audio\audio_recording_service.py:763:1: SyntaxError: Unexpected indentation
    |
761 | info_success, file_info, info_error = (
762 |     self._file_service.get_file_info(request.file_path))
763 |             file_size = None
    | ^
764 |             if info_success and file_info:
765 |                 file_size = file_info.get("size", 0)
    |

src_refactored\infrastructure\audio\audio_recording_service.py:787:1: SyntaxError: unindent does not match any outer indentation level
    |
785 |             )
786 |
787 |         except Exception as e:
    | ^
788 |             error_message = f"Failed to save recording: {e!s}"
789 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:787:9: SyntaxError: Expected a statement
    |
785 |             )
786 |
787 |         except Exception as e:
    |         ^
788 |             error_message = f"Failed to save recording: {e!s}"
789 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:787:26: SyntaxError: Expected a statement
    |
785 |             )
786 |
787 |         except Exception as e:
    |                          ^
788 |             error_message = f"Failed to save recording: {e!s}"
789 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:787:31: SyntaxError: Expected an expression
    |
785 |             )
786 |
787 |         except Exception as e:
    |                               ^
788 |             error_message = f"Failed to save recording: {e!s}"
789 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:788:1: SyntaxError: Unexpected indentation
    |
787 |         except Exception as e:
788 |             error_message = f"Failed to save recording: {e!s}"
    | ^
789 |             return AudioRecordingServiceResponse(
790 |                 result=RecordingResult.FILE_ERROR,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:796:1: SyntaxError: unindent does not match any outer indentation level
    |
794 |             )
795 |
796 |     def _handle_discard_recording(self,
    | ^
797 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
798 |         """Handle recording discard."""
    |

src_refactored\infrastructure\audio\audio_recording_service.py:797:101: E501 Line too long (116 > 100)
    |
796 |     def _handle_discard_recording(self,
797 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
798 |         """Handle recording discard."""
799 |         recording_id = request.recording_id or self._state.current_recording_id
    |

src_refactored\infrastructure\audio\audio_recording_service.py:853:5: SyntaxError: unindent does not match any outer indentation level
    |
851 |             )
852 |
853 |     def _handle_get_recording_data(self,
    |     ^
854 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
855 |         """Handle recording data retrieval."""
    |

src_refactored\infrastructure\audio\audio_recording_service.py:854:101: E501 Line too long (116 > 100)
    |
853 |     def _handle_get_recording_data(self,
854 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
855 |         """Handle recording data retrieval."""
856 |         recording_id = request.recording_id or self._state.current_recording_id
    |

src_refactored\infrastructure\audio\audio_recording_service.py:884:17: SyntaxError: Expected ',', found name
    |
882 |     ) > 0,
883 |                 chunks_available=queue.qsize()
884 |                 total_duration=total_duration,
    |                 ^
885 |             )
    |

src_refactored\infrastructure\audio\audio_recording_service.py:908:5: SyntaxError: unindent does not match any outer indentation level
    |
906 |             )
907 |
908 |     def _handle_set_recording_config(self,
    |     ^
909 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
910 |         """Handle recording configuration update."""
    |

src_refactored\infrastructure\audio\audio_recording_service.py:909:101: E501 Line too long (116 > 100)
    |
908 |     def _handle_set_recording_config(self,
909 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
910 |         """Handle recording configuration update."""
911 |         if not request.config:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:919:13: SyntaxError: Expected an indented block after `try` statement
    |
917 |             )
918 |
919 |         try:
    |             ^
920 |             # Validate configuration
921 | config_valid, config_error = (
    |

src_refactored\infrastructure\audio\audio_recording_service.py:921:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
919 |         try:
920 |             # Validate configuration
921 | config_valid, config_error = (
    | ^
922 |     self._validation_service.validate_configuration(request.config))
923 |             if not config_valid:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:923:1: SyntaxError: Unexpected indentation
    |
921 | config_valid, config_error = (
922 |     self._validation_service.validate_configuration(request.config))
923 |             if not config_valid:
    | ^
924 |                 return AudioRecordingServiceResponse(
925 |                     result=RecordingResult.FORMAT_ERROR,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:949:1: SyntaxError: unindent does not match any outer indentation level
    |
947 |             )
948 |
949 |         except Exception as e:
    | ^
950 |             error_message = f"Failed to set configuration: {e!s}"
951 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:949:9: SyntaxError: Expected a statement
    |
947 |             )
948 |
949 |         except Exception as e:
    |         ^
950 |             error_message = f"Failed to set configuration: {e!s}"
951 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:949:26: SyntaxError: Expected a statement
    |
947 |             )
948 |
949 |         except Exception as e:
    |                          ^
950 |             error_message = f"Failed to set configuration: {e!s}"
951 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:949:31: SyntaxError: Expected an expression
    |
947 |             )
948 |
949 |         except Exception as e:
    |                               ^
950 |             error_message = f"Failed to set configuration: {e!s}"
951 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:950:1: SyntaxError: Unexpected indentation
    |
949 |         except Exception as e:
950 |             error_message = f"Failed to set configuration: {e!s}"
    | ^
951 |             return AudioRecordingServiceResponse(
952 |                 result=RecordingResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:958:1: SyntaxError: unindent does not match any outer indentation level
    |
956 |             )
957 |
958 |     def _handle_get_recording_status(self,
    | ^
959 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
960 |         """Handle recording status retrieval."""
    |

src_refactored\infrastructure\audio\audio_recording_service.py:959:101: E501 Line too long (116 > 100)
    |
958 |     def _handle_get_recording_status(self,
959 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
960 |         """Handle recording status retrieval."""
961 |         try:
    |

src_refactored\infrastructure\audio\audio_recording_service.py:973:76: SyntaxError: Expected an expression or a ')'
    |
971 |                     # Get queue size for buffer utilization
972 |                     if recording_id in self._data_queues:
973 |                         queue_size = self._data_queues[recording_id].qsize(,
    |                                                                            ^
974 |     )
975 | self._state.status.buffer_utilization = (
    |

src_refactored\infrastructure\audio\audio_recording_service.py:975:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
973 |                         queue_size = self._data_queues[recording_id].qsize(,
974 |     )
975 | self._state.status.buffer_utilization = (
    | ^
976 |     min(queue_size / 100.0, 1.0)  # Assume max 100 buffers)
    |

src_refactored\infrastructure\audio\audio_recording_service.py:978:84: SyntaxError: Expected 'else', found ':'
    |
976 |     min(queue_size / 100.0, 1.0)  # Assume max 100 buffers)
977 |
978 |             if request.enable_progress_tracking and self._progress_tracking_service:
    |                                                                                    ^
979 |                 self._progress_tracking_service.complete_progress()
    |

src_refactored\infrastructure\audio\audio_recording_service.py:981:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
979 |                 self._progress_tracking_service.complete_progress()
980 |
981 |             return AudioRecordingServiceResponse(
    |             ^
982 |                 result=RecordingResult.SUCCESS,
983 |                 state=self._state,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:989:9: SyntaxError: Expected a statement
    |
987 |             )
988 |
989 |         except Exception as e:
    |         ^
990 |             error_message = f"Failed to get recording status: {e!s}"
991 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:989:26: SyntaxError: Expected a statement
    |
987 |             )
988 |
989 |         except Exception as e:
    |                          ^
990 |             error_message = f"Failed to get recording status: {e!s}"
991 |             return AudioRecordingServiceResponse(
    |

src_refactored\infrastructure\audio\audio_recording_service.py:991:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
989 |         except Exception as e:
990 |             error_message = f"Failed to get recording status: {e!s}"
991 |             return AudioRecordingServiceResponse(
    |             ^
992 |                 result=RecordingResult.FAILED,
993 |                 state=self._state,
    |

src_refactored\infrastructure\audio\audio_recording_service.py:998:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
     |
 996 |             )
 997 |
 998 |     def _handle_cleanup(self,
     |     ^
 999 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
1000 |         """Handle recording service cleanup."""
     |

src_refactored\infrastructure\audio\audio_recording_service.py:999:101: E501 Line too long (116 > 100)
     |
 998 |     def _handle_cleanup(self,
 999 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
     |                                                                                                     ^^^^^^^^^^^^^^^^ E501
1000 |         """Handle recording service cleanup."""
1001 |         try:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1001:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
     |
 999 |     request: AudioRecordingServiceRequest, start_time: float, warnings: list[str]) -> AudioRecordingServiceResponse:
1000 |         """Handle recording service cleanup."""
1001 |         try:
     |         ^
1002 |             # Stop all active recordings
1003 |             for recording_id in list(self._state.active_recordings.keys()):
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1003:13: SyntaxError: Expected a simple statement
     |
1001 |         try:
1002 |             # Stop all active recordings
1003 |             for recording_id in list(self._state.active_recordings.keys()):
     |             ^
1004 |                 if recording_id in self._stop_events:
1005 |                     self._stop_events[recording_id].set()
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1004:17: SyntaxError: Expected a simple statement
     |
1002 |             # Stop all active recordings
1003 |             for recording_id in list(self._state.active_recordings.keys()):
1004 |                 if recording_id in self._stop_events:
     |                 ^
1005 |                     self._stop_events[recording_id].set()
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1005:21: SyntaxError: Invalid annotated assignment target
     |
1003 |             for recording_id in list(self._state.active_recordings.keys()):
1004 |                 if recording_id in self._stop_events:
1005 |                     self._stop_events[recording_id].set()
     |                     ^
1006 |
1007 |                 if recording_id in self._recording_threads:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1007:59: SyntaxError: Expected 'else', found ':'
     |
1005 |                     self._stop_events[recording_id].set()
1006 |
1007 |                 if recording_id in self._recording_threads:
     |                                                           ^
1008 |                     thread = self._recording_threads[recording_id]
1009 |                     if thread.is_alive():
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1009:41: SyntaxError: Expected 'else', found ':'
     |
1007 |                 if recording_id in self._recording_threads:
1008 |                     thread = self._recording_threads[recording_id]
1009 |                     if thread.is_alive():
     |                                         ^
1010 |                         thread.join(timeout=1.0)
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1013:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1012 |             # Clear all resources
1013 |             self._recording_threads.clear()
     |             ^
1014 |             self._stop_events.clear()
1015 |             self._data_queues.clear()
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1014:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1012 |             # Clear all resources
1013 |             self._recording_threads.clear()
1014 |             self._stop_events.clear()
     |             ^
1015 |             self._data_queues.clear()
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1015:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1013 |             self._recording_threads.clear()
1014 |             self._stop_events.clear()
1015 |             self._data_queues.clear()
     |             ^
1016 |
1017 |             # Reset state
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1018:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1017 |             # Reset state
1018 |             self._state = AudioRecordingServiceState()
     |             ^
1019 |
1020 |             if request.enable_progress_tracking and self._progress_tracking_service:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1020:84: SyntaxError: Expected 'else', found ':'
     |
1018 |             self._state = AudioRecordingServiceState()
1019 |
1020 |             if request.enable_progress_tracking and self._progress_tracking_service:
     |                                                                                    ^
1021 |                 self._progress_tracking_service.complete_progress(,
1022 |     )
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1021:67: SyntaxError: Expected an expression or a ')'
     |
1020 |             if request.enable_progress_tracking and self._progress_tracking_service:
1021 |                 self._progress_tracking_service.complete_progress(,
     |                                                                   ^
1022 |     )
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1024:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1022 |     )
1023 |
1024 |             return AudioRecordingServiceResponse(
     |             ^
1025 |                 result=RecordingResult.SUCCESS,
1026 |                 state=self._state,
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1031:9: SyntaxError: Expected a statement
     |
1029 |             )
1030 |
1031 |         except Exception as e:
     |         ^
1032 |             error_message = f"Failed to cleanup recording service: {e!s}"
1033 |             return AudioRecordingServiceResponse(
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1031:26: SyntaxError: Expected a statement
     |
1029 |             )
1030 |
1031 |         except Exception as e:
     |                          ^
1032 |             error_message = f"Failed to cleanup recording service: {e!s}"
1033 |             return AudioRecordingServiceResponse(
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1033:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1031 |         except Exception as e:
1032 |             error_message = f"Failed to cleanup recording service: {e!s}"
1033 |             return AudioRecordingServiceResponse(
     |             ^
1034 |                 result=RecordingResult.FAILED,
1035 |                 state=self._state,
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1040:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
     |
1038 |             )
1039 |
1040 |     def _recording_worker(self,
     |     ^
1041 |     recording_id: str, stream_id: str, config: RecordingConfiguration, file_path: Path | None, enable_callback: bool,
1042 |     ) -> None:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1041:101: E501 Line too long (117 > 100)
     |
1040 |     def _recording_worker(self,
1041 |     recording_id: str, stream_id: str, config: RecordingConfiguration, file_path: Path | None, enable_callback: bool,
     |                                                                                                     ^^^^^^^^^^^^^^^^^ E501
1042 |     ) -> None:
1043 |         """Worker thread for recording audio data."""
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1044:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
     |
1042 |     ) -> None:
1043 |         """Worker thread for recording audio data."""
1044 |         try:
     |         ^
1045 |             queue = self._data_queues[recording_id]
1046 |             stop_event = self._stop_events[recording_id]
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1046:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1044 |         try:
1045 |             queue = self._data_queues[recording_id]
1046 |             stop_event = self._stop_events[recording_id]
     |             ^
1047 |             metadata = self._state.active_recordings[recording_id]
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1047:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1045 |             queue = self._data_queues[recording_id]
1046 |             stop_event = self._stop_events[recording_id]
1047 |             metadata = self._state.active_recordings[recording_id]
     |             ^
1048 |
1049 |             frames_per_read = config.buffer_size
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1049:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1047 |             metadata = self._state.active_recordings[recording_id]
1048 |
1049 |             frames_per_read = config.buffer_size
     |             ^
1050 |             silence_frames = 0
1051 |             silence_threshold_frames = int(config.silence_duration * config.sample_rate)
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1050:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1049 |             frames_per_read = config.buffer_size
1050 |             silence_frames = 0
     |             ^
1051 |             silence_threshold_frames = int(config.silence_duration * config.sample_rate)
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1051:13: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1049 |             frames_per_read = config.buffer_size
1050 |             silence_frames = 0
1051 |             silence_threshold_frames = int(config.silence_duration * config.sample_rate)
     |             ^
1052 |
1053 |             while not stop_event.is_set():
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1053:13: SyntaxError: Compound statements are not allowed on the same line as simple statements
     |
1051 |             silence_threshold_frames = int(config.silence_duration * config.sample_rate)
1052 |
1053 |             while not stop_event.is_set():
     |             ^
1054 |                 # Check if paused
1055 |                 if self._state.processing_state == RecordingState.PAUSED:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1055:17: SyntaxError: Expected a simple statement
     |
1053 |             while not stop_event.is_set():
1054 |                 # Check if paused
1055 |                 if self._state.processing_state == RecordingState.PAUSED:
     |                 ^
1056 |                     time.sleep(0.1,
1057 |     )
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1058:21: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1056 |                     time.sleep(0.1,
1057 |     )
1058 |                     continue
     |                     ^
1059 |
1060 |                 # Read audio data
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1061:1: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1060 |                 # Read audio data
1061 | read_success, audio_data, read_error = (
     | ^
1062 |     self._stream_service.read_stream(stream_id, frames_per_read))
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1064:36: SyntaxError: Expected 'else', found ':'
     |
1062 |     self._stream_service.read_stream(stream_id, frames_per_read))
1063 |
1064 |                 if not read_success:
     |                                    ^
1065 |                     if self._logger_service:
1066 |                         self._logger_service.log_warning(
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1071:21: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1069 |                             error=read_error,
1070 |                         )
1071 |                     continue
     |                     ^
1072 |
1073 |                 if audio_data is None or len(audio_data) == 0:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1073:17: SyntaxError: Compound statements are not allowed on the same line as simple statements
     |
1071 |                     continue
1072 |
1073 |                 if audio_data is None or len(audio_data) == 0:
     |                 ^
1074 |                     continue
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1077:17: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1076 |                 # Apply processing if enabled
1077 |                 processed_data = audio_data
     |                 ^
1078 |
1079 |                 if config.enable_noise_reduction:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1079:49: SyntaxError: Expected 'else', found ':'
     |
1077 |                 processed_data = audio_data
1078 |
1079 |                 if config.enable_noise_reduction:
     |                                                 ^
1080 | nr_success, nr_data, nr_error = (
1081 |     self._processing_service.apply_noise_reduction(audio_data))
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1082:58: SyntaxError: Expected 'else', found ':'
     |
1080 | nr_success, nr_data, nr_error = (
1081 |     self._processing_service.apply_noise_reduction(audio_data))
1082 |                     if nr_success and nr_data is not None:
     |                                                          ^
1083 |                         processed_data = nr_data
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1085:43: SyntaxError: Expected 'else', found ':'
     |
1083 |                         processed_data = nr_data
1084 |
1085 |                 if config.enable_auto_gain:
     |                                           ^
1086 | ag_success, ag_data, ag_error = (
1087 |     self._processing_service.apply_auto_gain(processed_data))
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1088:58: SyntaxError: Expected 'else', found ':'
     |
1086 | ag_success, ag_data, ag_error = (
1087 |     self._processing_service.apply_auto_gain(processed_data))
1088 |                     if ag_success and ag_data is not None:
     |                                                          ^
1089 |                         processed_data = ag_data
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1092:17: SyntaxError: Simple statements must be separated by newlines or semicolons
     |
1091 |                 # Calculate levels
1092 |                 levels_success,
     |                 ^
1093 | rms_level, peak_level, levels_error = (
1094 |     self._processing_service.calculate_levels(processed_data))
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1095:38: SyntaxError: Expected 'else', found ':'
     |
1093 | rms_level, peak_level, levels_error = (
1094 |     self._processing_service.calculate_levels(processed_data))
1095 |                 if not levels_success:
     |                                      ^
1096 |                     rms_level = peak_level = 0.0
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1099:1: SyntaxError: Unexpected indentation
     |
1098 |                 # Detect silence for voice activation mode
1099 |                 silence_detected = False
     | ^
1100 |                 if config.mode == RecordingMode.VOICE_ACTIVATED:
1101 | silence_success, is_silence, silence_error = (
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1100:65: SyntaxError: Expected an indented block after `if` statement
     |
1098 |                 # Detect silence for voice activation mode
1099 |                 silence_detected = False
1100 |                 if config.mode == RecordingMode.VOICE_ACTIVATED:
     |                                                                 ^
1101 | silence_success, is_silence, silence_error = (
1102 |     self._processing_service.detect_silence()
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1103:25: SyntaxError: Expected ')', found name
     |
1101 | silence_success, is_silence, silence_error = (
1102 |     self._processing_service.detect_silence()
1103 |                         processed_data, config.silence_threshold,
     |                         ^
1104 |                     )
1105 |                     if silence_success:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1104:21: SyntaxError: Expected a statement
     |
1102 |     self._processing_service.detect_silence()
1103 |                         processed_data, config.silence_threshold,
1104 |                     )
     |                     ^
1105 |                     if silence_success:
1106 |                         silence_detected = is_silence
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1104:22: SyntaxError: Expected a statement
     |
1102 |     self._processing_service.detect_silence()
1103 |                         processed_data, config.silence_threshold,
1104 |                     )
     |                      ^
1105 |                     if silence_success:
1106 |                         silence_detected = is_silence
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1105:1: SyntaxError: Unexpected indentation
     |
1103 |                         processed_data, config.silence_threshold,
1104 |                     )
1105 |                     if silence_success:
     | ^
1106 |                         silence_detected = is_silence
1107 |                         if is_silence:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1117:17: SyntaxError: unindent does not match any outer indentation level
     |
1116 |                 # Update status
1117 |                 if self._state.status:
     |                 ^
1118 |                     self._state.status.recorded_samples += len(processed_data,
1119 |     )
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1125:1: SyntaxError: unindent does not match any outer indentation level
     |
1124 |                 # Create recording data
1125 |                 self._chunk_counter += 1
     | ^
1126 |                 recording_data = RecordingData(
1127 |                     data=processed_data,
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1126:1: SyntaxError: Unexpected indentation
     |
1124 |                 # Create recording data
1125 |                 self._chunk_counter += 1
1126 |                 recording_data = RecordingData(
     | ^
1127 |                     data=processed_data,
1128 |                     metadata=metadata,
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1130:21: SyntaxError: Expected ',', found name
     |
1128 |                     metadata=metadata,
1129 |                     timestamp=time.time()
1130 |                     chunk_id=self._chunk_counter,
     |                     ^
1131 |                     rms_level=rms_level,
1132 |                     peak_level=peak_level,
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1151:30: SyntaxError: Expected an indented block after `if` statement
     |
1150 |                 # Write to file if auto-save enabled
1151 |                 if file_path:
     |                              ^
1152 | write_success, write_error = (
1153 |     self._file_service.write_data(file_path, processed_data))
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1154:1: SyntaxError: Unexpected indentation
     |
1152 | write_success, write_error = (
1153 |     self._file_service.write_data(file_path, processed_data))
1154 |                     if not write_success and self._logger_service:
     | ^
1155 |                         self._logger_service.log_warning(
1156 |                             "Failed to write to file",
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1159:29: SyntaxError: Expected ',', found name
     |
1157 |                             recording_id=recording_id,
1158 |                             file_path=str(file_path)
1159 |                             error=write_error,
     |                             ^
1160 |                         )
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1163:17: SyntaxError: unindent does not match any outer indentation level
     |
1162 |                 # Call real-time callback if enabled
1163 |                 if enable_callback and config.callback:
     |                 ^
1164 |                     try:
1165 |                         config.callback(processed_data, time.time())
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1171:45: COM812 Trailing comma missing
     |
1169 | …                         "Error in recording callback",
1170 | …                         recording_id=recording_id,
1171 | …                         error=str(e)
     |                                       ^ COM812
1172 | …                     )
     |
     = help: Add trailing comma

src_refactored\infrastructure\audio\audio_recording_service.py:1175:17: SyntaxError: unindent does not match any outer indentation level
     |
1174 |                 # Check max duration
1175 |                 if config.max_duration:
     |                 ^
1176 |                     current_duration = time.time() - metadata.start_time
1177 |                     if current_duration >= config.max_duration:
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1181:17: SyntaxError: unindent does not match any outer indentation level
     |
1179 |                         break
1180 |
1181 |                 time.sleep(0.001)  # Small delay to prevent busy waiting
     |                 ^
1182 |
1183 |             # Stop stream
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1184:1: SyntaxError: Unexpected indentation
     |
1183 |             # Stop stream
1184 |             self._stream_service.stop_stream(stream_id)
     | ^
1185 |             self._stream_service.destroy_stream(stream_id,
1186 |     )
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1188:1: SyntaxError: unindent does not match any outer indentation level
     |
1186 |     )
1187 |
1188 |         except Exception as e:
     | ^
1189 |             if self._logger_service:
1190 |                 self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1188:9: SyntaxError: Expected a statement
     |
1186 |     )
1187 |
1188 |         except Exception as e:
     |         ^
1189 |             if self._logger_service:
1190 |                 self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1188:26: SyntaxError: Expected a statement
     |
1186 |     )
1187 |
1188 |         except Exception as e:
     |                          ^
1189 |             if self._logger_service:
1190 |                 self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1188:31: SyntaxError: Expected an expression
     |
1186 |     )
1187 |
1188 |         except Exception as e:
     |                               ^
1189 |             if self._logger_service:
1190 |                 self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1189:1: SyntaxError: Unexpected indentation
     |
1188 |         except Exception as e:
1189 |             if self._logger_service:
     | ^
1190 |                 self._logger_service.log_error(
1191 |                     "Error in recording worker",
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1193:33: COM812 Trailing comma missing
     |
1191 |                     "Error in recording worker",
1192 |                     recording_id=recording_id,
1193 |                     error=str(e)
     |                                 ^ COM812
1194 |                 )
     |
     = help: Add trailing comma

src_refactored\infrastructure\audio\audio_recording_service.py:1200:5: SyntaxError: unindent does not match any outer indentation level
     |
1198 |                 self._state.status.last_error = str(e)
1199 |
1200 |     def get_active_recordings(self) -> dict[str, RecordingMetadata]:
     |     ^
1201 |         """Get all active recordings."""
1202 |         return self._state.active_recordings.copy()
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1204:1: SyntaxError: unindent does not match any outer indentation level
     |
1202 |         return self._state.active_recordings.copy()
1203 |
1204 |     def get_recording_queue(self, recording_id: str,
     | ^
1205 |     ) -> Queue | None:
1206 |         """Get recording data queue for specific recording."""
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1209:1: SyntaxError: unindent does not match any outer indentation level
     |
1207 |         return self._data_queues.get(recording_id)
1208 |
1209 |     def get_state(self) -> AudioRecordingServiceState:
     | ^
1210 |         """Get current service state."""
1211 |         return self._state
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1213:1: SyntaxError: unindent does not match any outer indentation level
     |
1211 |         return self._state
1212 |
1213 |     def get_status(self) -> RecordingStatus | None:
     | ^
1214 |         """Get current recording status."""
1215 |         return self._state.status
     |

src_refactored\infrastructure\audio\audio_recording_service.py:1215:34: SyntaxError: Expected dedent, found end of file
     |
1213 |     def get_status(self) -> RecordingStatus | None:
1214 |         """Get current recording status."""
1215 |         return self._state.status
     |                                  ^
     |

src_refactored\infrastructure\audio\audio_stream_service.py:44:50: SyntaxError: Expected ',', found 'and'
   |
43 | # AudioDevice,
44 | StreamConfiguration, AudioBuffer, StreamMetrics, and AudioStreamServiceRequest now imported from domain layer
   |                                                  ^
45 |     config: StreamConfiguration | None = None
46 |     buffer_data: AudioBuffer | None = None
   |

src_refactored\infrastructure\audio\audio_stream_service.py:44:80: SyntaxError: Expected ',', found name
   |
43 | # AudioDevice,
44 | StreamConfiguration, AudioBuffer, StreamMetrics, and AudioStreamServiceRequest now imported from domain layer
   |                                                                                ^
45 |     config: StreamConfiguration | None = None
46 |     buffer_data: AudioBuffer | None = None
   |

src_refactored\infrastructure\audio\audio_stream_service.py:44:84: SyntaxError: Expected ',', found name
   |
43 | # AudioDevice,
44 | StreamConfiguration, AudioBuffer, StreamMetrics, and AudioStreamServiceRequest now imported from domain layer
   |                                                                                    ^
45 |     config: StreamConfiguration | None = None
46 |     buffer_data: AudioBuffer | None = None
   |

src_refactored\infrastructure\audio\audio_stream_service.py:44:93: SyntaxError: Simple statements must be separated by newlines or semicolons
   |
43 | # AudioDevice,
44 | StreamConfiguration, AudioBuffer, StreamMetrics, and AudioStreamServiceRequest now imported from domain layer
   |                                                                                             ^
45 |     config: StreamConfiguration | None = None
46 |     buffer_data: AudioBuffer | None = None
   |

src_refactored\infrastructure\audio\audio_stream_service.py:44:101: E501 Line too long (109 > 100)
   |
43 | # AudioDevice,
44 | StreamConfiguration, AudioBuffer, StreamMetrics, and AudioStreamServiceRequest now imported from domain layer
   |                                                                                                     ^^^^^^^^^ E501
45 |     config: StreamConfiguration | None = None
46 |     buffer_data: AudioBuffer | None = None
   |

src_refactored\infrastructure\audio\audio_stream_service.py:44:105: SyntaxError: Expected 'import', found name
   |
43 | # AudioDevice,
44 | StreamConfiguration, AudioBuffer, StreamMetrics, and AudioStreamServiceRequest now imported from domain layer
   |                                                                                                         ^
45 |     config: StreamConfiguration | None = None
46 |     buffer_data: AudioBuffer | None = None
   |

src_refactored\infrastructure\audio\audio_stream_service.py:45:1: SyntaxError: Unexpected indentation
   |
43 | # AudioDevice,
44 | StreamConfiguration, AudioBuffer, StreamMetrics, and AudioStreamServiceRequest now imported from domain layer
45 |     config: StreamConfiguration | None = None
   | ^
46 |     buffer_data: AudioBuffer | None = None
47 |     device_id: int | None = None
   |

src_refactored\infrastructure\audio\audio_stream_service.py:54:1: SyntaxError: Expected a statement
   |
54 | @dataclass
   | ^
55 | class DeviceListResult:
56 |     """Result of device listing operation."""
   |

src_refactored\infrastructure\audio\audio_stream_service.py:375:21: SyntaxError: Expected ',', found name
    |
373 |                     "Audio stream operation failed",
374 |                     error=str(e)
375 |                     operation=request.operation.value,
    |                     ^
376 |                     execution_time=time.time() - start_time,
377 |                 )
    |

src_refactored\infrastructure\audio\audio_stream_service.py:388:101: E501 Line too long (110 > 100)
    |
387 |     def _handle_initialize(self,
388 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
389 |         """Handle stream service initialization."""
390 |         try:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:418:21: SyntaxError: Expected ',', found name
    |
416 |                     "Audio stream service initialized",
417 |                     input_devices=len(device_list.input_devices)
418 |                     output_devices=len(device_list.output_devices)
    |                     ^
419 |                     execution_time=time.time() - start_time,
420 |                 )
    |

src_refactored\infrastructure\audio\audio_stream_service.py:419:21: SyntaxError: Expected ',', found name
    |
417 |                     input_devices=len(device_list.input_devices)
418 |                     output_devices=len(device_list.output_devices)
419 |                     execution_time=time.time() - start_time,
    |                     ^
420 |                 )
    |

src_refactored\infrastructure\audio\audio_stream_service.py:443:101: E501 Line too long (110 > 100)
    |
442 |     def _handle_start_input(self,
443 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
444 |         """Handle input stream start."""
445 |         if not self._state.initialized:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:461:13: SyntaxError: Expected an indented block after `try` statement
    |
459 |             )
460 |
461 |         try:
    |             ^
462 |             # Validate configuration
463 | config_valid, config_error = (
    |

src_refactored\infrastructure\audio\audio_stream_service.py:463:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
461 |         try:
462 |             # Validate configuration
463 | config_valid, config_error = (
    | ^
464 |     self._validation_service.validate_configuration(request.config))
465 |             if not config_valid:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:465:1: SyntaxError: Unexpected indentation
    |
463 | config_valid, config_error = (
464 |     self._validation_service.validate_configuration(request.config))
465 |             if not config_valid:
    | ^
466 |                 return AudioStreamServiceResponse(
467 |                     result=StreamResult.FORMAT_ERROR,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:484:1: SyntaxError: Expected a statement
    |
483 |             # Create and start input stream
484 | stream_success, stream_id, stream_error = (
    | ^
485 |     self._stream_management_service.create_stream(request.config))
486 |             if not stream_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:486:1: SyntaxError: Unexpected indentation
    |
484 | stream_success, stream_id, stream_error = (
485 |     self._stream_management_service.create_stream(request.config))
486 |             if not stream_success:
    | ^
487 |                 return AudioStreamServiceResponse(
488 |                     result=StreamResult.DEVICE_ERROR,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:534:1: SyntaxError: unindent does not match any outer indentation level
    |
532 |             )
533 |
534 |         except Exception as e:
    | ^
535 |             error_message = f"Failed to start input stream: {e!s}"
536 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:534:9: SyntaxError: Expected a statement
    |
532 |             )
533 |
534 |         except Exception as e:
    |         ^
535 |             error_message = f"Failed to start input stream: {e!s}"
536 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:534:26: SyntaxError: Expected a statement
    |
532 |             )
533 |
534 |         except Exception as e:
    |                          ^
535 |             error_message = f"Failed to start input stream: {e!s}"
536 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:534:31: SyntaxError: Expected an expression
    |
532 |             )
533 |
534 |         except Exception as e:
    |                               ^
535 |             error_message = f"Failed to start input stream: {e!s}"
536 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:535:1: SyntaxError: Unexpected indentation
    |
534 |         except Exception as e:
535 |             error_message = f"Failed to start input stream: {e!s}"
    | ^
536 |             return AudioStreamServiceResponse(
537 |                 result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:543:1: SyntaxError: unindent does not match any outer indentation level
    |
541 |             )
542 |
543 |     def _handle_start_output(self,
    | ^
544 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
545 |         """Handle output stream start."""
    |

src_refactored\infrastructure\audio\audio_stream_service.py:544:101: E501 Line too long (110 > 100)
    |
543 |     def _handle_start_output(self,
544 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
545 |         """Handle output stream start."""
546 |         if not self._state.initialized:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:562:13: SyntaxError: Expected an indented block after `try` statement
    |
560 |             )
561 |
562 |         try:
    |             ^
563 |             # Validate configuration
564 | config_valid, config_error = (
    |

src_refactored\infrastructure\audio\audio_stream_service.py:564:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
562 |         try:
563 |             # Validate configuration
564 | config_valid, config_error = (
    | ^
565 |     self._validation_service.validate_configuration(request.config))
566 |             if not config_valid:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:566:1: SyntaxError: Unexpected indentation
    |
564 | config_valid, config_error = (
565 |     self._validation_service.validate_configuration(request.config))
566 |             if not config_valid:
    | ^
567 |                 return AudioStreamServiceResponse(
568 |                     result=StreamResult.FORMAT_ERROR,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:585:1: SyntaxError: Expected a statement
    |
584 |             # Create and start output stream
585 | stream_success, stream_id, stream_error = (
    | ^
586 |     self._stream_management_service.create_stream(request.config))
587 |             if not stream_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:587:1: SyntaxError: Unexpected indentation
    |
585 | stream_success, stream_id, stream_error = (
586 |     self._stream_management_service.create_stream(request.config))
587 |             if not stream_success:
    | ^
588 |                 return AudioStreamServiceResponse(
589 |                     result=StreamResult.DEVICE_ERROR,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:636:1: SyntaxError: unindent does not match any outer indentation level
    |
634 |             )
635 |
636 |         except Exception as e:
    | ^
637 |             error_message = f"Failed to start output stream: {e!s}"
638 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:636:9: SyntaxError: Expected a statement
    |
634 |             )
635 |
636 |         except Exception as e:
    |         ^
637 |             error_message = f"Failed to start output stream: {e!s}"
638 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:636:26: SyntaxError: Expected a statement
    |
634 |             )
635 |
636 |         except Exception as e:
    |                          ^
637 |             error_message = f"Failed to start output stream: {e!s}"
638 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:636:31: SyntaxError: Expected an expression
    |
634 |             )
635 |
636 |         except Exception as e:
    |                               ^
637 |             error_message = f"Failed to start output stream: {e!s}"
638 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:637:1: SyntaxError: Unexpected indentation
    |
636 |         except Exception as e:
637 |             error_message = f"Failed to start output stream: {e!s}"
    | ^
638 |             return AudioStreamServiceResponse(
639 |                 result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:645:1: SyntaxError: unindent does not match any outer indentation level
    |
643 |             )
644 |
645 |     def _handle_stop_input(self,
    | ^
646 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
647 |         """Handle input stream stop."""
    |

src_refactored\infrastructure\audio\audio_stream_service.py:646:101: E501 Line too long (110 > 100)
    |
645 |     def _handle_stop_input(self,
646 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
647 |         """Handle input stream stop."""
648 |         try:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:659:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
658 |             # Stop stream
659 | stop_success, stop_error = (
    | ^
660 |     self._stream_management_service.stop_stream(self._state.input_stream_id))
661 |             if not stop_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:661:1: SyntaxError: Unexpected indentation
    |
659 | stop_success, stop_error = (
660 |     self._stream_management_service.stop_stream(self._state.input_stream_id))
661 |             if not stop_success:
    | ^
662 |                 warnings.append(f"Failed to stop input stream: {stop_error}")
    |

src_refactored\infrastructure\audio\audio_stream_service.py:677:28: COM818 Trailing comma on bare tuple prohibited
    |
676 |             # Destroy stream
677 |             destroy_success,
    |                            ^ COM818
678 | destroy_error = (
679 |     self._stream_management_service.destroy_stream(self._state.input_stream_id))
    |

src_refactored\infrastructure\audio\audio_stream_service.py:678:1: SyntaxError: Expected a statement
    |
676 |             # Destroy stream
677 |             destroy_success,
678 | destroy_error = (
    | ^
679 |     self._stream_management_service.destroy_stream(self._state.input_stream_id))
680 |             if not destroy_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:680:1: SyntaxError: Unexpected indentation
    |
678 | destroy_error = (
679 |     self._stream_management_service.destroy_stream(self._state.input_stream_id))
680 |             if not destroy_success:
    | ^
681 |                 warnings.append(f"Failed to destroy input stream: {destroy_error}")
    |

src_refactored\infrastructure\audio\audio_stream_service.py:700:1: SyntaxError: unindent does not match any outer indentation level
    |
698 |             )
699 |
700 |         except Exception as e:
    | ^
701 |             error_message = f"Failed to stop input stream: {e!s}"
702 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:700:9: SyntaxError: Expected a statement
    |
698 |             )
699 |
700 |         except Exception as e:
    |         ^
701 |             error_message = f"Failed to stop input stream: {e!s}"
702 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:700:26: SyntaxError: Expected a statement
    |
698 |             )
699 |
700 |         except Exception as e:
    |                          ^
701 |             error_message = f"Failed to stop input stream: {e!s}"
702 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:700:31: SyntaxError: Expected an expression
    |
698 |             )
699 |
700 |         except Exception as e:
    |                               ^
701 |             error_message = f"Failed to stop input stream: {e!s}"
702 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:701:1: SyntaxError: Unexpected indentation
    |
700 |         except Exception as e:
701 |             error_message = f"Failed to stop input stream: {e!s}"
    | ^
702 |             return AudioStreamServiceResponse(
703 |                 result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:709:1: SyntaxError: unindent does not match any outer indentation level
    |
707 |             )
708 |
709 |     def _handle_stop_output(self,
    | ^
710 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
711 |         """Handle output stream stop."""
    |

src_refactored\infrastructure\audio\audio_stream_service.py:710:101: E501 Line too long (110 > 100)
    |
709 |     def _handle_stop_output(self,
710 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
711 |         """Handle output stream stop."""
712 |         try:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:723:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
722 |             # Stop stream
723 | stop_success, stop_error = (
    | ^
724 |     self._stream_management_service.stop_stream(self._state.output_stream_id))
725 |             if not stop_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:725:1: SyntaxError: Unexpected indentation
    |
723 | stop_success, stop_error = (
724 |     self._stream_management_service.stop_stream(self._state.output_stream_id))
725 |             if not stop_success:
    | ^
726 |                 warnings.append(f"Failed to stop output stream: {stop_error}")
    |

src_refactored\infrastructure\audio\audio_stream_service.py:741:28: COM818 Trailing comma on bare tuple prohibited
    |
740 |             # Destroy stream
741 |             destroy_success,
    |                            ^ COM818
742 | destroy_error = (
743 |     self._stream_management_service.destroy_stream(self._state.output_stream_id))
    |

src_refactored\infrastructure\audio\audio_stream_service.py:742:1: SyntaxError: Expected a statement
    |
740 |             # Destroy stream
741 |             destroy_success,
742 | destroy_error = (
    | ^
743 |     self._stream_management_service.destroy_stream(self._state.output_stream_id))
744 |             if not destroy_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:744:1: SyntaxError: Unexpected indentation
    |
742 | destroy_error = (
743 |     self._stream_management_service.destroy_stream(self._state.output_stream_id))
744 |             if not destroy_success:
    | ^
745 |                 warnings.append(f"Failed to destroy output stream: {destroy_error}")
    |

src_refactored\infrastructure\audio\audio_stream_service.py:764:1: SyntaxError: unindent does not match any outer indentation level
    |
762 |             )
763 |
764 |         except Exception as e:
    | ^
765 |             error_message = f"Failed to stop output stream: {e!s}"
766 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:764:9: SyntaxError: Expected a statement
    |
762 |             )
763 |
764 |         except Exception as e:
    |         ^
765 |             error_message = f"Failed to stop output stream: {e!s}"
766 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:764:26: SyntaxError: Expected a statement
    |
762 |             )
763 |
764 |         except Exception as e:
    |                          ^
765 |             error_message = f"Failed to stop output stream: {e!s}"
766 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:764:31: SyntaxError: Expected an expression
    |
762 |             )
763 |
764 |         except Exception as e:
    |                               ^
765 |             error_message = f"Failed to stop output stream: {e!s}"
766 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:765:1: SyntaxError: Unexpected indentation
    |
764 |         except Exception as e:
765 |             error_message = f"Failed to stop output stream: {e!s}"
    | ^
766 |             return AudioStreamServiceResponse(
767 |                 result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:773:1: SyntaxError: unindent does not match any outer indentation level
    |
771 |             )
772 |
773 |     def _handle_pause_input(self,
    | ^
774 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
775 |         """Handle input stream pause."""
    |

src_refactored\infrastructure\audio\audio_stream_service.py:774:101: E501 Line too long (110 > 100)
    |
773 |     def _handle_pause_input(self,
774 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
775 |         """Handle input stream pause."""
776 |         try:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:785:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
783 |                 )
784 |
785 | pause_success, pause_error = (
    | ^
786 |     self._stream_management_service.pause_stream(self._state.input_stream_id))
787 |             if not pause_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:787:1: SyntaxError: Unexpected indentation
    |
785 | pause_success, pause_error = (
786 |     self._stream_management_service.pause_stream(self._state.input_stream_id))
787 |             if not pause_success:
    | ^
788 |                 return AudioStreamServiceResponse(
789 |                     result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:807:1: SyntaxError: unindent does not match any outer indentation level
    |
805 |             )
806 |
807 |         except Exception as e:
    | ^
808 |             error_message = f"Failed to pause input stream: {e!s}"
809 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:807:9: SyntaxError: Expected a statement
    |
805 |             )
806 |
807 |         except Exception as e:
    |         ^
808 |             error_message = f"Failed to pause input stream: {e!s}"
809 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:807:26: SyntaxError: Expected a statement
    |
805 |             )
806 |
807 |         except Exception as e:
    |                          ^
808 |             error_message = f"Failed to pause input stream: {e!s}"
809 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:807:31: SyntaxError: Expected an expression
    |
805 |             )
806 |
807 |         except Exception as e:
    |                               ^
808 |             error_message = f"Failed to pause input stream: {e!s}"
809 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:808:1: SyntaxError: Unexpected indentation
    |
807 |         except Exception as e:
808 |             error_message = f"Failed to pause input stream: {e!s}"
    | ^
809 |             return AudioStreamServiceResponse(
810 |                 result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:816:1: SyntaxError: unindent does not match any outer indentation level
    |
814 |             )
815 |
816 |     def _handle_pause_output(self,
    | ^
817 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
818 |         """Handle output stream pause."""
    |

src_refactored\infrastructure\audio\audio_stream_service.py:817:101: E501 Line too long (110 > 100)
    |
816 |     def _handle_pause_output(self,
817 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
818 |         """Handle output stream pause."""
819 |         try:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:828:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
826 |                 )
827 |
828 | pause_success, pause_error = (
    | ^
829 |     self._stream_management_service.pause_stream(self._state.output_stream_id))
830 |             if not pause_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:830:1: SyntaxError: Unexpected indentation
    |
828 | pause_success, pause_error = (
829 |     self._stream_management_service.pause_stream(self._state.output_stream_id))
830 |             if not pause_success:
    | ^
831 |                 return AudioStreamServiceResponse(
832 |                     result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:850:1: SyntaxError: unindent does not match any outer indentation level
    |
848 |             )
849 |
850 |         except Exception as e:
    | ^
851 |             error_message = f"Failed to pause output stream: {e!s}"
852 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:850:9: SyntaxError: Expected a statement
    |
848 |             )
849 |
850 |         except Exception as e:
    |         ^
851 |             error_message = f"Failed to pause output stream: {e!s}"
852 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:850:26: SyntaxError: Expected a statement
    |
848 |             )
849 |
850 |         except Exception as e:
    |                          ^
851 |             error_message = f"Failed to pause output stream: {e!s}"
852 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:850:31: SyntaxError: Expected an expression
    |
848 |             )
849 |
850 |         except Exception as e:
    |                               ^
851 |             error_message = f"Failed to pause output stream: {e!s}"
852 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:851:1: SyntaxError: Unexpected indentation
    |
850 |         except Exception as e:
851 |             error_message = f"Failed to pause output stream: {e!s}"
    | ^
852 |             return AudioStreamServiceResponse(
853 |                 result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:859:1: SyntaxError: unindent does not match any outer indentation level
    |
857 |             )
858 |
859 |     def _handle_resume_input(self,
    | ^
860 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
861 |         """Handle input stream resume."""
    |

src_refactored\infrastructure\audio\audio_stream_service.py:860:101: E501 Line too long (110 > 100)
    |
859 |     def _handle_resume_input(self,
860 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
861 |         """Handle input stream resume."""
862 |         try:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:871:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
869 |                 )
870 |
871 | resume_success, resume_error = (
    | ^
872 |     self._stream_management_service.resume_stream(self._state.input_stream_id))
873 |             if not resume_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:873:1: SyntaxError: Unexpected indentation
    |
871 | resume_success, resume_error = (
872 |     self._stream_management_service.resume_stream(self._state.input_stream_id))
873 |             if not resume_success:
    | ^
874 |                 return AudioStreamServiceResponse(
875 |                     result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:893:1: SyntaxError: unindent does not match any outer indentation level
    |
891 |             )
892 |
893 |         except Exception as e:
    | ^
894 |             error_message = f"Failed to resume input stream: {e!s}"
895 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:893:9: SyntaxError: Expected a statement
    |
891 |             )
892 |
893 |         except Exception as e:
    |         ^
894 |             error_message = f"Failed to resume input stream: {e!s}"
895 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:893:26: SyntaxError: Expected a statement
    |
891 |             )
892 |
893 |         except Exception as e:
    |                          ^
894 |             error_message = f"Failed to resume input stream: {e!s}"
895 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:893:31: SyntaxError: Expected an expression
    |
891 |             )
892 |
893 |         except Exception as e:
    |                               ^
894 |             error_message = f"Failed to resume input stream: {e!s}"
895 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:894:1: SyntaxError: Unexpected indentation
    |
893 |         except Exception as e:
894 |             error_message = f"Failed to resume input stream: {e!s}"
    | ^
895 |             return AudioStreamServiceResponse(
896 |                 result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:902:1: SyntaxError: unindent does not match any outer indentation level
    |
900 |             )
901 |
902 |     def _handle_resume_output(self,
    | ^
903 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
904 |         """Handle output stream resume."""
    |

src_refactored\infrastructure\audio\audio_stream_service.py:903:101: E501 Line too long (110 > 100)
    |
902 |     def _handle_resume_output(self,
903 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
904 |         """Handle output stream resume."""
905 |         try:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:914:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
912 |                 )
913 |
914 | resume_success, resume_error = (
    | ^
915 |     self._stream_management_service.resume_stream(self._state.output_stream_id))
916 |             if not resume_success:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:916:1: SyntaxError: Unexpected indentation
    |
914 | resume_success, resume_error = (
915 |     self._stream_management_service.resume_stream(self._state.output_stream_id))
916 |             if not resume_success:
    | ^
917 |                 return AudioStreamServiceResponse(
918 |                     result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:936:1: SyntaxError: unindent does not match any outer indentation level
    |
934 |             )
935 |
936 |         except Exception as e:
    | ^
937 |             error_message = f"Failed to resume output stream: {e!s}"
938 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:936:9: SyntaxError: Expected a statement
    |
934 |             )
935 |
936 |         except Exception as e:
    |         ^
937 |             error_message = f"Failed to resume output stream: {e!s}"
938 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:936:26: SyntaxError: Expected a statement
    |
934 |             )
935 |
936 |         except Exception as e:
    |                          ^
937 |             error_message = f"Failed to resume output stream: {e!s}"
938 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:936:31: SyntaxError: Expected an expression
    |
934 |             )
935 |
936 |         except Exception as e:
    |                               ^
937 |             error_message = f"Failed to resume output stream: {e!s}"
938 |             return AudioStreamServiceResponse(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:937:1: SyntaxError: Unexpected indentation
    |
936 |         except Exception as e:
937 |             error_message = f"Failed to resume output stream: {e!s}"
    | ^
938 |             return AudioStreamServiceResponse(
939 |                 result=StreamResult.FAILED,
    |

src_refactored\infrastructure\audio\audio_stream_service.py:945:1: SyntaxError: unindent does not match any outer indentation level
    |
943 |             )
944 |
945 |     def _handle_get_buffer(self,
    | ^
946 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
947 |         """Handle buffer retrieval from input stream."""
    |

src_refactored\infrastructure\audio\audio_stream_service.py:946:101: E501 Line too long (110 > 100)
    |
945 |     def _handle_get_buffer(self,
946 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
    |                                                                                                     ^^^^^^^^^^ E501
947 |         """Handle buffer retrieval from input stream."""
948 |         try:
    |

src_refactored\infrastructure\audio\audio_stream_service.py:959:62: SyntaxError: Expected an expression or a ')'
    |
957 |             # Try to get buffer from queue first (non-blocking mode)
958 |             try:
959 |                 buffer = self._input_buffer_queue.get_nowait(,
    |                                                              ^
960 |     )
961 |                 buffer_result = BufferOperationResult(
    |

src_refactored\infrastructure\audio\audio_stream_service.py:964:71: COM812 Trailing comma missing
    |
962 |                     operation_successful=True,
963 |                     buffer=buffer,
964 |                     buffers_available=self._input_buffer_queue.qsize()
    |                                                                       ^ COM812
965 |                 )
    |
    = help: Add trailing comma

src_refactored\infrastructure\audio\audio_stream_service.py:1011:5: SyntaxError: unindent does not match any outer indentation level
     |
1009 |             )
1010 |
1011 |     def _handle_put_buffer(self,
     |     ^
1012 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
1013 |         """Handle buffer writing to output stream."""
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1012:101: E501 Line too long (110 > 100)
     |
1011 |     def _handle_put_buffer(self,
1012 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
     |                                                                                                     ^^^^^^^^^^ E501
1013 |         """Handle buffer writing to output stream."""
1014 |         try:
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1077:5: SyntaxError: unindent does not match any outer indentation level
     |
1075 |             )
1076 |
1077 |     def _handle_flush_buffers(self,
     |     ^
1078 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
1079 |         """Handle buffer flushing."""
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1078:101: E501 Line too long (110 > 100)
     |
1077 |     def _handle_flush_buffers(self,
1078 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
     |                                                                                                     ^^^^^^^^^^ E501
1079 |         """Handle buffer flushing."""
1080 |         try:
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1082:48: SyntaxError: Expected an indented block after `if` statement
     |
1080 |         try:
1081 |             # Flush input buffers
1082 |             if self._state.input_stream_active:
     |                                                ^
1083 | flush_success, flush_error = (
1084 |     self._buffer_management_service.flush_buffers(self._state.input_stream_id))
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1083:1: SyntaxError: Expected `except` or `finally` after `try` block
     |
1081 |             # Flush input buffers
1082 |             if self._state.input_stream_active:
1083 | flush_success, flush_error = (
     | ^
1084 |     self._buffer_management_service.flush_buffers(self._state.input_stream_id))
1085 |                 if not flush_success:
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1085:1: SyntaxError: Unexpected indentation
     |
1083 | flush_success, flush_error = (
1084 |     self._buffer_management_service.flush_buffers(self._state.input_stream_id))
1085 |                 if not flush_success:
     | ^
1086 |                     warnings.append(f"Failed to flush input buffers: {flush_error}")
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1089:13: SyntaxError: unindent does not match any outer indentation level
     |
1088 |             # Flush output buffers
1089 |             if self._state.output_stream_active:
     |             ^
1090 |                 flush_success,
1091 | flush_error = (
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1090:30: COM818 Trailing comma on bare tuple prohibited
     |
1088 |             # Flush output buffers
1089 |             if self._state.output_stream_active:
1090 |                 flush_success,
     |                              ^ COM818
1091 | flush_error = (
1092 |     self._buffer_management_service.flush_buffers(self._state.output_stream_id))
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1093:1: SyntaxError: Unexpected indentation
     |
1091 | flush_error = (
1092 |     self._buffer_management_service.flush_buffers(self._state.output_stream_id))
1093 |                 if not flush_success:
     | ^
1094 |                     warnings.append(f"Failed to flush output buffers: {flush_error}")
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1097:13: SyntaxError: unindent does not match any outer indentation level
     |
1096 |             # Clear internal queues
1097 |             while not self._input_buffer_queue.empty():
     |             ^
1098 |                 try:
1099 |                     self._input_buffer_queue.get_nowait()
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1103:13: SyntaxError: unindent does not match any outer indentation level
     |
1101 |                     break
1102 |
1103 |             while not self._output_buffer_queue.empty():
     |             ^
1104 |                 try:
1105 |                     self._output_buffer_queue.get_nowait()
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1109:13: SyntaxError: unindent does not match any outer indentation level
     |
1107 |                     break
1108 |
1109 |             if request.enable_progress_tracking and self._progress_tracking_service:
     |             ^
1110 |                 self._progress_tracking_service.complete_progress()
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1112:1: SyntaxError: unindent does not match any outer indentation level
     |
1110 |                 self._progress_tracking_service.complete_progress()
1111 |
1112 |             return AudioStreamServiceResponse(
     | ^
1113 |                 result=StreamResult.SUCCESS,
1114 |                 state=self._state,
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1119:1: SyntaxError: Unexpected indentation
     |
1117 |             )
1118 |
1119 |         except Exception as e:
     | ^
1120 |             error_message = f"Failed to flush buffers: {e!s}"
1121 |             return AudioStreamServiceResponse(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1119:9: SyntaxError: Expected a statement
     |
1117 |             )
1118 |
1119 |         except Exception as e:
     |         ^
1120 |             error_message = f"Failed to flush buffers: {e!s}"
1121 |             return AudioStreamServiceResponse(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1119:26: SyntaxError: Expected a statement
     |
1117 |             )
1118 |
1119 |         except Exception as e:
     |                          ^
1120 |             error_message = f"Failed to flush buffers: {e!s}"
1121 |             return AudioStreamServiceResponse(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1119:31: SyntaxError: Expected an expression
     |
1117 |             )
1118 |
1119 |         except Exception as e:
     |                               ^
1120 |             error_message = f"Failed to flush buffers: {e!s}"
1121 |             return AudioStreamServiceResponse(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1120:1: SyntaxError: Unexpected indentation
     |
1119 |         except Exception as e:
1120 |             error_message = f"Failed to flush buffers: {e!s}"
     | ^
1121 |             return AudioStreamServiceResponse(
1122 |                 result=StreamResult.BUFFER_ERROR,
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1128:5: SyntaxError: unindent does not match any outer indentation level
     |
1126 |             )
1127 |
1128 |     def _handle_cleanup(self,
     |     ^
1129 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
1130 |         """Handle stream service cleanup."""
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1129:101: E501 Line too long (110 > 100)
     |
1128 |     def _handle_cleanup(self,
1129 |     request: AudioStreamServiceRequest, start_time: float, warnings: list[str]) -> AudioStreamServiceResponse:
     |                                                                                                     ^^^^^^^^^^ E501
1130 |         """Handle stream service cleanup."""
1131 |         try:
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1171:5: SyntaxError: unindent does not match any outer indentation level
     |
1169 |             )
1170 |
1171 |     def _start_input_buffer_worker(self, stream_id: str,
     |     ^
1172 |     ) -> None:
1173 |         """Start input buffer worker thread."""
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1177:13: SyntaxError: Expected ',', found name
     |
1175 |             target=self._input_buffer_worker,
1176 |             args=(stream_id,)
1177 |             daemon=True,
     |             ^
1178 |         )
1179 |         self._worker_threads[stream_id] = worker_thread
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1182:1: SyntaxError: unindent does not match any outer indentation level
     |
1180 |         worker_thread.start()
1181 |
1182 |     def _start_output_buffer_worker(self, stream_id: str,
     | ^
1183 |     ) -> None:
1184 |         """Start output buffer worker thread."""
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1188:13: SyntaxError: Expected ',', found name
     |
1186 |             target=self._output_buffer_worker,
1187 |             args=(stream_id,)
1188 |             daemon=True,
     |             ^
1189 |         )
1190 |         self._worker_threads[stream_id] = worker_thread
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1193:1: SyntaxError: unindent does not match any outer indentation level
     |
1191 |         worker_thread.start()
1192 |
1193 |     def _input_buffer_worker(self, stream_id: str,
     | ^
1194 |     ) -> None:
1195 |         """Worker thread for input buffer management."""
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1197:17: SyntaxError: Expected an indented block after `try` statement
     |
1195 |         """Worker thread for input buffer management."""
1196 |         while not self._stop_event.is_set():
1197 |             try:
     |                 ^
1198 |                 # Read buffer from stream
1199 | read_success, buffer, read_error = (
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1199:1: SyntaxError: Expected `except` or `finally` after `try` block
     |
1197 |             try:
1198 |                 # Read buffer from stream
1199 | read_success, buffer, read_error = (
     | ^
1200 |     self._buffer_management_service.read_buffer(stream_id, 0.1))
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1202:1: SyntaxError: Unexpected indentation
     |
1200 |     self._buffer_management_service.read_buffer(stream_id, 0.1))
1201 |
1202 |                 if read_success and buffer:
     | ^
1203 |                     # Add to queue if not full
1204 |                     if self._input_buffer_queue.qsize() < 100:  # Max 100 buffers
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1216:1: SyntaxError: unindent does not match any outer indentation level
     |
1214 |                 time.sleep(0.001)  # Small delay to prevent busy waiting
1215 |
1216 |             except Exception as e:
     | ^
1217 |                 if self._logger_service:
1218 |                     self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1216:13: SyntaxError: Expected a statement
     |
1214 |                 time.sleep(0.001)  # Small delay to prevent busy waiting
1215 |
1216 |             except Exception as e:
     |             ^
1217 |                 if self._logger_service:
1218 |                     self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1216:30: SyntaxError: Expected a statement
     |
1214 |                 time.sleep(0.001)  # Small delay to prevent busy waiting
1215 |
1216 |             except Exception as e:
     |                              ^
1217 |                 if self._logger_service:
1218 |                     self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1216:35: SyntaxError: Expected an expression
     |
1214 |                 time.sleep(0.001)  # Small delay to prevent busy waiting
1215 |
1216 |             except Exception as e:
     |                                   ^
1217 |                 if self._logger_service:
1218 |                     self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1217:1: SyntaxError: Unexpected indentation
     |
1216 |             except Exception as e:
1217 |                 if self._logger_service:
     | ^
1218 |                     self._logger_service.log_error(
1219 |                         "Error in input buffer worker",
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1221:37: COM812 Trailing comma missing
     |
1219 |                         "Error in input buffer worker",
1220 |                         stream_id=stream_id,
1221 |                         error=str(e)
     |                                     ^ COM812
1222 |                     )
1223 |                 break
     |
     = help: Add trailing comma

src_refactored\infrastructure\audio\audio_stream_service.py:1225:1: SyntaxError: unindent does not match any outer indentation level
     |
1223 |                 break
1224 |
1225 |     def _output_buffer_worker(self, stream_id: str,
     | ^
1226 |     ) -> None:
1227 |         """Worker thread for output buffer management."""
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1236:1: SyntaxError: Expected `except` or `finally` after `try` block
     |
1235 |                     # Write buffer to stream
1236 | write_success, write_error = (
     | ^
1237 |     self._buffer_management_service.write_buffer(stream_id, buffer, 0.1))
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1239:1: SyntaxError: Unexpected indentation
     |
1237 |     self._buffer_management_service.write_buffer(stream_id, buffer, 0.1))
1238 |
1239 |                     if not write_success and self._logger_service:
     | ^
1240 |                         self._logger_service.log_warning(
1241 |                             "Failed to write buffer in worker",
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1246:17: SyntaxError: unindent does not match any outer indentation level
     |
1244 |                         )
1245 |
1246 |                 except Empty:
     |                 ^
1247 |                     continue
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1246:30: SyntaxError: Expected an expression
     |
1244 |                         )
1245 |
1246 |                 except Empty:
     |                              ^
1247 |                     continue
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1247:1: SyntaxError: Unexpected indentation
     |
1246 |                 except Empty:
1247 |                     continue
     | ^
1248 |
1249 |             except Exception as e:
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1249:1: SyntaxError: unindent does not match any outer indentation level
     |
1247 |                     continue
1248 |
1249 |             except Exception as e:
     | ^
1250 |                 if self._logger_service:
1251 |                     self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1249:13: SyntaxError: Expected a statement
     |
1247 |                     continue
1248 |
1249 |             except Exception as e:
     |             ^
1250 |                 if self._logger_service:
1251 |                     self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1249:30: SyntaxError: Expected a statement
     |
1247 |                     continue
1248 |
1249 |             except Exception as e:
     |                              ^
1250 |                 if self._logger_service:
1251 |                     self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1249:35: SyntaxError: Expected an expression
     |
1247 |                     continue
1248 |
1249 |             except Exception as e:
     |                                   ^
1250 |                 if self._logger_service:
1251 |                     self._logger_service.log_error(
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1250:1: SyntaxError: Unexpected indentation
     |
1249 |             except Exception as e:
1250 |                 if self._logger_service:
     | ^
1251 |                     self._logger_service.log_error(
1252 |                         "Error in output buffer worker",
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1254:37: COM812 Trailing comma missing
     |
1252 |                         "Error in output buffer worker",
1253 |                         stream_id=stream_id,
1254 |                         error=str(e)
     |                                     ^ COM812
1255 |                     )
1256 |                 break
     |
     = help: Add trailing comma

src_refactored\infrastructure\audio\audio_stream_service.py:1258:1: SyntaxError: unindent does not match any outer indentation level
     |
1256 |                 break
1257 |
1258 |     def get_input_buffer_queue(self) -> Queue:
     | ^
1259 |         """Get input buffer queue for non-blocking access."""
1260 |         return self._input_buffer_queue
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1262:1: SyntaxError: unindent does not match any outer indentation level
     |
1260 |         return self._input_buffer_queue
1261 |
1262 |     def get_output_buffer_queue(self) -> Queue:
     | ^
1263 |         """Get output buffer queue for non-blocking access."""
1264 |         return self._output_buffer_queue
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1266:1: SyntaxError: unindent does not match any outer indentation level
     |
1264 |         return self._output_buffer_queue
1265 |
1266 |     def get_state(self) -> AudioStreamServiceState:
     | ^
1267 |         """Get current service state."""
1268 |         return self._state
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1270:1: SyntaxError: unindent does not match any outer indentation level
     |
1268 |         return self._state
1269 |
1270 |     def get_metrics(self) -> StreamMetrics | None:
     | ^
1271 |         """Get current stream metrics."""
1272 |         return self._state.metrics
     |

src_refactored\infrastructure\audio\audio_stream_service.py:1272:35: SyntaxError: Expected dedent, found end of file
     |
1270 |     def get_metrics(self) -> StreamMetrics | None:
1271 |         """Get current stream metrics."""
1272 |         return self._state.metrics
     |                                   ^
     |

src_refactored\infrastructure\audio\audio_validation_service.py:351:17: SyntaxError: Expected ',', found string
    |
349 |                 "execution_time": execution_time,
350 |                 "rules_evaluated": len(active_rules)
351 |                 "issues_found": len(report.issues),
    |                 ^
352 |             }
    |

src_refactored\infrastructure\audio\audio_validation_service.py:364:21: SyntaxError: Expected ',', found name
    |
362 |                     is_valid=report.is_valid,
363 |                     issues_count=len(report.issues)
364 |                     execution_time=execution_time,
    |                     ^
365 |                 )
    |

src_refactored\infrastructure\audio\audio_validation_service.py:386:21: SyntaxError: Expected ',', found name
    |
384 |                     "Audio validation error",
385 |                     error=str(e)
386 |                     execution_time=time.time() - start_time,
    |                     ^
387 |                 )
    |

src_refactored\infrastructure\audio\audio_validation_service.py:415:17: SyntaxError: Expected ',', found name
    |
413 | parameters = (
414 |     {"min_rate": 8000, "max_rate": 192000, "common_rates": [44100, 48000, 96000]},)
415 |                 error_message="Sample rate must be between 8000 and 192000 Hz",
    |                 ^
416 |                 fix_suggestion="Use a standard sample rate like 44100 or 48000 Hz",
417 |             )
    |

src_refactored\infrastructure\audio\audio_validation_service.py:419:13: SyntaxError: Expected ',', found name
    |
417 |             )
418 |             # Channel validation
419 |             ValidationRule(
    |             ^
420 |                 rule_id="channel_count",
421 |                 name="Channel Count",
    |

src_refactored\infrastructure\audio\audio_validation_service.py:444:13: SyntaxError: Expected ',', found name
    |
442 |             )
443 |             # Buffer size validation
444 |             ValidationRule(
    |             ^
445 |                 rule_id="buffer_size_power_of_two",
446 |                 name="Buffer Size Power of Two",
    |

src_refactored\infrastructure\audio\audio_validation_service.py:456:13: SyntaxError: Expected ',', found name
    |
454 |             )
455 |             # Audio format validation
456 |             ValidationRule(
    |             ^
457 |                 rule_id="format_support",
458 |                 name="Format Support",
    |

src_refactored\infrastructure\audio\audio_validation_service.py:468:13: SyntaxError: Expected ',', found name
    |
466 |             )
467 |             # Data integrity validation
468 |             ValidationRule(
    |             ^
469 |                 rule_id="data_integrity",
470 |                 name="Data Integrity",
    |

src_refactored\infrastructure\audio\audio_validation_service.py:480:13: SyntaxError: Expected ',', found name
    |
478 |             )
479 |             # Performance validation
480 |             ValidationRule(
    |             ^
481 |                 rule_id="performance_check",
482 |                 name="Performance Check",
    |

src_refactored\infrastructure\audio\audio_validation_service.py:521:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
519 |                 if rule_result == ValidationStatus.INVALID:
520 |                     validation_result = ValidationStatus.INVALID
521 | elif rule_result = (
    | ^
522 |     = ValidationStatus.WARNING and validation_result == ValidationStatus.VALID:)
523 |                     validation_result = ValidationStatus.WARNING
    |

src_refactored\infrastructure\audio\audio_validation_service.py:522:5: SyntaxError: Expected an expression
    |
520 |                     validation_result = ValidationStatus.INVALID
521 | elif rule_result = (
522 |     = ValidationStatus.WARNING and validation_result == ValidationStatus.VALID:)
    |     ^
523 |                     validation_result = ValidationStatus.WARNING
    |

src_refactored\infrastructure\audio\audio_validation_service.py:522:79: SyntaxError: Expected an assignment target
    |
520 |                     validation_result = ValidationStatus.INVALID
521 | elif rule_result = (
522 |     = ValidationStatus.WARNING and validation_result == ValidationStatus.VALID:)
    |                                                                               ^
523 |                     validation_result = ValidationStatus.WARNING
    |

src_refactored\infrastructure\audio\audio_validation_service.py:522:80: SyntaxError: Expected an assignment target
    |
520 |                     validation_result = ValidationStatus.INVALID
521 | elif rule_result = (
522 |     = ValidationStatus.WARNING and validation_result == ValidationStatus.VALID:)
    |                                                                                ^
523 |                     validation_result = ValidationStatus.WARNING
    |

src_refactored\infrastructure\audio\audio_validation_service.py:523:1: SyntaxError: Unexpected indentation
    |
521 | elif rule_result = (
522 |     = ValidationStatus.WARNING and validation_result == ValidationStatus.VALID:)
523 |                     validation_result = ValidationStatus.WARNING
    | ^
524 |
525 |             return validation_result
    |

src_refactored\infrastructure\audio\audio_validation_service.py:525:1: SyntaxError: unindent does not match any outer indentation level
    |
523 |                     validation_result = ValidationStatus.WARNING
524 |
525 |             return validation_result
    | ^
526 |
527 |         except Exception as e:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:527:1: SyntaxError: Unexpected indentation
    |
525 |             return validation_result
526 |
527 |         except Exception as e:
    | ^
528 |             issue = ValidationIssue(
529 |                 issue_id=f"validation_error_{int(time.time()
    |

src_refactored\infrastructure\audio\audio_validation_service.py:527:9: SyntaxError: Expected a statement
    |
525 |             return validation_result
526 |
527 |         except Exception as e:
    |         ^
528 |             issue = ValidationIssue(
529 |                 issue_id=f"validation_error_{int(time.time()
    |

src_refactored\infrastructure\audio\audio_validation_service.py:527:26: SyntaxError: Expected a statement
    |
525 |             return validation_result
526 |
527 |         except Exception as e:
    |                          ^
528 |             issue = ValidationIssue(
529 |                 issue_id=f"validation_error_{int(time.time()
    |

src_refactored\infrastructure\audio\audio_validation_service.py:527:31: SyntaxError: Expected an expression
    |
525 |             return validation_result
526 |
527 |         except Exception as e:
    |                               ^
528 |             issue = ValidationIssue(
529 |                 issue_id=f"validation_error_{int(time.time()
    |

src_refactored\infrastructure\audio\audio_validation_service.py:528:1: SyntaxError: Unexpected indentation
    |
527 |         except Exception as e:
528 |             issue = ValidationIssue(
    | ^
529 |                 issue_id=f"validation_error_{int(time.time()
530 |     )}",
    |

src_refactored\infrastructure\audio\audio_validation_service.py:543:5: SyntaxError: unindent does not match any outer indentation level
    |
541 |             return ValidationStatus.ERROR
542 |
543 |     def _apply_validation_rule(
    |     ^
544 |         self,
545 |         rule: ValidationRule,
    |

src_refactored\infrastructure\audio\audio_validation_service.py:586:5: SyntaxError: unindent does not match any outer indentation level
    |
584 |             return ValidationStatus.ERROR
585 |
586 |     def _validate_sample_rate(self,
    |     ^
587 |     rule: ValidationRule, request: ValidationRequest, report: ValidationReport,
588 |     ) -> ValidationStatus:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:642:1: SyntaxError: unindent does not match any outer indentation level
    |
640 |         return ValidationStatus.VALID
641 |
642 |     def _validate_channels(self,
    | ^
643 |     rule: ValidationRule, request: ValidationRequest, report: ValidationReport,
644 |     ) -> ValidationStatus:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:679:1: SyntaxError: unindent does not match any outer indentation level
    |
677 |         return ValidationStatus.VALID
678 |
679 |     def _validate_bit_depth(self,
    | ^
680 |     rule: ValidationRule, request: ValidationRequest, report: ValidationReport,
681 |     ) -> ValidationStatus:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:715:1: SyntaxError: unindent does not match any outer indentation level
    |
713 |         return ValidationStatus.VALID
714 |
715 |     def _validate_buffer_size(self,
    | ^
716 |     rule: ValidationRule, request: ValidationRequest, report: ValidationReport,
717 |     ) -> ValidationStatus:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:768:1: SyntaxError: unindent does not match any outer indentation level
    |
766 |         return ValidationStatus.VALID
767 |
768 |     def _validate_audio_format(self,
    | ^
769 |     rule: ValidationRule, request: ValidationRequest, report: ValidationReport,
770 |     ) -> ValidationStatus:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:804:1: SyntaxError: unindent does not match any outer indentation level
    |
802 |         return ValidationStatus.VALID
803 |
804 |     def _validate_data_integrity(self,
    | ^
805 |     rule: ValidationRule, request: ValidationRequest, report: ValidationReport,
806 |     ) -> ValidationStatus:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:860:1: SyntaxError: unindent does not match any outer indentation level
    |
858 |         return ValidationStatus.VALID
859 |
860 |     def _validate_device_compatibility(self,
    | ^
861 |     rule: ValidationRule, request: ValidationRequest, report: ValidationReport,
862 |     ) -> ValidationStatus:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:873:45: SyntaxError: Expected an expression
    |
872 |         # Check sample rate support
873 |         if device.supported_sample_rates and
    |                                             ^
874 |     config.sample_rate not in device.supported_sample_rates:
875 |             issues_found.append(f"Sample rate {config.sample_rate} not supported by device")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:874:1: SyntaxError: unindent does not match any outer indentation level
    |
872 |         # Check sample rate support
873 |         if device.supported_sample_rates and
874 |     config.sample_rate not in device.supported_sample_rates:
    | ^
875 |             issues_found.append(f"Sample rate {config.sample_rate} not supported by device")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:874:5: SyntaxError: Invalid annotated assignment target
    |
872 |         # Check sample rate support
873 |         if device.supported_sample_rates and
874 |     config.sample_rate not in device.supported_sample_rates:
    |     ^
875 |             issues_found.append(f"Sample rate {config.sample_rate} not supported by device")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:874:61: SyntaxError: Expected an expression
    |
872 |         # Check sample rate support
873 |         if device.supported_sample_rates and
874 |     config.sample_rate not in device.supported_sample_rates:
    |                                                             ^
875 |             issues_found.append(f"Sample rate {config.sample_rate} not supported by device")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:875:1: SyntaxError: Unexpected indentation
    |
873 |         if device.supported_sample_rates and
874 |     config.sample_rate not in device.supported_sample_rates:
875 |             issues_found.append(f"Sample rate {config.sample_rate} not supported by device")
    | ^
876 |
877 |         # Check channel count
    |

src_refactored\infrastructure\audio\audio_validation_service.py:878:1: SyntaxError: unindent does not match any outer indentation level
    |
877 |         # Check channel count
878 |         if device.type == "output" and config.channels > device.max_output_channels:
    | ^
879 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
880 |     _output_channels}")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:879:101: E501 Line too long (101 > 100)
    |
877 |         # Check channel count
878 |         if device.type == "output" and config.channels > device.max_output_channels:
879 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
    |                                                                                                     ^ E501
880 |     _output_channels}")
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:880:5: SyntaxError: f-string: expecting '}'
    |
878 |         if device.type == "output" and config.channels > device.max_output_channels:
879 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
880 |     _output_channels}")
    |     ^
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
    |

src_refactored\infrastructure\audio\audio_validation_service.py:880:21: SyntaxError: f-string: single '}' is not allowed
    |
878 |         if device.type == "output" and config.channels > device.max_output_channels:
879 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
880 |     _output_channels}")
    |                     ^
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
    |

src_refactored\infrastructure\audio\audio_validation_service.py:880:22: SyntaxError: Expected ',', found FStringEnd
    |
878 |         if device.type == "output" and config.channels > device.max_output_channels:
879 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
880 |     _output_channels}")
    |                      ^
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
    |

src_refactored\infrastructure\audio\audio_validation_service.py:881:1: SyntaxError: unindent does not match any outer indentation level
    |
879 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
880 |     _output_channels}")
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
    | ^
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
883 |     _input_channels}")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:881:9: SyntaxError: Expected a statement
    |
879 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
880 |     _output_channels}")
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
    |         ^
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
883 |     _input_channels}")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:881:14: SyntaxError: Invalid annotated assignment target
    |
879 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
880 |     _output_channels}")
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
    |              ^
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
883 |     _input_channels}")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:881:85: SyntaxError: Expected an expression
    |
879 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
880 |     _output_channels}")
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
    |                                                                                     ^
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
883 |     _input_channels}")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:882:1: SyntaxError: Unexpected indentation
    |
880 |     _output_channels}")
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
    | ^
883 |     _input_channels}")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:882:101: E501 Line too long (101 > 100)
    |
880 |     _output_channels}")
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
    |                                                                                                     ^ E501
883 |     _input_channels}")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:883:5: SyntaxError: f-string: expecting '}'
    |
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
883 |     _input_channels}")
    |     ^
884 |
885 |         # Check device availability
    |

src_refactored\infrastructure\audio\audio_validation_service.py:883:20: SyntaxError: f-string: single '}' is not allowed
    |
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
883 |     _input_channels}")
    |                    ^
884 |
885 |         # Check device availability
    |

src_refactored\infrastructure\audio\audio_validation_service.py:883:21: SyntaxError: Expected ',', found FStringEnd
    |
881 |         elif device.type == "input" and config.channels > device.max_input_channels:
882 |             issues_found.append(f"Channel count {config.channels} exceeds device maximum {device.max\
883 |     _input_channels}")
    |                     ^
884 |
885 |         # Check device availability
    |

src_refactored\infrastructure\audio\audio_validation_service.py:886:1: SyntaxError: unindent does not match any outer indentation level
    |
885 |         # Check device availability
886 |         if not device.is_available:
    | ^
887 |             issues_found.append("Device is not available")
    |

src_refactored\infrastructure\audio\audio_validation_service.py:889:1: SyntaxError: unindent does not match any outer indentation level
    |
887 |             issues_found.append("Device is not available")
888 |
889 |         if issues_found:
    | ^
890 |             issue = ValidationIssue(
891 |                 issue_id=f"device_compatibility_{int(time.time()
    |

src_refactored\infrastructure\audio\audio_validation_service.py:906:1: SyntaxError: unindent does not match any outer indentation level
    |
904 |             return ValidationStatus.INVALID
905 |
906 |         return ValidationStatus.VALID
    | ^
907 |
908 |     def _validate_file_format(self,
    |

src_refactored\infrastructure\audio\audio_validation_service.py:908:1: SyntaxError: Unexpected indentation
    |
906 |         return ValidationStatus.VALID
907 |
908 |     def _validate_file_format(self,
    | ^
909 |     rule: ValidationRule, request: ValidationRequest, report: ValidationReport,
910 |     ) -> ValidationStatus:
    |

src_refactored\infrastructure\audio\audio_validation_service.py:967:17: SyntaxError: Expected ',', found name
    |
965 | message = (
966 |     f"Estimated latency {estimated_latency:.1f}ms exceeds maximum {max_latency_ms}ms",)
967 |                 value=estimated_latency,
    |                 ^
968 |                 expected=f"<= {max_latency_ms}ms",
969 |                 fix_suggestion="Reduce buffer size to decrease latency",
    |

src_refactored\infrastructure\audio\audio_validation_service.py:1037:101: E501 Line too long (101 > 100)
     |
1035 |                         power = round(math.log2(fixed_config.buffer_size))
1036 |                         fixed_config.buffer_size = 2 ** power
1037 |                         report.auto_fixes_applied.append(f"Fixed buffer size to {fixed_config.buffer\
     |                                                                                                     ^ E501
1038 |     _size} (power of two)")
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1038:5: SyntaxError: f-string: expecting '}'
     |
1036 |                         fixed_config.buffer_size = 2 ** power
1037 |                         report.auto_fixes_applied.append(f"Fixed buffer size to {fixed_config.buffer\
1038 |     _size} (power of two)")
     |     ^
1039 |
1040 |         # Fix audio data if needed
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1038:10: SyntaxError: f-string: single '}' is not allowed
     |
1036 |                         fixed_config.buffer_size = 2 ** power
1037 |                         report.auto_fixes_applied.append(f"Fixed buffer size to {fixed_config.buffer\
1038 |     _size} (power of two)")
     |          ^
1039 |
1040 |         # Fix audio data if needed
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1038:11: SyntaxError: Expected ',', found FStringMiddle
     |
1036 |                         fixed_config.buffer_size = 2 ** power
1037 |                         report.auto_fixes_applied.append(f"Fixed buffer size to {fixed_config.buffer\
1038 |     _size} (power of two)")
     |           ^
1039 |
1040 |         # Fix audio data if needed
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1038:26: SyntaxError: Expected ',', found FStringEnd
     |
1036 |                         fixed_config.buffer_size = 2 ** power
1037 |                         report.auto_fixes_applied.append(f"Fixed buffer size to {fixed_config.buffer\
1038 |     _size} (power of two)")
     |                          ^
1039 |
1040 |         # Fix audio data if needed
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1046:59: SyntaxError: Expected an expression or a ')'
     |
1045 |             # Remove NaN and Inf values
1046 |             if np.isnan(data).any() or np.isinf(data).any(,
     |                                                           ^
1047 |     ):
1048 |                 data = np.nan_to_num(data, nan=0.0, posinf=1.0, neginf=-1.0)
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1054:48: SyntaxError: Expected an expression or a ')'
     |
1052 |             # Normalize range for float data
1053 |             if data.dtype in [np.float32, np.float64] and np.abs(data).max() > 1.0:
1054 |                 data = data / np.abs(data).max(,
     |                                                ^
1055 |     )
1056 |                 data_fixed = True
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1072:80: COM812 Trailing comma missing
     |
1070 |                     checksum=request.audio_data.checksum,
1071 | metadata = (
1072 |     request.audio_data.metadata.copy() if request.audio_data.metadata else {},)
     |                                                                                ^ COM812
1073 |                 )
     |
     = help: Add trailing comma

src_refactored\infrastructure\audio\audio_validation_service.py:1093:40: SyntaxError: missing closing quote in string literal
     |
1091 |             # Sample rate recommendations
1092 |             if config.sample_rate not in [44100, 48000]:
1093 |                 recommendations.append("Consider using 44100 Hz or
     |                                        ^
1094 |     48000 Hz for better compatibility")
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1094:11: SyntaxError: Expected ',', found name
     |
1092 |             if config.sample_rate not in [44100, 48000]:
1093 |                 recommendations.append("Consider using 44100 Hz or
1094 |     48000 Hz for better compatibility")
     |           ^
1095 |
1096 |             # Channel recommendations
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1094:11: SyntaxError: Unparenthesized generator expression cannot be used here
     |
1092 |             if config.sample_rate not in [44100, 48000]:
1093 |                 recommendations.append("Consider using 44100 Hz or
1094 |     48000 Hz for better compatibility")
     |           ^
1095 |
1096 |             # Channel recommendations
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1094:25: SyntaxError: Expected 'in', found name
     |
1092 |             if config.sample_rate not in [44100, 48000]:
1093 |                 recommendations.append("Consider using 44100 Hz or
1094 |     48000 Hz for better compatibility")
     |                         ^
1095 |
1096 |             # Channel recommendations
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1094:38: SyntaxError: missing closing quote in string literal
     |
1092 |             if config.sample_rate not in [44100, 48000]:
1093 |                 recommendations.append("Consider using 44100 Hz or
1094 |     48000 Hz for better compatibility")
     |                                      ^
1095 |
1096 |             # Channel recommendations
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1094:40: SyntaxError: Expected ')', found newline
     |
1092 |             if config.sample_rate not in [44100, 48000]:
1093 |                 recommendations.append("Consider using 44100 Hz or
1094 |     48000 Hz for better compatibility")
     |                                        ^
1095 |
1096 |             # Channel recommendations
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1098:101: E501 Line too long (101 > 100)
     |
1096 |             # Channel recommendations
1097 |             if config.channels > 2:
1098 |                 recommendations.append("Consider using stereo (2 channels) for better compatibility"\
     |                                                                                                     ^ E501
1099 |     )
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1103:101: E501 Line too long (101 > 100)
     |
1101 |             # Buffer size recommendations
1102 |             if config.buffer_size < 512:
1103 |                 recommendations.append("Consider using a larger buffer size (512+) for better stabil\
     |                                                                                                     ^ E501
1104 |     ity")
1105 |             elif config.buffer_size > 4096:
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1105:44: SyntaxError: Expected an indented block after `elif` clause
     |
1103 |                 recommendations.append("Consider using a larger buffer size (512+) for better stabil\
1104 |     ity")
1105 |             elif config.buffer_size > 4096:
     |                                            ^
1106 | recommendations.append("Consider using a smaller buffer size (< = (
1107 |     4096) for lower latency"))
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1106:24: SyntaxError: missing closing quote in string literal
     |
1104 |     ity")
1105 |             elif config.buffer_size > 4096:
1106 | recommendations.append("Consider using a smaller buffer size (< = (
     |                        ^
1107 |     4096) for lower latency"))
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1107:11: SyntaxError: Compound statements are not allowed on the same line as simple statements
     |
1105 |             elif config.buffer_size > 4096:
1106 | recommendations.append("Consider using a smaller buffer size (< = (
1107 |     4096) for lower latency"))
     |           ^
1108 |
1109 |         return recommendations
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1107:21: SyntaxError: Expected 'in', found name
     |
1105 |             elif config.buffer_size > 4096:
1106 | recommendations.append("Consider using a smaller buffer size (< = (
1107 |     4096) for lower latency"))
     |                     ^
1108 |
1109 |         return recommendations
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1107:28: SyntaxError: missing closing quote in string literal
     |
1105 |             elif config.buffer_size > 4096:
1106 | recommendations.append("Consider using a smaller buffer size (< = (
1107 |     4096) for lower latency"))
     |                            ^
1108 |
1109 |         return recommendations
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1107:31: SyntaxError: Expected a statement
     |
1105 |             elif config.buffer_size > 4096:
1106 | recommendations.append("Consider using a smaller buffer size (< = (
1107 |     4096) for lower latency"))
     |                               ^
1108 |
1109 |         return recommendations
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1109:1: SyntaxError: Unexpected indentation
     |
1107 |     4096) for lower latency"))
1108 |
1109 |         return recommendations
     | ^
1110 |
1111 |     def get_available_rules(self) -> list[ValidationRule]:
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1111:1: SyntaxError: unindent does not match any outer indentation level
     |
1109 |         return recommendations
1110 |
1111 |     def get_available_rules(self) -> list[ValidationRule]:
     | ^
1112 |         """Get available validation rules."""
1113 |         return self._state.available_rules.copy()
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1115:1: SyntaxError: unindent does not match any outer indentation level
     |
1113 |         return self._state.available_rules.copy()
1114 |
1115 |     def get_active_rules(self) -> list[ValidationRule]:
     | ^
1116 |         """Get active validation rules."""
1117 |         return self._state.active_rules.copy()
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1119:1: SyntaxError: unindent does not match any outer indentation level
     |
1117 |         return self._state.active_rules.copy()
1118 |
1119 |     def set_rule_enabled(self, rule_id: str, enabled: bool,
     | ^
1120 |     ) -> bool:
1121 |         """Enable or disable a validation rule."""
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1128:1: SyntaxError: Unexpected indentation
     |
1126 | self._state.active_rules = (
1127 |     [rule for rule in self._state.available_rules if rule.enabled])
1128 |                 return True
     | ^
1129 |         return False
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1129:1: SyntaxError: unindent does not match any outer indentation level
     |
1127 |     [rule for rule in self._state.available_rules if rule.enabled])
1128 |                 return True
1129 |         return False
     | ^
1130 |
1131 |     def add_custom_rule(self, rule: ValidationRule,
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1131:1: SyntaxError: Unexpected indentation
     |
1129 |         return False
1130 |
1131 |     def add_custom_rule(self, rule: ValidationRule,
     | ^
1132 |     ) -> bool:
1133 |         """Add a custom validation rule."""
     |

src_refactored\infrastructure\audio\audio_validation_service.py:1150:27: SyntaxError: Expected dedent, found end of file
     |
1148 |     def get_state(self) -> AudioValidationServiceState:
1149 |         """Get current service state."""
1150 |         return self._state
     |                           ^
     |

src_refactored\infrastructure\audio\consolidated_listener_service.py:320:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
319 |             # Handle hotkey press/release
320 | if hasattr(event_data, "key_combination") and event_data.key_combination = (
    | ^
321 |     = self._current_hotkey:)
322 |                 if hasattr(event_data, "is_pressed"):
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:320:74: SyntaxError: Expected ':', found '='
    |
319 |             # Handle hotkey press/release
320 | if hasattr(event_data, "key_combination") and event_data.key_combination = (
    |                                                                          ^
321 |     = self._current_hotkey:)
322 |                 if hasattr(event_data, "is_pressed"):
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:321:5: SyntaxError: Expected an expression
    |
319 |             # Handle hotkey press/release
320 | if hasattr(event_data, "key_combination") and event_data.key_combination = (
321 |     = self._current_hotkey:)
    |     ^
322 |                 if hasattr(event_data, "is_pressed"):
323 |                     if event_data.is_pressed and not self._is_hotkey_pressed:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:321:27: SyntaxError: Expected a statement
    |
319 |             # Handle hotkey press/release
320 | if hasattr(event_data, "key_combination") and event_data.key_combination = (
321 |     = self._current_hotkey:)
    |                           ^
322 |                 if hasattr(event_data, "is_pressed"):
323 |                     if event_data.is_pressed and not self._is_hotkey_pressed:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:321:28: SyntaxError: Expected a statement
    |
319 |             # Handle hotkey press/release
320 | if hasattr(event_data, "key_combination") and event_data.key_combination = (
321 |     = self._current_hotkey:)
    |                            ^
322 |                 if hasattr(event_data, "is_pressed"):
323 |                     if event_data.is_pressed and not self._is_hotkey_pressed:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:321:29: SyntaxError: Expected a statement
    |
319 |             # Handle hotkey press/release
320 | if hasattr(event_data, "key_combination") and event_data.key_combination = (
321 |     = self._current_hotkey:)
    |                             ^
322 |                 if hasattr(event_data, "is_pressed"):
323 |                     if event_data.is_pressed and not self._is_hotkey_pressed:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:322:1: SyntaxError: Unexpected indentation
    |
320 | if hasattr(event_data, "key_combination") and event_data.key_combination = (
321 |     = self._current_hotkey:)
322 |                 if hasattr(event_data, "is_pressed"):
    | ^
323 |                     if event_data.is_pressed and not self._is_hotkey_pressed:
324 |                         self._is_hotkey_pressed = True
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:332:9: SyntaxError: unindent does not match any outer indentation level
    |
330 |                         self._stop_recording_internal()
331 |
332 |         except Exception as e:
    |         ^
333 |             self._emit_error(f"Error handling keyboard event: {e!s}")
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:332:26: SyntaxError: Expected a statement
    |
330 |                         self._stop_recording_internal()
331 |
332 |         except Exception as e:
    |                          ^
333 |             self._emit_error(f"Error handling keyboard event: {e!s}")
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:332:31: SyntaxError: Expected an expression
    |
330 |                         self._stop_recording_internal()
331 |
332 |         except Exception as e:
    |                               ^
333 |             self._emit_error(f"Error handling keyboard event: {e!s}")
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:333:1: SyntaxError: Unexpected indentation
    |
332 |         except Exception as e:
333 |             self._emit_error(f"Error handling keyboard event: {e!s}")
    | ^
334 |
335 |     def _start_recording_internal(self) -> bool:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:335:1: SyntaxError: unindent does not match any outer indentation level
    |
333 |             self._emit_error(f"Error handling keyboard event: {e!s}")
334 |
335 |     def _start_recording_internal(self) -> bool:
    | ^
336 |         """Internal method to start recording."""
337 |         try:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:349:21: SyntaxError: Expected ',', found name
    |
347 |                     session_id=session_id,
348 |                     start_time=datetime.now()
349 |                     sample_rate=self._config.sample_rate,
    |                     ^
350 |                     channels=self._config.channels,
351 |                 )
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:382:5: SyntaxError: unindent does not match any outer indentation level
    |
380 |             return False
381 |
382 |     def _stop_recording_internal(self) -> bool:
    |     ^
383 |         """Internal method to stop recording."""
384 |         try:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:408:5: SyntaxError: unindent does not match any outer indentation level
    |
406 |             return False
407 |
408 |     def _recording_loop(self) -> None:
    |     ^
409 |         """Main recording loop that captures audio chunks."""
410 |         try:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:422:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
421 |                     # Check duration limits
422 | if self._current_session and self._current_session.duration > = (
    | ^
423 |     self._config.max_recording_duration:)
424 |                         break
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:422:63: SyntaxError: Expected an expression
    |
421 |                     # Check duration limits
422 | if self._current_session and self._current_session.duration > = (
    |                                                               ^
423 |     self._config.max_recording_duration:)
424 |                         break
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:423:40: SyntaxError: Expected ')', found ':'
    |
421 |                     # Check duration limits
422 | if self._current_session and self._current_session.duration > = (
423 |     self._config.max_recording_duration:)
    |                                        ^
424 |                         break
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:423:41: SyntaxError: Expected an expression
    |
421 |                     # Check duration limits
422 | if self._current_session and self._current_session.duration > = (
423 |     self._config.max_recording_duration:)
    |                                         ^
424 |                         break
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:423:42: SyntaxError: Expected a statement
    |
421 |                     # Check duration limits
422 | if self._current_session and self._current_session.duration > = (
423 |     self._config.max_recording_duration:)
    |                                          ^
424 |                         break
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:424:1: SyntaxError: Unexpected indentation
    |
422 | if self._current_session and self._current_session.duration > = (
423 |     self._config.max_recording_duration:)
424 |                         break
    | ^
425 |
426 |                 time.sleep(0.01)  # Small delay to prevent busy waiting
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:426:1: SyntaxError: unindent does not match any outer indentation level
    |
424 |                         break
425 |
426 |                 time.sleep(0.01)  # Small delay to prevent busy waiting
    | ^
427 |
428 |         except Exception as e:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:428:1: SyntaxError: Unexpected indentation
    |
426 |                 time.sleep(0.01)  # Small delay to prevent busy waiting
427 |
428 |         except Exception as e:
    | ^
429 |             self._emit_error(f"Error in recording loop: {e!s}")
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:428:9: SyntaxError: Expected a statement
    |
426 |                 time.sleep(0.01)  # Small delay to prevent busy waiting
427 |
428 |         except Exception as e:
    |         ^
429 |             self._emit_error(f"Error in recording loop: {e!s}")
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:428:26: SyntaxError: Expected a statement
    |
426 |                 time.sleep(0.01)  # Small delay to prevent busy waiting
427 |
428 |         except Exception as e:
    |                          ^
429 |             self._emit_error(f"Error in recording loop: {e!s}")
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:428:31: SyntaxError: Expected an expression
    |
426 |                 time.sleep(0.01)  # Small delay to prevent busy waiting
427 |
428 |         except Exception as e:
    |                               ^
429 |             self._emit_error(f"Error in recording loop: {e!s}")
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:429:1: SyntaxError: Unexpected indentation
    |
428 |         except Exception as e:
429 |             self._emit_error(f"Error in recording loop: {e!s}")
    | ^
430 |
431 |     def _process_recorded_audio(self) -> None:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:431:5: SyntaxError: unindent does not match any outer indentation level
    |
429 |             self._emit_error(f"Error in recording loop: {e!s}")
430 |
431 |     def _process_recorded_audio(self) -> None:
    |     ^
432 |         """Process the recorded audio data."""
433 |         try:
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:471:5: SyntaxError: unindent does not match any outer indentation level
    |
469 |             self._change_state(ListenerState.IDLE)
470 |
471 |     def _check_speech_activity(self, audio_data: AudioData,
    |     ^
472 |     ) -> bool:
473 |         """Check if the audio contains speech using VAD."""
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:483:5: SyntaxError: unindent does not match any outer indentation level
    |
481 |             return True  # Assume speech if VAD fails
482 |
483 |     def _save_audio_data(self, audio_data: AudioData,
    |     ^
484 |     ) -> None:
485 |         """Save audio data to file."""
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:522:5: SyntaxError: unindent does not match any outer indentation level
    |
520 |             self._emit_error(f"Error saving audio data: {e!s}")
521 |
522 |     def _start_transcription(self, audio_data: AudioData,
    |     ^
523 |     ) -> None:
524 |         """Start transcription of the audio data."""
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:533:17: SyntaxError: Expected ',', found name
    |
531 |                 target=self._transcription_worker,
532 |                 args=(audio_data,)
533 |                 daemon=True,
    |                 ^
534 |             )
535 |             self._transcription_thread.start()
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:541:5: SyntaxError: unindent does not match any outer indentation level
    |
539 |             self._change_state(ListenerState.IDLE)
540 |
541 |     def _transcription_worker(self, audio_data: AudioData,
    |     ^
542 |     ) -> None:
543 |         """Worker method for transcription processing."""
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:566:17: SyntaxError: Expected ',', found name
    |
564 |                 event_type=ListenerEvent.TRANSCRIPTION_COMPLETED,
565 |                 timestamp=datetime.now()
566 |                 session_id=session_id,
    |                 ^
567 |                 transcription_text=transcription_text,
568 |             )
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:578:5: SyntaxError: unindent does not match any outer indentation level
    |
576 |             self._change_state(ListenerState.IDLE)
577 |
578 |     def _convert_audio_to_bytes(self, audio_data: AudioData,
    |     ^
579 |     ) -> bytes:
580 |         """Convert AudioData to bytes for processing."""
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:587:38: SyntaxError: Expected an expression or a ')'
    |
585 |             samples_int16 = audio_data.samples
586 |
587 |         return samples_int16.tobytes(,
    |                                      ^
588 |     )
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:590:1: SyntaxError: unindent does not match any outer indentation level
    |
588 |     )
589 |
590 |     def _change_state(self, new_state: ListenerState,
    | ^
591 |     ) -> None:
592 |         """Change the listener state."""
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:602:21: SyntaxError: Expected ',', found name
    |
600 |                     event_type=ListenerEvent.STATE_CHANGED,
601 |                     timestamp=datetime.now()
602 |                     state=new_state,
    |                     ^
603 |                     metadata={"previous_state": old_state.value},
604 |                 )
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:607:5: SyntaxError: unindent does not match any outer indentation level
    |
605 |                 self._emit_event_data(event_data)
606 |
607 |     def _emit_event(self, event_type: ListenerEvent,
    |     ^
608 |     ) -> None:
609 |         """Emit a listener event."""
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:613:13: SyntaxError: Expected ',', found name
    |
611 |             event_type=event_type,
612 |             timestamp=datetime.now()
613 |             session_id=self._current_session.session_id if self._current_session else None,
    |             ^
614 |         )
615 |         self._emit_event_data(event_data)
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:617:1: SyntaxError: unindent does not match any outer indentation level
    |
615 |         self._emit_event_data(event_data)
616 |
617 |     def _emit_event_data(self, event_data: ListenerEventData,
    | ^
618 |     ) -> None:
619 |         """Emit listener event data to all callbacks."""
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:627:5: SyntaxError: unindent does not match any outer indentation level
    |
625 |                 pass
626 |
627 |     def _emit_error(self, error_message: str, session_id: str | None = None) -> None:
    |     ^
628 |         """Emit an error event."""
629 |         # Emit to error callbacks
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:640:1: SyntaxError: Expected ',', found name
    |
638 |             event_type=ListenerEvent.ERROR_OCCURRED,
639 |             timestamp=datetime.now()
640 | session_id = (
    | ^
641 |     session_id or (self._current_session.session_id if self._current_session else None),)
642 |             error_message=error_message,
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:642:13: SyntaxError: Expected ',', found name
    |
640 | session_id = (
641 |     session_id or (self._current_session.session_id if self._current_session else None),)
642 |             error_message=error_message,
    |             ^
643 |         )
644 |         self._emit_event_data(event_data)
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:646:1: SyntaxError: unindent does not match any outer indentation level
    |
644 |         self._emit_event_data(event_data)
645 |
646 |     def _generate_session_id(self) -> str:
    | ^
647 |         """Generate a unique session ID."""
648 |         return f"session_{datetime.now().strftime('%Y%m%d_%H%M%S_%f')}"
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:650:1: SyntaxError: unindent does not match any outer indentation level
    |
648 |         return f"session_{datetime.now().strftime('%Y%m%d_%H%M%S_%f')}"
649 |
650 |     def get_configuration(self) -> ConsolidatedListenerConfiguration:
    | ^
651 |         """Get the current configuration."""
652 |         return self._config
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:654:1: SyntaxError: unindent does not match any outer indentation level
    |
652 |         return self._config
653 |
654 |     def update_configuration(self, config: ConsolidatedListenerConfiguration,
    | ^
655 |     ) -> None:
656 |         """Update the service configuration."""
    |

src_refactored\infrastructure\audio\consolidated_listener_service.py:664:68: SyntaxError: Expected dedent, found end of file
    |
662 |                 default_output_directory=config.recordings_directory,
663 |             )
664 |             self._file_repository.update_configuration(file_config)
    |                                                                    ^
    |

src_refactored\infrastructure\audio\keyboard_service.py:171:39: SyntaxError: Expected an expression or a ')'
    |
169 |         """Clear the event history."""
170 |         with self._lock:
171 |             self._event_history.clear(,
    |                                       ^
172 |     )
    |

src_refactored\infrastructure\audio\keyboard_service.py:182:17: SyntaxError: Expected ',', found name
    |
180 | event_type = (
181 |     KeyEventType.KEY_DOWN if event.event_type == "down" else KeyEventType.KEY_UP,)
182 |                 key_name=event.name,
    |                 ^
183 |                 timestamp=getattr(event, "time", 0.0)
184 |                 scan_code=getattr(event, "scan_code", None)
    |

src_refactored\infrastructure\audio\keyboard_service.py:184:17: SyntaxError: Expected ',', found name
    |
182 |                 key_name=event.name,
183 |                 timestamp=getattr(event, "time", 0.0)
184 |                 scan_code=getattr(event, "scan_code", None)
    |                 ^
185 |                 is_extended=getattr(event, "is_extended", False),
186 |             )
    |

src_refactored\infrastructure\audio\keyboard_service.py:185:17: SyntaxError: Expected ',', found name
    |
183 |                 timestamp=getattr(event, "time", 0.0)
184 |                 scan_code=getattr(event, "scan_code", None)
185 |                 is_extended=getattr(event, "is_extended", False),
    |                 ^
186 |             )
    |

src_refactored\infrastructure\audio\keyboard_service.py:276:101: E501 Line too long (111 > 100)
    |
274 |         """Get all registered hotkey combinations."""
275 |         with self._lock:
276 |             return {hotkey_id: combination for hotkey_id, (combination, _) in self._registered_hotkeys.items()}
    |                                                                                                     ^^^^^^^^^^^ E501
277 |
278 |     def shutdown(self) -> None:
    |

src_refactored\infrastructure\audio\listener_worker_service.py:99:16: BLE001 Do not catch blind exception: `Exception`
    |
 97 |             while self._running:
 98 |                 QThread.msleep(10)
 99 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
100 |             error_msg = f"Listener Error: {e}"
101 |             self.error.emit(error_msg)
    |

src_refactored\infrastructure\audio\pyaudio_service.py:92:1: SyntaxError: Unexpected indentation
   |
90 |         self.total_devices = len(self.devices)
91 |         self.available_devices
92 |          =  len([d for d in self.devices if d.max_input_channels > 0 or d.max_output_channels > 0],
   | ^
93 |     )
   |

src_refactored\infrastructure\audio\pyaudio_service.py:92:10: SyntaxError: Expected a statement
   |
90 |         self.total_devices = len(self.devices)
91 |         self.available_devices
92 |          =  len([d for d in self.devices if d.max_input_channels > 0 or d.max_output_channels > 0],
   |          ^
93 |     )
   |

src_refactored\infrastructure\audio\pyaudio_service.py:96:1: SyntaxError: Expected a statement
   |
96 | @dataclass
   | ^
97 | class StreamOperationResult:
98 |     """Result of stream operations."""
   |

src_refactored\infrastructure\audio\pyaudio_service.py:294:36: SyntaxError: Expected an expression or a ')'
    |
292 |         self.p: pyaudio.PyAudio | None = None
293 |         self.stream: pyaudio.Stream | None = None
294 |         self.logger = setup_logger(,
    |                                    ^
295 |     )
296 |         self._error_callback: Callable[[str], None] | None = None
    |

src_refactored\infrastructure\audio\pyaudio_service.py:511:21: SyntaxError: Expected ',', found name
    |
509 |                     "PyAudio operation failed",
510 |                     error=str(e)
511 |                     operation=request.operation.value,
    |                     ^
512 |                     execution_time=time.time() - start_time,
513 |                 )
    |

src_refactored\infrastructure\audio\pyaudio_service.py:524:101: E501 Line too long (102 > 100)
    |
523 |     def _handle_initialize(self,
524 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
    |                                                                                                     ^^ E501
525 |         """Handle PyAudio initialization."""
526 |         try:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:531:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
530 |             # Enumerate devices
531 | devices_success, devices, devices_error = (
    | ^
532 |     self._device_management_service.enumerate_devices())
533 |             if not devices_success:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:533:1: SyntaxError: Unexpected indentation
    |
531 | devices_success, devices, devices_error = (
532 |     self._device_management_service.enumerate_devices())
533 |             if not devices_success:
    | ^
534 |                 warnings.append(f"Failed to enumerate devices: {devices_error}")
535 |                 devices = []
    |

src_refactored\infrastructure\audio\pyaudio_service.py:538:34: COM818 Trailing comma on bare tuple prohibited
    |
537 |             # Get default devices
538 |             default_input_success,
    |                                  ^ COM818
539 |             default_input, _ = self._device_management_service.get_default_device(DeviceType.INPUT)
540 |             default_output_success,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:540:35: COM818 Trailing comma on bare tuple prohibited
    |
538 |             default_input_success,
539 |             default_input, _ = self._device_management_service.get_default_device(DeviceType.INPUT)
540 |             default_output_success,
    |                                   ^ COM818
541 | default_output, _ = (
542 |     self._device_management_service.get_default_device(DeviceType.OUTPUT))
    |

src_refactored\infrastructure\audio\pyaudio_service.py:541:1: SyntaxError: Expected a statement
    |
539 |             default_input, _ = self._device_management_service.get_default_device(DeviceType.INPUT)
540 |             default_output_success,
541 | default_output, _ = (
    | ^
542 |     self._device_management_service.get_default_device(DeviceType.OUTPUT))
    |

src_refactored\infrastructure\audio\pyaudio_service.py:544:1: SyntaxError: Unexpected indentation
    |
542 |     self._device_management_service.get_default_device(DeviceType.OUTPUT))
543 |
544 |             device_list = DeviceListResult(
    | ^
545 |                 devices=devices,
546 |                 default_input_device=default_input if default_input_success else None,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:559:21: SyntaxError: Expected ',', found name
    |
557 |                     "PyAudio initialized successfully",
558 |                     devices_found=len(devices)
559 |                     execution_time=time.time() - start_time,
    |                     ^
560 |                 )
    |

src_refactored\infrastructure\audio\pyaudio_service.py:570:1: SyntaxError: unindent does not match any outer indentation level
    |
568 |             )
569 |
570 |         except Exception as e:
    | ^
571 |             error_message = f"Failed to initialize PyAudio: {e!s}"
572 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\pyaudio_service.py:570:9: SyntaxError: Expected a statement
    |
568 |             )
569 |
570 |         except Exception as e:
    |         ^
571 |             error_message = f"Failed to initialize PyAudio: {e!s}"
572 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\pyaudio_service.py:570:26: SyntaxError: Expected a statement
    |
568 |             )
569 |
570 |         except Exception as e:
    |                          ^
571 |             error_message = f"Failed to initialize PyAudio: {e!s}"
572 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\pyaudio_service.py:570:31: SyntaxError: Expected an expression
    |
568 |             )
569 |
570 |         except Exception as e:
    |                               ^
571 |             error_message = f"Failed to initialize PyAudio: {e!s}"
572 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\pyaudio_service.py:571:1: SyntaxError: Unexpected indentation
    |
570 |         except Exception as e:
571 |             error_message = f"Failed to initialize PyAudio: {e!s}"
    | ^
572 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\pyaudio_service.py:582:1: SyntaxError: unindent does not match any outer indentation level
    |
580 |             )
581 |
582 |     def _handle_list_devices(self,
    | ^
583 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
584 |         """Handle device listing."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:583:101: E501 Line too long (102 > 100)
    |
582 |     def _handle_list_devices(self,
583 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
    |                                                                                                     ^^ E501
584 |         """Handle device listing."""
585 |         try:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:585:13: SyntaxError: Expected an indented block after `try` statement
    |
583 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
584 |         """Handle device listing."""
585 |         try:
    |             ^
586 | devices_success, devices, devices_error = (
587 |     self._device_management_service.enumerate_devices())
    |

src_refactored\infrastructure\audio\pyaudio_service.py:586:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
584 |         """Handle device listing."""
585 |         try:
586 | devices_success, devices, devices_error = (
    | ^
587 |     self._device_management_service.enumerate_devices())
588 |             if not devices_success:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:588:1: SyntaxError: Unexpected indentation
    |
586 | devices_success, devices, devices_error = (
587 |     self._device_management_service.enumerate_devices())
588 |             if not devices_success:
    | ^
589 |                 return PyAudioServiceResponse(
590 |                     result=AudioResult.DEVICE_ERROR,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:606:67: SyntaxError: Expected an expression or a ')'
    |
605 |             if request.enable_progress_tracking and self._progress_tracking_service:
606 |                 self._progress_tracking_service.complete_progress(,
    |                                                                   ^
607 |     )
    |

src_refactored\infrastructure\audio\pyaudio_service.py:617:1: SyntaxError: unindent does not match any outer indentation level
    |
615 |             )
616 |
617 |         except Exception as e:
    | ^
618 |             error_message = f"Failed to list devices: {e!s}"
619 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:617:9: SyntaxError: Expected a statement
    |
615 |             )
616 |
617 |         except Exception as e:
    |         ^
618 |             error_message = f"Failed to list devices: {e!s}"
619 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:617:26: SyntaxError: Expected a statement
    |
615 |             )
616 |
617 |         except Exception as e:
    |                          ^
618 |             error_message = f"Failed to list devices: {e!s}"
619 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:617:31: SyntaxError: Expected an expression
    |
615 |             )
616 |
617 |         except Exception as e:
    |                               ^
618 |             error_message = f"Failed to list devices: {e!s}"
619 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:618:1: SyntaxError: Unexpected indentation
    |
617 |         except Exception as e:
618 |             error_message = f"Failed to list devices: {e!s}"
    | ^
619 |             return PyAudioServiceResponse(
620 |                 result=AudioResult.DEVICE_ERROR,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:626:1: SyntaxError: unindent does not match any outer indentation level
    |
624 |             )
625 |
626 |     def _handle_test_device(self,
    | ^
627 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
628 |         """Handle device testing."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:627:101: E501 Line too long (102 > 100)
    |
626 |     def _handle_test_device(self,
627 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
    |                                                                                                     ^^ E501
628 |         """Handle device testing."""
629 |         if not request.stream_config or not request.stream_config.audio_config:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:648:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
646 |                 )
647 |
648 | device_success, device, device_error = (
    | ^
649 |     self._device_management_service.get_device_info(device_index))
650 |             if not device_success:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:650:1: SyntaxError: Unexpected indentation
    |
648 | device_success, device, device_error = (
649 |     self._device_management_service.get_device_info(device_index))
650 |             if not device_success:
    | ^
651 |                 return PyAudioServiceResponse(
652 |                     result=AudioResult.DEVICE_ERROR,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:676:1: SyntaxError: unindent does not match any outer indentation level
    |
674 |             )
675 |
676 |         except Exception as e:
    | ^
677 |             error_message = f"Failed to test device: {e!s}"
678 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:676:9: SyntaxError: Expected a statement
    |
674 |             )
675 |
676 |         except Exception as e:
    |         ^
677 |             error_message = f"Failed to test device: {e!s}"
678 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:676:26: SyntaxError: Expected a statement
    |
674 |             )
675 |
676 |         except Exception as e:
    |                          ^
677 |             error_message = f"Failed to test device: {e!s}"
678 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:676:31: SyntaxError: Expected an expression
    |
674 |             )
675 |
676 |         except Exception as e:
    |                               ^
677 |             error_message = f"Failed to test device: {e!s}"
678 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:677:1: SyntaxError: Unexpected indentation
    |
676 |         except Exception as e:
677 |             error_message = f"Failed to test device: {e!s}"
    | ^
678 |             return PyAudioServiceResponse(
679 |                 result=AudioResult.DEVICE_ERROR,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:685:1: SyntaxError: unindent does not match any outer indentation level
    |
683 |             )
684 |
685 |     def _handle_start_recording(self,
    | ^
686 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
687 |         """Handle start recording operation."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:686:101: E501 Line too long (102 > 100)
    |
685 |     def _handle_start_recording(self,
686 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
    |                                                                                                     ^^ E501
687 |         """Handle start recording operation."""
688 |         if not request.stream_config:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:696:13: SyntaxError: Expected an indented block after `try` statement
    |
694 |             )
695 |
696 |         try:
    |             ^
697 |             # Validate configuration
698 | config_valid, config_error = (
    |

src_refactored\infrastructure\audio\pyaudio_service.py:698:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
696 |         try:
697 |             # Validate configuration
698 | config_valid, config_error = (
    | ^
699 |     self._validation_service.validate_stream_configuration(request.stream_config))
700 |             if not config_valid:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:700:1: SyntaxError: Unexpected indentation
    |
698 | config_valid, config_error = (
699 |     self._validation_service.validate_stream_configuration(request.stream_config))
700 |             if not config_valid:
    | ^
701 |                 return PyAudioServiceResponse(
702 |                     result=AudioResult.FORMAT_ERROR,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:709:1: SyntaxError: Expected a statement
    |
708 |             # Create stream
709 | stream_created, stream, stream_error = (
    | ^
710 |     self._stream_management_service.create_stream(request.stream_config))
711 |             if not stream_created:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:711:1: SyntaxError: Unexpected indentation
    |
709 | stream_created, stream, stream_error = (
710 |     self._stream_management_service.create_stream(request.stream_config))
711 |             if not stream_created:
    | ^
712 |                 return PyAudioServiceResponse(
713 |                     result=AudioResult.STREAM_ERROR,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:743:84: COM812 Trailing comma missing
    |
741 |                 stream_active=stream_started,
742 |                 stream_object=stream,
743 |                 stream_info=self._stream_management_service.get_stream_info(stream)
    |                                                                                    ^ COM812
744 |             )
    |
    = help: Add trailing comma

src_refactored\infrastructure\audio\pyaudio_service.py:761:1: SyntaxError: unindent does not match any outer indentation level
    |
759 |             )
760 |
761 |         except Exception as e:
    | ^
762 |             error_message = f"Failed to start recording: {e!s}"
763 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:761:9: SyntaxError: Expected a statement
    |
759 |             )
760 |
761 |         except Exception as e:
    |         ^
762 |             error_message = f"Failed to start recording: {e!s}"
763 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:761:26: SyntaxError: Expected a statement
    |
759 |             )
760 |
761 |         except Exception as e:
    |                          ^
762 |             error_message = f"Failed to start recording: {e!s}"
763 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:761:31: SyntaxError: Expected an expression
    |
759 |             )
760 |
761 |         except Exception as e:
    |                               ^
762 |             error_message = f"Failed to start recording: {e!s}"
763 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:762:1: SyntaxError: Unexpected indentation
    |
761 |         except Exception as e:
762 |             error_message = f"Failed to start recording: {e!s}"
    | ^
763 |             return PyAudioServiceResponse(
764 |                 result=AudioResult.STREAM_ERROR,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:770:1: SyntaxError: unindent does not match any outer indentation level
    |
768 |             )
769 |
770 |     def _handle_stop_recording(self,
    | ^
771 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
772 |         """Handle stop recording operation."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:771:101: E501 Line too long (102 > 100)
    |
770 |     def _handle_stop_recording(self,
771 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
    |                                                                                                     ^^ E501
772 |         """Handle stop recording operation."""
773 |         try:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:779:37: SyntaxError: Expected an indented block after `if` statement
    |
777 |                 if "recording" in stream_id:
778 |                     stop_success, stop_error = self._stream_management_service.stop_stream(stream)
779 |                     if stop_success:
    |                                     ^
780 | close_success, close_error = (
781 |     self._stream_management_service.close_stream(stream))
    |

src_refactored\infrastructure\audio\pyaudio_service.py:780:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
778 |                     stop_success, stop_error = self._stream_management_service.stop_stream(stream)
779 |                     if stop_success:
780 | close_success, close_error = (
    | ^
781 |     self._stream_management_service.close_stream(stream))
782 |                         if close_success:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:782:1: SyntaxError: Unexpected indentation
    |
780 | close_success, close_error = (
781 |     self._stream_management_service.close_stream(stream))
782 |                         if close_success:
    | ^
783 |                             del self._state.active_streams[stream_id]
784 |                             stopped_streams += 1
    |

src_refactored\infrastructure\audio\pyaudio_service.py:787:21: SyntaxError: unindent does not match any outer indentation level
    |
785 |                         else:
786 |                             warnings.append(f"Failed to close stream {stream_id}: {close_error}")
787 |                     else:
    |                     ^
788 |                         warnings.append(f"Failed to stop stream {stream_id}: {stop_error}")
    |

src_refactored\infrastructure\audio\pyaudio_service.py:787:25: SyntaxError: Expected a statement
    |
785 |                         else:
786 |                             warnings.append(f"Failed to close stream {stream_id}: {close_error}")
787 |                     else:
    |                         ^
788 |                         warnings.append(f"Failed to stop stream {stream_id}: {stop_error}")
    |

src_refactored\infrastructure\audio\pyaudio_service.py:787:26: SyntaxError: Expected a statement
    |
785 |                         else:
786 |                             warnings.append(f"Failed to close stream {stream_id}: {close_error}")
787 |                     else:
    |                          ^
788 |                         warnings.append(f"Failed to stop stream {stream_id}: {stop_error}")
    |

src_refactored\infrastructure\audio\pyaudio_service.py:788:1: SyntaxError: Unexpected indentation
    |
786 |                             warnings.append(f"Failed to close stream {stream_id}: {close_error}")
787 |                     else:
788 |                         warnings.append(f"Failed to stop stream {stream_id}: {stop_error}")
    | ^
789 |
790 |             # Stop data collection thread
    |

src_refactored\infrastructure\audio\pyaudio_service.py:791:1: SyntaxError: unindent does not match any outer indentation level
    |
790 |             # Stop data collection thread
791 |             self._stop_data_collection_thread()
    | ^
792 |
793 |             if request.enable_progress_tracking and self._progress_tracking_service:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:793:1: SyntaxError: Unexpected indentation
    |
791 |             self._stop_data_collection_thread()
792 |
793 |             if request.enable_progress_tracking and self._progress_tracking_service:
    | ^
794 |                 self._progress_tracking_service.complete_progress()
    |

src_refactored\infrastructure\audio\pyaudio_service.py:805:1: SyntaxError: unindent does not match any outer indentation level
    |
803 |             )
804 |
805 |         except Exception as e:
    | ^
806 |             error_message = f"Failed to stop recording: {e!s}"
807 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:805:9: SyntaxError: Expected a statement
    |
803 |             )
804 |
805 |         except Exception as e:
    |         ^
806 |             error_message = f"Failed to stop recording: {e!s}"
807 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:805:26: SyntaxError: Expected a statement
    |
803 |             )
804 |
805 |         except Exception as e:
    |                          ^
806 |             error_message = f"Failed to stop recording: {e!s}"
807 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:805:31: SyntaxError: Expected an expression
    |
803 |             )
804 |
805 |         except Exception as e:
    |                               ^
806 |             error_message = f"Failed to stop recording: {e!s}"
807 |             return PyAudioServiceResponse(
    |

src_refactored\infrastructure\audio\pyaudio_service.py:806:1: SyntaxError: Unexpected indentation
    |
805 |         except Exception as e:
806 |             error_message = f"Failed to stop recording: {e!s}"
    | ^
807 |             return PyAudioServiceResponse(
808 |                 result=AudioResult.STREAM_ERROR,
    |

src_refactored\infrastructure\audio\pyaudio_service.py:814:1: SyntaxError: unindent does not match any outer indentation level
    |
812 |             )
813 |
814 |     def _handle_start_playback(self,
    | ^
815 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
816 |         """Handle start playback operation."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:815:101: E501 Line too long (102 > 100)
    |
814 |     def _handle_start_playback(self,
815 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
    |                                                                                                     ^^ E501
816 |         """Handle start playback operation."""
817 |         # Similar implementation to start_recording but for output streams
    |

src_refactored\infrastructure\audio\pyaudio_service.py:826:1: SyntaxError: unindent does not match any outer indentation level
    |
824 |         )
825 |
826 |     def _handle_stop_playback(self,
    | ^
827 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
828 |         """Handle stop playback operation."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:827:101: E501 Line too long (102 > 100)
    |
826 |     def _handle_stop_playback(self,
827 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
    |                                                                                                     ^^ E501
828 |         """Handle stop playback operation."""
829 |         # Similar implementation to stop_recording but for output streams
    |

src_refactored\infrastructure\audio\pyaudio_service.py:837:1: SyntaxError: unindent does not match any outer indentation level
    |
835 |         )
836 |
837 |     def _handle_cleanup(self,
    | ^
838 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
839 |         """Handle cleanup operation."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:838:101: E501 Line too long (102 > 100)
    |
837 |     def _handle_cleanup(self,
838 |     request: PyAudioServiceRequest, start_time: float, warnings: list[str]) -> PyAudioServiceResponse:
    |                                                                                                     ^^ E501
839 |         """Handle cleanup operation."""
840 |         try:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:875:5: SyntaxError: unindent does not match any outer indentation level
    |
873 |             )
874 |
875 |     def _start_data_collection_thread(self, stream: Any, config: StreamConfiguration,
    |     ^
876 |     ) -> None:
877 |         """Start data collection thread for non-blocking operation."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:885:13: SyntaxError: Expected ',', found name
    |
883 |             target=self._data_collection_worker,
884 |             args=(stream, config)
885 |             daemon=True,
    |             ^
886 |         )
887 |         self._worker_thread.start()
    |

src_refactored\infrastructure\audio\pyaudio_service.py:889:1: SyntaxError: unindent does not match any outer indentation level
    |
887 |         self._worker_thread.start()
888 |
889 |     def _stop_data_collection_thread(self) -> None:
    | ^
890 |         """Stop data collection thread."""
891 |         if self._worker_thread and self._worker_thread.is_alive():
    |

src_refactored\infrastructure\audio\pyaudio_service.py:895:5: SyntaxError: unindent does not match any outer indentation level
    |
893 |             self._worker_thread.join(timeout=1.0)
894 |
895 |     def _data_collection_worker(self, stream: Any, config: StreamConfiguration,
    |     ^
896 |     ) -> None:
897 |         """Worker thread for collecting audio data."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:928:5: SyntaxError: unindent does not match any outer indentation level
    |
926 |                 break
927 |
928 |     def get_audio_data(self, timeout: float = 0.1) -> AudioData | None:
    |     ^
929 |         """Get audio data from queue (non-blocking)."""
930 |         try:
    |

src_refactored\infrastructure\audio\pyaudio_service.py:935:5: SyntaxError: unindent does not match any outer indentation level
    |
933 |             return None
934 |
935 |     def get_state(self,
    |     ^
936 |     ) -> PyAudioServiceState:
937 |         """Get current service state."""
    |

src_refactored\infrastructure\audio\pyaudio_service.py:938:27: SyntaxError: Expected dedent, found end of file
    |
936 |     ) -> PyAudioServiceState:
937 |         """Get current service state."""
938 |         return self._state
    |                           ^
    |

src_refactored\infrastructure\audio\pyqt_audio_adapter.py:38:38: SLF001 Private member accessed: `_key_event_handler`
   |
37 |         # Store the original key event handler
38 |         self._original_key_handler = self.audio_to_text._key_event_handler
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
39 |
40 |         # Override with our signal-emitting handler
   |

src_refactored\infrastructure\audio\pyqt_audio_adapter.py:41:9: SLF001 Private member accessed: `_key_event_handler`
   |
40 |         # Override with our signal-emitting handler
41 |         self.audio_to_text._key_event_handler = self._key_event_handler_with_signals
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
42 |
43 |     def _key_event_handler_with_signals(self, event: Any,
   |

src_refactored\infrastructure\audio\pyqt_audio_adapter.py:188:17: SLF001 Private member accessed: `_key_event_handler`
    |
186 |             # Restore original key handler if needed
187 |             if hasattr(adapter, "_original_key_handler"):
188 |                 adapter.audio_to_text._key_event_handler = adapter._original_key_handler
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
189 |
190 |         self._active_adapters.clear()
    |

src_refactored\infrastructure\audio\pyqt_audio_adapter.py:188:60: SLF001 Private member accessed: `_original_key_handler`
    |
186 |             # Restore original key handler if needed
187 |             if hasattr(adapter, "_original_key_handler"):
188 |                 adapter.audio_to_text._key_event_handler = adapter._original_key_handler
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
189 |
190 |         self._active_adapters.clear()
    |

src_refactored\infrastructure\audio\vad_service.py:303:21: SyntaxError: Expected ',', found name
    |
301 |                     "VAD operation failed",
302 |                     error=str(e)
303 |                     operation=request.operation.value,
    |                     ^
304 |                     execution_time=time.time() - start_time,
305 |                 )
    |

src_refactored\infrastructure\audio\vad_service.py:326:13: SyntaxError: Expected an indented block after `try` statement
    |
324 |             )
325 |
326 |         try:
    |             ^
327 |             # Validate configuration
328 | config_valid, config_error = (
    |

src_refactored\infrastructure\audio\vad_service.py:328:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
326 |         try:
327 |             # Validate configuration
328 | config_valid, config_error = (
    | ^
329 |     self._validation_service.validate_configuration(request.config))
330 |             if not config_valid:
    |

src_refactored\infrastructure\audio\vad_service.py:330:1: SyntaxError: Unexpected indentation
    |
328 | config_valid, config_error = (
329 |     self._validation_service.validate_configuration(request.config))
330 |             if not config_valid:
    | ^
331 |                 return VADServiceResponse(
332 |                     result=VADResult.FAILED,
    |

src_refactored\infrastructure\audio\vad_service.py:374:1: SyntaxError: unindent does not match any outer indentation level
    |
372 |             )
373 |
374 |         except Exception as e:
    | ^
375 |             error_message = f"Failed to initialize VAD: {e!s}"
376 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\vad_service.py:374:9: SyntaxError: Expected a statement
    |
372 |             )
373 |
374 |         except Exception as e:
    |         ^
375 |             error_message = f"Failed to initialize VAD: {e!s}"
376 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\vad_service.py:374:26: SyntaxError: Expected a statement
    |
372 |             )
373 |
374 |         except Exception as e:
    |                          ^
375 |             error_message = f"Failed to initialize VAD: {e!s}"
376 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\vad_service.py:374:31: SyntaxError: Expected an expression
    |
372 |             )
373 |
374 |         except Exception as e:
    |                               ^
375 |             error_message = f"Failed to initialize VAD: {e!s}"
376 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\vad_service.py:375:1: SyntaxError: Unexpected indentation
    |
374 |         except Exception as e:
375 |             error_message = f"Failed to initialize VAD: {e!s}"
    | ^
376 |             self._state.error_message = error_message
    |

src_refactored\infrastructure\audio\vad_service.py:386:1: SyntaxError: unindent does not match any outer indentation level
    |
384 |             )
385 |
386 |     def _handle_detect_voice(self,
    | ^
387 |     request: VADServiceRequest, start_time: float, warnings: list[str]) -> VADServiceResponse:
388 |         """Handle voice activity detection."""
    |

src_refactored\infrastructure\audio\vad_service.py:405:13: SyntaxError: Expected an indented block after `try` statement
    |
403 |             )
404 |
405 |         try:
    |             ^
406 |             # Validate audio chunk
407 | chunk_valid, chunk_error = (
    |

src_refactored\infrastructure\audio\vad_service.py:407:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
405 |         try:
406 |             # Validate audio chunk
407 | chunk_valid, chunk_error = (
    | ^
408 |     self._validation_service.validate_audio_chunk(request.audio_chunk))
409 |             if not chunk_valid:
    |

src_refactored\infrastructure\audio\vad_service.py:409:1: SyntaxError: Unexpected indentation
    |
407 | chunk_valid, chunk_error = (
408 |     self._validation_service.validate_audio_chunk(request.audio_chunk))
409 |             if not chunk_valid:
    | ^
410 |                 return VADServiceResponse(
411 |                     result=VADResult.AUDIO_ERROR,
    |

src_refactored\infrastructure\audio\vad_service.py:419:35: COM818 Trailing comma on bare tuple prohibited
    |
417 |             # Preprocess audio if needed
418 |             if request.audio_chunk.sample_rate != self._state.current_config.sample_rate:
419 |                 preprocess_success,
    |                                   ^ COM818
420 |                 processed_audio, preprocess_error = self._audio_processing_service.preprocess_audio(
421 |                     request.audio_chunk.data,
    |

src_refactored\infrastructure\audio\vad_service.py:439:1: SyntaxError: Expected a statement
    |
438 |             # Detect voice activity
439 | detection_success, confidence, detection_error = (
    | ^
440 |     self._model_service.detect_voice_activity()
441 |                 request.audio_chunk, self._state.current_config,
    |

src_refactored\infrastructure\audio\vad_service.py:441:17: SyntaxError: Expected ')', found name
    |
439 | detection_success, confidence, detection_error = (
440 |     self._model_service.detect_voice_activity()
441 |                 request.audio_chunk, self._state.current_config,
    |                 ^
442 |             )
    |

src_refactored\infrastructure\audio\vad_service.py:442:13: SyntaxError: Expected a statement
    |
440 |     self._model_service.detect_voice_activity()
441 |                 request.audio_chunk, self._state.current_config,
442 |             )
    |             ^
443 |
444 |             if not detection_success:
    |

src_refactored\infrastructure\audio\vad_service.py:442:14: SyntaxError: Expected a statement
    |
440 |     self._model_service.detect_voice_activity()
441 |                 request.audio_chunk, self._state.current_config,
442 |             )
    |              ^
443 |
444 |             if not detection_success:
    |

src_refactored\infrastructure\audio\vad_service.py:444:1: SyntaxError: Unexpected indentation
    |
442 |             )
443 |
444 |             if not detection_success:
    | ^
445 |                 return VADServiceResponse(
446 |                     result=VADResult.MODEL_ERROR,
    |

src_refactored\infrastructure\audio\vad_service.py:454:1: SyntaxError: unindent does not match any outer indentation level
    |
452 |             # Determine voice activity
453 |             activity
454 |  = (
    | ^
455 |     VoiceActivity.SPEECH if confidence >= self._state.current_config.threshold else VoiceActivity.SILENCE)
456 |             if abs(confidence - self._state.current_config.threshold) < 0.1:
    |

src_refactored\infrastructure\audio\vad_service.py:454:2: SyntaxError: Expected a statement
    |
452 |             # Determine voice activity
453 |             activity
454 |  = (
    |  ^
455 |     VoiceActivity.SPEECH if confidence >= self._state.current_config.threshold else VoiceActivity.SILENCE)
456 |             if abs(confidence - self._state.current_config.threshold) < 0.1:
    |

src_refactored\infrastructure\audio\vad_service.py:455:101: E501 Line too long (106 > 100)
    |
453 |             activity
454 |  = (
455 |     VoiceActivity.SPEECH if confidence >= self._state.current_config.threshold else VoiceActivity.SILENCE)
    |                                                                                                     ^^^^^^ E501
456 |             if abs(confidence - self._state.current_config.threshold) < 0.1:
457 |                 activity = VoiceActivity.UNCERTAIN
    |

src_refactored\infrastructure\audio\vad_service.py:456:1: SyntaxError: Unexpected indentation
    |
454 |  = (
455 |     VoiceActivity.SPEECH if confidence >= self._state.current_config.threshold else VoiceActivity.SILENCE)
456 |             if abs(confidence - self._state.current_config.threshold) < 0.1:
    | ^
457 |                 activity = VoiceActivity.UNCERTAIN
    |

src_refactored\infrastructure\audio\vad_service.py:485:67: SyntaxError: Expected an expression or a ')'
    |
484 |             if request.enable_progress_tracking and self._progress_tracking_service:
485 |                 self._progress_tracking_service.complete_progress(,
    |                                                                   ^
486 |     )
    |

src_refactored\infrastructure\audio\vad_service.py:496:1: SyntaxError: unindent does not match any outer indentation level
    |
494 |             )
495 |
496 |         except Exception as e:
    | ^
497 |             error_message = f"Failed to detect voice activity: {e!s}"
498 |             return VADServiceResponse(
    |

src_refactored\infrastructure\audio\vad_service.py:496:9: SyntaxError: Expected a statement
    |
494 |             )
495 |
496 |         except Exception as e:
    |         ^
497 |             error_message = f"Failed to detect voice activity: {e!s}"
498 |             return VADServiceResponse(
    |

src_refactored\infrastructure\audio\vad_service.py:496:26: SyntaxError: Expected a statement
    |
494 |             )
495 |
496 |         except Exception as e:
    |                          ^
497 |             error_message = f"Failed to detect voice activity: {e!s}"
498 |             return VADServiceResponse(
    |

src_refactored\infrastructure\audio\vad_service.py:496:31: SyntaxError: Expected an expression
    |
494 |             )
495 |
496 |         except Exception as e:
    |                               ^
497 |             error_message = f"Failed to detect voice activity: {e!s}"
498 |             return VADServiceResponse(
    |

src_refactored\infrastructure\audio\vad_service.py:497:1: SyntaxError: Unexpected indentation
    |
496 |         except Exception as e:
497 |             error_message = f"Failed to detect voice activity: {e!s}"
    | ^
498 |             return VADServiceResponse(
499 |                 result=VADResult.FAILED,
    |

src_refactored\infrastructure\audio\vad_service.py:505:1: SyntaxError: unindent does not match any outer indentation level
    |
503 |             )
504 |
505 |     def _handle_set_threshold(self,
    | ^
506 |     request: VADServiceRequest, start_time: float, warnings: list[str]) -> VADServiceResponse:
507 |         """Handle threshold setting."""
    |

src_refactored\infrastructure\audio\vad_service.py:516:13: SyntaxError: Expected an indented block after `try` statement
    |
514 |             )
515 |
516 |         try:
    |             ^
517 |             # Validate threshold
518 | threshold_valid, threshold_error = (
    |

src_refactored\infrastructure\audio\vad_service.py:518:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
516 |         try:
517 |             # Validate threshold
518 | threshold_valid, threshold_error = (
    | ^
519 |     self._validation_service.validate_threshold(request.config.threshold))
520 |             if not threshold_valid:
    |

src_refactored\infrastructure\audio\vad_service.py:520:1: SyntaxError: Unexpected indentation
    |
518 | threshold_valid, threshold_error = (
519 |     self._validation_service.validate_threshold(request.config.threshold))
520 |             if not threshold_valid:
    | ^
521 |                 return VADServiceResponse(
522 |                     result=VADResult.THRESHOLD_ERROR,
    |

src_refactored\infrastructure\audio\vad_service.py:549:1: SyntaxError: unindent does not match any outer indentation level
    |
547 |             )
548 |
549 |         except Exception as e:
    | ^
550 |             error_message = f"Failed to set threshold: {e!s}"
551 |             return VADServiceResponse(
    |

src_refactored\infrastructure\audio\vad_service.py:549:9: SyntaxError: Expected a statement
    |
547 |             )
548 |
549 |         except Exception as e:
    |         ^
550 |             error_message = f"Failed to set threshold: {e!s}"
551 |             return VADServiceResponse(
    |

src_refactored\infrastructure\audio\vad_service.py:549:26: SyntaxError: Expected a statement
    |
547 |             )
548 |
549 |         except Exception as e:
    |                          ^
550 |             error_message = f"Failed to set threshold: {e!s}"
551 |             return VADServiceResponse(
    |

src_refactored\infrastructure\audio\vad_service.py:549:31: SyntaxError: Expected an expression
    |
547 |             )
548 |
549 |         except Exception as e:
    |                               ^
550 |             error_message = f"Failed to set threshold: {e!s}"
551 |             return VADServiceResponse(
    |

src_refactored\infrastructure\audio\vad_service.py:550:1: SyntaxError: Unexpected indentation
    |
549 |         except Exception as e:
550 |             error_message = f"Failed to set threshold: {e!s}"
    | ^
551 |             return VADServiceResponse(
552 |                 result=VADResult.THRESHOLD_ERROR,
    |

src_refactored\infrastructure\audio\vad_service.py:558:1: SyntaxError: unindent does not match any outer indentation level
    |
556 |             )
557 |
558 |     def _handle_calibrate(self,
    | ^
559 |     request: VADServiceRequest, start_time: float, warnings: list[str]) -> VADServiceResponse:
560 |         """Handle VAD calibration."""
    |

src_refactored\infrastructure\audio\vad_service.py:619:5: SyntaxError: unindent does not match any outer indentation level
    |
617 |             )
618 |
619 |     def _handle_start_continuous(self,
    |     ^
620 |     request: VADServiceRequest, start_time: float, warnings: list[str]) -> VADServiceResponse:
621 |         """Handle start continuous VAD processing."""
    |

src_refactored\infrastructure\audio\vad_service.py:649:17: SyntaxError: Expected ',', found name
    |
647 |                 target=self._continuous_processing_worker,
648 |                 args=(request.callback,)
649 |                 daemon=True,
    |                 ^
650 |             )
651 |             self._worker_thread.start()
    |

src_refactored\infrastructure\audio\vad_service.py:681:5: SyntaxError: unindent does not match any outer indentation level
    |
679 |             )
680 |
681 |     def _handle_stop_continuous(self,
    |     ^
682 |     request: VADServiceRequest, start_time: float, warnings: list[str]) -> VADServiceResponse:
683 |         """Handle stop continuous VAD processing."""
    |

src_refactored\infrastructure\audio\vad_service.py:721:5: SyntaxError: unindent does not match any outer indentation level
    |
719 |             )
720 |
721 |     def _handle_cleanup(self,
    |     ^
722 |     request: VADServiceRequest, start_time: float, warnings: list[str]) -> VADServiceResponse:
723 |         """Handle VAD cleanup."""
    |

src_refactored\infrastructure\audio\vad_service.py:767:5: SyntaxError: unindent does not match any outer indentation level
    |
765 |             )
766 |
767 |     def _continuous_processing_worker(
    |     ^
768 |     self,
769 |     callback: Callable[[VADDetection],
    |

src_refactored\infrastructure\audio\vad_service.py:788:37: COM812 Trailing comma missing
    |
786 |                     self._logger_service.log_error(
787 |                         "Error in continuous VAD processing",
788 |                         error=str(e)
    |                                     ^ COM812
789 |                     )
790 |                 break
    |
    = help: Add trailing comma

src_refactored\infrastructure\audio\vad_service.py:792:5: SyntaxError: unindent does not match any outer indentation level
    |
790 |                 break
791 |
792 |     def get_detection_queue(self) -> Queue:
    |     ^
793 |         """Get detection queue for non-blocking access."""
794 |         return self._detection_queue
    |

src_refactored\infrastructure\audio\vad_service.py:796:1: SyntaxError: unindent does not match any outer indentation level
    |
794 |         return self._detection_queue
795 |
796 |     def get_state(self) -> VADServiceState:
    | ^
797 |         """Get current service state."""
798 |         return self._state
    |

src_refactored\infrastructure\audio\vad_service.py:800:1: SyntaxError: unindent does not match any outer indentation level
    |
798 |         return self._state
799 |
800 |     def get_detection_history(self, limit: int = 10,
    | ^
801 |     ) -> list[VADDetection]:
802 |         """Get recent detection history."""
    |

src_refactored\infrastructure\audio\vad_service.py:803:83: SyntaxError: Expected dedent, found end of file
    |
801 |     ) -> list[VADDetection]:
802 |         """Get recent detection history."""
803 |         return self._detection_history[-limit:] if self._detection_history else []
    |                                                                                   ^
    |

src_refactored\infrastructure\audio\vad_worker_service.py:44:16: BLE001 Do not catch blind exception: `Exception`
   |
42 |             self.initialized.emit()
43 |             self.toggle_status()
44 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
45 |             error_msg = f"Failed to initialize VAD: {e}"
46 |             self.error.emit(error_msg)
   |

src_refactored\infrastructure\audio_visualization\audio_normalization_service.py:101:35: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
    |
100 |                 # Apply gentle compression for speech dynamics
101 |                 if scale_factor > 2.0:  # Avoid over-amplification
    |                                   ^^^ PLR2004
102 |                     scale_factor = 2.0 + np.log(scale_factor - 1.0)
    |

src_refactored\infrastructure\audio_visualization\audio_normalization_service.py:123:35: G004 Logging statement uses f-string
    |
122 |         except Exception as e:
123 |             self.logger.exception(f"Error in speech normalization: {e}",
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
124 |     )
125 |             return audio_data  # Return original data on error
    |

src_refactored\infrastructure\audio_visualization\audio_normalization_service.py:123:69: TRY401 Redundant exception object included in `logging.exception` call
    |
122 |         except Exception as e:
123 |             self.logger.exception(f"Error in speech normalization: {e}",
    |                                                                     ^ TRY401
124 |     )
125 |             return audio_data  # Return original data on error
    |

src_refactored\infrastructure\audio_visualization\audio_normalization_service.py:282:13: TRY300 Consider moving this statement to an `else` block
    |
280 |             self.stats_updated.emit(stats)
281 |
282 |             return True
    |             ^^^^^^^^^^^ TRY300
283 |
284 |         except Exception as e:
    |

src_refactored\infrastructure\audio_visualization\audio_normalization_service.py:417:101: E501 Line too long (101 > 100)
    |
415 |         processor = NormalizationProcessor(processor_config)
416 |
417 |         self.logger.info("Created normalization processor with method: {processor_config.method.valu\
    |                                                                                                     ^ E501
418 |     e}")
419 |         return processor
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:107:17: TRY300 Consider moving this statement to an `else` block
    |
105 |                 )
106 |                 self.logger.info("Audio initialized with float32 format")
107 |                 return True
    |                 ^^^^^^^^^^^ TRY300
108 |
109 |             except Exception:
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:109:20: BLE001 Do not catch blind exception: `Exception`
    |
107 |                 return True
108 |
109 |             except Exception:
    |                    ^^^^^^^^^ BLE001
110 |                 self.logger.warning("Float32 format failed, trying fallback: {e}")
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:132:35: G004 Logging statement uses f-string
    |
131 |         except Exception as e:
132 |             self.logger.exception(f"Failed to initialize audio: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
133 |             self.error_occurred.emit(f"Audio initialization failed: {e}")
134 |             return False
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:132:66: TRY401 Redundant exception object included in `logging.exception` call
    |
131 |         except Exception as e:
132 |             self.logger.exception(f"Failed to initialize audio: {e}")
    |                                                                  ^ TRY401
133 |             self.error_occurred.emit(f"Audio initialization failed: {e}")
134 |             return False
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:152:35: G004 Logging statement uses f-string
    |
150 |                 self.logger.debug("Audio stream closed")
151 |         except Exception as e:
152 |             self.logger.exception(f"Error closing audio stream: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
153 |
154 |         try:
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:152:66: TRY401 Redundant exception object included in `logging.exception` call
    |
150 |                 self.logger.debug("Audio stream closed")
151 |         except Exception as e:
152 |             self.logger.exception(f"Error closing audio stream: {e}")
    |                                                                  ^ TRY401
153 |
154 |         try:
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:160:35: G004 Logging statement uses f-string
    |
158 |                 self.logger.debug("PyAudio terminated")
159 |         except Exception as e:
160 |             self.logger.exception(f"Error terminating audio: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
161 |
162 |     def run(self) -> None:
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:160:63: TRY401 Redundant exception object included in `logging.exception` call
    |
158 |                 self.logger.debug("PyAudio terminated")
159 |         except Exception as e:
160 |             self.logger.exception(f"Error terminating audio: {e}")
    |                                                               ^ TRY401
161 |
162 |     def run(self) -> None:
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:202:43: G004 Logging statement uses f-string
    |
201 |                 except Exception as e:
202 |                     self.logger.exception(f"Error in audio processing: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
203 |                     self.error_occurred.emit(f"Audio processing error: {e}")
204 |                     time.sleep(0.1)
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:202:73: TRY401 Redundant exception object included in `logging.exception` call
    |
201 |                 except Exception as e:
202 |                     self.logger.exception(f"Error in audio processing: {e}")
    |                                                                         ^ TRY401
203 |                     self.error_occurred.emit(f"Audio processing error: {e}")
204 |                     time.sleep(0.1)
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:304:13: TRY300 Consider moving this statement to an `else` block
    |
302 |             processor.start()
303 |             self.logger.info("Started audio processor: {processor.processor_id}")
304 |             return True
    |             ^^^^^^^^^^^ TRY300
305 |         except Exception as e:
306 |             self.logger.exception(f"Failed to start processor {processor.processor_id}: {e}")
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:306:35: G004 Logging statement uses f-string
    |
304 |             return True
305 |         except Exception as e:
306 |             self.logger.exception(f"Failed to start processor {processor.processor_id}: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
307 |             return False
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:306:90: TRY401 Redundant exception object included in `logging.exception` call
    |
304 |             return True
305 |         except Exception as e:
306 |             self.logger.exception(f"Failed to start processor {processor.processor_id}: {e}")
    |                                                                                          ^ TRY401
307 |             return False
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:328:13: TRY300 Consider moving this statement to an `else` block
    |
326 |             processor.stop()
327 |             self.logger.info("Stopped audio processor: {processor.processor_id}")
328 |             return True
    |             ^^^^^^^^^^^ TRY300
329 |         except Exception as e:
330 |             self.logger.exception(f"Failed to stop processor {processor.processor_id}: {e}")
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:330:35: G004 Logging statement uses f-string
    |
328 |             return True
329 |         except Exception as e:
330 |             self.logger.exception(f"Failed to stop processor {processor.processor_id}: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
331 |             return False
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:330:89: TRY401 Redundant exception object included in `logging.exception` call
    |
328 |             return True
329 |         except Exception as e:
330 |             self.logger.exception(f"Failed to stop processor {processor.processor_id}: {e}")
    |                                                                                         ^ TRY401
331 |             return False
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:347:39: G004 Logging statement uses f-string
    |
345 |                 self.logger.info("Cleaned up processor: {processor.processor_id}")
346 |             except Exception as e:
347 |                 self.logger.exception(f"Failed to cleanup processor {processor.processor_id}: {e}")
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
348 |
349 |     def get_processor_thread(self, processor: AudioProcessorEntity,
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:347:96: TRY401 Redundant exception object included in `logging.exception` call
    |
345 |                 self.logger.info("Cleaned up processor: {processor.processor_id}")
346 |             except Exception as e:
347 |                 self.logger.exception(f"Failed to cleanup processor {processor.processor_id}: {e}")
    |                                                                                                ^ TRY401
348 |
349 |     def get_processor_thread(self, processor: AudioProcessorEntity,
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:368:39: G004 Logging statement uses f-string
    |
366 |                 pyaudio_processor.cleanup_resources()
367 |             except Exception as e:
368 |                 self.logger.exception(f"Error cleaning up processor {processor_id}: {e}")
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
369 |
370 |         self._active_processors.clear()
    |

src_refactored\infrastructure\audio_visualization\audio_processor_service.py:368:86: TRY401 Redundant exception object included in `logging.exception` call
    |
366 |                 pyaudio_processor.cleanup_resources()
367 |             except Exception as e:
368 |                 self.logger.exception(f"Error cleaning up processor {processor_id}: {e}")
    |                                                                                      ^ TRY401
369 |
370 |         self._active_processors.clear()
    |

src_refactored\infrastructure\audio_visualization\audio_stream_service.py:212:30: SyntaxError: missing closing quote in string literal
    |
211 |             self.stream_initialized.emit(response.format_used)
212 |             self.logger.info("Stream initialized successfully in
    |                              ^
213 |     {response.initialization_time:.3f}s")
214 |             return True
    |

src_refactored\infrastructure\audio_visualization\audio_stream_service.py:213:37: SyntaxError: Expected ',', found name
    |
211 |             self.stream_initialized.emit(response.format_used)
212 |             self.logger.info("Stream initialized successfully in
213 |     {response.initialization_time:.3f}s")
    |                                     ^
214 |             return True
215 |         error_msg = response.error_message or "Unknown initialization error"
    |

src_refactored\infrastructure\audio_visualization\audio_stream_service.py:213:38: SyntaxError: Expected ':', found '}'
    |
211 |             self.stream_initialized.emit(response.format_used)
212 |             self.logger.info("Stream initialized successfully in
213 |     {response.initialization_time:.3f}s")
    |                                      ^
214 |             return True
215 |         error_msg = response.error_message or "Unknown initialization error"
    |

src_refactored\infrastructure\audio_visualization\audio_stream_service.py:213:39: SyntaxError: Expected ',', found name
    |
211 |             self.stream_initialized.emit(response.format_used)
212 |             self.logger.info("Stream initialized successfully in
213 |     {response.initialization_time:.3f}s")
    |                                       ^
214 |             return True
215 |         error_msg = response.error_message or "Unknown initialization error"
    |

src_refactored\infrastructure\audio_visualization\audio_stream_service.py:213:40: SyntaxError: missing closing quote in string literal
    |
211 |             self.stream_initialized.emit(response.format_used)
212 |             self.logger.info("Stream initialized successfully in
213 |     {response.initialization_time:.3f}s")
    |                                        ^
214 |             return True
215 |         error_msg = response.error_message or "Unknown initialization error"
    |

src_refactored\infrastructure\audio_visualization\audio_stream_service.py:213:42: SyntaxError: Expected ')', found newline
    |
211 |             self.stream_initialized.emit(response.format_used)
212 |             self.logger.info("Stream initialized successfully in
213 |     {response.initialization_time:.3f}s")
    |                                          ^
214 |             return True
215 |         error_msg = response.error_message or "Unknown initialization error"
    |

src_refactored\infrastructure\audio_visualization\audio_stream_service.py:308:13: SyntaxError: Expected ',', found string
    |
306 |         return {
307 |             "total_managers": len(self._managers)
308 |             "initialized_streams": sum(
    |             ^
309 |                 1 for manager in self._managers.values()
310 |                 if manager.is_initialized
    |

src_refactored\infrastructure\audio_visualization\buffer_management_service.py:139:46: SyntaxError: Expected an expression or a ')'
    |
137 |         with self._lock:
138 |             try:
139 |                 old_data = self._buffer.copy(,
    |                                              ^
140 |     )
141 |                 new_total_size = new_chunk_size * new_buffer_size
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:200:101: E501 Line too long (101 > 100)
    |
199 |             # Graceful shutdown failed
200 |             self.logger.warning("Thread did not shut down gracefully within {timeout}s: {thread.obje\
    |                                                                                                     ^ E501
201 |     ctName()}")
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:621:13: SyntaxError: Expected an indented block after `try` statement
    |
619 |             The resource object
620 |         """
621 |         try:
    |             ^
622 |             # Register resource
623 | success = (
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:623:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
621 |         try:
622 |             # Register resource
623 | success = (
    | ^
624 |     self.register_resource(resource_id, resource_type, resource_object, cleanup_timeout))
625 |             if not success:
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:625:1: SyntaxError: Unexpected indentation
    |
623 | success = (
624 |     self.register_resource(resource_id, resource_type, resource_object, cleanup_timeout))
625 |             if not success:
    | ^
626 |                 msg = f"Failed to register resource: {resource_id}"
627 |                 raise RuntimeError(msg,
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:632:1: SyntaxError: unindent does not match any outer indentation level
    |
630 |             yield resource_object
631 |
632 |         finally:
    | ^
633 |             # Clean up resource
634 |             self.cleanup_resource(resource_id, force=True)
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:632:9: SyntaxError: Expected a statement
    |
630 |             yield resource_object
631 |
632 |         finally:
    |         ^
633 |             # Clean up resource
634 |             self.cleanup_resource(resource_id, force=True)
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:632:16: SyntaxError: Expected a statement
    |
630 |             yield resource_object
631 |
632 |         finally:
    |                ^
633 |             # Clean up resource
634 |             self.cleanup_resource(resource_id, force=True)
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:632:17: SyntaxError: Expected a statement
    |
630 |             yield resource_object
631 |
632 |         finally:
    |                 ^
633 |             # Clean up resource
634 |             self.cleanup_resource(resource_id, force=True)
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:634:1: SyntaxError: Unexpected indentation
    |
632 |         finally:
633 |             # Clean up resource
634 |             self.cleanup_resource(resource_id, force=True)
    | ^
635 |
636 |     def get_cleanup_manager(self) -> ResourceCleanupManager:
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:636:1: SyntaxError: unindent does not match any outer indentation level
    |
634 |             self.cleanup_resource(resource_id, force=True)
635 |
636 |     def get_cleanup_manager(self) -> ResourceCleanupManager:
    | ^
637 |         """Get cleanup manager for signal connections.
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:644:1: SyntaxError: unindent does not match any outer indentation level
    |
642 |         return self.cleanup_manager
643 |
644 |     def get_resource_statistics(self) -> dict[str, Any]:
    | ^
645 |         """Get resource management statistics.
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:674:1: SyntaxError: unindent does not match any outer indentation level
    |
672 |         return stats
673 |
674 |     def cleanup(self) -> None:
    | ^
675 |         """Clean up service resources."""
676 |         self.cleanup_all_resources(force=True)
    |

src_refactored\infrastructure\audio_visualization\resource_cleanup_service.py:677:64: SyntaxError: Expected dedent, found end of file
    |
675 |         """Clean up service resources."""
676 |         self.cleanup_all_resources(force=True)
677 |         self.logger.info("Cleaned up resource cleanup service")
    |                                                                ^
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:120:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
119 |                 # Get PyAudio processor thread for signal connections
120 | self._pyaudio_processor = (
    | ^
121 |     self.audio_processor_service.get_processor_thread(self._processor))
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:123:1: SyntaxError: Unexpected indentation
    |
121 |     self.audio_processor_service.get_processor_thread(self._processor))
122 |
123 |                 if self._pyaudio_processor:
    | ^
124 |                     # Connect signals
125 |                     self._pyaudio_processor.data_ready.connect(self._handle_new_data)
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:130:13: SyntaxError: unindent does not match any outer indentation level
    |
129 |             # Start the processor
130 |             if self._processor and self.audio_processor_service.start_processor(self._processor):
    |             ^
131 |                 self._is_active = True
132 |                 self.visualizer.start()
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:136:1: SyntaxError: unindent does not match any outer indentation level
    |
134 |                 self.logger.info("Started visualization: {self.visualizer.visualizer_id}")
135 |                 return True
136 |             self.logger.error("Failed to start processor for: {self.visualizer.visualizer_id}")
    | ^
137 |             return False
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:137:1: SyntaxError: Unexpected indentation
    |
135 |                 return True
136 |             self.logger.error("Failed to start processor for: {self.visualizer.visualizer_id}")
137 |             return False
    | ^
138 |
139 |         except Exception as e:
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:139:1: SyntaxError: unindent does not match any outer indentation level
    |
137 |             return False
138 |
139 |         except Exception as e:
    | ^
140 |             self.logger.exception(f"Error starting visualization {self.visualizer.visualizer_id}: {e\
141 |     }")
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:139:9: SyntaxError: Expected a statement
    |
137 |             return False
138 |
139 |         except Exception as e:
    |         ^
140 |             self.logger.exception(f"Error starting visualization {self.visualizer.visualizer_id}: {e\
141 |     }")
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:139:26: SyntaxError: Expected a statement
    |
137 |             return False
138 |
139 |         except Exception as e:
    |                          ^
140 |             self.logger.exception(f"Error starting visualization {self.visualizer.visualizer_id}: {e\
141 |     }")
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:139:31: SyntaxError: Expected an expression
    |
137 |             return False
138 |
139 |         except Exception as e:
    |                               ^
140 |             self.logger.exception(f"Error starting visualization {self.visualizer.visualizer_id}: {e\
141 |     }")
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:140:1: SyntaxError: Unexpected indentation
    |
139 |         except Exception as e:
140 |             self.logger.exception(f"Error starting visualization {self.visualizer.visualizer_id}: {e\
    | ^
141 |     }")
142 |             self.error_occurred.emit(self.visualizer.visualizer_id, str(e))
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:140:101: E501 Line too long (101 > 100)
    |
139 |         except Exception as e:
140 |             self.logger.exception(f"Error starting visualization {self.visualizer.visualizer_id}: {e\
    |                                                                                                     ^ E501
141 |     }")
142 |             self.error_occurred.emit(self.visualizer.visualizer_id, str(e))
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:145:1: SyntaxError: unindent does not match any outer indentation level
    |
143 |             return False
144 |
145 |     def stop_processing(self) -> bool:
    | ^
146 |         """Stop the audio processor and visualization.
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:172:101: E501 Line too long (103 > 100)
    |
171 |         except Exception as e:
172 |             self.logger.exception(f"Error stopping visualization {self.visualizer.visualizer_id}: {e}",
    |                                                                                                     ^^^ E501
173 |     )
174 |             self.error_occurred.emit(self.visualizer.visualizer_id, str(e))
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:177:5: SyntaxError: unindent does not match any outer indentation level
    |
175 |             return False
176 |
177 |     def cleanup(self) -> None:
    |     ^
178 |         """Clean up visualization resources."""
179 |         try:
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:192:101: E501 Line too long (101 > 100)
    |
191 |         except Exception as e:
192 |             self.logger.exception(f"Error cleaning up visualization {self.visualizer.visualizer_id}:\
    |                                                                                                     ^ E501
193 |      {e}")
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:195:5: SyntaxError: unindent does not match any outer indentation level
    |
193 |      {e}")
194 |
195 |     def add_data_handler(self, handler: Callable[[np.ndarray], None]) -> None:
    |     ^
196 |         """Add a data handler for visualization updates.
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:205:5: SyntaxError: unindent does not match any outer indentation level
    |
203 |             self.logger.debug("Added data handler for: {self.visualizer.visualizer_id}")
204 |
205 |     def remove_data_handler(self, handler: Callable[[np.ndarray], None]) -> None:
    |     ^
206 |         """Remove a data handler.
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:215:5: SyntaxError: unindent does not match any outer indentation level
    |
213 |             self.logger.debug("Removed data handler for: {self.visualizer.visualizer_id}")
214 |
215 |     def is_processing(self) -> bool:
    |     ^
216 |         """Check if the visualizer is currently processing audio.
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:223:1: SyntaxError: unindent does not match any outer indentation level
    |
221 |         return self._is_active
222 |
223 |     def _handle_new_data(self, data: np.ndarray) -> None:
    | ^
224 |         """Handle new audio data from the processor.
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:242:101: E501 Line too long (101 > 100)
    |
241 |         except Exception as e:
242 |             self.logger.exception(f"Error handling audio data for {self.visualizer.visualizer_id}: {\
    |                                                                                                     ^ E501
243 |     e}")
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:245:5: SyntaxError: unindent does not match any outer indentation level
    |
243 |     e}")
244 |
245 |     def _handle_error(self, error_message: str,
    |     ^
246 |     ) -> None:
247 |         """Handle error from audio processor.
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:252:101: E501 Line too long (101 > 100)
    |
250 |             error_message: Error message from processor
251 |         """
252 |         self.logger.error("Audio processor error for {self.visualizer.visualizer_id}: {error_message\
    |                                                                                                     ^ E501
253 |     }")
254 |         self.error_occurred.emit(self.visualizer.visualizer_id, error_message)
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:256:1: SyntaxError: unindent does not match any outer indentation level
    |
254 |         self.error_occurred.emit(self.visualizer.visualizer_id, error_message)
255 |
256 |     def _handle_status_change(self, status: str,
    | ^
257 |     ) -> None:
258 |         """Handle status change from audio processor.
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:419:101: E501 Line too long (101 > 100)
    |
417 |                 self.logger.info("Cleaned up visualizer: {visualizer.visualizer_id}")
418 |             except Exception as e:
419 |                 self.logger.exception(f"Failed to cleanup visualizer {visualizer.visualizer_id}: {e}\
    |                                                                                                     ^ E501
420 |     ")
    |

src_refactored\infrastructure\audio_visualization\visualization_controller_service.py:431:55: SyntaxError: Expected dedent, found end of file
    |
430 |         self._active_controllers.clear()
431 |         self.logger.info("Cleaned up all visualizers")
    |                                                       ^
    |

src_refactored\infrastructure\common\event_bus.py:1:1: INP001 File `src_refactored\infrastructure\common\event_bus.py` is part of an implicit namespace package. Add an `__init__.py`.
src_refactored\infrastructure\common\event_bus.py:100:23: DTZ003 `datetime.datetime.utcnow()` used
    |
 98 |             event_id=event_id,
 99 |             event_type=event_type,
100 |             timestamp=datetime.utcnow(),
    |                       ^^^^^^^^^^^^^^^^^ DTZ003
101 |             source=source,
102 |             priority=priority,
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src_refactored\infrastructure\common\event_bus.py:298:31: G004 Logging statement uses f-string
    |
296 |         try:
297 |             self.handler_func(event, metadata)
298 |             self.logger.debug(f"Handler {self.handler_id} processed event {metadata.event_id}")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
299 |             
300 |         except Exception as e:
    |

src_refactored\infrastructure\common\event_bus.py:301:35: G004 Logging statement uses f-string
    |
300 |         except Exception as e:
301 |             self.logger.exception(f"Handler {self.handler_id} failed to process event {metadata.event_id}: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
302 |             raise
    |

src_refactored\infrastructure\common\event_bus.py:301:101: E501 Line too long (112 > 100)
    |
300 |         except Exception as e:
301 |             self.logger.exception(f"Handler {self.handler_id} failed to process event {metadata.event_id}: {e}")
    |                                                                                                     ^^^^^^^^^^^^ E501
302 |             raise
    |

src_refactored\infrastructure\common\event_bus.py:301:109: TRY401 Redundant exception object included in `logging.exception` call
    |
300 |         except Exception as e:
301 |             self.logger.exception(f"Handler {self.handler_id} failed to process event {metadata.event_id}: {e}")
    |                                                                                                             ^ TRY401
302 |             raise
    |

src_refactored\infrastructure\common\event_bus.py:374:26: G004 Logging statement uses f-string
    |
373 |         self.logger = logging.getLogger(__name__)
374 |         self.logger.info(f"Event bus {self.bus_id} initialized")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
375 |     
376 |     def publish(self, event: DomainEvent, metadata: EventMetadata = None) -> Result[None]:
    |

src_refactored\infrastructure\common\event_bus.py:408:31: G004 Logging statement uses f-string
    |
407 |             self.event_published.emit(metadata.event_type, event, metadata)
408 |             self.logger.debug(f"Published event {metadata.event_id} of type {metadata.event_type}")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
409 |             
410 |             return Result.success(None)
    |

src_refactored\infrastructure\common\event_bus.py:417:101: E501 Line too long (108 > 100)
    |
415 |             return Result.failure(error_msg)
416 |     
417 |     def subscribe(self, event_type: type[E], handler: IEventHandler[E] | Callable[[E, EventMetadata], None],
    |                                                                                                     ^^^^^^^^ E501
418 |                  handler_id: str | None = None) -> Result[str]:
419 |         """Subscribe to an event type.
    |

src_refactored\infrastructure\common\event_bus.py:432:101: E501 Line too long (104 > 100)
    |
430 |             # Generate handler ID if not provided
431 |             if not handler_id:
432 |                 handler_id = f"{event_type.__name__}_handler_{len(self._handlers[event_type.__name__])}"
    |                                                                                                     ^^^^ E501
433 |             
434 |             # Create handler wrapper if needed
    |

src_refactored\infrastructure\common\event_bus.py:463:30: G004 Logging statement uses f-string
    |
462 |             self.handler_registered.emit(handler_id, event_type_name)
463 |             self.logger.info(f"Registered handler {handler_id} for event type {event_type_name}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
464 |             
465 |             return Result.success(handler_id)
    |

src_refactored\infrastructure\common\event_bus.py:504:30: G004 Logging statement uses f-string
    |
503 |             self.handler_unregistered.emit(subscription_id, event_type_name)
504 |             self.logger.info(f"Unregistered handler {subscription_id} for event type {event_type_name}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
505 |             
506 |             return Result.success(None)
    |

src_refactored\infrastructure\common\event_bus.py:504:101: E501 Line too long (104 > 100)
    |
503 |             self.handler_unregistered.emit(subscription_id, event_type_name)
504 |             self.logger.info(f"Unregistered handler {subscription_id} for event type {event_type_name}")
    |                                                                                                     ^^^^ E501
505 |             
506 |             return Result.success(None)
    |

src_refactored\infrastructure\common\event_bus.py:523:37: G004 Logging statement uses f-string
    |
521 |                 # Remove oldest event if queue is full
522 |                 removed = self._event_queue.popleft()
523 |                 self.logger.warning(f"Event queue full, dropped event {removed.event_id}")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
524 |             
525 |             self._event_queue.append(envelope)
    |

src_refactored\infrastructure\common\event_bus.py:549:43: G004 Logging statement uses f-string
    |
547 |                     self._deliver_event_sync(envelope)
548 |                 except Exception as e:
549 |                     self.logger.exception(f"Failed to process queued event {envelope.event_id}: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
550 |                     
551 |                     # Retry logic
    |

src_refactored\infrastructure\common\event_bus.py:549:98: TRY401 Redundant exception object included in `logging.exception` call
    |
547 |                     self._deliver_event_sync(envelope)
548 |                 except Exception as e:
549 |                     self.logger.exception(f"Failed to process queued event {envelope.event_id}: {e}")
    |                                                                                                  ^ TRY401
550 |                     
551 |                     # Retry logic
    |

src_refactored\infrastructure\common\event_bus.py:549:101: E501 Line too long (101 > 100)
    |
547 |                     self._deliver_event_sync(envelope)
548 |                 except Exception as e:
549 |                     self.logger.exception(f"Failed to process queued event {envelope.event_id}: {e}")
    |                                                                                                     ^ E501
550 |                     
551 |                     # Retry logic
    |

src_refactored\infrastructure\common\event_bus.py:558:47: G004 Logging statement uses f-string
    |
556 |                             self._stats["queue_size"] = len(self._event_queue)
557 |                     else:
558 |                         self.logger.exception(f"Event {envelope.event_id} failed after {envelope.max_retries} retries")
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
559 |                         with self._lock:
560 |                             self._stats["events_failed"] += 1
    |

src_refactored\infrastructure\common\event_bus.py:558:101: E501 Line too long (119 > 100)
    |
556 |                             self._stats["queue_size"] = len(self._event_queue)
557 |                     else:
558 |                         self.logger.exception(f"Event {envelope.event_id} failed after {envelope.max_retries} retries")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^ E501
559 |                         with self._lock:
560 |                             self._stats["events_failed"] += 1
    |

src_refactored\infrastructure\common\event_bus.py:588:31: G004 Logging statement uses f-string
    |
587 |         if not active_handlers:
588 |             self.logger.debug(f"No active handlers for event type {event_type_name}")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
589 |             return
    |

src_refactored\infrastructure\common\event_bus.py:593:45: ARG005 Unused lambda argument: `h`
    |
591 |         # Sort handlers by priority (if metadata has priority info)
592 |         if hasattr(envelope.metadata, "priority"):
593 |             active_handlers.sort(key=lambda h: envelope.metadata.priority.value, reverse=True)
    |                                             ^ ARG005
594 |         
595 |         # Deliver to each handler
    |

src_refactored\infrastructure\common\event_bus.py:674:30: G004 Logging statement uses f-string
    |
672 |                 self._stats["queue_size"] = 0
673 |             
674 |             self.logger.info(f"Cleared {cleared_count} events from queue")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
675 |             return Result.success(None)
    |

src_refactored\infrastructure\common\event_bus.py:697:43: G004 Logging statement uses f-string
    |
695 |                     self._process_queue()
696 |                 except Exception as e:
697 |                     self.logger.exception(f"Error processing remaining events: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
698 |                     break
    |

src_refactored\infrastructure\common\event_bus.py:697:81: TRY401 Redundant exception object included in `logging.exception` call
    |
695 |                     self._process_queue()
696 |                 except Exception as e:
697 |                     self.logger.exception(f"Error processing remaining events: {e}")
    |                                                                                 ^ TRY401
698 |                     break
    |

src_refactored\infrastructure\common\event_bus.py:706:30: G004 Logging statement uses f-string
    |
704 |                 self._event_queue.clear()
705 |             
706 |             self.logger.info(f"Event bus {self.bus_id} shutdown")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
707 |             return Result.success(None)
    |

src_refactored\infrastructure\common\event_bus.py:749:34: G004 Logging statement uses f-string
    |
747 |                     self._default_bus = bus
748 |                 
749 |                 self.logger.info(f"Created event bus '{bus_id}'")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
750 |                 return Result.success(bus)
    |

src_refactored\infrastructure\common\event_bus.py:790:41: G004 Logging statement uses f-string
    |
788 |                 shutdown_result = bus.shutdown()
789 |                 if not shutdown_result.is_success:
790 |                     self.logger.warning(f"Failed to shutdown bus '{bus_id}': {shutdown_result.error()}")
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
791 |                 
792 |                 # Remove from registry
    |

src_refactored\infrastructure\common\event_bus.py:790:101: E501 Line too long (104 > 100)
    |
788 |                 shutdown_result = bus.shutdown()
789 |                 if not shutdown_result.is_success:
790 |                     self.logger.warning(f"Failed to shutdown bus '{bus_id}': {shutdown_result.error()}")
    |                                                                                                     ^^^^ E501
791 |                 
792 |                 # Remove from registry
    |

src_refactored\infrastructure\common\event_bus.py:799:34: G004 Logging statement uses f-string
    |
797 |                     self._default_bus = next(iter(self._buses.values())) if self._buses else None
798 |                 
799 |                 self.logger.info(f"Removed event bus '{bus_id}'")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
800 |                 return Result.success(None)
    |

src_refactored\infrastructure\common\event_bus.py:840:34: G004 Logging statement uses f-string
    |
839 |                 self._default_bus = self._buses[bus_id]
840 |                 self.logger.info(f"Set default bus to '{bus_id}'")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
841 |                 return Result.success(None)
    |

src_refactored\infrastructure\common\event_bus.py:861:41: G004 Logging statement uses f-string
    |
859 |                 result = self.remove_bus(bus_id)
860 |                 if not result.is_success:
861 |                     self.logger.warning(f"Failed to remove bus '{bus_id}': {result.error()}")
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
862 |             
863 |             self.logger.info("All event buses shutdown")
    |

src_refactored\infrastructure\common\progress_callback.py:1:1: INP001 File `src_refactored\infrastructure\common\progress_callback.py` is part of an implicit namespace package. Add an `__init__.py`.
src_refactored\infrastructure\common\progress_callback.py:66:101: E501 Line too long (102 > 100)
   |
65 |     @classmethod
66 |     def create(cls, current: float, total: float, status: ProgressStatus = ProgressStatus.IN_PROGRESS,
   |                                                                                                     ^^ E501
67 |                message: str = "", details: str = "", **kwargs) -> "ProgressInfo":
68 |         """Create progress info with calculated percentage.
   |

src_refactored\infrastructure\common\progress_callback.py:100:78: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
 98 |             True if progress is complete
 99 |         """
100 |         return self.status == ProgressStatus.COMPLETED or self.percentage >= 100
    |                                                                              ^^^ PLR2004
101 |     
102 |     def is_failed(self) -> bool:
    |

src_refactored\infrastructure\common\progress_callback.py:202:101: E501 Line too long (107 > 100)
    |
200 |     """Protocol for progress tracking."""
201 |     
202 |     def start_tracking(self, total: float, progress_type: ProgressType = ProgressType.DETERMINATE) -> None:
    |                                                                                                     ^^^^^^^ E501
203 |         """Start progress tracking.
    |

src_refactored\infrastructure\common\progress_callback.py:280:31: G004 Logging statement uses f-string
    |
278 |             self._last_progress = progress
279 |             self.progress_updated.emit(progress)
280 |             self.logger.debug(f"Progress reported: {progress.percentage:.1f}% - {progress.message}")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
281 |     
282 |     def report_error(self, error: str, details: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:306:31: G004 Logging statement uses f-string
    |
305 |             self.error_occurred.emit(error, details)
306 |             self.logger.error(f"Error reported: {error} - {details}")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
307 |     
308 |     def report_completion(self, message: str = "", details: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:332:30: G004 Logging statement uses f-string
    |
331 |             self.completed.emit(message, details)
332 |             self.logger.info(f"Completion reported: {message} - {details}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
333 |     
334 |     def report_cancellation(self, message: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:357:30: G004 Logging statement uses f-string
    |
356 |             self.cancelled.emit(message)
357 |             self.logger.info(f"Cancellation reported: {message}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
358 |     
359 |     def get_last_progress(self) -> ProgressInfo | None:
    |

src_refactored\infrastructure\common\progress_callback.py:392:101: E501 Line too long (107 > 100)
    |
390 |         self.logger = logging.getLogger(__name__)
391 |     
392 |     def start_tracking(self, total: float, progress_type: ProgressType = ProgressType.DETERMINATE) -> None:
    |                                                                                                     ^^^^^^^ E501
393 |         """Start progress tracking.
    |

src_refactored\infrastructure\common\progress_callback.py:402:32: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
400 |             self._total = total
401 |             self._current = 0
402 |             self._start_time = datetime.now()
    |                                ^^^^^^^^^^^^^^ DTZ005
403 |             self._progress_type = progress_type
404 |             self._is_tracking = True
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\common\progress_callback.py:414:30: G004 Logging statement uses f-string
    |
413 |             self.callback.report_progress(initial_progress)
414 |             self.logger.info(f"Started tracking progress: total={total}, type={progress_type.value}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
415 |     
416 |     def update_progress(self, current: float, message: str = "", details: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:414:101: E501 Line too long (101 > 100)
    |
413 |             self.callback.report_progress(initial_progress)
414 |             self.logger.info(f"Started tracking progress: total={total}, type={progress_type.value}")
    |                                                                                                     ^ E501
415 |     
416 |     def update_progress(self, current: float, message: str = "", details: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:429:28: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
428 |             self._current = current
429 |             elapsed_time = datetime.now() - self._start_time if self._start_time else timedelta()
    |                            ^^^^^^^^^^^^^^ DTZ005
430 |             
431 |             # Calculate estimated remaining time
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\common\progress_callback.py:434:101: E501 Line too long (113 > 100)
    |
432 |             estimated_remaining = None
433 |             if self._progress_type == ProgressType.DETERMINATE and current > 0:
434 |                 progress_rate = current / elapsed_time.total_seconds() if elapsed_time.total_seconds() > 0 else 0
    |                                                                                                     ^^^^^^^^^^^^^ E501
435 |                 if progress_rate > 0:
436 |                     remaining_work = self._total - current
    |

src_refactored\infrastructure\common\progress_callback.py:478:30: G004 Logging statement uses f-string
    |
476 |             self._is_tracking = False
477 |             self.callback.report_completion(message or "Completed successfully", details)
478 |             self.logger.info(f"Finished tracking progress: {message}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
479 |     
480 |     def cancel_tracking(self, message: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:492:30: G004 Logging statement uses f-string
    |
490 |             self._is_tracking = False
491 |             self.callback.report_cancellation(message or "Operation cancelled")
492 |             self.logger.info(f"Cancelled tracking progress: {message}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
493 |     
494 |     def is_tracking(self) -> bool:
    |

src_refactored\infrastructure\common\progress_callback.py:558:101: E501 Line too long (116 > 100)
    |
556 |                     self.progress_bar.setVisible(True)
557 |                     self.progress_bar.setValue(int(progress.percentage))
558 |                 elif progress.status in [ProgressStatus.COMPLETED, ProgressStatus.FAILED, ProgressStatus.CANCELLED]:
    |                                                                                                     ^^^^^^^^^^^^^^^^ E501
559 |                     self.progress_bar.setVisible(False)
    |

src_refactored\infrastructure\common\progress_callback.py:581:35: G004 Logging statement uses f-string
    |
580 |         except Exception as e:
581 |             self.logger.exception(f"Failed to update UI: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
582 |     
583 |     def _update_error_ui(self, error: str, details: str) -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:581:59: TRY401 Redundant exception object included in `logging.exception` call
    |
580 |         except Exception as e:
581 |             self.logger.exception(f"Failed to update UI: {e}")
    |                                                           ^ TRY401
582 |     
583 |     def _update_error_ui(self, error: str, details: str) -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:603:35: G004 Logging statement uses f-string
    |
602 |         except Exception as e:
603 |             self.logger.exception(f"Failed to update error UI: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
604 |     
605 |     def _update_completion_ui(self, message: str, details: str) -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:603:65: TRY401 Redundant exception object included in `logging.exception` call
    |
602 |         except Exception as e:
603 |             self.logger.exception(f"Failed to update error UI: {e}")
    |                                                                 ^ TRY401
604 |     
605 |     def _update_completion_ui(self, message: str, details: str) -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:627:35: G004 Logging statement uses f-string
    |
626 |         except Exception as e:
627 |             self.logger.exception(f"Failed to update completion UI: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
628 |     
629 |     def _update_cancellation_ui(self, message: str) -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:627:70: TRY401 Redundant exception object included in `logging.exception` call
    |
626 |         except Exception as e:
627 |             self.logger.exception(f"Failed to update completion UI: {e}")
    |                                                                      ^ TRY401
628 |     
629 |     def _update_cancellation_ui(self, message: str) -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:647:35: G004 Logging statement uses f-string
    |
646 |         except Exception as e:
647 |             self.logger.exception(f"Failed to update cancellation UI: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src_refactored\infrastructure\common\progress_callback.py:647:72: TRY401 Redundant exception object included in `logging.exception` call
    |
646 |         except Exception as e:
647 |             self.logger.exception(f"Failed to update cancellation UI: {e}")
    |                                                                        ^ TRY401
    |

src_refactored\infrastructure\common\progress_callback.py:697:43: G004 Logging statement uses f-string
    |
695 |                     callback.report_progress(progress)
696 |                 except Exception as e:
697 |                     self.logger.exception(f"Error in callback {callback}: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
698 |     
699 |     def report_error(self, error: str, details: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:697:76: TRY401 Redundant exception object included in `logging.exception` call
    |
695 |                     callback.report_progress(progress)
696 |                 except Exception as e:
697 |                     self.logger.exception(f"Error in callback {callback}: {e}")
    |                                                                            ^ TRY401
698 |     
699 |     def report_error(self, error: str, details: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:713:43: G004 Logging statement uses f-string
    |
711 |                     callback.report_error(error, details)
712 |                 except Exception as e:
713 |                     self.logger.exception(f"Error in callback {callback}: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
714 |     
715 |     def report_completion(self, message: str = "", details: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:713:76: TRY401 Redundant exception object included in `logging.exception` call
    |
711 |                     callback.report_error(error, details)
712 |                 except Exception as e:
713 |                     self.logger.exception(f"Error in callback {callback}: {e}")
    |                                                                            ^ TRY401
714 |     
715 |     def report_completion(self, message: str = "", details: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:729:43: G004 Logging statement uses f-string
    |
727 |                     callback.report_completion(message, details)
728 |                 except Exception as e:
729 |                     self.logger.exception(f"Error in callback {callback}: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
730 |     
731 |     def report_cancellation(self, message: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:729:76: TRY401 Redundant exception object included in `logging.exception` call
    |
727 |                     callback.report_completion(message, details)
728 |                 except Exception as e:
729 |                     self.logger.exception(f"Error in callback {callback}: {e}")
    |                                                                            ^ TRY401
730 |     
731 |     def report_cancellation(self, message: str = "") -> None:
    |

src_refactored\infrastructure\common\progress_callback.py:744:43: G004 Logging statement uses f-string
    |
742 |                     callback.report_cancellation(message)
743 |                 except Exception as e:
744 |                     self.logger.exception(f"Error in callback {callback}: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src_refactored\infrastructure\common\progress_callback.py:744:76: TRY401 Redundant exception object included in `logging.exception` call
    |
742 |                     callback.report_cancellation(message)
743 |                 except Exception as e:
744 |                     self.logger.exception(f"Error in callback {callback}: {e}")
    |                                                                            ^ TRY401
    |

src_refactored\infrastructure\common\progress_callback.py:758:101: E501 Line too long (117 > 100)
    |
756 |         self.logger = logging.getLogger(__name__)
757 |     
758 |     def create_callback(self, callback_id: str, callback_type: str = "basic", **kwargs) -> Result[IProgressCallback]:
    |                                                                                                     ^^^^^^^^^^^^^^^^^ E501
759 |         """Create a progress callback.
    |

src_refactored\infrastructure\common\progress_callback.py:792:34: G004 Logging statement uses f-string
    |
791 |                 self._callbacks[callback_id] = callback
792 |                 self.logger.info(f"Created {callback_type} callback '{callback_id}'")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
793 |                 return Result.success(callback)
    |

src_refactored\infrastructure\common\progress_callback.py:834:34: G004 Logging statement uses f-string
    |
832 |                 self._trackers[tracker_id] = tracker
833 |                 
834 |                 self.logger.info(f"Created tracker '{tracker_id}' with callback '{callback_id}'")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
835 |                 return Result.success(tracker)
    |

src_refactored\infrastructure\common\progress_callback.py:871:101: E501 Line too long (115 > 100)
    |
869 |                     trackers_to_remove = [
870 |                         tid for tid, tracker in self._trackers.items()
871 |                         if hasattr(tracker.callback, "callback_id") and tracker.callback.callback_id == callback_id
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
872 |                     ]
    |

src_refactored\infrastructure\common\progress_callback.py:877:38: G004 Logging statement uses f-string
    |
875 |                         del self._trackers[tracker_id]
876 |                     
877 |                     self.logger.info(f"Removed callback '{callback_id}' and {len(trackers_to_remove)} associated trackers")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
878 |                 
879 |                 return Result.success(None)
    |

src_refactored\infrastructure\common\progress_callback.py:877:101: E501 Line too long (123 > 100)
    |
875 |                         del self._trackers[tracker_id]
876 |                     
877 |                     self.logger.info(f"Removed callback '{callback_id}' and {len(trackers_to_remove)} associated trackers")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ E501
878 |                 
879 |                 return Result.success(None)
    |

src_refactored\infrastructure\common\progress_callback.py:902:38: G004 Logging statement uses f-string
    |
900 |                         tracker.cancel_tracking("Tracker removed")
901 |                     del self._trackers[tracker_id]
902 |                     self.logger.info(f"Removed tracker '{tracker_id}'")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
903 |                 
904 |                 return Result.success(None)
    |

src_refactored\infrastructure\common\progress_callback.py:935:38: F821 Undefined name `List`
    |
933 |             return Result.failure(error_msg)
934 |     
935 |     def get_active_trackers(self) -> List[str]:
    |                                      ^^^^ F821
936 |         """Get list of active tracker IDs.
    |

src_refactored\infrastructure\common\progress_callback.py:947:36: F821 Undefined name `List`
    |
945 |             ]
946 |     
947 |     def get_all_callbacks(self) -> List[str]:
    |                                    ^^^^ F821
948 |         """Get list of all callback IDs.
    |

src_refactored\infrastructure\common\progress_callback.py:956:35: F821 Undefined name `List`
    |
954 |             return list(self._callbacks.keys())
955 |     
956 |     def get_all_trackers(self) -> List[str]:
    |                                   ^^^^ F821
957 |         """Get list of all tracker IDs.
    |

src_refactored\infrastructure\common\repository_base.py:1:1: INP001 File `src_refactored\infrastructure\common\repository_base.py` is part of an implicit namespace package. Add an `__init__.py`.
src_refactored\infrastructure\common\repository_base.py:617:35: G004 Logging statement uses f-string
    |
616 |                 self._add_impl(entity)
617 |                 self.logger.debug(f"Added entity {getattr(entity, 'id', 'unknown')}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
618 |                 return Result.success(None)
619 |         except Exception as e:
    |

src_refactored\infrastructure\common\repository_base.py:640:35: G004 Logging statement uses f-string
    |
639 |                 self._update_impl(entity)
640 |                 self.logger.debug(f"Updated entity {getattr(entity, 'id', 'unknown')}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
641 |                 return Result.success(None)
642 |         except Exception as e:
    |

src_refactored\infrastructure\common\repository_base.py:659:35: G004 Logging statement uses f-string
    |
657 |             with self._lock:
658 |                 self._remove_impl(entity)
659 |                 self.logger.debug(f"Removed entity {getattr(entity, 'id', 'unknown')}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
660 |                 return Result.success(None)
661 |         except Exception as e:
    |

src_refactored\infrastructure\common\repository_base.py:682:35: G004 Logging statement uses f-string
    |
681 |                 self._remove_impl(entity)
682 |                 self.logger.debug(f"Removed entity {entity_id}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
683 |                 return Result.success(None)
684 |         except Exception as e:
    |

src_refactored\infrastructure\common\repository_base.py:844:13: PLR0911 Too many return statements (15 > 6)
    |
842 |             Filtered entities
843 |         """
844 |         def matches_criteria(entity: TEntity) -> bool:
    |             ^^^^^^^^^^^^^^^^ PLR0911
845 |             try:
846 |                 field_value = getattr(entity, criteria.field)
    |

src_refactored\infrastructure\common\repository_base.py:874:17: TRY300 Consider moving this statement to an `else` block
    |
872 |                 if criteria.operation == QueryOperation.IS_NOT_NULL:
873 |                     return field_value is not None
874 |                 return True
    |                 ^^^^^^^^^^^ TRY300
875 |             except AttributeError:
876 |                 return False
    |

src_refactored\infrastructure\common\repository_base.py:892:101: E501 Line too long (105 > 100)
    |
890 |         try:
891 |             reverse = sort_criteria.direction == SortDirection.DESC
892 |             return sorted(entities, key=lambda e: getattr(e, sort_criteria.field, None), reverse=reverse)
    |                                                                                                     ^^^^^ E501
893 |         except Exception:
894 |             # If sorting fails, return original list
    |

src_refactored\infrastructure\common\repository_base.py:893:16: BLE001 Do not catch blind exception: `Exception`
    |
891 |             reverse = sort_criteria.direction == SortDirection.DESC
892 |             return sorted(entities, key=lambda e: getattr(e, sort_criteria.field, None), reverse=reverse)
893 |         except Exception:
    |                ^^^^^^^^^ BLE001
894 |             # If sorting fails, return original list
895 |             return entities
    |

src_refactored\infrastructure\common\repository_base.py:1047:16: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
     |
1045 |             return entity
1046 |         # pickle
1047 |         return pickle.loads(data)
     |                ^^^^^^^^^^^^^^^^^^ S301
1048 |     
1049 |     def _get_by_id_impl(self, entity_id: TId) -> TEntity | None:
     |

src_refactored\infrastructure\common\repository_base.py:1064:18: PTH123 `open()` should be replaced by `Path.open()`
     |
1063 |         try:
1064 |             with open(file_path, "rb") as f:
     |                  ^^^^ PTH123
1065 |                 data = f.read()
1066 |             return self._deserialize_entity(data)
     |

src_refactored\infrastructure\common\repository_base.py:1068:35: G004 Logging statement uses f-string
     |
1066 |             return self._deserialize_entity(data)
1067 |         except Exception as e:
1068 |             self.logger.exception(f"Failed to load entity {entity_id}: {e}")
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1069 |             return None
     |

src_refactored\infrastructure\common\repository_base.py:1068:73: TRY401 Redundant exception object included in `logging.exception` call
     |
1066 |             return self._deserialize_entity(data)
1067 |         except Exception as e:
1068 |             self.logger.exception(f"Failed to load entity {entity_id}: {e}")
     |                                                                         ^ TRY401
1069 |             return None
     |

src_refactored\infrastructure\common\repository_base.py:1082:22: PTH123 `open()` should be replaced by `Path.open()`
     |
1080 |         for file_path in self.storage_path.glob(f"*{extension}"):
1081 |             try:
1082 |                 with open(file_path, "rb") as f:
     |                      ^^^^ PTH123
1083 |                     data = f.read()
1084 |                 entity = self._deserialize_entity(data)
     |

src_refactored\infrastructure\common\repository_base.py:1087:39: G004 Logging statement uses f-string
     |
1085 |                 entities.append(entity)
1086 |             except Exception as e:
1087 |                 self.logger.exception(f"Failed to load entity from {file_path}: {e}")
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1088 |                 continue
     |

src_refactored\infrastructure\common\repository_base.py:1087:82: TRY401 Redundant exception object included in `logging.exception` call
     |
1085 |                 entities.append(entity)
1086 |             except Exception as e:
1087 |                 self.logger.exception(f"Failed to load entity from {file_path}: {e}")
     |                                                                                  ^ TRY401
1088 |                 continue
     |

src_refactored\infrastructure\common\repository_base.py:1141:13: PLR0911 Too many return statements (15 > 6)
     |
1139 |         """
1140 |         # Same implementation as InMemoryRepository
1141 |         def matches_criteria(entity: TEntity) -> bool:
     |             ^^^^^^^^^^^^^^^^ PLR0911
1142 |             try:
1143 |                 field_value = getattr(entity, criteria.field)
     |

src_refactored\infrastructure\common\repository_base.py:1171:17: TRY300 Consider moving this statement to an `else` block
     |
1169 |                 if criteria.operation == QueryOperation.IS_NOT_NULL:
1170 |                     return field_value is not None
1171 |                 return True
     |                 ^^^^^^^^^^^ TRY300
1172 |             except AttributeError:
1173 |                 return False
     |

src_refactored\infrastructure\common\repository_base.py:1189:101: E501 Line too long (105 > 100)
     |
1187 |         try:
1188 |             reverse = sort_criteria.direction == SortDirection.DESC
1189 |             return sorted(entities, key=lambda e: getattr(e, sort_criteria.field, None), reverse=reverse)
     |                                                                                                     ^^^^^ E501
1190 |         except Exception:
1191 |             # If sorting fails, return original list
     |

src_refactored\infrastructure\common\repository_base.py:1190:16: BLE001 Do not catch blind exception: `Exception`
     |
1188 |             reverse = sort_criteria.direction == SortDirection.DESC
1189 |             return sorted(entities, key=lambda e: getattr(e, sort_criteria.field, None), reverse=reverse)
1190 |         except Exception:
     |                ^^^^^^^^^ BLE001
1191 |             # If sorting fails, return original list
1192 |             return entities
     |

src_refactored\infrastructure\common\repository_base.py:1207:14: PTH123 `open()` should be replaced by `Path.open()`
     |
1205 |         data = self._serialize_entity(entity)
1206 |         
1207 |         with open(file_path, "wb") as f:
     |              ^^^^ PTH123
1208 |             f.write(data)
     |

src_refactored\infrastructure\common\repository_base.py:1296:32: ARG001 Unused function argument: `entity_type`
     |
1296 | def create_query_specification(entity_type: type[TEntity]) -> QuerySpecification[TEntity]:
     |                                ^^^^^^^^^^^ ARG001
1297 |     """Create a query specification.
     |

src_refactored\infrastructure\common\task_manager.py:1:1: INP001 File `src_refactored\infrastructure\common\task_manager.py` is part of an implicit namespace package. Add an `__init__.py`.
src_refactored\infrastructure\common\task_manager.py:324:32: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
323 |             self._status = TaskStatus.RUNNING
324 |             self._start_time = datetime.now()
    |                                ^^^^^^^^^^^^^^ DTZ005
325 |         
326 |         try:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\common\task_manager.py:329:101: E501 Line too long (101 > 100)
    |
327 |             if progress_callback:
328 |                 progress_callback.report_progress(
329 |                     ProgressInfo.create(0, 100, ProgressStatus.IN_PROGRESS, f"Starting {self.name}"),
    |                                                                                                     ^ E501
330 |                 )
    |

src_refactored\infrastructure\common\task_manager.py:335:17: TRY301 Abstract `raise` to an inner function
    |
333 |             if self._cancelled.is_set():
334 |                 msg = "Task was cancelled"
335 |                 raise asyncio.CancelledError(msg)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
336 |             
337 |             # Execute the function
    |

src_refactored\infrastructure\common\task_manager.py:348:34: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
346 |                 self._result = result
347 |                 self._status = TaskStatus.COMPLETED
348 |                 self._end_time = datetime.now()
    |                                  ^^^^^^^^^^^^^^ DTZ005
349 |             
350 |             if progress_callback:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\common\task_manager.py:353:30: G004 Logging statement uses f-string
    |
351 |                 progress_callback.report_completion(f"Completed {self.name}")
352 |             
353 |             self.logger.info(f"Task {self.task_id} completed successfully")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
354 |             return result
    |

src_refactored\infrastructure\common\task_manager.py:354:13: TRY300 Consider moving this statement to an `else` block
    |
353 |             self.logger.info(f"Task {self.task_id} completed successfully")
354 |             return result
    |             ^^^^^^^^^^^^^ TRY300
355 |             
356 |         except asyncio.CancelledError:
    |

src_refactored\infrastructure\common\task_manager.py:359:34: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
357 |             with self._lock:
358 |                 self._status = TaskStatus.CANCELLED
359 |                 self._end_time = datetime.now()
    |                                  ^^^^^^^^^^^^^^ DTZ005
360 |             
361 |             if progress_callback:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\common\task_manager.py:364:30: G004 Logging statement uses f-string
    |
362 |                 progress_callback.report_cancellation(f"Cancelled {self.name}")
363 |             
364 |             self.logger.info(f"Task {self.task_id} was cancelled")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
365 |             raise
    |

src_refactored\infrastructure\common\task_manager.py:373:34: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
371 |                 self._error = error_msg
372 |                 self._status = TaskStatus.FAILED
373 |                 self._end_time = datetime.now()
    |                                  ^^^^^^^^^^^^^^ DTZ005
374 |             
375 |             if progress_callback:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\common\task_manager.py:378:35: G004 Logging statement uses f-string
    |
376 |                 progress_callback.report_error(f"Failed {self.name}", error_msg)
377 |             
378 |             self.logger.exception(f"Task {self.task_id} failed: {error_msg}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
379 |             raise
    |

src_refactored\infrastructure\common\task_manager.py:396:38: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
394 |                 if self._status in [TaskStatus.PENDING, TaskStatus.RUNNING]:
395 |                     self._status = TaskStatus.CANCELLED
396 |                     self._end_time = datetime.now()
    |                                      ^^^^^^^^^^^^^^ DTZ005
397 |             
398 |             self.logger.info(f"Task {self.task_id} cancelled")
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\common\task_manager.py:398:30: G004 Logging statement uses f-string
    |
396 |                     self._end_time = datetime.now()
397 |             
398 |             self.logger.info(f"Task {self.task_id} cancelled")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
399 |     
400 |     def is_cancelled(self) -> bool:
    |

src_refactored\infrastructure\common\task_manager.py:471:101: E501 Line too long (102 > 100)
    |
470 |                 # Submit task to executor
471 |                 future = self._executor.submit(self._execute_task_with_retry, task, progress_callback)
    |                                                                                                     ^^ E501
472 |                 
473 |                 self._futures[task.task_id] = future
    |

src_refactored\infrastructure\common\task_manager.py:479:34: G004 Logging statement uses f-string
    |
477 |                 future.add_done_callback(lambda f: self._handle_task_completion(task.task_id, f))
478 |                 
479 |                 self.logger.info(f"Submitted task {task.task_id} for execution")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
480 |                 return Result.success(task.task_id)
    |

src_refactored\infrastructure\common\task_manager.py:505:21: SLF001 Private member accessed: `_retry_count`
    |
503 |             try:
504 |                 if attempt > 0:
505 |                     task._retry_count = attempt
    |                     ^^^^^^^^^^^^^^^^^ SLF001
506 |                     task._status = TaskStatus.RETRYING
    |

src_refactored\infrastructure\common\task_manager.py:506:21: SLF001 Private member accessed: `_status`
    |
504 |                 if attempt > 0:
505 |                     task._retry_count = attempt
506 |                     task._status = TaskStatus.RETRYING
    |                     ^^^^^^^^^^^^ SLF001
507 |                     
508 |                     retry_msg = f"Retrying {task.name} (attempt {attempt + 1}/{task.config.max_retries + 1})"
    |

src_refactored\infrastructure\common\task_manager.py:508:101: E501 Line too long (109 > 100)
    |
506 |                     task._status = TaskStatus.RETRYING
507 |                     
508 |                     retry_msg = f"Retrying {task.name} (attempt {attempt + 1}/{task.config.max_retries + 1})"
    |                                                                                                     ^^^^^^^^^ E501
509 |                     progress_callback.report_progress(
510 |                         ProgressInfo.create(0, 100, ProgressStatus.IN_PROGRESS, retry_msg),
    |

src_refactored\infrastructure\common\task_manager.py:519:21: TRY301 Abstract `raise` to an inner function
    |
517 |                 if task.is_cancelled():
518 |                     msg = "Task was cancelled"
519 |                     raise asyncio.CancelledError(msg)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
520 |                 
521 |                 # Execute task
    |

src_refactored\infrastructure\common\task_manager.py:528:20: BLE001 Do not catch blind exception: `Exception`
    |
526 |                 raise  # Don't retry cancelled tasks
527 |                 
528 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
529 |                 last_exception = e
530 |                 self.logger.warning(f"Task {task.task_id} attempt {attempt + 1} failed: {e!s}")
    |

src_refactored\infrastructure\common\task_manager.py:530:37: G004 Logging statement uses f-string
    |
528 |             except Exception as e:
529 |                 last_exception = e
530 |                 self.logger.warning(f"Task {task.task_id} attempt {attempt + 1} failed: {e!s}")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
531 |                 
532 |                 if attempt == task.config.max_retries:
    |

src_refactored\infrastructure\common\task_manager.py:555:34: G004 Logging statement uses f-string
    |
553 |             if future.cancelled():
554 |                 self.task_cancelled.emit(task_id)
555 |                 self.logger.info(f"Task {task_id} was cancelled")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
556 |             elif future.exception():
557 |                 error = str(future.exception())
    |

src_refactored\infrastructure\common\task_manager.py:559:35: G004 Logging statement uses f-string
    |
557 |                 error = str(future.exception())
558 |                 self.task_failed.emit(task_id, error)
559 |                 self.logger.error(f"Task {task_id} failed: {error}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
560 |             else:
561 |                 result = future.result()
    |

src_refactored\infrastructure\common\task_manager.py:563:34: G004 Logging statement uses f-string
    |
561 |                 result = future.result()
562 |                 self.task_completed.emit(task_id, result)
563 |                 self.logger.info(f"Task {task_id} completed successfully")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
564 |                 
565 |         except Exception as e:
    |

src_refactored\infrastructure\common\task_manager.py:566:35: G004 Logging statement uses f-string
    |
565 |         except Exception as e:
566 |             self.logger.exception(f"Error handling task completion for {task_id}: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
567 |     
568 |     def cancel_task(self, task_id: str) -> Result[None]:
    |

src_refactored\infrastructure\common\task_manager.py:566:84: TRY401 Redundant exception object included in `logging.exception` call
    |
565 |         except Exception as e:
566 |             self.logger.exception(f"Error handling task completion for {task_id}: {e}")
    |                                                                                    ^ TRY401
567 |     
568 |     def cancel_task(self, task_id: str) -> Result[None]:
    |

src_refactored\infrastructure\common\task_manager.py:595:34: G004 Logging statement uses f-string
    |
593 |                     future.cancel()
594 |                 
595 |                 self.logger.info(f"Cancelled task {task_id}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
596 |                 return Result.success(None)
    |

src_refactored\infrastructure\common\task_manager.py:669:30: G004 Logging statement uses f-string
    |
667 |                     cancelled_count += 1
668 |             
669 |             self.logger.info(f"Cancelled {cancelled_count} tasks")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
670 |             return Result.success(None)
    |

src_refactored\infrastructure\common\task_manager.py:687:101: E501 Line too long (101 > 100)
    |
685 |                 completed_task_ids = [
686 |                     task_id for task_id, task in self._tasks.items()
687 |                     if task.status in [TaskStatus.COMPLETED, TaskStatus.FAILED, TaskStatus.CANCELLED]
    |                                                                                                     ^ E501
688 |                     and task.config.auto_cleanup
689 |                 ]
    |

src_refactored\infrastructure\common\task_manager.py:696:30: G004 Logging statement uses f-string
    |
694 |                         del self._futures[task_id]
695 |             
696 |             self.logger.info(f"Cleaned up {len(completed_task_ids)} completed tasks")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
697 |             return Result.success(None)
    |

src_refactored\infrastructure\common\task_manager.py:718:35: G004 Logging statement uses f-string
    |
717 |         except Exception as e:
718 |             self.logger.exception(f"Error during shutdown: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src_refactored\infrastructure\common\task_manager.py:718:61: TRY401 Redundant exception object included in `logging.exception` call
    |
717 |         except Exception as e:
718 |             self.logger.exception(f"Error during shutdown: {e}")
    |                                                             ^ TRY401
    |

src_refactored\infrastructure\common\task_manager.py:860:34: G004 Logging statement uses f-string
    |
859 |                 self.task_submitted.emit(task_id, name)
860 |                 self.logger.info(f"Submitted task '{name}' with ID {task_id}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
861 |             
862 |             return result
    |

src_refactored\infrastructure\common\task_manager.py:862:13: TRY300 Consider moving this statement to an `else` block
    |
860 |                 self.logger.info(f"Submitted task '{name}' with ID {task_id}")
861 |             
862 |             return result
    |             ^^^^^^^^^^^^^ TRY300
863 |             
864 |         except Exception as e:
    |

src_refactored\infrastructure\common\task_manager.py:976:101: E501 Line too long (102 > 100)
    |
974 |         running_ids = self._executor.get_running_tasks()
975 |         with self._lock:
976 |             return [(task_id, self._task_registry.get(task_id, "Unknown")) for task_id in running_ids]
    |                                                                                                     ^^ E501
977 |     
978 |     def get_pending_tasks(self) -> list[tuple[str, str]]:
    |

src_refactored\infrastructure\common\task_manager.py:986:101: E501 Line too long (102 > 100)
    |
984 |         pending_ids = self._executor.get_pending_tasks()
985 |         with self._lock:
986 |             return [(task_id, self._task_registry.get(task_id, "Unknown")) for task_id in pending_ids]
    |                                                                                                     ^^ E501
987 |     
988 |     def cancel_all_tasks(self) -> Result[None]:
    |

src_refactored\infrastructure\common\task_manager.py:1007:101: E501 Line too long (110 > 100)
     |
1005 |             # Also cleanup task registry
1006 |             with self._lock:
1007 |                 active_task_ids = set(self._executor.get_running_tasks() + self._executor.get_pending_tasks())
     |                                                                                                     ^^^^^^^^^^ E501
1008 |                 completed_task_ids = [task_id for task_id in self._task_registry if task_id not in active_task_ids]
     |

src_refactored\infrastructure\common\task_manager.py:1008:101: E501 Line too long (115 > 100)
     |
1006 |             with self._lock:
1007 |                 active_task_ids = set(self._executor.get_running_tasks() + self._executor.get_pending_tasks())
1008 |                 completed_task_ids = [task_id for task_id in self._task_registry if task_id not in active_task_ids]
     |                                                                                                     ^^^^^^^^^^^^^^^ E501
1009 |                 
1010 |                 for task_id in completed_task_ids:
     |

src_refactored\infrastructure\common\task_manager.py:1030:35: G004 Logging statement uses f-string
     |
1029 |         except Exception as e:
1030 |             self.logger.exception(f"Error during shutdown: {e}")
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1031 |     
1032 |     def _on_task_started(self, task_id: str) -> None:
     |

src_refactored\infrastructure\common\task_manager.py:1030:61: TRY401 Redundant exception object included in `logging.exception` call
     |
1029 |         except Exception as e:
1030 |             self.logger.exception(f"Error during shutdown: {e}")
     |                                                             ^ TRY401
1031 |     
1032 |     def _on_task_started(self, task_id: str) -> None:
     |

src_refactored\infrastructure\common\task_manager.py:1120:101: E501 Line too long (102 > 100)
     |
1118 |         Task instance
1119 |     """
1120 |     return Task(task_id, name, func, args, kwargs or {}, config or TaskConfiguration.create_default())
     |                                                                                                     ^^ E501
     |

src_refactored\infrastructure\llm\gemma_inference_service.py:19:5: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
17 | except ImportError as e:
18 |     msg = f"Required dependencies not installed: {e}"
19 |     raise ImportError(msg)
   |     ^^^^^^^^^^^^^^^^^^^^^^ B904
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:30:101: E501 Line too long (101 > 100)
   |
29 |     def __init__(self,
30 | progress_callback: Callable[[str, str | None, float | None, bool, bool | None], None] | None = None):
   |                                                                                                     ^ E501
31 |         """Initialize the Gemma inference service.
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:58:79: FBT003 Boolean positional value in function call
   |
56 |         try:
57 |             if self.progress_callback:
58 |                 self.progress_callback("Downloading Gemma model...", None, 0, False, None)
   |                                                                               ^^^^^ FBT003
59 |
60 |             # Set cache path
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:68:84: FBT003 Boolean positional value in function call
   |
67 |             if self.progress_callback:
68 |                 self.progress_callback("Loading model configuration...", None, 30, False, None)
   |                                                                                    ^^^^^ FBT003
69 |
70 |             # Load configuration
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:74:74: FBT003 Boolean positional value in function call
   |
73 |             if self.progress_callback:
74 |                 self.progress_callback("Loading tokenizer...", None, 50, False, None)
   |                                                                          ^^^^^ FBT003
75 |
76 |             # Load tokenizer
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:80:82: FBT003 Boolean positional value in function call
   |
79 |             if self.progress_callback:
80 |                 self.progress_callback("Initializing ONNX session...", None, 70, False, None)
   |                                                                                  ^^^^^ FBT003
81 |
82 |             # Load ONNX model
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:87:81: FBT003 Boolean positional value in function call
   |
86 |             if self.progress_callback:
87 |                 self.progress_callback("Model loaded successfully!", None, 100, False, None)
   |                                                                                 ^^^^^ FBT003
88 |
89 |             return config, tokenizer, inference_session
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:89:13: TRY300 Consider moving this statement to an `else` block
   |
87 |                 self.progress_callback("Model loaded successfully!", None, 100, False, None)
88 |
89 |             return config, tokenizer, inference_session
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
90 |
91 |         except Exception as e:
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:91:16: BLE001 Do not catch blind exception: `Exception`
   |
89 |             return config, tokenizer, inference_session
90 |
91 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
92 |             error_msg = f"Failed to load Gemma model: {e}"
93 |             if self.progress_callback:
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:94:60: FBT003 Boolean positional value in function call
   |
92 |             error_msg = f"Failed to load Gemma model: {e}"
93 |             if self.progress_callback:
94 |                 self.progress_callback(error_msg, None, 0, True, None)
   |                                                            ^^^^ FBT003
95 |             raise GemmaInferenceError(error_msg)
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:95:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
93 |             if self.progress_callback:
94 |                 self.progress_callback(error_msg, None, 0, True, None)
95 |             raise GemmaInferenceError(error_msg)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
96 |
97 |     def generate_text(self, config: Any, tokenizer: Any, session: Any,
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:97:29: ARG002 Unused method argument: `config`
   |
95 |             raise GemmaInferenceError(error_msg)
96 |
97 |     def generate_text(self, config: Any, tokenizer: Any, session: Any,
   |                             ^^^^^^ ARG002
98 |                      messages: list[dict[str, str]], max_length: int = 512,
99 |                      temperature: float = 0.7,
   |

src_refactored\infrastructure\llm\gemma_inference_service.py:146:16: BLE001 Do not catch blind exception: `Exception`
    |
144 |             return generated_text.strip(), generation_info
145 |
146 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
147 |             msg = f"Text generation failed: {e}"
148 |             raise GemmaInferenceError(msg,
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:148:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
146 |           except Exception as e:
147 |               msg = f"Text generation failed: {e}"
148 | /             raise GemmaInferenceError(msg,
149 | |     )
    | |_____^ B904
150 |
151 |       def _download_model(self, repo_id: str, cache_path: str,
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:168:16: BLE001 Do not catch blind exception: `Exception`
    |
166 |                 resume_download=True,
167 |             )
168 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
169 |             msg = f"Model download failed: {e}"
170 |             raise GemmaInferenceError(msg,
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:170:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
168 |           except Exception as e:
169 |               msg = f"Model download failed: {e}"
170 | /             raise GemmaInferenceError(msg,
171 | |     )
    | |_____^ B904
172 |
173 |       def _get_onnx_model_path(self, model_path: str, quantization: str,
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:173:53: ARG002 Unused method argument: `quantization`
    |
171 |     )
172 |
173 |     def _get_onnx_model_path(self, model_path: str, quantization: str,
    |                                                     ^^^^^^^^^^^^ ARG002
174 |     ) -> str:
175 |         """Get the ONNX model file path based on quantization.
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:238:16: BLE001 Do not catch blind exception: `Exception`
    |
238 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
239 |             msg = f"Failed to create ONNX session: {e}"
240 |             raise GemmaInferenceError(msg)
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:240:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
238 |         except Exception as e:
239 |             msg = f"Failed to create ONNX session: {e}"
240 |             raise GemmaInferenceError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
241 |
242 |     def _format_messages(self, messages: list[dict[str, str]], tokenizer: Any,
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:261:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
259 |                       add_generation_prompt=True,
260 |                   )
261 | /             except Exception:
262 | |                 pass
    | |____________________^ S110
263 |
264 |           # Fallback to simple formatting
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:261:20: BLE001 Do not catch blind exception: `Exception`
    |
259 |                     add_generation_prompt=True,
260 |                 )
261 |             except Exception:
    |                    ^^^^^^^^^ BLE001
262 |                 pass
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:308:26: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
306 |             # Simple sampling (could be improved with top-k, top-p)
307 |             probs = self._softmax(logits)
308 |             next_token = np.random.choice(len(probs[0]), p=probs[0])
    |                          ^^^^^^^^^^^^^^^^ NPY002
309 |
310 |             # Append new token
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:322:30: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
321 |             # Check for end token (simplified)
322 |             if next_token == 2:  # Common EOS token ID
    |                              ^ PLR2004
323 |                 break
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:347:101: E501 Line too long (117 > 100)
    |
346 |     def load_model_with_progress(self, repo_id: str,
347 |                                progress_callback: Callable[[str, str | None, float | None, bool, bool | None], None],
    |                                                                                                     ^^^^^^^^^^^^^^^^^ E501
348 |                                cache_path: str | None = None,
349 |                                quantization: str = "Full",
    |

src_refactored\infrastructure\llm\gemma_inference_service.py:389:13: TRY300 Consider moving this statement to an `else` block
    |
387 |                 config, tokenizer, session, messages,
388 |             )
389 |             return generated_text
    |             ^^^^^^^^^^^^^^^^^^^^^ TRY300
390 |         except GemmaInferenceError:
391 |             return "Error: Failed to generate response"
    |

src_refactored\infrastructure\llm\llm_pyqt_worker_service.py:57:101: E501 Line too long (113 > 100)
   |
55 |                 from logger import setup_logger
56 |                 logger = setup_logger()
57 |                 logger.debug(f"Initializing LLM model: {self.model_type} with quantization: {self.quantization}",
   |                                                                                                     ^^^^^^^^^^^^^ E501
58 |     )
59 |             except ImportError:
   |

src_refactored\infrastructure\llm\llm_pyqt_worker_service.py:184:13: SyntaxError: Expected ',', found string
    |
182 |             "quantization": self.quantization,
183 |             "status": str(self.status)
184 |             "initialized": str(self.is_initialized()),
    |             ^
185 |         }
    |

src_refactored\infrastructure\llm\llm_worker_service.py:68:17: SyntaxError: Expected ',', found name
   |
66 |                 cache_path=None,  # Use default cache path
67 |                 display_message_signal=self._create_display_signal_adapter()
68 |                 quantization=quantization,
   |                 ^
69 |             )
   |

src_refactored\infrastructure\main_window\opacity_effects_service.py:73:17: TRY301 Abstract `raise` to an inner function
   |
71 |             if effect_name in self._opacity_effects:
72 |                 msg = f"Opacity effect '{effect_name}' already exists"
73 |                 raise OpacityEffectsError(msg)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
74 |
75 |             if not 0.0 <= initial_opacity <= 1.0:
   |

src_refactored\infrastructure\main_window\opacity_effects_service.py:77:17: TRY301 Abstract `raise` to an inner function
   |
75 |             if not 0.0 <= initial_opacity <= 1.0:
76 |                 msg = f"Invalid opacity value: {initial_opacity}. Must be between 0.0 and 1.0"
77 |                 raise OpacityEffectsError(msg)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
78 |
79 |             # Create the effect
   |

src_refactored\infrastructure\main_window\opacity_effects_service.py:87:101: E501 Line too long (101 > 100)
   |
86 |             self.effect_created.emit(effect_name, effect)
87 |             self.logger.debug("Created opacity effect '{effect_name}' with opacity {initial_opacity}\
   |                                                                                                     ^ E501
88 |     ")
   |

src_refactored\infrastructure\main_window\opacity_effects_service.py:90:13: TRY300 Consider moving this statement to an `else` block
   |
88 |     ")
89 |
90 |             return effect
   |             ^^^^^^^^^^^^^ TRY300
91 |
92 |         except Exception as e:
   |

src_refactored\infrastructure\main_window\opacity_effects_service.py:95:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
93 |               error_msg = f"Failed to create opacity effect '{effect_name}': {e}"
94 |               self.logger.exception(error_msg)
95 | /             raise OpacityEffectsError(error_msg,
96 | |     )
   | |_____^ B904
97 |
98 |       def apply_effect_to_widget(self, effect_name: str, widget: QWidget,
   |

src_refactored\infrastructure\main_window\opacity_effects_service.py:123:13: TRY300 Consider moving this statement to an `else` block
    |
121 |             self.logger.debug("Applied opacity effect '{effect_name}' to widget")
122 |
123 |             return True
    |             ^^^^^^^^^^^ TRY300
124 |
125 |         except Exception as e:
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:126:35: G004 Logging statement uses f-string
    |
125 |         except Exception as e:
126 |             self.logger.exception(f"Failed to apply opacity effect '{effect_name}': {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
127 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:126:86: TRY401 Redundant exception object included in `logging.exception` call
    |
125 |         except Exception as e:
126 |             self.logger.exception(f"Failed to apply opacity effect '{effect_name}': {e}")
    |                                                                                      ^ TRY401
127 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:155:13: TRY300 Consider moving this statement to an `else` block
    |
153 |             self.logger.debug("Set opacity for '{effect_name}' to {opacity}")
154 |
155 |             return True
    |             ^^^^^^^^^^^ TRY300
156 |
157 |         except Exception as e:
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:158:35: G004 Logging statement uses f-string
    |
157 |         except Exception as e:
158 |             self.logger.exception(f"Failed to set opacity for '{effect_name}': {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
159 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:158:81: TRY401 Redundant exception object included in `logging.exception` call
    |
157 |         except Exception as e:
158 |             self.logger.exception(f"Failed to set opacity for '{effect_name}': {e}")
    |                                                                                 ^ TRY401
159 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:200:35: G004 Logging statement uses f-string
    |
199 |             if not 0.0 <= target_opacity <= 1.0:
200 |                 self.logger.error(f"Invalid target opacity: {target_opacity}. Must be between 0.0 and 1.0")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
201 |                 return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:200:101: E501 Line too long (107 > 100)
    |
199 |             if not 0.0 <= target_opacity <= 1.0:
200 |                 self.logger.error(f"Invalid target opacity: {target_opacity}. Must be between 0.0 and 1.0")
    |                                                                                                     ^^^^^^^ E501
201 |                 return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:233:101: E501 Line too long (101 > 100)
    |
231 |             animation.start()
232 |
233 |             self.logger.debug("Started opacity animation '{animation_name}' for '{effect_name}' to {\
    |                                                                                                     ^ E501
234 |     target_opacity}")
235 |             return True
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:235:13: TRY300 Consider moving this statement to an `else` block
    |
233 |             self.logger.debug("Started opacity animation '{animation_name}' for '{effect_name}' to {\
234 |     target_opacity}")
235 |             return True
    |             ^^^^^^^^^^^ TRY300
236 |
237 |         except Exception as e:
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:238:35: G004 Logging statement uses f-string
    |
237 |         except Exception as e:
238 |             self.logger.exception(f"Failed to animate opacity for '{effect_name}': {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
239 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:238:85: TRY401 Redundant exception object included in `logging.exception` call
    |
237 |         except Exception as e:
238 |             self.logger.exception(f"Failed to animate opacity for '{effect_name}': {e}")
    |                                                                                     ^ TRY401
239 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:308:13: TRY300 Consider moving this statement to an `else` block
    |
306 |             self._cleanup_animation(animation_name)
307 |             self.logger.debug("Stopped animation '{animation_name}'")
308 |             return True
    |             ^^^^^^^^^^^ TRY300
309 |
310 |         except Exception as e:
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:311:35: G004 Logging statement uses f-string
    |
310 |         except Exception as e:
311 |             self.logger.exception(f"Failed to stop animation '{animation_name}': {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
312 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:311:83: TRY401 Redundant exception object included in `logging.exception` call
    |
310 |         except Exception as e:
311 |             self.logger.exception(f"Failed to stop animation '{animation_name}': {e}")
    |                                                                                   ^ TRY401
312 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:390:13: TRY300 Consider moving this statement to an `else` block
    |
389 |             self.logger.debug("Removed opacity effect '{effect_name}'")
390 |             return True
    |             ^^^^^^^^^^^ TRY300
391 |
392 |         except Exception as e:
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:393:35: G004 Logging statement uses f-string
    |
392 |         except Exception as e:
393 |             self.logger.exception(f"Failed to remove opacity effect '{effect_name}': {e}",
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
394 |     )
395 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:393:87: TRY401 Redundant exception object included in `logging.exception` call
    |
392 |         except Exception as e:
393 |             self.logger.exception(f"Failed to remove opacity effect '{effect_name}': {e}",
    |                                                                                       ^ TRY401
394 |     )
395 |             return False
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:462:35: G004 Logging statement uses f-string
    |
461 |         except Exception as e:
462 |             self.logger.exception(f"Failed to cleanup opacity effects service: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:462:81: TRY401 Redundant exception object included in `logging.exception` call
    |
461 |         except Exception as e:
462 |             self.logger.exception(f"Failed to cleanup opacity effects service: {e}")
    |                                                                                 ^ TRY401
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:513:13: TRY300 Consider moving this statement to an `else` block
    |
511 |                 self._service.apply_effect_to_widget(effect_name, widget)
512 |
513 |             return True
    |             ^^^^^^^^^^^ TRY300
514 |
515 |         except Exception as e:
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:515:16: BLE001 Do not catch blind exception: `Exception`
    |
513 |             return True
514 |
515 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
516 |             msg = f"Failed to setup standard effects: {e}"
517 |             raise OpacityEffectsError(msg,
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:517:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
515 |           except Exception as e:
516 |               msg = f"Failed to setup standard effects: {e}"
517 | /             raise OpacityEffectsError(msg,
518 | |     )
    | |_____^ B904
519 |
520 |       def fade_out_all_except(self, except_effects: list, target_opacity: float = 0.4,
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:545:13: TRY300 Consider moving this statement to an `else` block
    |
543 |                     self._service.fade_out(effect_name, target_opacity=target_opacity)
544 |
545 |             return True
    |             ^^^^^^^^^^^ TRY300
546 |
547 |         except Exception as e:
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:547:16: BLE001 Do not catch blind exception: `Exception`
    |
545 |             return True
546 |
547 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
548 |             msg = f"Failed to fade out effects: {e}"
549 |             raise OpacityEffectsError(msg,
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:549:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
547 |           except Exception as e:
548 |               msg = f"Failed to fade out effects: {e}"
549 | /             raise OpacityEffectsError(msg,
550 | |     )
    | |_____^ B904
551 |
552 |       def fade_in_all(self, target_opacity: float = 1.0,
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:575:13: TRY300 Consider moving this statement to an `else` block
    |
573 |                 self._service.fade_in(effect_name, target_opacity=target_opacity)
574 |
575 |             return True
    |             ^^^^^^^^^^^ TRY300
576 |
577 |         except Exception as e:
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:577:16: BLE001 Do not catch blind exception: `Exception`
    |
575 |             return True
576 |
577 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
578 |             msg = f"Failed to fade in effects: {e}"
579 |             raise OpacityEffectsError(msg)
    |

src_refactored\infrastructure\main_window\opacity_effects_service.py:579:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
577 |         except Exception as e:
578 |             msg = f"Failed to fade in effects: {e}"
579 |             raise OpacityEffectsError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
580 |
581 |     def cleanup(self) -> None:
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:65:36: SyntaxError: Expected an expression or a ')'
   |
63 |         """Initialize the UI layout service."""
64 |         super().__init__()
65 |         self.logger = setup_logger(,
   |                                    ^
66 |     )
67 |         self.created_widgets: dict[str, QWidget] = {}
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:73:13: SyntaxError: Expected ',', found string
   |
71 |         self.default_geometries = {
72 |             "central_widget": WidgetGeometry(0, 0, 400, 220)
73 |             "title_label": WidgetGeometry(150, 10, 131, 31)
   |             ^
74 |             "logo_label": WidgetGeometry(160, 10, 21, 21)
75 |             "settings_button": WidgetGeometry(360, 10, 24, 24)
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:74:13: SyntaxError: Expected ',', found string
   |
72 |             "central_widget": WidgetGeometry(0, 0, 400, 220)
73 |             "title_label": WidgetGeometry(150, 10, 131, 31)
74 |             "logo_label": WidgetGeometry(160, 10, 21, 21)
   |             ^
75 |             "settings_button": WidgetGeometry(360, 10, 24, 24)
76 |             "instruction_label": WidgetGeometry(17, 50, 370, 30)
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:75:13: SyntaxError: Expected ',', found string
   |
73 |             "title_label": WidgetGeometry(150, 10, 131, 31)
74 |             "logo_label": WidgetGeometry(160, 10, 21, 21)
75 |             "settings_button": WidgetGeometry(360, 10, 24, 24)
   |             ^
76 |             "instruction_label": WidgetGeometry(17, 50, 370, 30)
77 |             "message_label": WidgetGeometry(17, 85, 370, 30)
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:76:13: SyntaxError: Expected ',', found string
   |
74 |             "logo_label": WidgetGeometry(160, 10, 21, 21)
75 |             "settings_button": WidgetGeometry(360, 10, 24, 24)
76 |             "instruction_label": WidgetGeometry(17, 50, 370, 30)
   |             ^
77 |             "message_label": WidgetGeometry(17, 85, 370, 30)
78 |             "progress_bar": WidgetGeometry(60, 120, 290, 14)
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:77:13: SyntaxError: Expected ',', found string
   |
75 |             "settings_button": WidgetGeometry(360, 10, 24, 24)
76 |             "instruction_label": WidgetGeometry(17, 50, 370, 30)
77 |             "message_label": WidgetGeometry(17, 85, 370, 30)
   |             ^
78 |             "progress_bar": WidgetGeometry(60, 120, 290, 14)
79 |             "voice_visualizer": WidgetGeometry(0, -5, 400, 51)
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:78:13: SyntaxError: Expected ',', found string
   |
76 |             "instruction_label": WidgetGeometry(17, 50, 370, 30)
77 |             "message_label": WidgetGeometry(17, 85, 370, 30)
78 |             "progress_bar": WidgetGeometry(60, 120, 290, 14)
   |             ^
79 |             "voice_visualizer": WidgetGeometry(0, -5, 400, 51)
80 |             "bottom_graphics_view": WidgetGeometry(0, 190, 411, 31)
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:79:13: SyntaxError: Expected ',', found string
   |
77 |             "message_label": WidgetGeometry(17, 85, 370, 30)
78 |             "progress_bar": WidgetGeometry(60, 120, 290, 14)
79 |             "voice_visualizer": WidgetGeometry(0, -5, 400, 51)
   |             ^
80 |             "bottom_graphics_view": WidgetGeometry(0, 190, 411, 31)
81 |             "hw_accel_label": WidgetGeometry(262, 189, 161, 31)
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:80:13: SyntaxError: Expected ',', found string
   |
78 |             "progress_bar": WidgetGeometry(60, 120, 290, 14)
79 |             "voice_visualizer": WidgetGeometry(0, -5, 400, 51)
80 |             "bottom_graphics_view": WidgetGeometry(0, 190, 411, 31)
   |             ^
81 |             "hw_accel_label": WidgetGeometry(262, 189, 161, 31)
82 |             "accel_switch_label": WidgetGeometry(360, 190, 31, 31)
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:81:13: SyntaxError: Expected ',', found string
   |
79 |             "voice_visualizer": WidgetGeometry(0, -5, 400, 51)
80 |             "bottom_graphics_view": WidgetGeometry(0, 190, 411, 31)
81 |             "hw_accel_label": WidgetGeometry(262, 189, 161, 31)
   |             ^
82 |             "accel_switch_label": WidgetGeometry(360, 190, 31, 31)
83 |             "header_image_label": WidgetGeometry(0, -5, 401, 51),
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:82:13: SyntaxError: Expected ',', found string
   |
80 |             "bottom_graphics_view": WidgetGeometry(0, 190, 411, 31)
81 |             "hw_accel_label": WidgetGeometry(262, 189, 161, 31)
82 |             "accel_switch_label": WidgetGeometry(360, 190, 31, 31)
   |             ^
83 |             "header_image_label": WidgetGeometry(0, -5, 401, 51),
84 |         }
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:83:13: SyntaxError: Expected ',', found string
   |
81 |             "hw_accel_label": WidgetGeometry(262, 189, 161, 31)
82 |             "accel_switch_label": WidgetGeometry(360, 190, 31, 31)
83 |             "header_image_label": WidgetGeometry(0, -5, 401, 51),
   |             ^
84 |         }
   |

src_refactored\infrastructure\main_window\ui_layout_service.py:471:32: SyntaxError: Expected an expression or a ')'
    |
470 |             # Configure palette
471 |             palette = QPalette(,
    |                                ^
472 |     )
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:619:13: SyntaxError: Expected an indented block after `try` statement
    |
617 |     def arrange_widget_layers(self) -> None:
618 |         """Arrange widget layers in proper z-order."""
619 |         try:
    |             ^
620 |             # Raise widgets in proper order (bottom to top,
621 |     )
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:621:5: SyntaxError: Expected `except` or `finally` after `try` block
    |
619 |         try:
620 |             # Raise widgets in proper order (bottom to top,
621 |     )
    |     ^
622 |             layer_order = [
623 |                 "bottom_graphics_view",
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:621:6: SyntaxError: Expected a statement
    |
619 |         try:
620 |             # Raise widgets in proper order (bottom to top,
621 |     )
    |      ^
622 |             layer_order = [
623 |                 "bottom_graphics_view",
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:622:1: SyntaxError: Unexpected indentation
    |
620 |             # Raise widgets in proper order (bottom to top,
621 |     )
622 |             layer_order = [
    | ^
623 |                 "bottom_graphics_view",
624 |                 "hw_accel_label",
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:643:1: SyntaxError: unindent does not match any outer indentation level
    |
641 |             self.logger.debug("Widget layers arranged")
642 |
643 |         except Exception as e:
    | ^
644 |             error_msg = f"Failed to arrange widget layers: {e}"
645 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:643:9: SyntaxError: Expected a statement
    |
641 |             self.logger.debug("Widget layers arranged")
642 |
643 |         except Exception as e:
    |         ^
644 |             error_msg = f"Failed to arrange widget layers: {e}"
645 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:643:26: SyntaxError: Expected a statement
    |
641 |             self.logger.debug("Widget layers arranged")
642 |
643 |         except Exception as e:
    |                          ^
644 |             error_msg = f"Failed to arrange widget layers: {e}"
645 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:643:31: SyntaxError: Expected an expression
    |
641 |             self.logger.debug("Widget layers arranged")
642 |
643 |         except Exception as e:
    |                               ^
644 |             error_msg = f"Failed to arrange widget layers: {e}"
645 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:644:1: SyntaxError: Unexpected indentation
    |
643 |         except Exception as e:
644 |             error_msg = f"Failed to arrange widget layers: {e}"
    | ^
645 |             self.logger.exception(error_msg)
646 |             self.layout_failed.emit(error_msg,
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:718:1: SyntaxError: Expected a statement
    |
718 | class UILayoutManager:
    | ^
719 |     """High-level manager for UI layout operations."""
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:768:70: COM819 Trailing comma prohibited
    |
766 |         widgets["central_widget"] = self._service.create_central_widget(parent)
767 | widgets["header_image_label"] = (
768 |     self._service.create_header_image_label(widgets["central_widget"],)
    |                                                                      ^ COM819
769 |     )
770 | widgets["title_label"] = (
    |
    = help: Remove trailing comma

src_refactored\infrastructure\main_window\ui_layout_service.py:772:1: SyntaxError: Unexpected indentation
    |
770 | widgets["title_label"] = (
771 |     self._service.create_title_label(widgets["central_widget"], title_text))
772 |         widgets["logo_label"] = self._service.create_logo_label(widgets["central_widget"])
    | ^
773 |         widgets["settings_button"] = self._service.create_settings_button(widgets["central_widget"])
774 | widgets["instruction_label"] = (
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:774:1: SyntaxError: Expected a statement
    |
772 |         widgets["logo_label"] = self._service.create_logo_label(widgets["central_widget"])
773 |         widgets["settings_button"] = self._service.create_settings_button(widgets["central_widget"])
774 | widgets["instruction_label"] = (
    | ^
775 |     self._service.create_instruction_label(widgets["central_widget"],)
776 |         instruction_text)
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:775:69: COM819 Trailing comma prohibited
    |
773 |         widgets["settings_button"] = self._service.create_settings_button(widgets["central_widget"])
774 | widgets["instruction_label"] = (
775 |     self._service.create_instruction_label(widgets["central_widget"],)
    |                                                                     ^ COM819
776 |         instruction_text)
777 |         widgets["message_label"] = self._service.create_message_label(widgets["central_widget"])
    |
    = help: Remove trailing comma

src_refactored\infrastructure\main_window\ui_layout_service.py:776:9: SyntaxError: Expected ')', found name
    |
774 | widgets["instruction_label"] = (
775 |     self._service.create_instruction_label(widgets["central_widget"],)
776 |         instruction_text)
    |         ^
777 |         widgets["message_label"] = self._service.create_message_label(widgets["central_widget"])
778 |         widgets["progress_bar"] = self._service.create_progress_bar(widgets["central_widget"])
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:776:25: SyntaxError: Expected a statement
    |
774 | widgets["instruction_label"] = (
775 |     self._service.create_instruction_label(widgets["central_widget"],)
776 |         instruction_text)
    |                         ^
777 |         widgets["message_label"] = self._service.create_message_label(widgets["central_widget"])
778 |         widgets["progress_bar"] = self._service.create_progress_bar(widgets["central_widget"])
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:776:26: SyntaxError: Expected a statement
    |
774 | widgets["instruction_label"] = (
775 |     self._service.create_instruction_label(widgets["central_widget"],)
776 |         instruction_text)
    |                          ^
777 |         widgets["message_label"] = self._service.create_message_label(widgets["central_widget"])
778 |         widgets["progress_bar"] = self._service.create_progress_bar(widgets["central_widget"])
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:777:1: SyntaxError: Unexpected indentation
    |
775 |     self._service.create_instruction_label(widgets["central_widget"],)
776 |         instruction_text)
777 |         widgets["message_label"] = self._service.create_message_label(widgets["central_widget"])
    | ^
778 |         widgets["progress_bar"] = self._service.create_progress_bar(widgets["central_widget"])
779 | widgets["voice_visualizer"] = (
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:779:1: SyntaxError: Expected a statement
    |
777 |         widgets["message_label"] = self._service.create_message_label(widgets["central_widget"])
778 |         widgets["progress_bar"] = self._service.create_progress_bar(widgets["central_widget"])
779 | widgets["voice_visualizer"] = (
    | ^
780 |     self._service.create_voice_visualizer(widgets["central_widget"]))
781 | widgets["bottom_graphics_view"] = (
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:783:1: SyntaxError: Unexpected indentation
    |
781 | widgets["bottom_graphics_view"] = (
782 |     self._service.create_bottom_graphics_view(widgets["central_widget"]))
783 |         widgets["hw_accel_label"] = self._service.create_hw_accel_label(widgets["central_widget"])
    | ^
784 | widgets["accel_switch_label"] = (
785 |     self._service.create_accel_switch_label(widgets["central_widget"],)
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:784:1: SyntaxError: Expected a statement
    |
782 |     self._service.create_bottom_graphics_view(widgets["central_widget"]))
783 |         widgets["hw_accel_label"] = self._service.create_hw_accel_label(widgets["central_widget"])
784 | widgets["accel_switch_label"] = (
    | ^
785 |     self._service.create_accel_switch_label(widgets["central_widget"],)
786 |         hw_accel_enabled)
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:785:70: COM819 Trailing comma prohibited
    |
783 |         widgets["hw_accel_label"] = self._service.create_hw_accel_label(widgets["central_widget"])
784 | widgets["accel_switch_label"] = (
785 |     self._service.create_accel_switch_label(widgets["central_widget"],)
    |                                                                      ^ COM819
786 |         hw_accel_enabled)
    |
    = help: Remove trailing comma

src_refactored\infrastructure\main_window\ui_layout_service.py:786:9: SyntaxError: Expected ')', found name
    |
784 | widgets["accel_switch_label"] = (
785 |     self._service.create_accel_switch_label(widgets["central_widget"],)
786 |         hw_accel_enabled)
    |         ^
787 |
788 |         # Arrange layers
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:786:25: SyntaxError: Expected a statement
    |
784 | widgets["accel_switch_label"] = (
785 |     self._service.create_accel_switch_label(widgets["central_widget"],)
786 |         hw_accel_enabled)
    |                         ^
787 |
788 |         # Arrange layers
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:786:26: SyntaxError: Expected a statement
    |
784 | widgets["accel_switch_label"] = (
785 |     self._service.create_accel_switch_label(widgets["central_widget"],)
786 |         hw_accel_enabled)
    |                          ^
787 |
788 |         # Arrange layers
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:789:1: SyntaxError: Unexpected indentation
    |
788 |         # Arrange layers
789 |         self._service.arrange_widget_layers()
    | ^
790 |
791 |         return widgets
    |

src_refactored\infrastructure\main_window\ui_layout_service.py:793:1: SyntaxError: unindent does not match any outer indentation level
    |
791 |         return widgets
792 |
793 |     def cleanup(self) -> None:
    | ^
794 |         """Clean up UI layout manager."""
795 |         if self._service:
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:105:17: SyntaxError: Expected ',', found name
    |
103 |                 mode=TextUpdateMode.CONDITIONAL,
104 |                 condition_func=lambda: self._application_state.get("model_downloaded", False)
105 |                 true_text="Model ready",
    |                 ^
106 |                 false_text="Downloading model...",
107 |             ))
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:468:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
467 |             # Emit condition evaluation signal
468 | element_name = (
    | ^
469 |     next((name for name, c in self._text_contents.items() if c == content), "unknown"))
470 |             self.condition_evaluated.emit(element_name, condition_result)
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:470:1: SyntaxError: Unexpected indentation
    |
468 | element_name = (
469 |     next((name for name, c in self._text_contents.items() if c == content), "unknown"))
470 |             self.condition_evaluated.emit(element_name, condition_result)
    | ^
471 |
472 |             return text or content.text
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:474:1: SyntaxError: unindent does not match any outer indentation level
    |
472 |             return text or content.text
473 |
474 |         except Exception as e:
    | ^
475 |             self.logger.exception(f"Failed to evaluate conditional text: {e}")
476 |             return content.text
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:474:9: SyntaxError: Expected a statement
    |
472 |             return text or content.text
473 |
474 |         except Exception as e:
    |         ^
475 |             self.logger.exception(f"Failed to evaluate conditional text: {e}")
476 |             return content.text
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:474:26: SyntaxError: Expected a statement
    |
472 |             return text or content.text
473 |
474 |         except Exception as e:
    |                          ^
475 |             self.logger.exception(f"Failed to evaluate conditional text: {e}")
476 |             return content.text
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:474:31: SyntaxError: Expected an expression
    |
472 |             return text or content.text
473 |
474 |         except Exception as e:
    |                               ^
475 |             self.logger.exception(f"Failed to evaluate conditional text: {e}")
476 |             return content.text
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:475:1: SyntaxError: Unexpected indentation
    |
474 |         except Exception as e:
475 |             self.logger.exception(f"Failed to evaluate conditional text: {e}")
    | ^
476 |             return content.text
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:478:1: SyntaxError: unindent does not match any outer indentation level
    |
476 |             return content.text
477 |
478 |     def _get_translated_text(self, text: str,
    | ^
479 |     ) -> str:
480 |         """Get translated version of text.
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:490:1: SyntaxError: unindent does not match any outer indentation level
    |
488 |         return self.get_translated_text(text)
489 |
490 |     def _is_text_widget(self, widget: QWidget,
    | ^
491 |     ) -> bool:
492 |         """Check if widget supports text.
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:502:1: SyntaxError: unindent does not match any outer indentation level
    |
500 |         return hasattr(widget, "setText") or hasattr(widget, "setWindowTitle")
501 |
502 |     def _set_widget_text(self, widget: QWidget, text: str,
    | ^
503 |     ) -> None:
504 |         """Set text on a widget.
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:521:5: SyntaxError: unindent does not match any outer indentation level
    |
519 |             self.logger.exception(f"Failed to set widget text: {e}")
520 |
521 |     def get_all_text_contents(self) -> dict[str, TextContent]:
    |     ^
522 |         """Get all text contents.
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:529:1: SyntaxError: unindent does not match any outer indentation level
    |
527 |         return self._text_contents.copy()
528 |
529 |     def get_all_widgets(self) -> dict[str, QWidget]:
    | ^
530 |         """Get all registered widgets.
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:537:1: SyntaxError: unindent does not match any outer indentation level
    |
535 |         return self._widget_mappings.copy()
536 |
537 |     def remove_text_content(self, element_name: str,
    | ^
538 |     ) -> bool:
539 |         """Remove text content for an element.
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:563:5: SyntaxError: unindent does not match any outer indentation level
    |
561 |             return False
562 |
563 |     def cleanup(self) -> None:
    |     ^
564 |         """Clean up text management resources."""
565 |         try:
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:675:101: E501 Line too long (105 > 100)
    |
673 |     )
674 |
675 |         return self._service.update_template_values("instruction_text", {"recording_key": recording_key})
    |                                                                                                     ^^^^^ E501
676 |
677 |     def update_model_status(self, is_downloaded: bool,
    |

src_refactored\infrastructure\main_window\ui_text_management_service.py:698:33: SyntaxError: Expected dedent, found end of file
    |
696 |         if self._service:
697 |             self._service.cleanup()
698 |             self._service = None
    |                                 ^
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:75:11: SyntaxError: Expected ')', found '->'
   |
73 |                                settings_opacity_effect: QGraphicsOpacityEffect,
74 | instruction_opacity_effect: QGraphicsOpacityEffect | None = (
75 |     None) -> bool:)
   |           ^
76 |         """Initialize visualization components and effects.
   |

src_refactored\infrastructure\main_window\visualization_integration_service.py:75:19: SyntaxError: Expected a simple statement
   |
73 |                                settings_opacity_effect: QGraphicsOpacityEffect,
74 | instruction_opacity_effect: QGraphicsOpacityEffect | None = (
75 |     None) -> bool:)
   |                   ^
76 |         """Initialize visualization components and effects.
   |

src_refactored\infrastructure\main_window\visualization_integration_service.py:75:20: SyntaxError: Expected a statement
   |
73 |                                settings_opacity_effect: QGraphicsOpacityEffect,
74 | instruction_opacity_effect: QGraphicsOpacityEffect | None = (
75 |     None) -> bool:)
   |                    ^
76 |         """Initialize visualization components and effects.
   |

src_refactored\infrastructure\main_window\visualization_integration_service.py:76:1: SyntaxError: Unexpected indentation
   |
74 | instruction_opacity_effect: QGraphicsOpacityEffect | None = (
75 |     None) -> bool:)
76 |         """Initialize visualization components and effects.
   | ^
77 |         
78 |         Args:
   |

src_refactored\infrastructure\main_window\visualization_integration_service.py:136:5: SyntaxError: Expected ',', found name
    |
134 |                 if hasattr(self.voice_visualizer_controller, "processor"):
135 |                     self.voice_visualizer_controller.processor.data_ready.connect(self._handle_audio\
136 |     _data)
    |     ^
137 |
138 |             # Start audio processing
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:236:47: SyntaxError: Expected an indented block after `if` statement
    |
234 |         try:
235 |             # Fade in visualizer
236 |             if self.visualizer_opacity_effect:
    |                                               ^
237 | self.fade_in_visualizer = (
238 |     QPropertyAnimation(self.visualizer_opacity_effect, b"opacity"))
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:237:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
235 |             # Fade in visualizer
236 |             if self.visualizer_opacity_effect:
237 | self.fade_in_visualizer = (
    | ^
238 |     QPropertyAnimation(self.visualizer_opacity_effect, b"opacity"))
239 |                 self.fade_in_visualizer.setDuration(self.animation_duration)
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:239:1: SyntaxError: Unexpected indentation
    |
237 | self.fade_in_visualizer = (
238 |     QPropertyAnimation(self.visualizer_opacity_effect, b"opacity"))
239 |                 self.fade_in_visualizer.setDuration(self.animation_duration)
    | ^
240 |                 self.fade_in_visualizer.setStartValue(0.0)
241 |                 self.fade_in_visualizer.setEndValue(1.0)
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:243:101: E501 Line too long (101 > 100)
    |
241 |                 self.fade_in_visualizer.setEndValue(1.0)
242 |                 self.fade_in_visualizer.setEasingCurve(QEasingCurve.Type.InOutQuad)
243 |                 self.fade_in_visualizer.finished.connect(lambda: self.fade_animation_finished.emit("\
    |                                                                                                     ^ E501
244 |     fade_in_visualizer"))
245 |                 self.fade_in_visualizer.start()
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:248:1: SyntaxError: unindent does not match any outer indentation level
    |
247 |             # Fade out other elements
248 |             self._fade_out_element(self.logo_opacity_effect, "fade_out_logo")
    | ^
249 |             self._fade_out_element(self.title_opacity_effect, "fade_out_title")
250 |             self._fade_out_element(self.settings_opacity_effect, "fade_out_settings")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:249:1: SyntaxError: Unexpected indentation
    |
247 |             # Fade out other elements
248 |             self._fade_out_element(self.logo_opacity_effect, "fade_out_logo")
249 |             self._fade_out_element(self.title_opacity_effect, "fade_out_title")
    | ^
250 |             self._fade_out_element(self.settings_opacity_effect, "fade_out_settings")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:255:9: SyntaxError: unindent does not match any outer indentation level
    |
253 |                 self._fade_out_element(self.instruction_opacity_effect, "fade_out_instruction")
254 |
255 |         except Exception as e:
    |         ^
256 |             self.logger.exception(f"Failed to start fade in animations: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:255:26: SyntaxError: Expected a statement
    |
253 |                 self._fade_out_element(self.instruction_opacity_effect, "fade_out_instruction")
254 |
255 |         except Exception as e:
    |                          ^
256 |             self.logger.exception(f"Failed to start fade in animations: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:255:31: SyntaxError: Expected an expression
    |
253 |                 self._fade_out_element(self.instruction_opacity_effect, "fade_out_instruction")
254 |
255 |         except Exception as e:
    |                               ^
256 |             self.logger.exception(f"Failed to start fade in animations: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:256:1: SyntaxError: Unexpected indentation
    |
255 |         except Exception as e:
256 |             self.logger.exception(f"Failed to start fade in animations: {e}")
    | ^
257 |
258 |     def _start_fade_out_animations(self) -> None:
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:258:1: SyntaxError: unindent does not match any outer indentation level
    |
256 |             self.logger.exception(f"Failed to start fade in animations: {e}")
257 |
258 |     def _start_fade_out_animations(self) -> None:
    | ^
259 |         """Start fade out animations for visualizer and fade in for other elements."""
260 |         try:
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:262:47: SyntaxError: Expected an indented block after `if` statement
    |
260 |         try:
261 |             # Fade out visualizer
262 |             if self.visualizer_opacity_effect:
    |                                               ^
263 | self.fade_out_visualizer = (
264 |     QPropertyAnimation(self.visualizer_opacity_effect, b"opacity"))
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:263:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
261 |             # Fade out visualizer
262 |             if self.visualizer_opacity_effect:
263 | self.fade_out_visualizer = (
    | ^
264 |     QPropertyAnimation(self.visualizer_opacity_effect, b"opacity"))
265 |                 self.fade_out_visualizer.setDuration(self.animation_duration)
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:265:1: SyntaxError: Unexpected indentation
    |
263 | self.fade_out_visualizer = (
264 |     QPropertyAnimation(self.visualizer_opacity_effect, b"opacity"))
265 |                 self.fade_out_visualizer.setDuration(self.animation_duration)
    | ^
266 |                 self.fade_out_visualizer.setStartValue(1.0)
267 |                 self.fade_out_visualizer.setEndValue(0.0)
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:270:101: E501 Line too long (101 > 100)
    |
268 |                 self.fade_out_visualizer.setEasingCurve(QEasingCurve.Type.InOutQuad)
269 |                 self.fade_out_visualizer.finished.connect(self._on_fade_out_complete)
270 |                 self.fade_out_visualizer.finished.connect(lambda: self.fade_animation_finished.emit(\
    |                                                                                                     ^ E501
271 |     "fade_out_visualizer"))
272 |                 self.fade_out_visualizer.start()
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:275:1: SyntaxError: unindent does not match any outer indentation level
    |
274 |             # Fade in other elements
275 |             self._fade_in_element(self.logo_opacity_effect, "fade_in_logo", 1.0)
    | ^
276 |             self._fade_in_element(self.title_opacity_effect, "fade_in_title", 1.0)
277 | self._fade_in_element(self.settings_opacity_effect, "fade_in_settings", 1.0, start_value = (
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:276:1: SyntaxError: Unexpected indentation
    |
274 |             # Fade in other elements
275 |             self._fade_in_element(self.logo_opacity_effect, "fade_in_logo", 1.0)
276 |             self._fade_in_element(self.title_opacity_effect, "fade_in_title", 1.0)
    | ^
277 | self._fade_in_element(self.settings_opacity_effect, "fade_in_settings", 1.0, start_value = (
278 |     0.4))
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:277:1: SyntaxError: Expected a statement
    |
275 |             self._fade_in_element(self.logo_opacity_effect, "fade_in_logo", 1.0)
276 |             self._fade_in_element(self.title_opacity_effect, "fade_in_title", 1.0)
277 | self._fade_in_element(self.settings_opacity_effect, "fade_in_settings", 1.0, start_value = (
    | ^
278 |     0.4))
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:280:1: SyntaxError: Unexpected indentation
    |
278 |     0.4))
279 |
280 |             if self.instruction_opacity_effect:
    | ^
281 |                 self._fade_in_element(self.instruction_opacity_effect, "fade_in_instruction", 1.0)
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:283:9: SyntaxError: unindent does not match any outer indentation level
    |
281 |                 self._fade_in_element(self.instruction_opacity_effect, "fade_in_instruction", 1.0)
282 |
283 |         except Exception as e:
    |         ^
284 |             self.logger.exception(f"Failed to start fade out animations: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:283:26: SyntaxError: Expected a statement
    |
281 |                 self._fade_in_element(self.instruction_opacity_effect, "fade_in_instruction", 1.0)
282 |
283 |         except Exception as e:
    |                          ^
284 |             self.logger.exception(f"Failed to start fade out animations: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:283:31: SyntaxError: Expected an expression
    |
281 |                 self._fade_in_element(self.instruction_opacity_effect, "fade_in_instruction", 1.0)
282 |
283 |         except Exception as e:
    |                               ^
284 |             self.logger.exception(f"Failed to start fade out animations: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:284:1: SyntaxError: Unexpected indentation
    |
283 |         except Exception as e:
284 |             self.logger.exception(f"Failed to start fade out animations: {e}")
    | ^
285 |
286 |     def _fade_out_element(self, opacity_effect: QGraphicsOpacityEffect | None,
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:286:1: SyntaxError: unindent does not match any outer indentation level
    |
284 |             self.logger.exception(f"Failed to start fade out animations: {e}")
285 |
286 |     def _fade_out_element(self, opacity_effect: QGraphicsOpacityEffect | None,
    | ^
287 |                          animation_name: str, end_value: float = 0.4,
288 |     ) -> None:
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:314:5: SyntaxError: unindent does not match any outer indentation level
    |
312 |             self.logger.exception(f"Failed to fade out element {animation_name}: {e}")
313 |
314 |     def _fade_in_element(self, opacity_effect: QGraphicsOpacityEffect | None,
    |     ^
315 |                         animation_name: str, end_value: float = 1.0,
316 |                         start_value: float = 0.4,
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:344:5: SyntaxError: unindent does not match any outer indentation level
    |
342 |             self.logger.exception(f"Failed to fade in element {animation_name}: {e}")
343 |
344 |     def _on_fade_out_complete(self) -> None:
    |     ^
345 |         """Handle completion of fade out animation."""
346 |         try:
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:354:5: SyntaxError: unindent does not match any outer indentation level
    |
352 |             self.logger.exception(f"Failed to handle fade out completion: {e}")
353 |
354 |     def _schedule_stop_processing(self) -> None:
    |     ^
355 |         """Schedule stopping of audio processing after animation delay."""
356 |         try:
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:365:5: SyntaxError: unindent does not match any outer indentation level
    |
363 |             self.logger.exception(f"Failed to stop audio processing: {e}")
364 |
365 |     def set_animation_duration(self, duration_ms: int,
    |     ^
366 |     ) -> None:
367 |         """Set animation duration for fade effects.
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:376:5: SyntaxError: unindent does not match any outer indentation level
    |
374 |             self.logger.debug("Animation duration set to {duration_ms}ms")
375 |
376 |     def set_waveform_style(self, color: tuple | None = None, width: float | None = None) -> None:
    |     ^
377 |         """Set waveform visual style.
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:394:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
392 |                 self.waveform_plot.setPen(pen)
393 |
394 | self.logger.debug("Waveform style updated: color = (
    | ^
395 |     {self.waveform_color}, width={self.waveform_width}"))
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:394:19: SyntaxError: missing closing quote in string literal
    |
392 |                 self.waveform_plot.setPen(pen)
393 |
394 | self.logger.debug("Waveform style updated: color = (
    |                   ^
395 |     {self.waveform_color}, width={self.waveform_width}"))
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:395:55: SyntaxError: missing closing quote in string literal
    |
394 | self.logger.debug("Waveform style updated: color = (
395 |     {self.waveform_color}, width={self.waveform_width}"))
    |                                                       ^
396 |
397 |         except Exception as e:
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:397:9: SyntaxError: Expected ',', found 'except'
    |
395 |     {self.waveform_color}, width={self.waveform_width}"))
396 |
397 |         except Exception as e:
    |         ^
398 |             self.logger.exception(f"Failed to set waveform style: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:397:16: SyntaxError: Positional argument cannot follow keyword argument
    |
395 |     {self.waveform_color}, width={self.waveform_width}"))
396 |
397 |         except Exception as e:
    |                ^
398 |             self.logger.exception(f"Failed to set waveform style: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:397:26: SyntaxError: Expected ',', found 'as'
    |
395 |     {self.waveform_color}, width={self.waveform_width}"))
396 |
397 |         except Exception as e:
    |                          ^
398 |             self.logger.exception(f"Failed to set waveform style: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:397:29: SyntaxError: Positional argument cannot follow keyword argument
    |
395 |     {self.waveform_color}, width={self.waveform_width}"))
396 |
397 |         except Exception as e:
    |                             ^
398 |             self.logger.exception(f"Failed to set waveform style: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:397:30: SyntaxError: Expected ',', found ':'
    |
395 |     {self.waveform_color}, width={self.waveform_width}"))
396 |
397 |         except Exception as e:
    |                              ^
398 |             self.logger.exception(f"Failed to set waveform style: {e}")
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:398:13: SyntaxError: Positional argument cannot follow keyword argument
    |
397 |         except Exception as e:
398 |             self.logger.exception(f"Failed to set waveform style: {e}")
    |             ^
399 |
400 |     def set_downsample_factor(self, factor: int,
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:398:72: SyntaxError: Expected ')', found newline
    |
397 |         except Exception as e:
398 |             self.logger.exception(f"Failed to set waveform style: {e}")
    |                                                                        ^
399 |
400 |     def set_downsample_factor(self, factor: int,
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:400:1: SyntaxError: Unexpected indentation
    |
398 |             self.logger.exception(f"Failed to set waveform style: {e}")
399 |
400 |     def set_downsample_factor(self, factor: int,
    | ^
401 |     ) -> None:
402 |         """Set downsample factor for performance optimization.
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:557:35: SyntaxError: Expected an expression or a ')'
    |
555 |         """Clean up visualization integration manager."""
556 |         if self._service:
557 |             self._service.cleanup(,
    |                                   ^
558 |     )
559 |             self._service = None
    |

src_refactored\infrastructure\main_window\visualization_integration_service.py:559:33: SyntaxError: Expected dedent, found end of file
    |
557 |             self._service.cleanup(,
558 |     )
559 |             self._service = None
    |                                 ^
    |

src_refactored\infrastructure\main_window\widget_layering_service.py:138:17: SyntaxError: Expected ',', found name
    |
136 |                 z_order=z_order,
137 |                 is_visible=widget.isVisible()
138 |                 parent_layer=parent_layer,
    |                 ^
139 |                 description=description,
140 |             )
    |

src_refactored\infrastructure\main_window\widget_layering_service.py:152:31: SyntaxError: missing closing quote in string literal
    |
151 |             self.layer_added.emit(layer_name, widget)
152 |             self.logger.debug("Added layer '{layer_name}' with priority {priority} and
    |                               ^
153 |     z-order {z_order}")
    |

src_refactored\infrastructure\main_window\widget_layering_service.py:153:13: SyntaxError: Expected ',', found '{'
    |
151 |             self.layer_added.emit(layer_name, widget)
152 |             self.logger.debug("Added layer '{layer_name}' with priority {priority} and
153 |     z-order {z_order}")
    |             ^
154 |
155 |             return True
    |

src_refactored\infrastructure\main_window\widget_layering_service.py:153:22: SyntaxError: missing closing quote in string literal
    |
151 |             self.layer_added.emit(layer_name, widget)
152 |             self.logger.debug("Added layer '{layer_name}' with priority {priority} and
153 |     z-order {z_order}")
    |                      ^
154 |
155 |             return True
    |

src_refactored\infrastructure\main_window\widget_layering_service.py:153:24: SyntaxError: Expected ')', found newline
    |
151 |             self.layer_added.emit(layer_name, widget)
152 |             self.logger.debug("Added layer '{layer_name}' with priority {priority} and
153 |     z-order {z_order}")
    |                        ^
154 |
155 |             return True
    |

src_refactored\infrastructure\main_window\widget_layering_service.py:814:35: SyntaxError: Expected an expression or a ')'
    |
812 |         """Clean up widget layering manager."""
813 |         if self._service:
814 |             self._service.cleanup(,
    |                                   ^
815 |     )
816 |             self._service = None
    |

src_refactored\infrastructure\main_window\window_configuration_service.py:183:38: SyntaxError: Expected an expression or a ')'
    |
181 |         """
182 |         try:
183 |             palette = QtGui.QPalette(,
    |                                      ^
184 |     )
    |

src_refactored\infrastructure\media\batch_processor_service.py:87:101: E501 Line too long (107 > 100)
   |
86 |         if self.progress_callback:
87 |             self.progress_callback(f"Added {len(file_paths)} files to queue. Total: {self.total_items}", 0)
   |                                                                                                     ^^^^^^^ E501
88 |
89 |     def add_memory_audio_to_queue(self, audio_data: tuple[str, bytes, str]) -> None:
   |

src_refactored\infrastructure\media\batch_processor_service.py:128:84: SyntaxError: f-string: unterminated string
    |
126 |             file_name = Path(self.current_item.file_path).name
127 |             self.progress_callback(
128 |                 f"Processing {file_name} ({self.processed_items}/{self.total_items},
    |                                                                                    ^
129 |     )",
130 |                 progress,
    |

src_refactored\infrastructure\media\batch_processor_service.py:129:5: SyntaxError: Expected FStringEnd, found ')'
    |
127 |             self.progress_callback(
128 |                 f"Processing {file_name} ({self.processed_items}/{self.total_items},
129 |     )",
    |     ^
130 |                 progress,
131 |             )
    |

src_refactored\infrastructure\media\batch_processor_service.py:129:6: SyntaxError: missing closing quote in string literal
    |
127 |             self.progress_callback(
128 |                 f"Processing {file_name} ({self.processed_items}/{self.total_items},
129 |     )",
    |      ^
130 |                 progress,
131 |             )
    |

src_refactored\infrastructure\media\batch_processor_service.py:129:8: SyntaxError: Expected a statement
    |
127 |             self.progress_callback(
128 |                 f"Processing {file_name} ({self.processed_items}/{self.total_items},
129 |     )",
    |        ^
130 |                 progress,
131 |             )
    |

src_refactored\infrastructure\media\batch_processor_service.py:130:1: SyntaxError: Unexpected indentation
    |
128 |                 f"Processing {file_name} ({self.processed_items}/{self.total_items},
129 |     )",
130 |                 progress,
    | ^
131 |             )
    |

src_refactored\infrastructure\media\batch_processor_service.py:131:13: SyntaxError: Expected a statement
    |
129 |     )",
130 |                 progress,
131 |             )
    |             ^
132 |
133 |         return self.current_item
    |

src_refactored\infrastructure\media\batch_processor_service.py:131:14: SyntaxError: Expected a statement
    |
129 |     )",
130 |                 progress,
131 |             )
    |              ^
132 |
133 |         return self.current_item
    |

src_refactored\infrastructure\media\batch_processor_service.py:172:92: SyntaxError: f-string: unterminated string
    |
170 |                 file_name = Path(item.file_path).name
171 |                 self.progress_callback(
172 |                     f"Retrying {file_name} (attempt {item.attempts + 1}/{item.max_attempts},
    |                                                                                            ^
173 |     )",
174 |                     0,
    |

src_refactored\infrastructure\media\batch_processor_service.py:173:5: SyntaxError: Expected FStringEnd, found ')'
    |
171 |                 self.progress_callback(
172 |                     f"Retrying {file_name} (attempt {item.attempts + 1}/{item.max_attempts},
173 |     )",
    |     ^
174 |                     0,
175 |                 )
    |

src_refactored\infrastructure\media\batch_processor_service.py:173:6: SyntaxError: missing closing quote in string literal
    |
171 |                 self.progress_callback(
172 |                     f"Retrying {file_name} (attempt {item.attempts + 1}/{item.max_attempts},
173 |     )",
    |      ^
174 |                     0,
175 |                 )
    |

src_refactored\infrastructure\media\batch_processor_service.py:173:8: SyntaxError: Expected a statement
    |
171 |                 self.progress_callback(
172 |                     f"Retrying {file_name} (attempt {item.attempts + 1}/{item.max_attempts},
173 |     )",
    |        ^
174 |                     0,
175 |                 )
    |

src_refactored\infrastructure\media\batch_processor_service.py:174:1: SyntaxError: Unexpected indentation
    |
172 |                     f"Retrying {file_name} (attempt {item.attempts + 1}/{item.max_attempts},
173 |     )",
174 |                     0,
    | ^
175 |                 )
176 |             return True
    |

src_refactored\infrastructure\media\batch_processor_service.py:175:17: SyntaxError: Expected a statement
    |
173 |     )",
174 |                     0,
175 |                 )
    |                 ^
176 |             return True
177 |         # Mark as permanently failed
    |

src_refactored\infrastructure\media\batch_processor_service.py:175:18: SyntaxError: Expected a statement
    |
173 |     )",
174 |                     0,
175 |                 )
    |                  ^
176 |             return True
177 |         # Mark as permanently failed
    |

src_refactored\infrastructure\media\batch_processor_service.py:188:5: SyntaxError: Expected a statement
    |
186 |         return False
187 |
188 |     def get_queue_status(self) -> dict:
    |     ^
189 |         """Get current status of the processing queue.
    |

src_refactored\infrastructure\media\batch_processor_service.py:199:13: SyntaxError: Expected ',', found string
    |
197 |             "processed_items": self.processed_items,
198 |             "remaining_items": len(self.processing_queue)
199 |             "completed_items": len(self.completed_items)
    |             ^
200 |             "failed_items": len(self.failed_items)
201 |             "current_item": self.current_item.file_path if self.current_item else None,
    |

src_refactored\infrastructure\media\batch_processor_service.py:200:13: SyntaxError: Expected ',', found string
    |
198 |             "remaining_items": len(self.processing_queue)
199 |             "completed_items": len(self.completed_items)
200 |             "failed_items": len(self.failed_items)
    |             ^
201 |             "current_item": self.current_item.file_path if self.current_item else None,
202 |             "progress_percentage": (self.processed_items / self.total_items) * 100 if self.total_items > 0 else 0,
    |

src_refactored\infrastructure\media\batch_processor_service.py:201:13: SyntaxError: Expected ',', found string
    |
199 |             "completed_items": len(self.completed_items)
200 |             "failed_items": len(self.failed_items)
201 |             "current_item": self.current_item.file_path if self.current_item else None,
    |             ^
202 |             "progress_percentage": (self.processed_items / self.total_items) * 100 if self.total_items > 0 else 0,
203 |         }
    |

src_refactored\infrastructure\media\batch_processor_service.py:202:101: E501 Line too long (114 > 100)
    |
200 |             "failed_items": len(self.failed_items)
201 |             "current_item": self.current_item.file_path if self.current_item else None,
202 |             "progress_percentage": (self.processed_items / self.total_items) * 100 if self.total_items > 0 else 0,
    |                                                                                                     ^^^^^^^^^^^^^^ E501
203 |         }
    |

src_refactored\infrastructure\media\batch_processor_service.py:300:71: SyntaxError: Expected a statement
    |
298 |         """
299 |         ext = Path(file_path).suffix.lower()
300 |         return ext in {".mp4", ".avi", ".mkv", ".mov", ".flv", ".wmv"}
    |                                                                       ^
    |

src_refactored\infrastructure\media\file_validation_service.py:19:24: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
18 |     # Supported file extensions
19 |     AUDIO_EXTENSIONS = {".mp3", ".wav"}
   |                        ^^^^^^^^^^^^^^^^ RUF012
20 |     VIDEO_EXTENSIONS = {".mp4", ".avi", ".mkv", ".mov", ".flv", ".wmv"}
   |

src_refactored\infrastructure\media\file_validation_service.py:20:24: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
18 |     # Supported file extensions
19 |     AUDIO_EXTENSIONS = {".mp3", ".wav"}
20 |     VIDEO_EXTENSIONS = {".mp4", ".avi", ".mkv", ".mov", ".flv", ".wmv"}
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
21 |
22 |     def __init__(self, progress_callback: Callable[[str, float], None] | None = None):
   |

src_refactored\infrastructure\media\folder_scanning_service.py:100:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
 98 |                     processed_files += 1
 99 |
100 | if self.progress_callback and processed_files % 10 = (
    | ^
101 |     = 0:  # Update every 10 files)
102 |                         progress = (processed_files / total_files) * 100
    |

src_refactored\infrastructure\media\folder_scanning_service.py:100:52: SyntaxError: Expected ':', found '='
    |
 98 |                     processed_files += 1
 99 |
100 | if self.progress_callback and processed_files % 10 = (
    |                                                    ^
101 |     = 0:  # Update every 10 files)
102 |                         progress = (processed_files / total_files) * 100
    |

src_refactored\infrastructure\media\folder_scanning_service.py:101:5: SyntaxError: Expected an expression
    |
100 | if self.progress_callback and processed_files % 10 = (
101 |     = 0:  # Update every 10 files)
    |     ^
102 |                         progress = (processed_files / total_files) * 100
103 |                         self.progress_callback(
    |

src_refactored\infrastructure\media\folder_scanning_service.py:101:8: SyntaxError: Expected a statement
    |
100 | if self.progress_callback and processed_files % 10 = (
101 |     = 0:  # Update every 10 files)
    |        ^
102 |                         progress = (processed_files / total_files) * 100
103 |                         self.progress_callback(
    |

src_refactored\infrastructure\media\folder_scanning_service.py:103:25: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
101 |     = 0:  # Update every 10 files)
102 |                         progress = (processed_files / total_files) * 100
103 |                         self.progress_callback(
    |                         ^
104 |                             f"Scanning... Found {len(media_files)} media files",
105 |                             progress,
    |

src_refactored\infrastructure\media\folder_scanning_service.py:103:25: SyntaxError: Invalid annotated assignment target
    |
101 |     = 0:  # Update every 10 files)
102 |                         progress = (processed_files / total_files) * 100
103 |                         self.progress_callback(
    |                         ^
104 |                             f"Scanning... Found {len(media_files)} media files",
105 |                             progress,
    |

src_refactored\infrastructure\media\folder_scanning_service.py:108:38: SyntaxError: Expected 'else', found ':'
    |
106 |                         )
107 |
108 |             if self.progress_callback:
    |                                      ^
109 |                 self.progress_callback(
110 |                     f"Scan complete: Found {len(media_files)} media files",
    |

src_refactored\infrastructure\media\folder_scanning_service.py:114:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
112 |                 )
113 |
114 |             return media_files
    |             ^
115 |
116 |         except Exception as e:
    |

src_refactored\infrastructure\media\folder_scanning_service.py:116:9: SyntaxError: Expected a statement
    |
114 |             return media_files
115 |
116 |         except Exception as e:
    |         ^
117 |             if self.progress_callback:
118 |                 self.progress_callback(f"Scan failed: {e}", 100)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:116:26: SyntaxError: Expected a statement
    |
114 |             return media_files
115 |
116 |         except Exception as e:
    |                          ^
117 |             if self.progress_callback:
118 |                 self.progress_callback(f"Scan failed: {e}", 100)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:117:13: SyntaxError: Expected an identifier, but found a keyword 'if' that cannot be used here
    |
116 |         except Exception as e:
117 |             if self.progress_callback:
    |             ^
118 |                 self.progress_callback(f"Scan failed: {e}", 100)
119 |             msg = f"Error scanning folder with progress: {e}"
    |

src_refactored\infrastructure\media\folder_scanning_service.py:117:16: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
116 |         except Exception as e:
117 |             if self.progress_callback:
    |                ^
118 |                 self.progress_callback(f"Scan failed: {e}", 100)
119 |             msg = f"Error scanning folder with progress: {e}"
    |

src_refactored\infrastructure\media\folder_scanning_service.py:119:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
117 |             if self.progress_callback:
118 |                 self.progress_callback(f"Scan failed: {e}", 100)
119 |             msg = f"Error scanning folder with progress: {e}"
    |             ^
120 |             raise FolderScanningError(msg)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:120:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
118 |                 self.progress_callback(f"Scan failed: {e}", 100)
119 |             msg = f"Error scanning folder with progress: {e}"
120 |             raise FolderScanningError(msg)
    |             ^
121 |
122 |     def scan_multiple_folders(
    |

src_refactored\infrastructure\media\folder_scanning_service.py:122:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
120 |             raise FolderScanningError(msg)
121 |
122 |     def scan_multiple_folders(
    |     ^
123 |     self,
124 |     folder_paths: list[str],
    |

src_refactored\infrastructure\media\folder_scanning_service.py:135:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
133 |             Combined list of media file paths from all folders
134 |         """
135 |         all_media_files = []
    |         ^
136 |         total_folders = len(folder_paths)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:136:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
134 |         """
135 |         all_media_files = []
136 |         total_folders = len(folder_paths)
    |         ^
137 |
138 |         for i, folder_path in enumerate(folder_paths):
    |

src_refactored\infrastructure\media\folder_scanning_service.py:138:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
136 |         total_folders = len(folder_paths)
137 |
138 |         for i, folder_path in enumerate(folder_paths):
    |         ^
139 |             try:
140 |                 if self.progress_callback:
    |

src_refactored\infrastructure\media\folder_scanning_service.py:139:13: SyntaxError: Expected a simple statement
    |
138 |         for i, folder_path in enumerate(folder_paths):
139 |             try:
    |             ^
140 |                 if self.progress_callback:
141 |                     folder_progress = (i / total_folders) * 100 if total_folders > 0 else 0
    |

src_refactored\infrastructure\media\folder_scanning_service.py:140:17: SyntaxError: Expected a simple statement
    |
138 |         for i, folder_path in enumerate(folder_paths):
139 |             try:
140 |                 if self.progress_callback:
    |                 ^
141 |                     folder_progress = (i / total_folders) * 100 if total_folders > 0 else 0
142 |                     self.progress_callback(
    |

src_refactored\infrastructure\media\folder_scanning_service.py:142:21: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
140 |                 if self.progress_callback:
141 |                     folder_progress = (i / total_folders) * 100 if total_folders > 0 else 0
142 |                     self.progress_callback(
    |                     ^
143 |                         f"Scanning folder {i+1}/{total_folders}: {os.path.basename(folder_path,
144 |     )}",
    |

src_refactored\infrastructure\media\folder_scanning_service.py:148:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
146 |                     )
147 |
148 |                 folder_files = self.scan_folder_for_media(folder_path, supported_extensions)
    |                 ^
149 |                 all_media_files.extend(folder_files)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:149:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
148 |                 folder_files = self.scan_folder_for_media(folder_path, supported_extensions)
149 |                 all_media_files.extend(folder_files)
    |                 ^
150 |
151 |             except FolderScanningError as e:
    |

src_refactored\infrastructure\media\folder_scanning_service.py:151:13: SyntaxError: Expected newline, found 'except'
    |
149 |                 all_media_files.extend(folder_files)
150 |
151 |             except FolderScanningError as e:
    |             ^
152 |                 if self.progress_callback:
153 |                     self.progress_callback(f"Error scanning {folder_path}: {e}", 0)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:151:40: SyntaxError: Expected a statement
    |
149 |                 all_media_files.extend(folder_files)
150 |
151 |             except FolderScanningError as e:
    |                                        ^
152 |                 if self.progress_callback:
153 |                     self.progress_callback(f"Error scanning {folder_path}: {e}", 0)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:152:17: SyntaxError: Expected an identifier, but found a keyword 'if' that cannot be used here
    |
151 |             except FolderScanningError as e:
152 |                 if self.progress_callback:
    |                 ^
153 |                     self.progress_callback(f"Error scanning {folder_path}: {e}", 0)
154 |                 continue
    |

src_refactored\infrastructure\media\folder_scanning_service.py:152:20: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
151 |             except FolderScanningError as e:
152 |                 if self.progress_callback:
    |                    ^
153 |                     self.progress_callback(f"Error scanning {folder_path}: {e}", 0)
154 |                 continue
    |

src_refactored\infrastructure\media\folder_scanning_service.py:154:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
152 |                 if self.progress_callback:
153 |                     self.progress_callback(f"Error scanning {folder_path}: {e}", 0)
154 |                 continue
    |                 ^
155 |
156 |         if self.progress_callback:
    |

src_refactored\infrastructure\media\folder_scanning_service.py:156:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
154 |                 continue
155 |
156 |         if self.progress_callback:
    |         ^
157 |             self.progress_callback(
158 |                 f"Scan complete: Found {len(all_media_files)} total media files",
    |

src_refactored\infrastructure\media\folder_scanning_service.py:162:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
160 |             )
161 |
162 |         return all_media_files
    |         ^
163 |
164 |     def get_folder_info(self, folder_path: str,
    |

src_refactored\infrastructure\media\folder_scanning_service.py:164:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
162 |         return all_media_files
163 |
164 |     def get_folder_info(self, folder_path: str,
    |     ^
165 |     ) -> dict:
166 |         """Get information about a folder.
    |

src_refactored\infrastructure\media\folder_scanning_service.py:174:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
172 |             Dictionary with folder information
173 |         """
174 |         try:
    |         ^
175 |             if not os.path.exists(folder_path):
176 |                 return {"exists": False, "error": "Folder does not exist"}
    |

src_refactored\infrastructure\media\folder_scanning_service.py:175:13: SyntaxError: Expected a simple statement
    |
173 |         """
174 |         try:
175 |             if not os.path.exists(folder_path):
    |             ^
176 |                 return {"exists": False, "error": "Folder does not exist"}
    |

src_refactored\infrastructure\media\folder_scanning_service.py:178:46: SyntaxError: Expected 'else', found ':'
    |
176 |                 return {"exists": False, "error": "Folder does not exist"}
177 |
178 |             if not os.path.isdir(folder_path):
    |                                              ^
179 |                 return {"exists": False, "error": "Path is not a directory"}
    |

src_refactored\infrastructure\media\folder_scanning_service.py:182:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
181 |             # Count files and subdirectories
182 |             total_files = 0
    |             ^
183 |             total_dirs = 0
    |

src_refactored\infrastructure\media\folder_scanning_service.py:183:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
181 |             # Count files and subdirectories
182 |             total_files = 0
183 |             total_dirs = 0
    |             ^
184 |
185 |             for _root, dirs, files in os.walk(folder_path):
    |

src_refactored\infrastructure\media\folder_scanning_service.py:185:13: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
183 |             total_dirs = 0
184 |
185 |             for _root, dirs, files in os.walk(folder_path):
    |             ^
186 |                 total_files += len(files)
187 |                 total_dirs += len(dirs)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:187:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
185 |             for _root, dirs, files in os.walk(folder_path):
186 |                 total_files += len(files)
187 |                 total_dirs += len(dirs)
    |                 ^
188 |
189 |             return {
    |

src_refactored\infrastructure\media\folder_scanning_service.py:189:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
187 |                 total_dirs += len(dirs)
188 |
189 |             return {
    |             ^
190 |                 "exists": True,
191 |                 "path": folder_path,
    |

src_refactored\infrastructure\media\folder_scanning_service.py:197:9: SyntaxError: Expected newline, found 'except'
    |
195 |             }
196 |
197 |         except Exception as e:
    |         ^
198 |             return {"exists": False, "error": str(e)}
    |

src_refactored\infrastructure\media\folder_scanning_service.py:197:26: SyntaxError: Expected a statement
    |
195 |             }
196 |
197 |         except Exception as e:
    |                          ^
198 |             return {"exists": False, "error": str(e)}
    |

src_refactored\infrastructure\media\folder_scanning_service.py:198:13: SyntaxError: Expected an identifier, but found a keyword 'return' that cannot be used here
    |
197 |         except Exception as e:
198 |             return {"exists": False, "error": str(e)}
    |             ^
199 |
200 |     def _is_supported_file(self, file_path: str, supported_extensions: set[str]) -> bool:
    |

src_refactored\infrastructure\media\folder_scanning_service.py:198:20: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
197 |         except Exception as e:
198 |             return {"exists": False, "error": str(e)}
    |                    ^
199 |
200 |     def _is_supported_file(self, file_path: str, supported_extensions: set[str]) -> bool:
    |

src_refactored\infrastructure\media\folder_scanning_service.py:200:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
198 |             return {"exists": False, "error": str(e)}
199 |
200 |     def _is_supported_file(self, file_path: str, supported_extensions: set[str]) -> bool:
    |     ^
201 |         """Check if a file has a supported extension.
    |

src_refactored\infrastructure\media\folder_scanning_service.py:210:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
208 |             True if file is supported, False otherwise
209 |         """
210 |         ext = Path(file_path).suffix.lower()
    |         ^
211 |         return ext in supported_extensions
    |

src_refactored\infrastructure\media\folder_scanning_service.py:211:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
209 |         """
210 |         ext = Path(file_path).suffix.lower()
211 |         return ext in supported_extensions
    |         ^
    |

src_refactored\infrastructure\media\folder_scanning_service.py:214:1: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
214 | class FolderScanningManager:
    | ^
215 |     """High-level manager for folder scanning operations."""
    |

src_refactored\infrastructure\media\folder_scanning_service.py:217:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
215 |     """High-level manager for folder scanning operations."""
216 |
217 |     def __init__(self):
    |     ^
218 |         self._service = FolderScanningService()
    |

src_refactored\infrastructure\media\folder_scanning_service.py:220:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
218 |         self._service = FolderScanningService()
219 |
220 |     def scan_folder_for_media(self, folder_path: str, supported_extensions: set[str]) -> list[str]:
    |     ^
221 |         """Scan folder for media files with error handling.
    |

src_refactored\infrastructure\media\folder_scanning_service.py:230:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
228 |             List of media file paths, empty list if scanning fails
229 |         """
230 |         try:
    |         ^
231 |             return self._service.scan_folder_for_media(folder_path, supported_extensions)
232 |         except FolderScanningError:
    |

src_refactored\infrastructure\media\folder_scanning_service.py:232:9: SyntaxError: Expected newline, found 'except'
    |
230 |         try:
231 |             return self._service.scan_folder_for_media(folder_path, supported_extensions)
232 |         except FolderScanningError:
    |         ^
233 |             return []
    |

src_refactored\infrastructure\media\folder_scanning_service.py:235:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
233 |             return []
234 |
235 |     def scan_with_progress(self, folder_path: str, supported_extensions: set[str],
    |     ^
236 |                           progress_callback: Callable[[str, float], None]) -> list[str]:
237 |         """Scan folder with progress reporting.
    |

src_refactored\infrastructure\media\folder_scanning_service.py:247:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
245 |             List of media file paths
246 |         """
247 |         service = FolderScanningService(progress_callback)
    |         ^
248 |         try:
249 |             return service.scan_folder_with_progress(folder_path, supported_extensions)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:248:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
246 |         """
247 |         service = FolderScanningService(progress_callback)
248 |         try:
    |         ^
249 |             return service.scan_folder_with_progress(folder_path, supported_extensions)
250 |         except FolderScanningError:
    |

src_refactored\infrastructure\media\folder_scanning_service.py:250:9: SyntaxError: Expected newline, found 'except'
    |
248 |         try:
249 |             return service.scan_folder_with_progress(folder_path, supported_extensions)
250 |         except FolderScanningError:
    |         ^
251 |             return []
    |

src_refactored\infrastructure\media\folder_scanning_service.py:253:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
251 |             return []
252 |
253 |     def validate_folder(self, folder_path: str,
    |     ^
254 |     ) -> bool:
255 |         """Validate that a folder exists and is accessible.
    |

src_refactored\infrastructure\media\folder_scanning_service.py:263:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
261 |             True if folder is valid and accessible
262 |         """
263 |         info = self._service.get_folder_info(folder_path)
    |         ^
264 |         return info.get("exists", False) and info.get("readable", False)
    |

src_refactored\infrastructure\media\folder_scanning_service.py:264:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
262 |         """
263 |         info = self._service.get_folder_info(folder_path)
264 |         return info.get("exists", False) and info.get("readable", False)
    |         ^
    |

src_refactored\infrastructure\media\folder_scanning_service.py:264:73: SyntaxError: unexpected EOF while parsing
    |
262 |         """
263 |         info = self._service.get_folder_info(folder_path)
264 |         return info.get("exists", False) and info.get("readable", False)
    |                                                                         ^
    |

src_refactored\infrastructure\media\media_conversion_service.py:54:17: SyntaxError: Expected ',', found string
   |
52 |                 "-f", "wav",
53 |                 "-ar", str(self.sample_rate)
54 |                 "-ac", str(self.channels)
   |                 ^
55 |                 "-loglevel", "error",
56 |                 "pipe:1",
   |

src_refactored\infrastructure\media\media_conversion_service.py:55:17: SyntaxError: Expected ',', found string
   |
53 |                 "-ar", str(self.sample_rate)
54 |                 "-ac", str(self.channels)
55 |                 "-loglevel", "error",
   |                 ^
56 |                 "pipe:1",
57 |             ]
   |

src_refactored\infrastructure\media\media_conversion_service.py:91:56: SyntaxError: Expected an expression or a ')'
   |
90 |     def __init__(self, converter: MediaConverter = None):
91 |         self._converter = converter or FFmpegConverter(,
   |                                                        ^
92 |     )
   |

src_refactored\infrastructure\media\media_scanner_service.py:49:75: SyntaxError: Expected an expression or a ')'
   |
47 |             folder_path_obj = Path(folder_path)
48 |
49 |             if not folder_path_obj.exists() or not folder_path_obj.is_dir(,
   |                                                                           ^
50 |     ):
51 |                 if self.progress_callback:
   |

src_refactored\infrastructure\media\media_scanner_service.py:137:81: SyntaxError: Expected an expression or a ')'
    |
135 |             directory_path_obj = Path(directory_path)
136 |
137 |             if not directory_path_obj.exists() or not directory_path_obj.is_dir(,
    |                                                                                 ^
138 |     ):
139 |                 if self.progress_callback:
    |

src_refactored\infrastructure\media\media_scanner_service.py:194:81: SyntaxError: Expected an expression or a ')'
    |
192 |             directory_path_obj = Path(directory_path)
193 |
194 |             if not directory_path_obj.exists() or not directory_path_obj.is_dir(,
    |                                                                                 ^
195 |     ):
196 |                 return stats
    |

src_refactored\infrastructure\media\media_scanner_service.py:235:48: SyntaxError: Expected an expression or a ')'
    |
233 |         """
234 |         try:
235 |             ext = Path(file_path).suffix.lower(,
    |                                                ^
236 |     )
237 |             return ext in self.supported_extensions
    |

src_refactored\infrastructure\media\progress_tracking_service.py:72:10: SyntaxError: Expected ',', found ':'
   |
70 |     def __init__(self,
71 | progress_callback: Callable[[str, str | None, float | None, bool, bool | None], None] | None = (
72 |     None):)
   |          ^
73 |         """Initialize the progress tracking service.
   |

src_refactored\infrastructure\media\progress_tracking_service.py:72:12: SyntaxError: Expected ':', found newline
   |
70 |     def __init__(self,
71 | progress_callback: Callable[[str, str | None, float | None, bool, bool | None], None] | None = (
72 |     None):)
   |            ^
73 |         """Initialize the progress tracking service.
   |

src_refactored\infrastructure\media\progress_tracking_service.py:183:101: E501 Line too long (104 > 100)
    |
182 |         if self.progress_callback:
183 |             self.progress_callback(completion_message, self._progress_info.filename, 100.0, False, None)
    |                                                                                                     ^^^^ E501
184 |
185 |     def error_progress(self, error_message: str,
    |

src_refactored\infrastructure\media\progress_tracking_service.py:208:54: SyntaxError: Expected an indented block after `if` statement
    |
206 |         """Pause progress tracking."""
207 |         with self._lock:
208 |             if self._progress_info.state.is_active():
    |                                                      ^
209 | self._progress_info.state = (
210 |     ProgressState.create_idle()  # Using idle as paused equivalent)
    |

src_refactored\infrastructure\media\progress_tracking_service.py:213:41: SyntaxError: Expected 'else', found ':'
    |
212 |         # Stop update timer
213 |         if self._update_timer.isActive():
    |                                         ^
214 |             self._update_timer.stop()
    |

src_refactored\infrastructure\media\progress_tracking_service.py:216:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
214 |             self._update_timer.stop()
215 |
216 |     def resume_progress(self) -> None:
    |     ^
217 |         """Resume progress tracking."""
218 |         with self._lock:
    |

src_refactored\infrastructure\media\progress_tracking_service.py:218:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
216 |     def resume_progress(self) -> None:
217 |         """Resume progress tracking."""
218 |         with self._lock:
    |         ^
219 |             if self._progress_info.state.is_idle():
220 |                 self._progress_info.state = ProgressState.create_processing()
    |

src_refactored\infrastructure\media\progress_tracking_service.py:219:13: SyntaxError: Expected a simple statement
    |
217 |         """Resume progress tracking."""
218 |         with self._lock:
219 |             if self._progress_info.state.is_idle():
    |             ^
220 |                 self._progress_info.state = ProgressState.create_processing()
    |

src_refactored\infrastructure\media\progress_tracking_service.py:223:45: SyntaxError: Expected 'else', found ':'
    |
222 |         # Start update timer
223 |         if not self._update_timer.isActive():
    |                                             ^
224 |             self._update_timer.start(self._update_interval)
    |

src_refactored\infrastructure\media\progress_tracking_service.py:226:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
224 |             self._update_timer.start(self._update_interval)
225 |
226 |     def reset_progress(self) -> None:
    |     ^
227 |         """Reset progress tracking."""
228 |         with self._lock:
    |

src_refactored\infrastructure\media\progress_tracking_service.py:228:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
226 |     def reset_progress(self) -> None:
227 |         """Reset progress tracking."""
228 |         with self._lock:
    |         ^
229 |             self._progress_info = ProgressInfo()
230 |             self._last_emitted_percentage = -1
    |

src_refactored\infrastructure\media\progress_tracking_service.py:230:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
228 |         with self._lock:
229 |             self._progress_info = ProgressInfo()
230 |             self._last_emitted_percentage = -1
    |             ^
231 |
232 |         # Stop update timer
    |

src_refactored\infrastructure\media\progress_tracking_service.py:233:41: SyntaxError: Expected 'else', found ':'
    |
232 |         # Stop update timer
233 |         if self._update_timer.isActive():
    |                                         ^
234 |             self._update_timer.stop()
    |

src_refactored\infrastructure\media\progress_tracking_service.py:234:13: SyntaxError: Invalid annotated assignment target
    |
232 |         # Stop update timer
233 |         if self._update_timer.isActive():
234 |             self._update_timer.stop()
    |             ^
235 |
236 |         if self.progress_callback:
    |

src_refactored\infrastructure\media\progress_tracking_service.py:236:34: SyntaxError: Expected 'else', found ':'
    |
234 |             self._update_timer.stop()
235 |
236 |         if self.progress_callback:
    |                                  ^
237 |             self.progress_callback("", None, None, False, True)
    |

src_refactored\infrastructure\media\progress_tracking_service.py:239:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
237 |             self.progress_callback("", None, None, False, True)
238 |
239 |     def get_progress_info(self) -> ProgressInfo:
    |     ^
240 |         """Get current progress information.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:245:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
243 |             Copy of current progress information
244 |         """
245 |         with self._lock:
    |         ^
246 |             return ProgressInfo(
247 |                 current=self._progress_info.current,
    |

src_refactored\infrastructure\media\progress_tracking_service.py:256:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
254 |             )
255 |
256 |     def update_progress_bar_safely(self, progress_bar: QProgressBar, message_text: str, progress_value: float,
    |     ^
257 |     ) -> None:
258 |         """Update progress bar and message text safely to avoid recursive repaint.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:256:101: E501 Line too long (110 > 100)
    |
254 |             )
255 |
256 |     def update_progress_bar_safely(self, progress_bar: QProgressBar, message_text: str, progress_value: float,
    |                                                                                                     ^^^^^^^^^^ E501
257 |     ) -> None:
258 |         """Update progress bar and message text safely to avoid recursive repaint.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:258:9: SyntaxError: Invalid annotated assignment target
    |
256 |     def update_progress_bar_safely(self, progress_bar: QProgressBar, message_text: str, progress_value: float,
257 |     ) -> None:
258 |         """Update progress bar and message text safely to avoid recursive repaint.
    |         ^
259 |         
260 |         Args:
    |

src_refactored\infrastructure\media\progress_tracking_service.py:265:40: SyntaxError: Expected 'else', found ':'
    |
263 |             progress_value: Progress value (0-100)
264 |         """
265 |         if not progress_bar.isVisible():
    |                                        ^
266 |             progress_bar.setVisible(True)
    |

src_refactored\infrastructure\media\progress_tracking_service.py:269:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
268 |         # Update progress bar value without animation
269 |         progress_bar.blockSignals(True)
    |         ^
270 |         progress_bar.setProperty("value", int(progress_value))
271 |         progress_bar.blockSignals(False)
    |

src_refactored\infrastructure\media\progress_tracking_service.py:270:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
268 |         # Update progress bar value without animation
269 |         progress_bar.blockSignals(True)
270 |         progress_bar.setProperty("value", int(progress_value))
    |         ^
271 |         progress_bar.blockSignals(False)
    |

src_refactored\infrastructure\media\progress_tracking_service.py:271:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
269 |         progress_bar.blockSignals(True)
270 |         progress_bar.setProperty("value", int(progress_value))
271 |         progress_bar.blockSignals(False)
    |         ^
272 |
273 |         # Display message without triggering further updates
    |

src_refactored\infrastructure\media\progress_tracking_service.py:271:9: SyntaxError: Invalid annotated assignment target
    |
269 |         progress_bar.blockSignals(True)
270 |         progress_bar.setProperty("value", int(progress_value))
271 |         progress_bar.blockSignals(False)
    |         ^
272 |
273 |         # Display message without triggering further updates
    |

src_refactored\infrastructure\media\progress_tracking_service.py:274:51: SyntaxError: Expected 'else', found ':'
    |
273 |         # Display message without triggering further updates
274 |         if message_text and self.progress_callback:
    |                                                   ^
275 |             self.progress_callback(message_text, None, progress_value, True, None)
    |

src_refactored\infrastructure\media\progress_tracking_service.py:277:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
275 |             self.progress_callback(message_text, None, progress_value, True, None)
276 |
277 |     def set_update_interval(self, interval_ms: int,
    |     ^
278 |     ) -> None:
279 |         """Set the progress update interval.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:284:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
282 |             interval_ms: Update interval in milliseconds
283 |         """
284 |         self._update_interval = max(50, interval_ms)  # Minimum 50ms
    |         ^
285 |
286 |         if self._update_timer.isActive():
    |

src_refactored\infrastructure\media\progress_tracking_service.py:286:41: SyntaxError: Expected 'else', found ':'
    |
284 |         self._update_interval = max(50, interval_ms)  # Minimum 50ms
285 |
286 |         if self._update_timer.isActive():
    |                                         ^
287 |             self._update_timer.stop()
288 |             self._update_timer.start(self._update_interval)
    |

src_refactored\infrastructure\media\progress_tracking_service.py:288:13: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
286 |         if self._update_timer.isActive():
287 |             self._update_timer.stop()
288 |             self._update_timer.start(self._update_interval)
    |             ^
289 |
290 |     def _emit_progress_update(self) -> None:
    |

src_refactored\infrastructure\media\progress_tracking_service.py:290:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
288 |             self._update_timer.start(self._update_interval)
289 |
290 |     def _emit_progress_update(self) -> None:
    |     ^
291 |         """Emit progress update signal if percentage changed significantly."""
292 |         with self._lock:
    |

src_refactored\infrastructure\media\progress_tracking_service.py:292:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
290 |     def _emit_progress_update(self) -> None:
291 |         """Emit progress update signal if percentage changed significantly."""
292 |         with self._lock:
    |         ^
293 |             current_percentage = self._progress_info.percentage
    |

src_refactored\infrastructure\media\progress_tracking_service.py:298:93: SyntaxError: Expected 'else', found ':'
    |
296 |             if (abs(current_percentage - self._last_emitted_percentage,
297 |     ) >= 1.0 or
298 |                 self._progress_info.state in [ProgressState.COMPLETED, ProgressState.ERROR]):
    |                                                                                             ^
299 |
300 |                 self._last_emitted_percentage = current_percentage
    |

src_refactored\infrastructure\media\progress_tracking_service.py:301:17: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
300 |                 self._last_emitted_percentage = current_percentage
301 |                 message = self._progress_info.message
    |                 ^
302 |
303 |         # Emit signal outside of lock
    |

src_refactored\infrastructure\media\progress_tracking_service.py:304:9: SyntaxError: Simple statements must be separated by newlines or semicolons
    |
303 |         # Emit signal outside of lock
304 |         self.progress_updated.emit(current_percentage, message)
    |         ^
    |

src_refactored\infrastructure\media\progress_tracking_service.py:307:1: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
307 | class ProgressTrackingManager:
    | ^
308 |     """High-level manager for progress tracking operations."""
    |

src_refactored\infrastructure\media\progress_tracking_service.py:310:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
308 |     """High-level manager for progress tracking operations."""
309 |
310 |     def __init__(self):
    |     ^
311 |         self._services: dict[str, ProgressTrackingService] = {}
    |

src_refactored\infrastructure\media\progress_tracking_service.py:313:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
    |
311 |         self._services: dict[str, ProgressTrackingService] = {}
312 |
313 |     def create_tracker(self, tracker_id: str,
    |     ^
314 |                       progress_callback: Callable[[str,
315 | str | None, float | None, bool, bool | None], None] | None = (
    |

src_refactored\infrastructure\media\progress_tracking_service.py:316:11: SyntaxError: Expected ')', found '->'
    |
314 |                       progress_callback: Callable[[str,
315 | str | None, float | None, bool, bool | None], None] | None = (
316 |     None) -> ProgressTrackingService:)
    |           ^
317 |         """Create a new progress tracker.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:316:38: SyntaxError: Expected a simple statement
    |
314 |                       progress_callback: Callable[[str,
315 | str | None, float | None, bool, bool | None], None] | None = (
316 |     None) -> ProgressTrackingService:)
    |                                      ^
317 |         """Create a new progress tracker.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:316:39: SyntaxError: Expected a statement
    |
314 |                       progress_callback: Callable[[str,
315 | str | None, float | None, bool, bool | None], None] | None = (
316 |     None) -> ProgressTrackingService:)
    |                                       ^
317 |         """Create a new progress tracker.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:317:1: SyntaxError: Unexpected indentation
    |
315 | str | None, float | None, bool, bool | None], None] | None = (
316 |     None) -> ProgressTrackingService:)
317 |         """Create a new progress tracker.
    | ^
318 |         
319 |         Args:
    |

src_refactored\infrastructure\media\progress_tracking_service.py:330:1: SyntaxError: unindent does not match any outer indentation level
    |
328 |         return service
329 |
330 |     def get_tracker(self, tracker_id: str,
    | ^
331 |     ) -> ProgressTrackingService | None:
332 |         """Get an existing progress tracker.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:342:1: SyntaxError: unindent does not match any outer indentation level
    |
340 |         return self._services.get(tracker_id)
341 |
342 |     def remove_tracker(self, tracker_id: str,
    | ^
343 |     ) -> None:
344 |         """Remove a progress tracker.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:354:5: SyntaxError: unindent does not match any outer indentation level
    |
352 |             del self._services[tracker_id]
353 |
354 |     def get_all_progress_info(self,
    |     ^
355 |     ) -> dict[str, ProgressInfo]:
356 |         """Get progress information for all trackers.
    |

src_refactored\infrastructure\media\progress_tracking_service.py:364:1: SyntaxError: unindent does not match any outer indentation level
    |
362 |                 for tracker_id, service in self._services.items()}
363 |
364 |     def reset_all_trackers(self) -> None:
    | ^
365 |         """Reset all progress trackers."""
366 |         for service in self._services.values():
    |

src_refactored\infrastructure\media\progress_tracking_service.py:368:31: SyntaxError: Expected dedent, found end of file
    |
366 |         for service in self._services.values():
367 |             service.reset_progress()
368 |         self._services.clear()
    |                               ^
    |

src_refactored\infrastructure\media\video_conversion_service.py:151:17: SyntaxError: Expected ',', found string
    |
149 |                 "-i", video_path,
150 |                 "-ar", str(sample_rate)
151 |                 "-ac", str(channels)
    |                 ^
152 |                 "-loglevel", "error",
153 |                 "-y",  # Overwrite output file
    |

src_refactored\infrastructure\media\video_conversion_service.py:152:17: SyntaxError: Expected ',', found string
    |
150 |                 "-ar", str(sample_rate)
151 |                 "-ac", str(channels)
152 |                 "-loglevel", "error",
    |                 ^
153 |                 "-y",  # Overwrite output file
154 |                 output_path,
    |

src_refactored\infrastructure\media\video_conversion_service.py:174:101: E501 Line too long (104 > 100)
    |
172 |             if process.returncode == 0 and Path(output_path).exists():
173 |                 if self.progress_callback:
174 |                     self.progress_callback(f"File conversion successful: {Path(output_path).name}", 100)
    |                                                                                                     ^^^^ E501
175 |                 return True
    |

src_refactored\infrastructure\presentation\qt\application_bootstrap.py:185:13: TRY300 Consider moving this statement to an `else` block
    |
183 |             self._app.setWindowIcon(QIcon(icon_path),
184 |     )
185 |             return True
    |             ^^^^^^^^^^^ TRY300
186 |         except Exception:
187 |             return False
    |

src_refactored\infrastructure\presentation\qt\application_bootstrap.py:186:16: BLE001 Do not catch blind exception: `Exception`
    |
184 |     )
185 |             return True
186 |         except Exception:
    |                ^^^^^^^^^ BLE001
187 |             return False
    |

src_refactored\infrastructure\presentation\qt\application_bootstrap.py:325:16: BLE001 Do not catch blind exception: `Exception`
    |
323 |             # Execute application
324 |             return self.service.execute_application()
325 |         except Exception:
    |                ^^^^^^^^^ BLE001
326 |             return 1
    |

src_refactored\infrastructure\presentation\qt\hotkey_config_widget.py:20:101: E501 Line too long (101 > 100)
   |
19 | from src.core.utils import resource_path
20 | from src_refactored.application.use_cases.settings_management.reset_hotkey_settings_use_case import (
   |                                                                                                     ^ E501
21 |     ResetHotkeySettingsUseCase,
22 | )
   |

src_refactored\infrastructure\presentation\qt\hotkey_config_widget.py:23:101: E501 Line too long (102 > 100)
   |
21 |     ResetHotkeySettingsUseCase,
22 | )
23 | from src_refactored.application.use_cases.settings_management.update_hotkey_settings_use_case import (
   |                                                                                                     ^^ E501
24 |     UpdateHotkeySettingsUseCase,
25 | )
   |

src_refactored\infrastructure\presentation\qt\hotkey_config_widget.py:364:101: E501 Line too long (108 > 100)
    |
362 |         elif key == Qt.Key.Key_Right:
363 |             key_name = "Right"
364 |         elif (key >= Qt.Key.Key_A and key <= Qt.Key.Key_Z) or (key >= Qt.Key.Key_0 and key <= Qt.Key.Key_9):
    |                                                                                                     ^^^^^^^^ E501
365 |             key_name = chr(key)
366 |         else:
    |

src_refactored\infrastructure\presentation\qt\hotkey_config_widget.py:375:9: N802 Function name `keyPressEvent` should be lowercase
    |
373 |         return key_name
374 |
375 |     def keyPressEvent(self, event: QKeyEvent):
    |         ^^^^^^^^^^^^^ N802
376 |         """Handle key press events during capture mode.
    |

src_refactored\infrastructure\presentation\qt\llm_config_widget.py:527:13: SyntaxError: Expected ',', found name
    |
525 |             model_name=self._current_model,
526 |             quantization=QuantizationType.from_string(self._current_quantization)
527 |             system_prompt=self._current_prompt,
    |             ^
528 |         )
    |

src_refactored\infrastructure\presentation\qt\main_window.py:134:35: G004 Logging statement uses f-string
    |
132 |             self.logger.info("✅ Configuration loaded")
133 |         except Exception as e:
134 |             self.logger.exception(f"❌ Failed to load configuration: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
135 |             # Use default configuration
136 |             self.config = self._get_default_configuration()
    |

src_refactored\infrastructure\presentation\qt\main_window.py:134:70: TRY401 Redundant exception object included in `logging.exception` call
    |
132 |             self.logger.info("✅ Configuration loaded")
133 |         except Exception as e:
134 |             self.logger.exception(f"❌ Failed to load configuration: {e}")
    |                                                                       ^ TRY401
135 |             # Use default configuration
136 |             self.config = self._get_default_configuration()
    |

src_refactored\infrastructure\presentation\qt\main_window.py:257:37: FBT003 Boolean positional value in function call
    |
255 |         """Start audio recording."""
256 |         self.logger.info("🎤 Starting recording...")
257 |         self.recording_toggled.emit(True)
    |                                     ^^^^ FBT003
258 |
259 |         # Apply recording visual effects
    |

src_refactored\infrastructure\presentation\qt\main_window.py:265:37: FBT003 Boolean positional value in function call
    |
263 |         """Stop audio recording."""
264 |         self.logger.info("⏹️ Stopping recording...")
265 |         self.recording_toggled.emit(False)
    |                                     ^^^^^ FBT003
266 |
267 |         # Remove recording visual effects
    |

src_refactored\infrastructure\presentation\qt\main_window.py:291:9: N802 Function name `showEvent` should be lowercase
    |
289 |             self.transcription_requested.emit(file_path)
290 |
291 |     def showEvent(self, event) -> None:
    |         ^^^^^^^^^ N802
292 |         """Handle window show event."""
293 |         super().showEvent(event)
    |

src_refactored\infrastructure\presentation\qt\main_window.py:300:9: N802 Function name `closeEvent` should be lowercase
    |
298 |             self.started_listener = True
299 |
300 |     def closeEvent(self, event) -> None:
    |         ^^^^^^^^^^ N802
301 |         """Handle window close event."""
302 |         # Hide to system tray instead of closing
    |

src_refactored\infrastructure\presentation\qt\model_config_widget.py:25:101: E501 Line too long (101 > 100)
   |
23 |     ResetModelSettingsUseCase,
24 | )
25 | from src_refactored.application.use_cases.settings_management.update_model_settings_use_case import (
   |                                                                                                     ^ E501
26 |     UpdateModelSettingsUseCase,
27 | )
   |

src_refactored\infrastructure\presentation\qt\model_config_widget.py:359:34: ARG002 Unused method argument: `model`
    |
357 |             self.quantization_reset.emit()
358 |
359 |     def _requires_download(self, model: str,
    |                                  ^^^^^ ARG002
360 |     ) -> bool:
361 |         """Check if a model requires downloading.
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:16:101: E501 Line too long (101 > 100)
   |
14 | )
15 |
16 | from src_refactored.application.use_cases.progress_management.reparent_progress_bar_use_case import (
   |                                                                                                     ^ E501
17 |     ReparentProgressBarUseCase,
18 | )
   |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:19:101: E501 Line too long (101 > 100)
   |
17 |     ReparentProgressBarUseCase,
18 | )
19 | from src_refactored.application.use_cases.progress_management.update_progress_state_use_case import (
   |                                                                                                     ^ E501
20 |     UpdateProgressStateUseCase,
21 | )
   |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:120:63: FBT003 Boolean positional value in function call
    |
118 |         """Reset the progress bar moving flag."""
119 |         self._is_progress_bar_moving = False
120 |         self._current_state = self._current_state.with_moving(False)
    |                                                               ^^^^^ FBT003
121 |
122 |     def _get_progress_bar(self) -> QProgressBar | None:
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:171:13: TRY300 Consider moving this statement to an `else` block
    |
169 |             self.progress_placeholder.update()
170 |
171 |             return True
    |             ^^^^^^^^^^^ TRY300
172 |
173 |         except RuntimeError:
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:203:13: TRY300 Consider moving this statement to an `else` block
    |
201 |                 progress_bar.setParent(self.parent_window.centralwidget)
202 |
203 |             return True
    |             ^^^^^^^^^^^ TRY300
204 |
205 |         except RuntimeError:
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:226:17: FBT003 Boolean positional value in function call
    |
224 |             self._is_progress_bar_moving = True
225 |             self._current_state = self._current_state.with_moving(
226 |                 True, ProgressBarMovementState.REPARENTING,
    |                 ^^^^ FBT003
227 |             )
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:233:46: FBT003 Boolean positional value in function call
    |
232 |             if success:
233 |                 self.progress_bar_moved.emit(True)
    |                                              ^^^^ FBT003
234 |
235 |             # Start debounce timer
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:256:17: FBT003 Boolean positional value in function call
    |
254 |             self._is_progress_bar_moving = True
255 |             self._current_state = self._current_state.with_moving(
256 |                 True, ProgressBarMovementState.RESTORING,
    |                 ^^^^ FBT003
257 |             )
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:265:46: FBT003 Boolean positional value in function call
    |
263 |                 # Hide progress bar
264 |                 progress_bar.setVisible(False)
265 |                 self.progress_bar_moved.emit(False)
    |                                              ^^^^^ FBT003
266 |
267 |             # Start debounce timer
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:301:21: FBT003 Boolean positional value in function call
    |
299 |                 self._is_progress_bar_moving = True
300 |                 self._current_state = self._current_state.with_moving(
301 |                     True, ProgressBarMovementState.REPARENTING,
    |                     ^^^^ FBT003
302 |                 )
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:308:50: FBT003 Boolean positional value in function call
    |
307 |                 if success:
308 |                     self.progress_bar_moved.emit(True)
    |                                                  ^^^^ FBT003
309 |
310 |                 # Start debounce timer
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:325:21: FBT003 Boolean positional value in function call
    |
323 |                 self._is_progress_bar_moving = True
324 |                 self._current_state = self._current_state.with_moving(
325 |                     True, ProgressBarMovementState.RESTORING,
    |                     ^^^^ FBT003
326 |                 )
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:336:50: FBT003 Boolean positional value in function call
    |
334 |                     progress_bar.raise_()
335 |                     progress_bar.update()
336 |                     self.progress_bar_moved.emit(False)
    |                                                  ^^^^^ FBT003
337 |
338 |                 # Start debounce timer
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:430:46: FBT003 Boolean positional value in function call
    |
429 |             if success:
430 |                 self.progress_bar_moved.emit(False)
    |                                              ^^^^^ FBT003
431 |
432 |             # Start debounce timer
    |

src_refactored\infrastructure\presentation\qt\progress_management_widget.py:470:13: SIM105 Use `contextlib.suppress(RuntimeError)` instead of `try`-`except`-`pass`
    |
468 |           progress_bar = self._get_progress_bar()
469 |           if progress_bar is not None:
470 | /             try:
471 | |                 progress_bar.setVisible(visible)
472 | |             except RuntimeError:
473 | |                 # Progress bar has been deleted
474 | |                 pass
    | |____________________^ SIM105
475 |
476 |       def reset_progress(self):
    |
    = help: Replace with `contextlib.suppress(RuntimeError)`

src_refactored\infrastructure\presentation\qt\resource_management_component.py:317:101: E501 Line too long (105 > 100)
    |
316 |                     # Delete model attributes
317 |                     for attr in ["encoder_session", "decoder_session", "tokenizer", "feature_extractor"]:
    |                                                                                                     ^^^^^ E501
318 |                         if hasattr(model, attr):
319 |                             delattr(model, attr)
    |

src_refactored\infrastructure\presentation\qt\resource_management_component.py:444:36: SyntaxError: Expected an expression or a ')'
    |
442 |         try:
443 |             # Force garbage collection
444 |             collected = gc.collect(,
    |                                    ^
445 |     )
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:94:1: SyntaxError: Unexpected indentation
   |
92 | self.current_sound_path = (
93 |     config.get("sound_path", resource_path("resources/start_sound.wav")))
94 |         self.enable_rec_sound = config.get("recording_sound", True)
   | ^
95 |         self.current_output_srt = config.get("output_srt", False)
   |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:101:1: SyntaxError: Expected a statement
    |
 99 |         self.llm_model = config.get("llm_model", "microsoft/DialoGPT-medium")
100 |         self.llm_quantization = config.get("llm_quantization", "Full")
101 | self.llm_prompt = (
    | ^
102 |     config.get("llm_prompt", "Please correct any errors in the following text:"))
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:105:1: SyntaxError: Unexpected indentation
    |
104 |         # Default values
105 |         self.default_model = "whisper-turbo"
    | ^
106 |         self.default_quantization = "Full"
107 |         self.default_rec_key = "F2"
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:116:1: SyntaxError: unindent does not match any outer indentation level
    |
114 |         self.default_llm_prompt = "Please correct any errors in the following text:"
115 |
116 |     def _setup_ui(self):
    | ^
117 |         """Setup the user interface."""
118 |         self.setWindowTitle("Settings")
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:140:1: SyntaxError: unindent does not match any outer indentation level
    |
138 |         main_layout.addStretch()
139 |
140 |     def _apply_styling(self):
    | ^
141 |         """Apply dark theme styling to the dialog."""
142 |         # Color scheme
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:181:1: SyntaxError: unindent does not match any outer indentation level
    |
179 |         """)
180 |
181 |     def _create_recording_key_section(self, main_layout):
    | ^
182 |         """Create the recording key configuration section."""
183 |         rec_key_group = QGroupBox("Recording Key")
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:187:1: SyntaxError: Unexpected indentation
    |
185 |     self.section_bg_color)))
186 |
187 |         rec_key_layout = QVBoxLayout()
    | ^
188 |         rec_key_layout.setSpacing(8)
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:238:1: SyntaxError: unindent does not match any outer indentation level
    |
236 |         main_layout.addWidget(rec_key_group)
237 |
238 |     def _create_model_section(self, main_layout):
    | ^
239 |         """Create the model configuration section."""
240 |         model_group = QGroupBox("Model Settings")
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:255:101: E501 Line too long (101 > 100)
    |
254 |         self.model_combo = QComboBox()
255 |         self.model_combo.addItems(["whisper-turbo", "lite-whisper-turbo", "lite-whisper-turbo-fast"])
    |                                                                                                     ^ E501
256 |         self.model_combo.setCurrentText(self.current_model)
257 |         self.model_combo.setStyleSheet("""
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:292:101: E501 Line too long (106 > 100)
    |
291 |         self.quant_combo = QComboBox()
292 |         self.quant_combo.addItems(["Full", "Quantized"] if "lite" not in self.current_model else ["Full"])
    |                                                                                                     ^^^^^^ E501
293 |         self.quant_combo.setCurrentText(self.current_quantization)
294 |         self.quant_combo.setStyleSheet("""
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:318:1: SyntaxError: unindent does not match any outer indentation level
    |
316 |         main_layout.addWidget(model_group)
317 |
318 |     def _create_llm_section(self, main_layout):
    | ^
319 |         """Create the LLM configuration section."""
320 |         llm_group = QGroupBox("LLM Settings")
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:403:1: SyntaxError: unindent does not match any outer indentation level
    |
401 |         main_layout.addWidget(llm_group)
402 |
403 |     def _create_sound_section(self, main_layout):
    | ^
404 |         """Create the sound configuration section."""
405 |         sound_group = QGroupBox("Sound Settings")
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:474:1: SyntaxError: unindent does not match any outer indentation level
    |
472 |         main_layout.addWidget(sound_group)
473 |
474 |     def _create_output_section(self, main_layout):
    | ^
475 |         """Create the output configuration section."""
476 |         form_layout = QFormLayout()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:496:1: SyntaxError: unindent does not match any outer indentation level
    |
494 |         main_layout.addLayout(form_layout)
495 |
496 |     def _create_button_section(self, main_layout):
    | ^
497 |         """Create the button section."""
498 |         button_area = QWidget()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:526:1: SyntaxError: unindent does not match any outer indentation level
    |
524 |         main_layout.addWidget(button_area)
525 |
526 |     def _create_reset_button(self) -> QPushButton:
    | ^
527 |         """Create a standardized reset button."""
528 |         reset_btn = QPushButton()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:546:1: SyntaxError: unindent does not match any outer indentation level
    |
544 |         return reset_btn
545 |
546 |     def _create_divider(self) -> QFrame:
    | ^
547 |         """Create a standardized divider line."""
548 |         divider = QFrame()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:554:1: SyntaxError: unindent does not match any outer indentation level
    |
552 |         return divider
553 |
554 |     def _setup_connections(self):
    | ^
555 |         """Setup signal connections."""
556 |         # Model and quantization changes
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:578:1: SyntaxError: unindent does not match any outer indentation level
    |
576 |         self.reset_all_btn.clicked.connect(self._reset_all)
577 |
578 |     def _setup_event_filter(self):
    | ^
579 |         """Setup event filter for drag and drop and key recording."""
580 |         self.setAcceptDrops(True)
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:583:1: SyntaxError: unindent does not match any outer indentation level
    |
581 |         self.installEventFilter(self)
582 |
583 |     def _on_model_changed(self):
    | ^
584 |         """Handle model selection changes."""
585 |         model = self.model_combo.currentText()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:603:1: SyntaxError: unindent does not match any outer indentation level
    |
601 |         self.model_changed.emit(model)
602 |
603 |     def _on_quantization_changed(self):
    | ^
604 |         """Handle quantization selection changes."""
605 |         quantization = self.quant_combo.currentText()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:610:1: SyntaxError: unindent does not match any outer indentation level
    |
608 |         self.quantization_changed.emit(quantization)
609 |
610 |     def _on_recording_sound_changed(self):
    | ^
611 |         """Handle recording sound toggle changes."""
612 |         self.enable_rec_sound = self.sound_toggle.isChecked()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:615:1: SyntaxError: unindent does not match any outer indentation level
    |
613 |         self._save_settings()
614 |
615 |     def _on_sound_path_changed(self):
    | ^
616 |         """Handle sound path changes."""
617 |         # This will be triggered by drag and drop or manual editing
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:619:1: SyntaxError: unindent does not match any outer indentation level
    |
617 |         # This will be triggered by drag and drop or manual editing
618 |
619 |     def _on_llm_enabled_changed(self):
    | ^
620 |         """Handle LLM enabled toggle changes."""
621 |         self.llm_enabled = self.enable_llm_toggle.isChecked()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:624:1: SyntaxError: unindent does not match any outer indentation level
    |
622 |         self._save_settings()
623 |
624 |     def _on_llm_model_changed(self):
    | ^
625 |         """Handle LLM model selection changes."""
626 |         self.llm_model = self.llm_model_combo.currentText()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:629:1: SyntaxError: unindent does not match any outer indentation level
    |
627 |         self._save_settings()
628 |
629 |     def _on_llm_prompt_changed(self):
    | ^
630 |         """Handle LLM prompt changes."""
631 |         self.llm_prompt = self.llm_prompt_textbox.text()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:634:1: SyntaxError: unindent does not match any outer indentation level
    |
632 |         self._save_settings()
633 |
634 |     def _on_srt_output_changed(self):
    | ^
635 |         """Handle SRT output toggle changes."""
636 |         self.current_output_srt = self.srt_toggle.isChecked()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:639:1: SyntaxError: unindent does not match any outer indentation level
    |
637 |         self._save_settings()
638 |
639 |     def _toggle_rec_key_recording(self):
    | ^
640 |         """Toggle recording key capture mode."""
641 |         self.recording_key = not self.recording_key
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:655:5: SyntaxError: unindent does not match any outer indentation level
    |
653 |                 self.rec_key_edit.setText(self.current_rec_key)
654 |
655 |     def _reset_all(self):
    |     ^
656 |         """Reset all settings to defaults."""
657 |         # Reset all values to defaults
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:673:1: SyntaxError: unindent does not match any outer indentation level
    |
671 |         self._save_settings()
672 |
673 |     def _update_ui_from_settings(self):
    | ^
674 |         """Update UI controls from current settings."""
675 |         self.model_combo.setCurrentText(self.current_model)
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:686:1: SyntaxError: unindent does not match any outer indentation level
    |
684 |         self.llm_prompt_textbox.setText(self.llm_prompt)
685 |
686 |     def _save_settings(self):
    | ^
687 |         """Save current settings to configuration."""
688 |         config = {
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:703:1: SyntaxError: unindent does not match any outer indentation level
    |
701 |         self.settings_changed.emit(config)
702 |
703 |     def eventFilter(self, obj, event):
    | ^
704 |         """Handle drag and drop and key recording events."""
705 |         if event.type() == QEvent.Type.DragEnter:
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:740:22: SyntaxError: Expected an expression or a ')'
    |
738 |             return True
739 |
740 |         return super(,
    |                      ^
741 |     ).eventFilter(obj, event)
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:743:1: SyntaxError: unindent does not match any outer indentation level
    |
741 |     ).eventFilter(obj, event)
742 |
743 |     def _handle_key_press(self, event):
    | ^
744 |         """Handle key press events during key recording."""
745 |         key_text = self._get_key_name(event)
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:750:5: SyntaxError: unindent does not match any outer indentation level
    |
748 |             self._update_rec_key_display()
749 |
750 |     def _handle_key_release(self, event):
    |     ^
751 |         """Handle key release events during key recording."""
752 |         key_text = self._get_key_name(event)
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:757:5: SyntaxError: unindent does not match any outer indentation level
    |
755 |             self._update_rec_key_display()
756 |
757 |     def _update_rec_key_display(self):
    |     ^
758 |         """Update the recording key display."""
759 |         if len(self.pressed_keys) > 0:
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:763:5: SyntaxError: unindent does not match any outer indentation level
    |
761 |             self.rec_key_edit.setText(self.combination)
762 |
763 |     def _get_key_name(self, event) -> str | None:
    |     ^
764 |         """Get the printable name of a key."""
765 |         key = event.key()
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:789:1: SyntaxError: unindent does not match any outer indentation level
    |
788 |     # Public interface methods
789 |     def get_selected_model(self) -> str:
    | ^
790 |         """Get the currently selected model."""
791 |         return self.current_model
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:793:1: SyntaxError: unindent does not match any outer indentation level
    |
791 |         return self.current_model
792 |
793 |     def get_selected_quantization(self) -> str:
    | ^
794 |         """Get the currently selected quantization."""
795 |         return self.current_quantization
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:797:1: SyntaxError: unindent does not match any outer indentation level
    |
795 |         return self.current_quantization
796 |
797 |     def is_recording_sound_enabled(self) -> bool:
    | ^
798 |         """Check if recording sound is enabled."""
799 |         return self.enable_rec_sound
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:801:1: SyntaxError: unindent does not match any outer indentation level
    |
799 |         return self.enable_rec_sound
800 |
801 |     def is_srt_output_enabled(self) -> bool:
    | ^
802 |         """Check if SRT output is enabled."""
803 |         return self.current_output_srt
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:805:1: SyntaxError: unindent does not match any outer indentation level
    |
803 |         return self.current_output_srt
804 |
805 |     def get_sound_path(self) -> str:
    | ^
806 |         """Get the current sound file path."""
807 |         return self.current_sound_path
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:809:1: SyntaxError: unindent does not match any outer indentation level
    |
807 |         return self.current_sound_path
808 |
809 |     def is_llm_enabled(self) -> bool:
    | ^
810 |         """Check if LLM processing is enabled."""
811 |         return self.llm_enabled
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:813:1: SyntaxError: unindent does not match any outer indentation level
    |
811 |         return self.llm_enabled
812 |
813 |     def get_llm_model(self) -> str:
    | ^
814 |         """Get the currently selected LLM model."""
815 |         return self.llm_model
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:817:1: SyntaxError: unindent does not match any outer indentation level
    |
815 |         return self.llm_model
816 |
817 |     def get_llm_prompt(self) -> str:
    | ^
818 |         """Get the current LLM prompt."""
819 |         return self.llm_prompt
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:821:1: SyntaxError: unindent does not match any outer indentation level
    |
819 |         return self.llm_prompt
820 |
821 |     def get_recording_key(self) -> str:
    | ^
822 |         """Get the current recording key combination."""
823 |         return self.current_rec_key
    |

src_refactored\infrastructure\presentation\qt\settings_dialog.py:823:36: SyntaxError: Expected dedent, found end of file
    |
821 |     def get_recording_key(self) -> str:
822 |         """Get the current recording key combination."""
823 |         return self.current_rec_key
    |                                    ^
    |

src_refactored\infrastructure\presentation\qt\settings_event_filter.py:156:9: N802 Function name `eventFilter` should be lowercase
    |
154 |         self._key_release_handler = handler
155 |
156 |     def eventFilter(self, obj: QObject, event: QEvent) -> bool:
    |         ^^^^^^^^^^^ N802
157 |         """Filter events for the settings dialog.
    |

src_refactored\infrastructure\presentation\qt\settings_event_filter.py:187:16: BLE001 Do not catch blind exception: `Exception`
    |
185 |                 return self._handle_key_release(obj, event)
186 |
187 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
188 |             # Log error and continue
189 |             self.event_filtered.emit("error", f"Event filter error: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\settings_event_filter.py:223:61: PTH119 `os.path.basename()` should be replaced by `Path.name`
    |
221 |                 self._drag_enter_handler(file_path)
222 |
223 |             self.event_filtered.emit("drag_enter", f"File: {os.path.basename(file_path)}")
    |                                                             ^^^^^^^^^^^^^^^^ PTH119
224 |             return True
    |

src_refactored\infrastructure\presentation\qt\settings_event_filter.py:228:48: ARG002 Unused method argument: `event`
    |
226 |         return False
227 |
228 |     def _handle_drag_leave(self, obj: QObject, event: QEvent) -> bool:
    |                                                ^^^^^ ARG002
229 |         """Handle drag leave events.
    |

src_refactored\infrastructure\presentation\qt\settings_event_filter.py:290:63: PTH119 `os.path.basename()` should be replaced by `Path.name`
    |
288 |             event.acceptProposedAction()
289 |
290 |             self.event_filtered.emit("drop", f"File dropped: {os.path.basename(path)}")
    |                                                               ^^^^^^^^^^^^^^^^ PTH119
291 |             return True
    |

src_refactored\infrastructure\presentation\qt\settings_event_filter.py:295:33: ARG002 Unused method argument: `obj`
    |
293 |         return False
294 |
295 |     def _handle_key_press(self, obj: QObject, event: QKeyEvent) -> bool:
    |                                 ^^^ ARG002
296 |         """Handle key press events.
    |

src_refactored\infrastructure\presentation\qt\settings_event_filter.py:315:35: ARG002 Unused method argument: `obj`
    |
313 |         return True
314 |
315 |     def _handle_key_release(self, obj: QObject, event: QKeyEvent) -> bool:
    |                                   ^^^ ARG002
316 |         """Handle key release events.
    |

src_refactored\infrastructure\presentation\qt\settings_event_filter.py:428:13: SIM105 Use `contextlib.suppress(RuntimeError)` instead of `try`-`except`-`pass`
    |
426 |           """Reset cursors on all managed widgets."""
427 |           for widget in self._cursor_widgets:
428 | /             try:
429 | |                 widget.unsetCursor()
430 | |             except RuntimeError:
431 | |                 # Widget has been deleted
432 | |                 pass
    | |____________________^ SIM105
433 |
434 |       def cleanup(self):
    |
    = help: Replace with `contextlib.suppress(RuntimeError)`

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:212:36: G004 Logging statement uses f-string
    |
211 |         except Exception as e:
212 |             self._logger.exception(f"Error handling close event: {e}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
213 |             self.lifecycle_error.emit(f"Close error: {e!s}")
214 |             event.accept()  # Still close the dialog
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:212:67: TRY401 Redundant exception object included in `logging.exception` call
    |
211 |         except Exception as e:
212 |             self._logger.exception(f"Error handling close event: {e}")
    |                                                                   ^ TRY401
213 |             self.lifecycle_error.emit(f"Close error: {e!s}")
214 |             event.accept()  # Still close the dialog
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:227:47: FBT003 Boolean positional value in function call
    |
225 |             # Update UI state if downloading
226 |             if self._is_downloading_model:
227 |                 self._set_ui_elements_enabled(False)
    |                                               ^^^^^ FBT003
228 |
229 |             # Handle progress bar if downloading
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:241:36: G004 Logging statement uses f-string
    |
240 |         except Exception as e:
241 |             self._logger.exception(f"Error handling show event: {e}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
242 |             self.lifecycle_error.emit(f"Show error: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:241:66: TRY401 Redundant exception object included in `logging.exception` call
    |
240 |         except Exception as e:
241 |             self._logger.exception(f"Error handling show event: {e}")
    |                                                                  ^ TRY401
242 |             self.lifecycle_error.emit(f"Show error: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:255:47: FBT003 Boolean positional value in function call
    |
253 |             # Update UI state if downloading
254 |             if self._is_downloading_model:
255 |                 self._set_ui_elements_enabled(False)
    |                                               ^^^^^ FBT003
256 |
257 |             # Handle progress bar if downloading
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:269:36: G004 Logging statement uses f-string
    |
268 |         except Exception as e:
269 |             self._logger.exception(f"Error handling exec: {e}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
270 |             self.lifecycle_error.emit(f"Exec error: {e!s}")
271 |             return QDialog.DialogCode.Rejected
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:269:60: TRY401 Redundant exception object included in `logging.exception` call
    |
268 |         except Exception as e:
269 |             self._logger.exception(f"Error handling exec: {e}")
    |                                                            ^ TRY401
270 |             self.lifecycle_error.emit(f"Exec error: {e!s}")
271 |             return QDialog.DialogCode.Rejected
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:276:13: SIM105 Use `contextlib.suppress(TypeError, RuntimeError)` instead of `try`-`except`-`pass`
    |
274 |           """Clean up tracked signal connections."""
275 |           for signal, slot in self._signal_connections:
276 | /             try:
277 | |                 signal.disconnect(slot)
278 | |             except (TypeError, RuntimeError):
279 | |                 # Already disconnected or connection failed
280 | |                 pass
    | |____________________^ SIM105
281 |
282 |           self._signal_connections.clear()
    |
    = help: Replace with `contextlib.suppress(TypeError, RuntimeError)`

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:395:13: SIM105 Use `contextlib.suppress(RuntimeError)` instead of `try`-`except`-`pass`
    |
394 |           for element in self._ui_elements:
395 | /             try:
396 | |                 element.setEnabled(enabled)
397 | |             except RuntimeError:
398 | |                 # Widget has been deleted
399 | |                 pass
    | |____________________^ SIM105
400 |
401 |           self.ui_state_changed.emit(enabled)
    |
    = help: Replace with `contextlib.suppress(RuntimeError)`

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:449:39: FBT003 Boolean positional value in function call
    |
447 |     def force_enable_ui(self):
448 |         """Force enable all UI elements."""
449 |         self._set_ui_elements_enabled(True)
    |                                       ^^^^ FBT003
450 |
451 |     def force_disable_ui(self):
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:453:39: FBT003 Boolean positional value in function call
    |
451 |     def force_disable_ui(self):
452 |         """Force disable all UI elements."""
453 |         self._set_ui_elements_enabled(False)
    |                                       ^^^^^ FBT003
454 |
455 |     def reset_progress_bar_state(self):
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:495:36: G004 Logging statement uses f-string
    |
494 |         except Exception as e:
495 |             self._logger.exception(f"Error during cleanup: {e}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
496 |             self.lifecycle_error.emit(f"Cleanup error: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:495:61: TRY401 Redundant exception object included in `logging.exception` call
    |
494 |         except Exception as e:
495 |             self._logger.exception(f"Error during cleanup: {e}")
    |                                                             ^ TRY401
496 |             self.lifecycle_error.emit(f"Cleanup error: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:582:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
581 |               # Check progress bar consistency
582 | /             if self._progress_bar and self._is_progress_bar_moving:
583 | |                 # Should have original parent info
584 | |                 if not self._original_progress_parent:
    | |______________________________________________________^ SIM102
585 |                       return False
    |
    = help: Combine `if` statements using `and`

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:599:13: TRY300 Consider moving this statement to an `else` block
    |
598 |             # At least some elements should be valid if we have any
599 |             return not (self._ui_elements and valid_elements == 0)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
600 |
601 |         except Exception:
    |

src_refactored\infrastructure\presentation\qt\settings_lifecycle.py:601:16: BLE001 Do not catch blind exception: `Exception`
    |
599 |             return not (self._ui_elements and valid_elements == 0)
600 |
601 |         except Exception:
    |                ^^^^^^^^^ BLE001
602 |             return False
    |

src_refactored\infrastructure\presentation\qt\sound_config_widget.py:27:101: E501 Line too long (101 > 100)
   |
25 |     ResetSoundSettingsUseCase,
26 | )
27 | from src_refactored.application.use_cases.settings_management.update_sound_settings_use_case import (
   |                                                                                                     ^ E501
28 |     UpdateSoundSettingsUseCase,
29 | )
   |

src_refactored\infrastructure\presentation\qt\sound_config_widget.py:257:28: PTH119 `os.path.basename()` should be replaced by `Path.name`
    |
256 |         if self._current_sound_path:
257 |             display_text = os.path.basename(self._current_sound_path)
    |                            ^^^^^^^^^^^^^^^^ PTH119
258 |             tooltip_text = self._current_sound_path
259 |         else:
    |

src_refactored\infrastructure\presentation\qt\sound_config_widget.py:284:38: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
283 |         if self._current_sound_path:
284 |             file_dialog.setDirectory(os.path.dirname(self._current_sound_path))
    |                                      ^^^^^^^^^^^^^^^ PTH120
285 |
286 |         if file_dialog.exec() == QFileDialog.DialogCode.Accepted:
    |

src_refactored\infrastructure\presentation\qt\sound_config_widget.py:317:16: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
    |
315 |         """
316 |         valid_extensions = {".wav", ".mp3", ".ogg", ".flac", ".aac", ".m4a", ".wma"}
317 |         return os.path.splitext(file_path.lower())[1] in valid_extensions
    |                ^^^^^^^^^^^^^^^^ PTH122
318 |
319 |     # Event handling for drag and drop
    |

src_refactored\infrastructure\presentation\qt\sound_config_widget.py:320:9: N802 Function name `dragEnterEvent` should be lowercase
    |
319 |     # Event handling for drag and drop
320 |     def dragEnterEvent(self, event: QDragEnterEvent):
    |         ^^^^^^^^^^^^^^ N802
321 |         """Handle drag enter events.
    |

src_refactored\infrastructure\presentation\qt\sound_config_widget.py:335:9: N802 Function name `dropEvent` should be lowercase
    |
333 |         event.ignore()
334 |
335 |     def dropEvent(self, event: QDropEvent):
    |         ^^^^^^^^^ N802
336 |         """Handle drop events.
    |

src_refactored\infrastructure\presentation\qt\sound_config_widget.py:351:9: N802 Function name `eventFilter` should be lowercase
    |
349 |         event.ignore()
350 |
351 |     def eventFilter(self, obj, event: QEvent) -> bool:
    |         ^^^^^^^^^^^ N802
352 |         """Filter events for child widgets.
    |

src_refactored\infrastructure\presentation\qt\sound_config_widget.py:474:50: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
472 |             True if a sound file is selected, False otherwise
473 |         """
474 |         return bool(self._current_sound_path and os.path.exists(self._current_sound_path))
    |                                                  ^^^^^^^^^^^^^^ PTH110
475 |
476 |     def validate_sound_file(self) -> bool:
    |

src_refactored\infrastructure\presentation\qt\sound_config_widget.py:485:17: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
483 |             return True  # Empty path is valid (no sound)
484 |
485 |         return (os.path.exists(self._current_sound_path) and
    |                 ^^^^^^^^^^^^^^ PTH110
486 |                 self._is_valid_audio_file(self._current_sound_path))
    |

src_refactored\infrastructure\presentation\qt\toggle_switch_widget.py:181:13: SyntaxError: Expected ',', found string
    |
179 |         return {
180 |             "checked": self.isChecked()
181 |             "value": self.value()
    |             ^
182 |             "enabled": self.isEnabled()
183 |             "visible": self.isVisible(),
    |

src_refactored\infrastructure\presentation\qt\toggle_switch_widget.py:182:13: SyntaxError: Expected ',', found string
    |
180 |             "checked": self.isChecked()
181 |             "value": self.value()
182 |             "enabled": self.isEnabled()
    |             ^
183 |             "visible": self.isVisible(),
184 |         }
    |

src_refactored\infrastructure\presentation\qt\toggle_switch_widget.py:183:13: SyntaxError: Expected ',', found string
    |
181 |             "value": self.value()
182 |             "enabled": self.isEnabled()
183 |             "visible": self.isVisible(),
    |             ^
184 |         }
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:96:35: G004 Logging statement uses f-string
   |
95 |         except Exception as e:
96 |             self.logger.exception(f"Failed to setup translation: {e}")
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
97 |
98 |     def _register_main_window_widgets(self, main_window: QMainWindow,
   |

src_refactored\infrastructure\presentation\qt\translation_component.py:96:67: TRY401 Redundant exception object included in `logging.exception` call
   |
95 |         except Exception as e:
96 |             self.logger.exception(f"Failed to setup translation: {e}")
   |                                                                   ^ TRY401
97 |
98 |     def _register_main_window_widgets(self, main_window: QMainWindow,
   |

src_refactored\infrastructure\presentation\qt\translation_component.py:128:16: BLE001 Do not catch blind exception: `Exception`
    |
126 |             self.logger.debug("Current language: {self.current_language}")
127 |
128 |         except Exception:
    |                ^^^^^^^^^ BLE001
129 |             self.logger.warning("Failed to load language settings: {e}")
130 |             self.current_language = "en"  # Fallback to English
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:167:16: BLE001 Do not catch blind exception: `Exception`
    |
165 |             self.logger.debug("Recording key display setup: {self.recording_key}")
166 |
167 |         except Exception:
    |                ^^^^^^^^^ BLE001
168 |             self.logger.warning("Failed to setup recording key display: {e}")
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:204:13: TRY300 Consider moving this statement to an `else` block
    |
202 |                 translated_text = translated_text.format(**kwargs)
203 |
204 |             return translated_text
    |             ^^^^^^^^^^^^^^^^^^^^^^ TRY300
205 |
206 |         except Exception as e:
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:207:35: G004 Logging statement uses f-string
    |
206 |         except Exception as e:
207 |             self.logger.exception(f"Failed to get text for key '{key}': {e}",
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
208 |     )
209 |             return key  # Fallback to key itself
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:207:74: TRY401 Redundant exception object included in `logging.exception` call
    |
206 |         except Exception as e:
207 |             self.logger.exception(f"Failed to get text for key '{key}': {e}",
    |                                                                          ^ TRY401
208 |     )
209 |             return key  # Fallback to key itself
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:297:35: G004 Logging statement uses f-string
    |
296 |         except Exception as e:
297 |             self.logger.exception(f"Failed to change language: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
298 |
299 |     def add_text_mapping(self, key: str, text: str,
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:297:65: TRY401 Redundant exception object included in `logging.exception` call
    |
296 |         except Exception as e:
297 |             self.logger.exception(f"Failed to change language: {e}")
    |                                                                 ^ TRY401
298 |
299 |     def add_text_mapping(self, key: str, text: str,
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:365:13: TRY300 Consider moving this statement to an `else` block
    |
363 |             if hours > 0:
364 |                 return f"{hours:02d}:{minutes:02d}:{secs:02d}"
365 |             return f"{minutes:02d}:{secs:02d}"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
366 |
367 |         except Exception as e:
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:368:35: G004 Logging statement uses f-string
    |
367 |         except Exception as e:
368 |             self.logger.exception(f"Failed to format time duration: {e}",
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
369 |     )
370 |             return "00:00"
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:368:70: TRY401 Redundant exception object included in `logging.exception` call
    |
367 |         except Exception as e:
368 |             self.logger.exception(f"Failed to format time duration: {e}",
    |                                                                      ^ TRY401
369 |     )
370 |             return "00:00"
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:384:33: PLR2004 Magic value used in comparison, consider replacing `1024.0` with a constant variable
    |
382 |         try:
383 |             for unit in ["B", "KB", "MB", "GB"]:
384 |                 if size_bytes < 1024.0:
    |                                 ^^^^^^ PLR2004
385 |                     return f"{size_bytes:.1f} {unit}"
386 |                 size_bytes /= 1024.0
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:387:13: TRY300 Consider moving this statement to an `else` block
    |
385 |                     return f"{size_bytes:.1f} {unit}"
386 |                 size_bytes /= 1024.0
387 |             return f"{size_bytes:.1f} TB"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
388 |
389 |         except Exception as e:
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:390:35: G004 Logging statement uses f-string
    |
389 |         except Exception as e:
390 |             self.logger.exception(f"Failed to format file size: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
391 |             return "0 B"
    |

src_refactored\infrastructure\presentation\qt\translation_component.py:390:66: TRY401 Redundant exception object included in `logging.exception` call
    |
389 |         except Exception as e:
390 |             self.logger.exception(f"Failed to format file size: {e}")
    |                                                                  ^ TRY401
391 |             return "0 B"
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:206:41: DTZ003 `datetime.datetime.utcnow()` used
    |
204 |                 return init_result
205 |
206 |             self._initialization_time = datetime.utcnow()
    |                                         ^^^^^^^^^^^^^^^^^ DTZ003
207 |             self._set_state(UIState.READY)
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:209:30: G004 Logging statement uses f-string
    |
207 |             self._set_state(UIState.READY)
208 |
209 |             self.logger.info(f"Component {self._component_id} initialized successfully")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
210 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:231:37: G004 Logging statement uses f-string
    |
229 |             cleanup_result = self._do_cleanup()
230 |             if not cleanup_result.is_success:
231 |                 self.logger.warning(f"Cleanup issues for component {self._component_id}: {cleanup_result.error()}")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
232 |
233 |             self._cleanup_time = datetime.utcnow()
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:231:101: E501 Line too long (115 > 100)
    |
229 |             cleanup_result = self._do_cleanup()
230 |             if not cleanup_result.is_success:
231 |                 self.logger.warning(f"Cleanup issues for component {self._component_id}: {cleanup_result.error()}")
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
232 |
233 |             self._cleanup_time = datetime.utcnow()
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:233:34: DTZ003 `datetime.datetime.utcnow()` used
    |
231 |                 self.logger.warning(f"Cleanup issues for component {self._component_id}: {cleanup_result.error()}")
232 |
233 |             self._cleanup_time = datetime.utcnow()
    |                                  ^^^^^^^^^^^^^^^^^ DTZ003
234 |             self._set_state(UIState.DISPOSED)
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:240:30: G004 Logging statement uses f-string
    |
238 |             self._event_history.clear()
239 |
240 |             self.logger.info(f"Component {self._component_id} cleaned up successfully")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
241 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:294:47: G004 Logging statement uses f-string
    |
292 |                         handler.handle_event(event)
293 |                     except Exception as e:
294 |                         self.logger.exception(f"Error in event handler: {e}")
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
295 |
296 |             # Emit PyQt signal
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:294:74: TRY401 Redundant exception object included in `logging.exception` call
    |
292 |                         handler.handle_event(event)
293 |                     except Exception as e:
294 |                         self.logger.exception(f"Error in event handler: {e}")
    |                                                                          ^ TRY401
295 |
296 |             # Emit PyQt signal
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:300:35: G004 Logging statement uses f-string
    |
299 |         except Exception as e:
300 |             self.logger.exception(f"Error emitting event: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
301 |
302 |     def get_event_history(self, event_type: UIEventType = None, limit: int | None = None) -> list[UIEvent]:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:300:60: TRY401 Redundant exception object included in `logging.exception` call
    |
299 |         except Exception as e:
300 |             self.logger.exception(f"Error emitting event: {e}")
    |                                                            ^ TRY401
301 |
302 |     def get_event_history(self, event_type: UIEventType = None, limit: int | None = None) -> list[UIEvent]:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:302:101: E501 Line too long (107 > 100)
    |
300 |             self.logger.exception(f"Error emitting event: {e}")
301 |
302 |     def get_event_history(self, event_type: UIEventType = None, limit: int | None = None) -> list[UIEvent]:
    |                                                                                                     ^^^^^^^ E501
303 |         """Get event history.
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:338:18: DTZ003 `datetime.datetime.utcnow()` used
    |
336 |             "handler_count": len(self._event_handlers),
337 |             "uptime_seconds": (
338 |                 (datetime.utcnow() - self._initialization_time).total_seconds()
    |                  ^^^^^^^^^^^^^^^^^ DTZ003
339 |                 if self._initialization_time else 0
340 |             ),
    |
    = help: Use `datetime.datetime.now(tz=...)` instead

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:361:27: G004 Logging statement uses f-string
    |
359 |         })
360 |
361 |         self.logger.debug(f"State changed from {old_state.value} to {new_state.value}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
362 |
363 |     def _add_to_event_history(self, event: UIEvent) -> None:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:455:16: BLE001 Do not catch blind exception: `Exception`
    |
453 |                 self._widget.focusOutEvent = focus_out_wrapper
454 |
455 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
456 |             self.logger.warning(f"Failed to connect some widget signals: {e}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:456:33: G004 Logging statement uses f-string
    |
455 |         except Exception as e:
456 |             self.logger.warning(f"Failed to connect some widget signals: {e}")
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
457 |
458 |     def _do_initialize(self) -> Result[None]:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:467:16: BLE001 Do not catch blind exception: `Exception`
    |
465 |             return Result.success(None)
466 |
467 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
468 |             return Result.failure(f"Widget initialization failed: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:483:16: BLE001 Do not catch blind exception: `Exception`
    |
481 |             return Result.success(None)
482 |
483 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
484 |             return Result.failure(f"Widget cleanup failed: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:547:16: BLE001 Do not catch blind exception: `Exception`
    |
545 |                 )
546 |
547 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
548 |             self.logger.warning(f"Failed to connect dialog signals: {e}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:548:33: G004 Logging statement uses f-string
    |
547 |         except Exception as e:
548 |             self.logger.warning(f"Failed to connect dialog signals: {e}")
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:613:30: G004 Logging statement uses f-string
    |
612 |             self.component_registered.emit(component_id)
613 |             self.logger.info(f"Component {component_id} registered successfully")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
614 |
615 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:641:37: G004 Logging statement uses f-string
    |
639 |             cleanup_result = component.cleanup()
640 |             if not cleanup_result.is_success:
641 |                 self.logger.warning(f"Component cleanup issues: {cleanup_result.error()}")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
642 |
643 |             # Remove from tracking
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:652:30: G004 Logging statement uses f-string
    |
651 |             self.component_unregistered.emit(component_id)
652 |             self.logger.info(f"Component {component_id} unregistered successfully")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
653 |
654 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:691:43: G004 Logging statement uses f-string
    |
689 |                     else:
690 |                         failed_components.append((component_id, init_result.error()))
691 |                         self.logger.error(f"Failed to initialize {component_id}: {init_result.error()}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
692 |                 except Exception as e:
693 |                     failed_components.append((component_id, str(e)))
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:691:101: E501 Line too long (104 > 100)
    |
689 |                     else:
690 |                         failed_components.append((component_id, init_result.error()))
691 |                         self.logger.error(f"Failed to initialize {component_id}: {init_result.error()}")
    |                                                                                                     ^^^^ E501
692 |                 except Exception as e:
693 |                     failed_components.append((component_id, str(e)))
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:694:43: G004 Logging statement uses f-string
    |
692 |                 except Exception as e:
693 |                     failed_components.append((component_id, str(e)))
694 |                     self.logger.exception(f"Exception initializing {component_id}: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
695 |
696 |             if failed_components:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:694:85: TRY401 Redundant exception object included in `logging.exception` call
    |
692 |                 except Exception as e:
693 |                     failed_components.append((component_id, str(e)))
694 |                     self.logger.exception(f"Exception initializing {component_id}: {e}")
    |                                                                                     ^ TRY401
695 |
696 |             if failed_components:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:700:30: G004 Logging statement uses f-string
    |
698 |                 return Result.failure(error_msg)
699 |
700 |             self.logger.info(f"Successfully initialized {len(self._components)} components")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
701 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:736:47: G004 Logging statement uses f-string
    |
734 |                     except Exception as e:
735 |                         failed_cleanups.append((component_id, str(e)))
736 |                         self.logger.exception(f"Exception cleaning up {component_id}: {e}")
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
737 |
738 |             # Clear all components
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:736:88: TRY401 Redundant exception object included in `logging.exception` call
    |
734 |                     except Exception as e:
735 |                         failed_cleanups.append((component_id, str(e)))
736 |                         self.logger.exception(f"Exception cleaning up {component_id}: {e}")
    |                                                                                        ^ TRY401
737 |
738 |             # Clear all components
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:745:37: G004 Logging statement uses f-string
    |
744 |             if failed_cleanups:
745 |                 self.logger.warning(f"Failed to cleanup {len(failed_cleanups)} components")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
746 |
747 |             self.logger.info("Component cleanup completed")
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:781:27: G004 Logging statement uses f-string
    |
779 |             new_state: New state value
780 |         """
781 |         self.logger.debug(f"Component {component_id} state changed to {new_state}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
782 |
783 |     def _on_component_error(self, component_id: str, error_message: str):
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:790:27: G004 Logging statement uses f-string
    |
788 |             error_message: Error message
789 |         """
790 |         self.logger.error(f"Component {component_id} error: {error_message}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
791 |         self.lifecycle_error.emit(component_id, error_message)
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:806:34: G004 Logging statement uses f-string
    |
805 |             if disposed_components:
806 |                 self.logger.info(f"Removed {len(disposed_components)} disposed components")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
807 |
808 |         except Exception as e:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:809:35: G004 Logging statement uses f-string
    |
808 |         except Exception as e:
809 |             self.logger.exception(f"Error during periodic maintenance: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:809:73: TRY401 Redundant exception object included in `logging.exception` call
    |
808 |         except Exception as e:
809 |             self.logger.exception(f"Error during periodic maintenance: {e}")
    |                                                                         ^ TRY401
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:841:101: E501 Line too long (127 > 100)
    |
839 |         self.logger = logging.getLogger(__name__)
840 |
841 |     def subscribe(self, event_type: UIEventType, callback: Callable[[UIEvent], None], subscriber_id: str | None = None) -> str:
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
842 |         """Subscribe to events of a specific type.
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:868:27: G004 Logging statement uses f-string
    |
867 |         self.subscriber_added.emit(event_type.value, subscriber_id)
868 |         self.logger.debug(f"Subscriber {subscriber_id} added for {event_type.value}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
869 |
870 |         return subscriber_id
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:889:27: G004 Logging statement uses f-string
    |
887 |                 del self._subscriber_ids[subscriber_id]
888 |
889 |         self.logger.debug(f"Subscriber {subscriber_id} unsubscribed")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
890 |
891 |     def publish(self, event: UIEvent) -> None:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:904:43: G004 Logging statement uses f-string
    |
902 |                     callback(event)
903 |                 except Exception as e:
904 |                     self.logger.exception(f"Error in event subscriber: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
905 |
906 |             self._event_count += 1
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:904:73: TRY401 Redundant exception object included in `logging.exception` call
    |
902 |                     callback(event)
903 |                 except Exception as e:
904 |                     self.logger.exception(f"Error in event subscriber: {e}")
    |                                                                         ^ TRY401
905 |
906 |             self._event_count += 1
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:910:35: G004 Logging statement uses f-string
    |
909 |         except Exception as e:
910 |             self.logger.exception(f"Error publishing event: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
911 |
912 |     def get_statistics(self) -> dict[str, Any]:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:910:62: TRY401 Redundant exception object included in `logging.exception` call
    |
909 |         except Exception as e:
910 |             self.logger.exception(f"Error publishing event: {e}")
    |                                                              ^ TRY401
911 |
912 |     def get_statistics(self) -> dict[str, Any]:
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:962:101: E501 Line too long (103 > 100)
    |
961 |     @staticmethod
962 |     def preserve_signal_connections(source_widget: QWidget, target_component: UIComponentBase) -> None:
    |                                                                                                     ^^^ E501
963 |         """Preserve existing signal connections when migrating to components.
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:973:101: E501 Line too long (103 > 100)
    |
972 |     @staticmethod
973 |     def migrate_widget_properties(source_widget: QWidget, target_component: UIWidgetComponent) -> None:
    |                                                                                                     ^^^ E501
974 |         """Migrate widget properties to component configuration.
    |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:1005:13: SLF001 Private member accessed: `_configuration`
     |
1003 |             )
1004 |
1005 |             target_component._configuration = updated_config
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
1006 |
1007 |         except Exception as e:
     |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:1007:16: BLE001 Do not catch blind exception: `Exception`
     |
1005 |             target_component._configuration = updated_config
1006 |
1007 |         except Exception as e:
     |                ^^^^^^^^^ BLE001
1008 |             logging.getLogger(__name__).warning(f"Failed to migrate some properties: {e}")
     |

src_refactored\infrastructure\presentation\qt\ui_core_abstractions.py:1008:49: G004 Logging statement uses f-string
     |
1007 |         except Exception as e:
1008 |             logging.getLogger(__name__).warning(f"Failed to migrate some properties: {e}")
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:25:37: F821 Undefined name `QLayout`
   |
23 | T = TypeVar("T")
24 | TWidget = TypeVar("TWidget", bound=QWidget)
25 | TLayout = TypeVar("TLayout", bound="QLayout")
   |                                     ^^^^^^^ F821
   |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:193:17: SLF001 Private member accessed: `_view_model`
    |
191 |             else:
192 |                 # Store as property
193 |                 target._view_model = view_model
    |                 ^^^^^^^^^^^^^^^^^^ SLF001
194 |             
195 |             # Connect ViewModel signals to View slots if they exist
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:198:30: G004 Logging statement uses f-string
    |
196 |             self._connect_view_model_signals(target, view_model)
197 |             
198 |             self.logger.info(f"MVVM pattern applied to {target.__class__.__name__}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
199 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:235:16: BLE001 Do not catch blind exception: `Exception`
    |
233 |             return Result.success(None)
234 |             
235 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
236 |             return Result.failure(f"MVVM validation failed: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:260:39: G004 Logging statement uses f-string
    |
258 |                     slot = getattr(view, slot_name)
259 |                     signal.connect(slot)
260 |                     self.logger.debug(f"Connected {signal_name} to {slot_name}")
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
261 |             
262 |         except Exception as e:
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:262:16: BLE001 Do not catch blind exception: `Exception`
    |
260 |                     self.logger.debug(f"Connected {signal_name} to {slot_name}")
261 |             
262 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
263 |             self.logger.warning(f"Failed to connect some ViewModel signals: {e}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:263:33: G004 Logging statement uses f-string
    |
262 |         except Exception as e:
263 |             self.logger.warning(f"Failed to connect some ViewModel signals: {e}")
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:297:13: SLF001 Private member accessed: `_observers`
    |
295 |         try:
296 |             # Add observer methods to target
297 |             target._observers = {}
    |             ^^^^^^^^^^^^^^^^^ SLF001
298 |             target.add_observer = lambda event, callback: self._add_observer(target, event, callback)
299 |             target.remove_observer = lambda event, callback: self._remove_observer(target, event, callback)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:298:101: E501 Line too long (101 > 100)
    |
296 |             # Add observer methods to target
297 |             target._observers = {}
298 |             target.add_observer = lambda event, callback: self._add_observer(target, event, callback)
    |                                                                                                     ^ E501
299 |             target.remove_observer = lambda event, callback: self._remove_observer(target, event, callback)
300 |             target.notify_observers = lambda event, data=None: self._notify_observers(target, event, data)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:299:101: E501 Line too long (107 > 100)
    |
297 |             target._observers = {}
298 |             target.add_observer = lambda event, callback: self._add_observer(target, event, callback)
299 |             target.remove_observer = lambda event, callback: self._remove_observer(target, event, callback)
    |                                                                                                     ^^^^^^^ E501
300 |             target.notify_observers = lambda event, data=None: self._notify_observers(target, event, data)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:300:101: E501 Line too long (106 > 100)
    |
298 |             target.add_observer = lambda event, callback: self._add_observer(target, event, callback)
299 |             target.remove_observer = lambda event, callback: self._remove_observer(target, event, callback)
300 |             target.notify_observers = lambda event, data=None: self._notify_observers(target, event, data)
    |                                                                                                     ^^^^^^ E501
301 |             
302 |             self.logger.info(f"Observer pattern applied to {target.__class__.__name__}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:302:30: G004 Logging statement uses f-string
    |
300 |             target.notify_observers = lambda event, data=None: self._notify_observers(target, event, data)
301 |             
302 |             self.logger.info(f"Observer pattern applied to {target.__class__.__name__}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
303 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:370:43: G004 Logging statement uses f-string
    |
368 |                     callback(data)
369 |                 except Exception as e:
370 |                     self.logger.exception(f"Error in observer callback: {e}")
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:370:74: TRY401 Redundant exception object included in `logging.exception` call
    |
368 |                     callback(data)
369 |                 except Exception as e:
370 |                     self.logger.exception(f"Error in observer callback: {e}")
    |                                                                          ^ TRY401
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:407:13: SLF001 Private member accessed: `_commands`
    |
405 |         try:
406 |             # Add command methods to target
407 |             target._commands = {}
    |             ^^^^^^^^^^^^^^^^ SLF001
408 |             target._command_history = []
409 |             target.register_command = lambda name, command: self._register_command(target, name, command)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:408:13: SLF001 Private member accessed: `_command_history`
    |
406 |             # Add command methods to target
407 |             target._commands = {}
408 |             target._command_history = []
    |             ^^^^^^^^^^^^^^^^^^^^^^^ SLF001
409 |             target.register_command = lambda name, command: self._register_command(target, name, command)
410 |             target.execute_command = lambda name, *args, **kwargs: self._execute_command(target, name, *args, **kwargs)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:409:101: E501 Line too long (105 > 100)
    |
407 |             target._commands = {}
408 |             target._command_history = []
409 |             target.register_command = lambda name, command: self._register_command(target, name, command)
    |                                                                                                     ^^^^^ E501
410 |             target.execute_command = lambda name, *args, **kwargs: self._execute_command(target, name, *args, **kwargs)
411 |             target.undo_last_command = lambda: self._undo_last_command(target)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:410:101: E501 Line too long (119 > 100)
    |
408 |             target._command_history = []
409 |             target.register_command = lambda name, command: self._register_command(target, name, command)
410 |             target.execute_command = lambda name, *args, **kwargs: self._execute_command(target, name, *args, **kwargs)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^ E501
411 |             target.undo_last_command = lambda: self._undo_last_command(target)
412 |             target.get_command_history = lambda: self._get_command_history(target)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:414:30: G004 Logging statement uses f-string
    |
412 |             target.get_command_history = lambda: self._get_command_history(target)
413 |             
414 |             self.logger.info(f"Command pattern applied to {target.__class__.__name__}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
415 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:431:101: E501 Line too long (110 > 100)
    |
429 |             Result indicating validation success or failure
430 |         """
431 |         required_methods = ["register_command", "execute_command", "undo_last_command", "get_command_history"]
    |                                                                                                     ^^^^^^^^^^ E501
432 |         
433 |         for method in required_methods:
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:483:21: SLF001 Private member accessed: `_command_history`
    |
481 |                 if len(history) > self._max_history:
482 |                     history = history[-self._max_history:]
483 |                     target._command_history = history
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ SLF001
484 |             
485 |             return result
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:485:13: TRY300 Consider moving this statement to an `else` block
    |
483 |                     target._command_history = history
484 |             
485 |             return result
    |             ^^^^^^^^^^^^^ TRY300
486 |             
487 |         except Exception as e:
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:487:16: BLE001 Do not catch blind exception: `Exception`
    |
485 |             return result
486 |             
487 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
488 |             return Result.failure(f"Command execution failed: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:509:16: BLE001 Do not catch blind exception: `Exception`
    |
507 |             return Result.failure("Last command does not support undo")
508 |             
509 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
510 |             return Result.failure(f"Undo failed: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:581:28: BLE001 Do not catch blind exception: `Exception`
    |
579 |                     try:
580 |                         getattr(layout, prop_name)(prop_value)
581 |                     except Exception as e:
    |                            ^^^^^^^^^ BLE001
582 |                         self.logger.warning(f"Failed to set layout property {prop_name}: {e}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:582:45: G004 Logging statement uses f-string
    |
580 |                         getattr(layout, prop_name)(prop_value)
581 |                     except Exception as e:
582 |                         self.logger.warning(f"Failed to set layout property {prop_name}: {e}")
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
583 |             
584 |             self.logger.info(f"Created {config.layout_type.value} layout")
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:584:30: G004 Logging statement uses f-string
    |
582 |                         self.logger.warning(f"Failed to set layout property {prop_name}: {e}")
583 |             
584 |             self.logger.info(f"Created {config.layout_type.value} layout")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
585 |             return Result.success(layout)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:610:50: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
608 |                     layout.addWidget(widget)
609 |             elif isinstance(layout, QGridLayout):
610 |                 if position and len(position) >= 2:
    |                                                  ^ PLR2004
611 |                     row, col = position[0], position[1]
612 |                     rowspan = position[2] if len(position) > 2 else 1
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:612:62: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
610 |                 if position and len(position) >= 2:
611 |                     row, col = position[0], position[1]
612 |                     rowspan = position[2] if len(position) > 2 else 1
    |                                                              ^ PLR2004
613 |                     colspan = position[3] if len(position) > 3 else 1
614 |                     layout.addWidget(widget, row, col, rowspan, colspan)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:613:62: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
611 |                     row, col = position[0], position[1]
612 |                     rowspan = position[2] if len(position) > 2 else 1
613 |                     colspan = position[3] if len(position) > 3 else 1
    |                                                              ^ PLR2004
614 |                     layout.addWidget(widget, row, col, rowspan, colspan)
615 |                 else:
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:709:45: G004 Logging statement uses f-string
    |
707 |                         palette.setColor(role, color_value)
708 |                     except AttributeError:
709 |                         self.logger.warning(f"Unknown palette role: {role_name}")
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
710 |                 
711 |                 widget.setPalette(palette)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:719:32: BLE001 Do not catch blind exception: `Exception`
    |
717 |                         try:
718 |                             getattr(widget, prop_name)(prop_value)
719 |                         except Exception as e:
    |                                ^^^^^^^^^ BLE001
720 |                             self.logger.warning(f"Failed to set property {prop_name}: {e}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:720:49: G004 Logging statement uses f-string
    |
718 |                             getattr(widget, prop_name)(prop_value)
719 |                         except Exception as e:
720 |                             self.logger.warning(f"Failed to set property {prop_name}: {e}")
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
721 |             
722 |             self.logger.info(f"Applied theme '{theme_name}' to {widget.__class__.__name__}")
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:722:30: G004 Logging statement uses f-string
    |
720 |                             self.logger.warning(f"Failed to set property {prop_name}: {e}")
721 |             
722 |             self.logger.info(f"Applied theme '{theme_name}' to {widget.__class__.__name__}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
723 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:756:30: G004 Logging statement uses f-string
    |
754 |         try:
755 |             self._themes[theme_name] = theme_config
756 |             self.logger.info(f"Registered theme '{theme_name}'")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
757 |             return Result.success(None)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:829:101: E501 Line too long (111 > 100)
    |
827 |         self.logger = logging.getLogger(__name__)
828 |     
829 |     def create_fade_animation(self, widget: QWidget, duration: int = 300, fade_in: bool = True) -> Result[str]:
    |                                                                                                     ^^^^^^^^^^^ E501
830 |         """Create a fade animation for a widget.
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:841:49: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
839 |         """
840 |         try:
841 |             animation_id = f"fade_{id(widget)}_{datetime.now().timestamp()}"
    |                                                 ^^^^^^^^^^^^^^ DTZ005
842 |             
843 |             # Create opacity effect if not present
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:864:30: G004 Logging statement uses f-string
    |
862 |             self._animations[animation_id] = animation
863 |             
864 |             self.logger.info(f"Created fade animation {animation_id}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
865 |             return Result.success(animation_id)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:872:101: E501 Line too long (121 > 100)
    |
870 |             return Result.failure(error_msg)
871 |     
872 |     def create_slide_animation(self, widget: QWidget, direction: str, distance: int, duration: int = 300) -> Result[str]:
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^ E501
873 |         """Create a slide animation for a widget.
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:885:50: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
883 |         """
884 |         try:
885 |             animation_id = f"slide_{id(widget)}_{datetime.now().timestamp()}"
    |                                                  ^^^^^^^^^^^^^^ DTZ005
886 |             
887 |             animation = QPropertyAnimation(widget, b"geometry")
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:910:30: G004 Logging statement uses f-string
    |
908 |             self._animations[animation_id] = animation
909 |             
910 |             self.logger.info(f"Created slide animation {animation_id}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
911 |             return Result.success(animation_id)
    |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1032:30: G004 Logging statement uses f-string
     |
1030 |         try:
1031 |             self._patterns[name] = pattern
1032 |             self.logger.info(f"Registered pattern '{name}'")
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1033 |             return Result.success(None)
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1065:13: TRY300 Consider moving this statement to an `else` block
     |
1063 |                     self._applied_patterns[target_id].append(pattern_name)
1064 |             
1065 |             return result
     |             ^^^^^^^^^^^^^ TRY300
1066 |             
1067 |         except Exception as e:
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1124:35: G004 Logging statement uses f-string
     |
1123 |         except Exception as e:
1124 |             self.logger.exception(f"Failed to register default patterns: {e}")
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1124:75: TRY401 Redundant exception object included in `logging.exception` call
     |
1123 |         except Exception as e:
1124 |             self.logger.exception(f"Failed to register default patterns: {e}")
     |                                                                           ^ TRY401
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1172:45: G004 Logging statement uses f-string
     |
1170 |                     pattern_result = self._pattern_registry.apply_pattern(pattern_name, widget)
1171 |                     if not pattern_result.is_success:
1172 |                         self.logger.warning(f"Failed to apply pattern '{pattern_name}': {pattern_result.error()}")
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1173 |             
1174 |             # Apply theme
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1172:101: E501 Line too long (114 > 100)
     |
1170 |                     pattern_result = self._pattern_registry.apply_pattern(pattern_name, widget)
1171 |                     if not pattern_result.is_success:
1172 |                         self.logger.warning(f"Failed to apply pattern '{pattern_name}': {pattern_result.error()}")
     |                                                                                                     ^^^^^^^^^^^^^^ E501
1173 |             
1174 |             # Apply theme
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1178:41: G004 Logging statement uses f-string
     |
1176 |                 theme_result = self._theme_manager.apply_theme(widget, theme)
1177 |                 if not theme_result.is_success:
1178 |                     self.logger.warning(f"Failed to apply theme '{theme}': {theme_result.error()}")
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1179 |             
1180 |             self.logger.info(f"Created widget component '{component_id}'")
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1180:30: G004 Logging statement uses f-string
     |
1178 |                     self.logger.warning(f"Failed to apply theme '{theme}': {theme_result.error()}")
1179 |             
1180 |             self.logger.info(f"Created widget component '{component_id}'")
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1181 |             return Result.success(component)
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1219:45: G004 Logging statement uses f-string
     |
1217 |                     pattern_result = self._pattern_registry.apply_pattern(pattern_name, dialog)
1218 |                     if not pattern_result.is_success:
1219 |                         self.logger.warning(f"Failed to apply pattern '{pattern_name}': {pattern_result.error()}")
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1220 |             
1221 |             # Apply theme
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1219:101: E501 Line too long (114 > 100)
     |
1217 |                     pattern_result = self._pattern_registry.apply_pattern(pattern_name, dialog)
1218 |                     if not pattern_result.is_success:
1219 |                         self.logger.warning(f"Failed to apply pattern '{pattern_name}': {pattern_result.error()}")
     |                                                                                                     ^^^^^^^^^^^^^^ E501
1220 |             
1221 |             # Apply theme
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1225:41: G004 Logging statement uses f-string
     |
1223 |                 theme_result = self._theme_manager.apply_theme(dialog, theme)
1224 |                 if not theme_result.is_success:
1225 |                     self.logger.warning(f"Failed to apply theme '{theme}': {theme_result.error()}")
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1226 |             
1227 |             self.logger.info(f"Created dialog component '{component_id}'")
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1227:30: G004 Logging statement uses f-string
     |
1225 |                     self.logger.warning(f"Failed to apply theme '{theme}': {theme_result.error()}")
1226 |             
1227 |             self.logger.info(f"Created dialog component '{component_id}'")
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
1228 |             return Result.success(component)
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1237:101: E501 Line too long (139 > 100)
     |
1236 | …
1237 | …ss: type, model_class: type | None = None, **kwargs) -> Result[UIWidgetComponent]:
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1238 | …
     |

src_refactored\infrastructure\presentation\qt\ui_core_patterns.py:1264:101: E501 Line too long (113 > 100)
     |
1264 | def create_themed_widget(widget_class: type, theme_name: str = "default", **kwargs) -> Result[UIWidgetComponent]:
     |                                                                                                     ^^^^^^^^^^^^^ E501
1265 |     """Create a widget with a specific theme applied.
     |

src_refactored\infrastructure\presentation\qt\visualization_component.py:91:35: G004 Logging statement uses f-string
   |
90 |         except Exception as e:
91 |             self.logger.exception(f"Failed to setup visualization: {e}")
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
92 |             self.visualization_error.emit(str(e))
   |

src_refactored\infrastructure\presentation\qt\visualization_component.py:91:69: TRY401 Redundant exception object included in `logging.exception` call
   |
90 |         except Exception as e:
91 |             self.logger.exception(f"Failed to setup visualization: {e}")
   |                                                                     ^ TRY401
92 |             self.visualization_error.emit(str(e))
   |

src_refactored\infrastructure\presentation\qt\visualization_component.py:107:97: FBT003 Boolean positional value in function call
    |
105 |         # Set initial properties
106 |         self.visualization_widget.setVisible(False)
107 |         self.visualization_widget.setAttribute(Qt.WidgetAttribute.WA_TransparentForMouseEvents, True)
    |                                                                                                 ^^^^ FBT003
108 |
109 |         # Create layout
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:107:101: E501 Line too long (101 > 100)
    |
105 |         # Set initial properties
106 |         self.visualization_widget.setVisible(False)
107 |         self.visualization_widget.setAttribute(Qt.WidgetAttribute.WA_TransparentForMouseEvents, True)
    |                                                                                                     ^ E501
108 |
109 |         # Create layout
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:162:44: FBT003 Boolean positional value in function call
    |
161 |             # Disable auto-range
162 |             self.plot_item.enableAutoRange(False)
    |                                            ^^^^^ FBT003
163 |
164 |             # Disable mouse interaction
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:184:97: FBT003 Boolean positional value in function call
    |
182 |         # Set widget properties
183 |         self.visualization_widget.setFocusPolicy(Qt.FocusPolicy.NoFocus)
184 |         self.visualization_widget.setAttribute(Qt.WidgetAttribute.WA_TransparentForMouseEvents, True)
    |                                                                                                 ^^^^ FBT003
185 |
186 |         # Configure update timer
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:184:101: E501 Line too long (101 > 100)
    |
182 |         # Set widget properties
183 |         self.visualization_widget.setFocusPolicy(Qt.FocusPolicy.NoFocus)
184 |         self.visualization_widget.setAttribute(Qt.WidgetAttribute.WA_TransparentForMouseEvents, True)
    |                                                                                                     ^ E501
185 |
186 |         # Configure update timer
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:221:35: G004 Logging statement uses f-string
    |
220 |         except Exception as e:
221 |             self.logger.exception(f"Failed to start visualization: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
222 |             self.visualization_error.emit(str(e))
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:221:69: TRY401 Redundant exception object included in `logging.exception` call
    |
220 |         except Exception as e:
221 |             self.logger.exception(f"Failed to start visualization: {e}")
    |                                                                     ^ TRY401
222 |             self.visualization_error.emit(str(e))
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:253:35: G004 Logging statement uses f-string
    |
252 |         except Exception as e:
253 |             self.logger.exception(f"Failed to stop visualization: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
254 |             self.visualization_error.emit(str(e))
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:253:68: TRY401 Redundant exception object included in `logging.exception` call
    |
252 |         except Exception as e:
253 |             self.logger.exception(f"Failed to stop visualization: {e}")
    |                                                                    ^ TRY401
254 |             self.visualization_error.emit(str(e))
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:277:35: G004 Logging statement uses f-string
    |
276 |         except Exception as e:
277 |             self.logger.exception(f"Failed to update visualization: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
278 |
279 |     def set_visualization_position(self, x: int, y: int, width: int, height: int,
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:277:70: TRY401 Redundant exception object included in `logging.exception` call
    |
276 |         except Exception as e:
277 |             self.logger.exception(f"Failed to update visualization: {e}")
    |                                                                      ^ TRY401
278 |
279 |     def set_visualization_position(self, x: int, y: int, width: int, height: int,
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:342:35: G004 Logging statement uses f-string
    |
341 |         except Exception as e:
342 |             self.logger.exception(f"Failed to set audio data: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
343 |
344 |     def toggle_visualization(self) -> None:
    |

src_refactored\infrastructure\presentation\qt\visualization_component.py:342:64: TRY401 Redundant exception object included in `logging.exception` call
    |
341 |         except Exception as e:
342 |             self.logger.exception(f"Failed to set audio data: {e}")
    |                                                                ^ TRY401
343 |
344 |     def toggle_visualization(self) -> None:
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:135:48: FBT003 Boolean positional value in function call
    |
133 |             # Emit signals
134 |             self.visualization_started.emit()
135 |             self.processing_state_changed.emit(True)
    |                                                ^^^^ FBT003
136 |
137 |         except Exception as e:
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:137:16: BLE001 Do not catch blind exception: `Exception`
    |
135 |             self.processing_state_changed.emit(True)
136 |
137 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
138 |             self.visualization_error.emit(f"Failed to start visualization: {e!s}")
139 |             self._is_active = False
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:153:48: FBT003 Boolean positional value in function call
    |
151 |             # Emit signals
152 |             self.visualization_stopped.emit()
153 |             self.processing_state_changed.emit(False)
    |                                                ^^^^^ FBT003
154 |
155 |         except Exception as e:
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:155:16: BLE001 Do not catch blind exception: `Exception`
    |
153 |             self.processing_state_changed.emit(False)
154 |
155 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
156 |             self.visualization_error.emit(f"Error stopping visualization: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:194:16: BLE001 Do not catch blind exception: `Exception`
    |
192 |             self.waveform_updated.emit(waveform_data)
193 |
194 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
195 |             self.visualization_error.emit(f"Error handling audio data: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:235:12: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
233 |             scale_factor: New scale factor (0.1 to 2.0)
234 |         """
235 |         if 0.1 <= scale_factor <= 2.0:
    |            ^^^ PLR2004
236 |             self._visualization_config = self._visualization_config.with_scale_factor(scale_factor)
237 |         else:
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:235:35: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
    |
233 |             scale_factor: New scale factor (0.1 to 2.0)
234 |         """
235 |         if 0.1 <= scale_factor <= 2.0:
    |                                   ^^^ PLR2004
236 |             self._visualization_config = self._visualization_config.with_scale_factor(scale_factor)
237 |         else:
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:248:101: E501 Line too long (103 > 100)
    |
246 |         """
247 |         if min_val < max_val:
248 |             self._visualization_config = self._visualization_config.with_clip_range((min_val, max_val))
    |                                                                                                     ^^^ E501
249 |         else:
250 |             self.visualization_error.emit("Invalid clip range: min must be less than max")
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:320:16: BLE001 Do not catch blind exception: `Exception`
    |
318 |             self._is_processing = False
319 |
320 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
321 |             self.visualization_error.emit(f"Error during cleanup: {e!s}")
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:365:36: PLR2004 Magic value used in comparison, consider replacing `256` with a constant variable
    |
364 |             # Check chunk size
365 |             if config.chunk_size < 256 or config.chunk_size > 4096:
    |                                    ^^^ PLR2004
366 |                 return False
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:365:63: PLR2004 Magic value used in comparison, consider replacing `4096` with a constant variable
    |
364 |             # Check chunk size
365 |             if config.chunk_size < 256 or config.chunk_size > 4096:
    |                                                               ^^^^ PLR2004
366 |                 return False
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:369:37: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
368 |             # Check buffer size
369 |             if config.buffer_size < 10 or config.buffer_size > 1000:
    |                                     ^^ PLR2004
370 |                 return False
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:369:64: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
368 |             # Check buffer size
369 |             if config.buffer_size < 10 or config.buffer_size > 1000:
    |                                                                ^^^^ PLR2004
370 |                 return False
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:373:38: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
372 |             # Check scale factor
373 |             if config.scale_factor < 0.1 or config.scale_factor > 2.0:
    |                                      ^^^ PLR2004
374 |                 return False
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:373:67: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
    |
372 |             # Check scale factor
373 |             if config.scale_factor < 0.1 or config.scale_factor > 2.0:
    |                                                                   ^^^ PLR2004
374 |                 return False
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:378:65: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
    |
376 |             # Check clip range
377 |             min_clip, max_clip = config.clip_range
378 |             return not (min_clip >= max_clip or abs(min_clip) > 2.0 or abs(max_clip) > 2.0)
    |                                                                 ^^^ PLR2004
379 |
380 |         except Exception:
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:378:88: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
    |
376 |             # Check clip range
377 |             min_clip, max_clip = config.clip_range
378 |             return not (min_clip >= max_clip or abs(min_clip) > 2.0 or abs(max_clip) > 2.0)
    |                                                                                        ^^^ PLR2004
379 |
380 |         except Exception:
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:380:16: BLE001 Do not catch blind exception: `Exception`
    |
378 |             return not (min_clip >= max_clip or abs(min_clip) > 2.0 or abs(max_clip) > 2.0)
379 |
380 |         except Exception:
    |                ^^^^^^^^^ BLE001
381 |             return False
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:468:13: TRY300 Consider moving this statement to an `else` block
    |
466 |             self.waveform_updated.emit(self._current_waveform)
467 |
468 |             return True
    |             ^^^^^^^^^^^ TRY300
469 |
470 |         except Exception as e:
    |

src_refactored\infrastructure\presentation\qt\voice_visualizer.py:470:16: BLE001 Do not catch blind exception: `Exception`
    |
468 |             return True
469 |
470 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
471 |             self.visualization_error.emit(f"Failed to import waveform data: {e!s}")
472 |             return False
    |

src_refactored\infrastructure\presentation\qt\widget_layout_component.py:350:5: SyntaxError: Expected ',', found name
    |
348 |     )
349 |         self.widgets["status_label"].setTextInteractionFlags(Qt.TextInteractionFlag.NoTextInteractio\
350 |     n)
    |     ^
351 |
352 |         self.logger.debug("Widget properties configured")
    |

src_refactored\infrastructure\presentation\qt\window_config_component.py:124:32: SyntaxError: Expected an expression or a ')'
    |
122 |         """
123 |         try:
124 |             palette = QPalette(,
    |                                ^
125 |     )
    |

src_refactored\infrastructure\presentation\qt\window_config_component.py:282:43: SyntaxError: Expected an expression
    |
280 |         skip_block = False
281 |         for line in lines:
282 |             if "QMainWindow {" in line and
    |                                           ^
283 |     ("border:" in stylesheet or "border-radius:" in stylesheet):
284 |                 skip_block = True
    |

src_refactored\infrastructure\presentation\qt\window_config_component.py:283:6: SyntaxError: Invalid annotated assignment target
    |
281 |         for line in lines:
282 |             if "QMainWindow {" in line and
283 |     ("border:" in stylesheet or "border-radius:" in stylesheet):
    |      ^
284 |                 skip_block = True
285 |                 continue
    |

src_refactored\infrastructure\presentation\qt\window_config_component.py:283:65: SyntaxError: Expected an expression
    |
281 |         for line in lines:
282 |             if "QMainWindow {" in line and
283 |     ("border:" in stylesheet or "border-radius:" in stylesheet):
    |                                                                 ^
284 |                 skip_block = True
285 |                 continue
    |

src_refactored\infrastructure\presentation\qt\window_config_component.py:284:1: SyntaxError: Unexpected indentation
    |
282 |             if "QMainWindow {" in line and
283 |     ("border:" in stylesheet or "border-radius:" in stylesheet):
284 |                 skip_block = True
    | ^
285 |                 continue
286 |             if skip_block and "}" in line:
    |

src_refactored\infrastructure\presentation\qt\window_config_component.py:286:1: SyntaxError: unindent does not match any outer indentation level
    |
284 |                 skip_block = True
285 |                 continue
286 |             if skip_block and "}" in line:
    | ^
287 |                 skip_block = False
288 |                 continue
    |

src_refactored\infrastructure\presentation\qt\window_config_component.py:289:1: SyntaxError: unindent does not match any outer indentation level
    |
287 |                 skip_block = False
288 |                 continue
289 |             if not skip_block:
    | ^
290 |                 filtered_lines.append(line)
    |

src_refactored\infrastructure\presentation\qt\window_config_component.py:292:1: SyntaxError: unindent does not match any outer indentation level
    |
290 |                 filtered_lines.append(line)
291 |
292 |         return "\n".join(filtered_lines,
    | ^
293 |     )
    |

src_refactored\infrastructure\presentation\qt\window_config_component.py:353:6: SyntaxError: Expected dedent, found end of file
    |
351 |         except Exception as e:
352 |             self.logger.exception(f"Failed to center window: {e}",
353 |     )
    |      ^
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:66:29: ARG002 Unused method argument: `main_window`
   |
64 |         self.error_callback: Callable | None = None
65 |
66 |     def setup_workers(self, main_window: QMainWindow, config: dict[str, Any]) -> None:
   |                             ^^^^^^^^^^^ ARG002
67 |         """Setup all workers for the main window.
   |

src_refactored\infrastructure\presentation\qt\worker_integration.py:93:35: G004 Logging statement uses f-string
   |
92 |         except Exception as e:
93 |             self.logger.exception(f"Failed to setup workers: {e}")
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
94 |             self.worker_error.emit("setup", str(e))
   |

src_refactored\infrastructure\presentation\qt\worker_integration.py:93:63: TRY401 Redundant exception object included in `logging.exception` call
   |
92 |         except Exception as e:
93 |             self.logger.exception(f"Failed to setup workers: {e}")
   |                                                               ^ TRY401
94 |             self.worker_error.emit("setup", str(e))
   |

src_refactored\infrastructure\presentation\qt\worker_integration.py:121:35: G004 Logging statement uses f-string
    |
120 |         except Exception as e:
121 |             self.logger.exception(f"Failed to initialize transcription worker: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
122 |             raise
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:121:81: TRY401 Redundant exception object included in `logging.exception` call
    |
120 |         except Exception as e:
121 |             self.logger.exception(f"Failed to initialize transcription worker: {e}")
    |                                                                                 ^ TRY401
122 |             raise
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:149:35: G004 Logging statement uses f-string
    |
148 |         except Exception as e:
149 |             self.logger.exception(f"Failed to initialize LLM worker: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
150 |             raise
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:149:71: TRY401 Redundant exception object included in `logging.exception` call
    |
148 |         except Exception as e:
149 |             self.logger.exception(f"Failed to initialize LLM worker: {e}")
    |                                                                       ^ TRY401
150 |             raise
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:178:35: G004 Logging statement uses f-string
    |
177 |         except Exception as e:
178 |             self.logger.exception(f"Failed to initialize listener worker: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
179 |             raise
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:178:76: TRY401 Redundant exception object included in `logging.exception` call
    |
177 |         except Exception as e:
178 |             self.logger.exception(f"Failed to initialize listener worker: {e}")
    |                                                                            ^ TRY401
179 |             raise
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:210:35: G004 Logging statement uses f-string
    |
209 |         except Exception as e:
210 |             self.logger.exception(f"Failed to configure worker settings: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
211 |
212 |     def start_transcription(self, file_path: str,
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:210:75: TRY401 Redundant exception object included in `logging.exception` call
    |
209 |         except Exception as e:
210 |             self.logger.exception(f"Failed to configure worker settings: {e}")
    |                                                                           ^ TRY401
211 |
212 |     def start_transcription(self, file_path: str,
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:234:35: G004 Logging statement uses f-string
    |
233 |         except Exception as e:
234 |             self.logger.exception(f"Failed to start transcription: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
235 |             self.is_transcribing = False
236 |             self.worker_error.emit("transcription", str(e))
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:234:69: TRY401 Redundant exception object included in `logging.exception` call
    |
233 |         except Exception as e:
234 |             self.logger.exception(f"Failed to start transcription: {e}")
    |                                                                     ^ TRY401
235 |             self.is_transcribing = False
236 |             self.worker_error.emit("transcription", str(e))
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:261:35: G004 Logging statement uses f-string
    |
260 |         except Exception as e:
261 |             self.logger.exception(f"Failed to start batch transcription: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
262 |             self.worker_error.emit("transcription", str(e))
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:261:75: TRY401 Redundant exception object included in `logging.exception` call
    |
260 |         except Exception as e:
261 |             self.logger.exception(f"Failed to start batch transcription: {e}")
    |                                                                           ^ TRY401
262 |             self.worker_error.emit("transcription", str(e))
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:298:35: G004 Logging statement uses f-string
    |
297 |         except Exception as e:
298 |             self.logger.exception(f"Failed to start recording: {e}",
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
299 |     )
300 |             self.worker_error.emit("listener", str(e))
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:298:65: TRY401 Redundant exception object included in `logging.exception` call
    |
297 |         except Exception as e:
298 |             self.logger.exception(f"Failed to start recording: {e}",
    |                                                                 ^ TRY401
299 |     )
300 |             self.worker_error.emit("listener", str(e))
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:316:35: G004 Logging statement uses f-string
    |
315 |         except Exception as e:
316 |             self.logger.exception(f"Failed to stop recording: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
317 |             self.worker_error.emit("listener", str(e))
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:316:64: TRY401 Redundant exception object included in `logging.exception` call
    |
315 |         except Exception as e:
316 |             self.logger.exception(f"Failed to stop recording: {e}")
    |                                                                ^ TRY401
317 |             self.worker_error.emit("listener", str(e))
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:335:35: G004 Logging statement uses f-string
    |
334 |         except Exception as e:
335 |             self.logger.exception(f"Failed to process with LLM: {e}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
336 |             self.worker_error.emit("llm", str(e))
    |

src_refactored\infrastructure\presentation\qt\worker_integration.py:335:66: TRY401 Redundant exception object included in `logging.exception` call
    |
334 |         except Exception as e:
335 |             self.logger.exception(f"Failed to process with LLM: {e}")
    |                                                                  ^ TRY401
336 |             self.worker_error.emit("llm", str(e))
    |

src_refactored\infrastructure\presentation\system\error_handling_service.py:287:17: SyntaxError: Expected ',', found name
    |
285 |                 message=error_message,
286 |                 details=str(exc_value)
287 |                 exception=exc_value,
    |                 ^
288 |                 title=f"{self._application_name} Unexpected Error",
289 |                 exit_code=ExitCode.GENERAL_ERROR,
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:213:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
212 |             # Emit signal
213 | target_parent = (
    | ^
214 |     self.original_progress_parent or getattr(main_window, "centralwidget", main_window))
215 |             self.progress_bar_restored.emit(progress_bar, target_parent)
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:215:1: SyntaxError: Unexpected indentation
    |
213 | target_parent = (
214 |     self.original_progress_parent or getattr(main_window, "centralwidget", main_window))
215 |             self.progress_bar_restored.emit(progress_bar, target_parent)
    | ^
216 |
217 |             # Reset flag after delay
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:222:1: SyntaxError: unindent does not match any outer indentation level
    |
220 |             return True
221 |
222 |         except RuntimeError:
    | ^
223 |             # If the progress bar has been deleted, ignore
224 |             self._reset_moving_flag()
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:222:9: SyntaxError: Expected a statement
    |
220 |             return True
221 |
222 |         except RuntimeError:
    |         ^
223 |             # If the progress bar has been deleted, ignore
224 |             self._reset_moving_flag()
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:222:29: SyntaxError: Expected an expression
    |
220 |             return True
221 |
222 |         except RuntimeError:
    |                             ^
223 |             # If the progress bar has been deleted, ignore
224 |             self._reset_moving_flag()
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:224:1: SyntaxError: Unexpected indentation
    |
222 |         except RuntimeError:
223 |             # If the progress bar has been deleted, ignore
224 |             self._reset_moving_flag()
    | ^
225 |             return False
226 |         except Exception:
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:226:1: SyntaxError: unindent does not match any outer indentation level
    |
224 |             self._reset_moving_flag()
225 |             return False
226 |         except Exception:
    | ^
227 |             self._reset_moving_flag()
228 |             raise
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:226:9: SyntaxError: Expected a statement
    |
224 |             self._reset_moving_flag()
225 |             return False
226 |         except Exception:
    |         ^
227 |             self._reset_moving_flag()
228 |             raise
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:226:26: SyntaxError: Expected an expression
    |
224 |             self._reset_moving_flag()
225 |             return False
226 |         except Exception:
    |                          ^
227 |             self._reset_moving_flag()
228 |             raise
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:227:1: SyntaxError: Unexpected indentation
    |
225 |             return False
226 |         except Exception:
227 |             self._reset_moving_flag()
    | ^
228 |             raise
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:230:1: SyntaxError: unindent does not match any outer indentation level
    |
228 |             raise
229 |
230 |     def is_reparenting_in_progress(self) -> bool:
    | ^
231 |         """Check if progress bar reparenting is currently in progress.
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:238:1: SyntaxError: unindent does not match any outer indentation level
    |
236 |         return self.is_progress_bar_moving
237 |
238 |     def get_original_parent(self) -> QWidget | None:
    | ^
239 |         """Get the original parent of the progress bar.
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:246:1: SyntaxError: unindent does not match any outer indentation level
    |
244 |         return self.original_progress_parent
245 |
246 |     def get_original_geometry(self) -> QRect | None:
    | ^
247 |         """Get the original geometry of the progress bar.
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:254:1: SyntaxError: unindent does not match any outer indentation level
    |
252 |         return self.original_progress_geometry
253 |
254 |     def reset_state(self) -> None:
    | ^
255 |         """Reset the service state."""
256 |         self.is_progress_bar_moving = False
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:261:1: SyntaxError: unindent does not match any outer indentation level
    |
259 |         self._move_timer.stop()
260 |
261 |     def _reset_moving_flag(self) -> None:
    | ^
262 |         """Reset the moving flag and emit finished signal."""
263 |         self.is_progress_bar_moving = False
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:266:1: SyntaxError: unindent does not match any outer indentation level
    |
264 |         self.reparenting_finished.emit()
265 |
266 |     @staticmethod
    | ^
267 |     def create_progress_placeholder() -> tuple[QWidget, QVBoxLayout]:
268 |         """Create a progress placeholder widget with layout.
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:267:1: SyntaxError: Expected class, function definition or async function definition after decorator
    |
266 |     @staticmethod
267 |     def create_progress_placeholder() -> tuple[QWidget, QVBoxLayout]:
    | ^
268 |         """Create a progress placeholder widget with layout.
    |

src_refactored\infrastructure\progress_management\progress_bar_reparenting_service.py:285:48: SyntaxError: Expected dedent, found end of file
    |
283 |         self.reset_state()
284 |         self.progress_placeholder = None
285 |         self.progress_placeholder_layout = None
    |                                                ^
    |

src_refactored\infrastructure\progress_management\progress_tracking_service.py:301:55: SyntaxError: Expected an expression
    |
299 |             True if progress is active, False otherwise
300 |         """
301 |         return progress_id in self.active_progress and
    |                                                       ^
302 |     not self.active_progress[progress_id]["is_completed"]
    |

src_refactored\infrastructure\progress_management\timer_management_service.py:72:101: E501 Line too long (112 > 100)
   |
71 |         # Configure timer based on type
72 |         if timer_type in [TimerType.SINGLE_SHOT, TimerType.DEBOUNCE, TimerType.DELAY, TimerType.PROGRESS_RESET]:
   |                                                                                                     ^^^^^^^^^^^^ E501
73 |             timer.setSingleShot(True)
74 |         else:
   |

src_refactored\infrastructure\progress_management\timer_management_service.py:338:28: SyntaxError: Expected an expression or a ')'
    |
337 |         def reset_flag():
338 |             obj = weak_ref(,
    |                            ^
339 |     )
340 |             if obj is not None:
    |

src_refactored\infrastructure\settings\file_system_service.py:41:41: SyntaxError: Expected an expression or a ')'
   |
39 |         try:
40 |             dir_path = Path(path)
41 |             if not dir_path.is_absolute(,
   |                                         ^
42 |     ):
43 |                 dir_path = self.base_path / dir_path
   |

src_refactored\infrastructure\settings\file_system_service.py:280:42: SyntaxError: Expected an expression or a ')'
    |
278 |         try:
279 |             file_path = Path(path)
280 |             if not file_path.is_absolute(,
    |                                          ^
281 |     ):
282 |                 file_path = self.base_path / file_path
    |

src_refactored\infrastructure\settings\file_system_service.py:501:42: SyntaxError: Expected an expression or a ')'
    |
499 |                     file_age = current_time - datetime.fromtimestamp(file_path.stat().st_mtime)
500 |                     if file_age.total_seconds() > max_age_hours * 3600:
501 |                         file_path.unlink(,
    |                                          ^
502 |     )
503 |                         cleaned_count += 1
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:115:101: E501 Line too long (136 > 100)
    |
113 | …
114 | …by length (reverse)
115 | … key=lambda x: (x not in ["CTRL", "ALT", "SHIFT", "META"], len(x)), reverse=True)
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
116 | …ted_keys).upper()
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:121:30: G004 Logging statement uses f-string
    |
120 |             self.recording_stopped.emit(self.current_combination)
121 |             self.logger.info(f"Stopped hotkey recording: {self.current_combination}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
122 |
123 |             return self.current_combination
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:123:13: TRY300 Consider moving this statement to an `else` block
    |
121 |             self.logger.info(f"Stopped hotkey recording: {self.current_combination}")
122 |
123 |             return self.current_combination
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
124 |
125 |         except Exception as e:
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:178:9: PLR0911 Too many return statements (7 > 6)
    |
176 |             self.recording_failed.emit(error_msg)
177 |
178 |     def get_key_name(self, event: QKeyEvent) -> str | None:
    |         ^^^^^^^^^^^^ PLR0911
179 |         """Get the printable name of a key.
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:235:29: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
233 |             parts = combination.split("+")
234 |
235 |             if len(parts) < 2:
    |                             ^ PLR2004
236 |                 return False, "Key combination must include at least one modifier (CTRL, ALT, SHIFT)"
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:236:101: E501 Line too long (101 > 100)
    |
235 |             if len(parts) < 2:
236 |                 return False, "Key combination must include at least one modifier (CTRL, ALT, SHIFT)"
    |                                                                                                     ^ E501
237 |
238 |             valid_modifiers = ["CTRL", "ALT", "SHIFT", "META"]
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:239:101: E501 Line too long (261 > 100)
    |
238 | …
239 | … "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "ESC", "TAB", "CAPS", "SPACE"]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
240 | …
241 | …
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:250:44: FBT003 Boolean positional value in function call
    |
248 |                 return False, f"Invalid key: {parts[-1]}"
249 |
250 |             self.validation_completed.emit(True, "Valid key combination")
    |                                            ^^^^ FBT003
251 |             return True, "Valid key combination"
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:251:13: TRY300 Consider moving this statement to an `else` block
    |
250 |             self.validation_completed.emit(True, "Valid key combination")
251 |             return True, "Valid key combination"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
252 |
253 |         except Exception as e:
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:253:16: BLE001 Do not catch blind exception: `Exception`
    |
251 |             return True, "Valid key combination"
252 |
253 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
254 |             error_msg = f"Error validating key combination: {e!s}"
255 |             self.validation_completed.emit(False, error_msg)
    |

src_refactored\infrastructure\settings\hotkey_recording_service.py:255:44: FBT003 Boolean positional value in function call
    |
253 |         except Exception as e:
254 |             error_msg = f"Error validating key combination: {e!s}"
255 |             self.validation_completed.emit(False, error_msg)
    |                                            ^^^^^ FBT003
256 |             return False, error_msg
    |

src_refactored\infrastructure\settings\json_settings_repository.py:44:36: SyntaxError: Expected an expression or a ')'
   |
42 |         self.config_path = Path(config_path)
43 |         self.auto_backup = auto_backup
44 |         self.logger = setup_logger(,
   |                                    ^
45 |     )
   |

src_refactored\infrastructure\settings\json_settings_repository.py:174:46: SyntaxError: Expected an expression or a ')'
    |
172 |                 return Result.failure(settings_result.error())
173 |
174 |             settings = settings_result.value(,
    |                                              ^
175 |     )
176 |             value = settings.get(key, default)
    |

src_refactored\infrastructure\settings\json_settings_repository.py:300:101: E501 Line too long (101 > 100)
    |
298 |                 backup_result = self.backup_settings()
299 |                 if not backup_result.is_success:
300 |                     self.logger.warning("Failed to create backup before clearing: {backup_result.err\
    |                                                                                                     ^ E501
301 |     or()}")
    |

src_refactored\infrastructure\settings\json_settings_repository.py:369:101: E501 Line too long (101 > 100)
    |
367 |             validation_result = self.validate_settings(backup_settings)
368 |             if not validation_result.is_success:
369 |                 return Result.failure(f"Backup settings validation failed: {validation_result.error(\
    |                                                                                                     ^ E501
370 |     )}")
    |

src_refactored\infrastructure\settings\json_settings_repository.py:376:101: E501 Line too long (101 > 100)
    |
374 |                 current_backup_result = self.backup_settings()
375 |                 if not current_backup_result.is_success:
376 |                     self.logger.warning("Failed to backup current settings: {current_backup_result.e\
    |                                                                                                     ^ E501
377 |     rror()}")
    |

src_refactored\infrastructure\settings\json_settings_repository.py:434:1: SyntaxError: Expected `except` or `finally` after `try` block
    |
433 |             # Value validation
434 | valid_models = (
    | ^
435 |     ["whisper-turbo", "whisper-large-v3", "whisper-medium", "whisper-small", "whisper-base"])
436 |             if settings.get("model") not in valid_models:
    |

src_refactored\infrastructure\settings\json_settings_repository.py:436:1: SyntaxError: Unexpected indentation
    |
434 | valid_models = (
435 |     ["whisper-turbo", "whisper-large-v3", "whisper-medium", "whisper-small", "whisper-base"])
436 |             if settings.get("model") not in valid_models:
    | ^
437 |                 return Result.failure(f"Invalid model: {settings.get('model')}. Must be one of {vali\
438 |     d_models}")
    |

src_refactored\infrastructure\settings\json_settings_repository.py:437:101: E501 Line too long (101 > 100)
    |
435 |     ["whisper-turbo", "whisper-large-v3", "whisper-medium", "whisper-small", "whisper-base"])
436 |             if settings.get("model") not in valid_models:
437 |                 return Result.failure(f"Invalid model: {settings.get('model')}. Must be one of {vali\
    |                                                                                                     ^ E501
438 |     d_models}")
    |

src_refactored\infrastructure\settings\json_settings_repository.py:438:5: SyntaxError: f-string: expecting '}'
    |
436 |             if settings.get("model") not in valid_models:
437 |                 return Result.failure(f"Invalid model: {settings.get('model')}. Must be one of {vali\
438 |     d_models}")
    |     ^
439 |
440 |             valid_quantizations = ["full", "quantized"]
    |

src_refactored\infrastructure\settings\json_settings_repository.py:438:13: SyntaxError: f-string: single '}' is not allowed
    |
436 |             if settings.get("model") not in valid_models:
437 |                 return Result.failure(f"Invalid model: {settings.get('model')}. Must be one of {vali\
438 |     d_models}")
    |             ^
439 |
440 |             valid_quantizations = ["full", "quantized"]
    |

src_refactored\infrastructure\settings\json_settings_repository.py:438:14: SyntaxError: Expected ',', found FStringEnd
    |
436 |             if settings.get("model") not in valid_models:
437 |                 return Result.failure(f"Invalid model: {settings.get('model')}. Must be one of {vali\
438 |     d_models}")
    |              ^
439 |
440 |             valid_quantizations = ["full", "quantized"]
    |

src_refactored\infrastructure\settings\json_settings_repository.py:442:101: E501 Line too long (101 > 100)
    |
440 |             valid_quantizations = ["full", "quantized"]
441 |             if settings.get("quantization") not in valid_quantizations:
442 |                 return Result.failure(f"Invalid quantization: {settings.get('quantization')}. Must b\
    |                                                                                                     ^ E501
443 |     e one of {valid_quantizations}")
    |

src_refactored\infrastructure\settings\json_settings_repository.py:447:1: SyntaxError: unindent does not match any outer indentation level
    |
445 |             return Result.success(None)
446 |
447 |         except Exception as e:
    | ^
448 |             error_msg = f"Settings validation error: {e}"
449 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\settings\json_settings_repository.py:447:9: SyntaxError: Expected a statement
    |
445 |             return Result.success(None)
446 |
447 |         except Exception as e:
    |         ^
448 |             error_msg = f"Settings validation error: {e}"
449 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\settings\json_settings_repository.py:447:26: SyntaxError: Expected a statement
    |
445 |             return Result.success(None)
446 |
447 |         except Exception as e:
    |                          ^
448 |             error_msg = f"Settings validation error: {e}"
449 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\settings\json_settings_repository.py:447:31: SyntaxError: Expected an expression
    |
445 |             return Result.success(None)
446 |
447 |         except Exception as e:
    |                               ^
448 |             error_msg = f"Settings validation error: {e}"
449 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\settings\json_settings_repository.py:448:1: SyntaxError: Unexpected indentation
    |
447 |         except Exception as e:
448 |             error_msg = f"Settings validation error: {e}"
    | ^
449 |             self.logger.exception(error_msg)
450 |             return Result.failure(error_msg)
    |

src_refactored\infrastructure\settings\json_settings_repository.py:452:1: SyntaxError: unindent does not match any outer indentation level
    |
450 |             return Result.failure(error_msg)
451 |
452 |     def get_settings_info(self,
    | ^
453 |     ) -> Result[dict[str, Any]]:
454 |         """Get metadata about the settings storage.
    |

src_refactored\infrastructure\settings\json_settings_repository.py:463:17: SyntaxError: Expected ',', found string
    |
461 |                 "config_path": str(self.config_path,
462 |     )
463 |                 "exists": self.config_path.exists()
    |                 ^
464 |                 "auto_backup": self.auto_backup,
465 |                 "cache_valid": self._is_cache_valid()
    |

src_refactored\infrastructure\settings\json_settings_repository.py:464:17: SyntaxError: Expected ',', found string
    |
462 |     )
463 |                 "exists": self.config_path.exists()
464 |                 "auto_backup": self.auto_backup,
    |                 ^
465 |                 "cache_valid": self._is_cache_valid()
466 |             }
    |

src_refactored\infrastructure\settings\json_settings_repository.py:465:54: COM812 Trailing comma missing
    |
463 |                 "exists": self.config_path.exists()
464 |                 "auto_backup": self.auto_backup,
465 |                 "cache_valid": self._is_cache_valid()
    |                                                      ^ COM812
466 |             }
    |
    = help: Add trailing comma

src_refactored\infrastructure\settings\json_settings_repository.py:473:21: SyntaxError: Expected ',', found string
    |
471 |                     "size_bytes": stat.st_size,
472 |                     "last_modified": datetime.fromtimestamp(stat.st_mtime).isoformat()
473 |                     "created": datetime.fromtimestamp(stat.st_ctime).isoformat()
    |                     ^
474 |                 })
    |

src_refactored\infrastructure\settings\json_settings_repository.py:473:81: COM812 Trailing comma missing
    |
471 |                     "size_bytes": stat.st_size,
472 |                     "last_modified": datetime.fromtimestamp(stat.st_mtime).isoformat()
473 |                     "created": datetime.fromtimestamp(stat.st_ctime).isoformat()
    |                                                                                 ^ COM812
474 |                 })
    |
    = help: Add trailing comma

src_refactored\infrastructure\settings\json_settings_repository.py:490:5: SyntaxError: unindent does not match any outer indentation level
    |
488 |             return Result.failure(error_msg)
489 |
490 |     def _is_cache_valid(self) -> bool:
    |     ^
491 |         """Check if cached settings are still valid."""
492 |         if self._cached_settings is None or self._cache_timestamp is None:
    |

src_refactored\infrastructure\settings\json_settings_repository.py:504:5: SyntaxError: unindent does not match any outer indentation level
    |
502 |             return False
503 |
504 |     def _create_default_config(self) -> None:
    |     ^
505 |         """Create default configuration file."""
506 |         try:
    |

src_refactored\infrastructure\settings\json_settings_repository.py:513:5: SyntaxError: unindent does not match any outer indentation level
    |
511 |             self.logger.exception(f"Failed to create default config: {e}")
512 |
513 |     def _get_default_settings(self,
    |     ^
514 |     ) -> dict[str, Any]:
515 |         """Get default settings configuration."""
    |

src_refactored\infrastructure\settings\json_settings_repository.py:534:10: SyntaxError: Expected dedent, found end of file
    |
532 |             "theme": "system",
533 |             "language": "auto",
534 |         }
    |          ^
    |

src_refactored\infrastructure\settings\settings_file_repository.py:41:18: PTH123 `open()` should be replaced by `Path.open()`
   |
40 |         try:
41 |             with open(self.settings_file_path, encoding="utf-8") as f:
   |                  ^^^^ PTH123
42 |                 settings = json.load(f)
   |

src_refactored\infrastructure\settings\settings_file_repository.py:48:13: TRY300 Consider moving this statement to an `else` block
   |
46 |     )
47 |
48 |             return settings
   |             ^^^^^^^^^^^^^^^ TRY300
49 |         except (OSError, json.JSONDecodeError) as e:
50 |             if self.progress_callback:
   |

src_refactored\infrastructure\settings\settings_file_repository.py:69:18: PTH123 `open()` should be replaced by `Path.open()`
   |
67 |                 self.settings_file_path.replace(backup_path)
68 |
69 |             with open(self.settings_file_path, "w", encoding="utf-8") as f:
   |                  ^^^^ PTH123
70 |                 json.dump(settings, f, indent=2, ensure_ascii=False)
   |

src_refactored\infrastructure\settings\settings_file_repository.py:75:13: TRY300 Consider moving this statement to an `else` block
   |
73 |                 self.progress_callback(txt="Settings saved successfully")
74 |
75 |             return True
   |             ^^^^^^^^^^^ TRY300
76 |         except (OSError, TypeError) as e:
77 |             if self.progress_callback:
   |

src_refactored\infrastructure\settings\settings_file_repository.py:101:25: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
 99 |         else:
100 |             from datetime import datetime
101 |             timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    |                         ^^^^^^^^^^^^^^ DTZ005
102 |             backup_path = self.settings_file_path.with_suffix(f".{timestamp}.backup")
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\settings\settings_file_repository.py:130:18: PTH123 `open()` should be replaced by `Path.open()`
    |
128 |         try:
129 |             # Validate backup file is valid JSON
130 |             with open(backup_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
131 |                 json.load(f)
    |

src_refactored\infrastructure\settings\settings_file_repository.py:139:13: TRY300 Consider moving this statement to an `else` block
    |
137 |                 self.progress_callback(txt="Settings restored from backup")
138 |
139 |             return True
    |             ^^^^^^^^^^^ TRY300
140 |         except (OSError, json.JSONDecodeError) as e:
141 |             if self.progress_callback:
    |

src_refactored\infrastructure\settings\settings_file_repository.py:156:17: PERF401 Use a list comprehension to create a transformed list
    |
154 |         for backup_file in self.settings_file_path.parent.glob(backup_pattern):
155 |             if backup_file.is_file():
156 |                 backup_files.append(str(backup_file))
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
157 |
158 |         return sorted(backup_files, reverse=True)  # Most recent first
    |
    = help: Replace for loop with list comprehension

src_refactored\infrastructure\settings\settings_migration_service.py:109:35: SyntaxError: Expected an indented block after `if` statement
    |
107 |         migration_path = self.get_migration_path(current_version)
108 |
109 |         if self.progress_callback:
    |                                   ^
110 | self.progress_callback(txt = (
111 |     f"Migrating settings from {current_version} to {self.CURRENT_VERSION}"))
    |

src_refactored\infrastructure\settings\settings_migration_service.py:113:1: SyntaxError: Unexpected indentation
    |
111 |     f"Migrating settings from {current_version} to {self.CURRENT_VERSION}"))
112 |
113 |         migrated_settings = settings.copy()
    | ^
114 |
115 |         for transition in migration_path:
    |

src_refactored\infrastructure\settings\settings_migration_service.py:139:1: SyntaxError: unindent does not match any outer indentation level
    |
137 |         return migrated_settings
138 |
139 |     def _migrate_0_1_0_to_0_2_0(self, settings: dict[str, Any]) -> dict[str, Any]:
    | ^
140 |         """Migrate settings from version 0.1.0 to 0.2.0.
    |

src_refactored\infrastructure\settings\settings_migration_service.py:170:1: SyntaxError: unindent does not match any outer indentation level
    |
168 |         return migrated
169 |
170 |     def _migrate_0_2_0_to_0_3_0(self, settings: dict[str, Any]) -> dict[str, Any]:
    | ^
171 |         """Migrate settings from version 0.2.0 to 0.3.0.
    |

src_refactored\infrastructure\settings\settings_migration_service.py:196:1: SyntaxError: unindent does not match any outer indentation level
    |
194 |         return migrated
195 |
196 |     def _migrate_0_3_0_to_1_0_0(self, settings: dict[str, Any]) -> dict[str, Any]:
    | ^
197 |         """Migrate settings from version 0.3.0 to 1.0.0.
    |

src_refactored\infrastructure\settings\settings_migration_service.py:237:1: SyntaxError: unindent does not match any outer indentation level
    |
235 |         return migrated
236 |
237 |     def create_migration_backup(
    | ^
238 |     self,
239 |     settings: dict[str,
    |

src_refactored\infrastructure\settings\settings_migration_service.py:267:1: SyntaxError: unindent does not match any outer indentation level
    |
265 |         return str(backup_file)
266 |
267 |     def validate_migration(self, original_settings: dict[str, Any],
    | ^
268 |                           migrated_settings: dict[str, Any]) -> list[str]:
269 |         """Validate that migration was successful.
    |

src_refactored\infrastructure\settings\settings_migration_service.py:294:101: E501 Line too long (101 > 100)
    |
292 |             if (key in original_settings and key in migrated_settings and
293 |                 type(original_settings[key]) != type(migrated_settings[key])):
294 |                 warnings.append(f"Type changed for {key}: {type(original_settings[key])} -> {type(mi\
    |                                                                                                     ^ E501
295 |     grated_settings[key])}")
    |

src_refactored\infrastructure\settings\settings_migration_service.py:295:5: SyntaxError: Expected ',', found name
    |
293 |                 type(original_settings[key]) != type(migrated_settings[key])):
294 |                 warnings.append(f"Type changed for {key}: {type(original_settings[key])} -> {type(mi\
295 |     grated_settings[key])}")
    |     ^
296 |
297 |         return warnings
    |

src_refactored\infrastructure\settings\settings_migration_service.py:299:1: SyntaxError: unindent does not match any outer indentation level
    |
297 |         return warnings
298 |
299 |     def get_supported_versions(self) -> list[str]:
    | ^
300 |         """Get list of supported versions for migration.
    |

src_refactored\infrastructure\settings\settings_migration_service.py:307:1: SyntaxError: unindent does not match any outer indentation level
    |
305 |         return ["0.1.0", "0.2.0", "0.3.0", "1.0.0"]
306 |
307 |     def add_migration_handler(
    | ^
308 |     self,
309 |     transition: str,
    |

src_refactored\infrastructure\settings\settings_migration_service.py:322:1: SyntaxError: unindent does not match any outer indentation level
    |
320 |         self._migration_handlers[transition] = handler
321 |
322 |     def load_settings_from_json(self, ui_controls: dict[str, Any] | None = None) -> dict[str, Any]:
    | ^
323 |         """Load settings from JSON and apply defaults.
    |

src_refactored\infrastructure\settings\settings_migration_service.py:356:17: SyntaxError: Expected ',', found string
    |
354 |             loaded_settings = {
355 |                 "default_model": settings.get("model", defaults["model"])
356 |                 "default_quantization": settings.get("quantization", defaults["quantization"])
    |                 ^
357 |                 "default_recording_sound": settings.get("recording_sound_enabled",
358 |                 defaults["recording_sound_enabled"])
    |

src_refactored\infrastructure\settings\settings_migration_service.py:357:17: SyntaxError: Expected ',', found string
    |
355 |                 "default_model": settings.get("model", defaults["model"])
356 |                 "default_quantization": settings.get("quantization", defaults["quantization"])
357 |                 "default_recording_sound": settings.get("recording_sound_enabled",
    |                 ^
358 |                 defaults["recording_sound_enabled"])
359 |                 "default_sound_path": settings.get("sound_file_path", defaults["sound_file_path"])
    |

src_refactored\infrastructure\settings\settings_migration_service.py:359:17: SyntaxError: Expected ',', found string
    |
357 |                 "default_recording_sound": settings.get("recording_sound_enabled",
358 |                 defaults["recording_sound_enabled"])
359 |                 "default_sound_path": settings.get("sound_file_path", defaults["sound_file_path"])
    |                 ^
360 |                 "default_output_srt": settings.get("output_srt", defaults["output_srt"])
361 |                 "default_rec_key": settings.get("recording_key", defaults["recording_key"])
    |

src_refactored\infrastructure\settings\settings_migration_service.py:360:17: SyntaxError: Expected ',', found string
    |
358 |                 defaults["recording_sound_enabled"])
359 |                 "default_sound_path": settings.get("sound_file_path", defaults["sound_file_path"])
360 |                 "default_output_srt": settings.get("output_srt", defaults["output_srt"])
    |                 ^
361 |                 "default_rec_key": settings.get("recording_key", defaults["recording_key"])
362 |                 "default_llm_enabled": settings.get("llm_enabled", defaults["llm_enabled"])
    |

src_refactored\infrastructure\settings\settings_migration_service.py:361:17: SyntaxError: Expected ',', found string
    |
359 |                 "default_sound_path": settings.get("sound_file_path", defaults["sound_file_path"])
360 |                 "default_output_srt": settings.get("output_srt", defaults["output_srt"])
361 |                 "default_rec_key": settings.get("recording_key", defaults["recording_key"])
    |                 ^
362 |                 "default_llm_enabled": settings.get("llm_enabled", defaults["llm_enabled"])
363 |                 "default_llm_model": settings.get("llm_model", defaults["llm_model"])
    |

src_refactored\infrastructure\settings\settings_migration_service.py:362:17: SyntaxError: Expected ',', found string
    |
360 |                 "default_output_srt": settings.get("output_srt", defaults["output_srt"])
361 |                 "default_rec_key": settings.get("recording_key", defaults["recording_key"])
362 |                 "default_llm_enabled": settings.get("llm_enabled", defaults["llm_enabled"])
    |                 ^
363 |                 "default_llm_model": settings.get("llm_model", defaults["llm_model"])
364 |                 "default_llm_quantization": settings.get("llm_quantization", defaults["llm_quantization"])
    |

src_refactored\infrastructure\settings\settings_migration_service.py:363:17: SyntaxError: Expected ',', found string
    |
361 |                 "default_rec_key": settings.get("recording_key", defaults["recording_key"])
362 |                 "default_llm_enabled": settings.get("llm_enabled", defaults["llm_enabled"])
363 |                 "default_llm_model": settings.get("llm_model", defaults["llm_model"])
    |                 ^
364 |                 "default_llm_quantization": settings.get("llm_quantization", defaults["llm_quantization"])
365 |                 "default_llm_prompt": settings.get("llm_prompt", defaults["llm_prompt"])
    |

src_refactored\infrastructure\settings\settings_migration_service.py:364:17: SyntaxError: Expected ',', found string
    |
362 |                 "default_llm_enabled": settings.get("llm_enabled", defaults["llm_enabled"])
363 |                 "default_llm_model": settings.get("llm_model", defaults["llm_model"])
364 |                 "default_llm_quantization": settings.get("llm_quantization", defaults["llm_quantization"])
    |                 ^
365 |                 "default_llm_prompt": settings.get("llm_prompt", defaults["llm_prompt"])
366 |             }
    |

src_refactored\infrastructure\settings\settings_migration_service.py:364:101: E501 Line too long (106 > 100)
    |
362 |                 "default_llm_enabled": settings.get("llm_enabled", defaults["llm_enabled"])
363 |                 "default_llm_model": settings.get("llm_model", defaults["llm_model"])
364 |                 "default_llm_quantization": settings.get("llm_quantization", defaults["llm_quantization"])
    |                                                                                                     ^^^^^^ E501
365 |                 "default_llm_prompt": settings.get("llm_prompt", defaults["llm_prompt"])
366 |             }
    |

src_refactored\infrastructure\settings\settings_migration_service.py:365:17: SyntaxError: Expected ',', found string
    |
363 |                 "default_llm_model": settings.get("llm_model", defaults["llm_model"])
364 |                 "default_llm_quantization": settings.get("llm_quantization", defaults["llm_quantization"])
365 |                 "default_llm_prompt": settings.get("llm_prompt", defaults["llm_prompt"])
    |                 ^
366 |             }
    |

src_refactored\infrastructure\settings\settings_migration_service.py:365:89: COM812 Trailing comma missing
    |
363 |                 "default_llm_model": settings.get("llm_model", defaults["llm_model"])
364 |                 "default_llm_quantization": settings.get("llm_quantization", defaults["llm_quantization"])
365 |                 "default_llm_prompt": settings.get("llm_prompt", defaults["llm_prompt"])
    |                                                                                         ^ COM812
366 |             }
    |
    = help: Add trailing comma

src_refactored\infrastructure\settings\settings_migration_service.py:384:5: SyntaxError: unindent does not match any outer indentation level
    |
382 |             return {}
383 |
384 |     def _apply_settings_to_ui(self, settings: dict[str, Any], ui_controls: dict[str, Any]) -> None:
    |     ^
385 |         """Apply loaded settings to UI controls.
    |

src_refactored\infrastructure\settings\settings_migration_service.py:394:101: E501 Line too long (103 > 100)
    |
392 |             # Apply LLM settings to UI if controls exist
393 |             if ui_controls.get("enable_llm_toggle"):
394 |                 ui_controls["enable_llm_toggle"].setChecked(settings.get("default_llm_enabled", False))
    |                                                                                                     ^^^ E501
395 |
396 |             if ui_controls.get("llm_model_combo"):
    |

src_refactored\infrastructure\settings\settings_migration_service.py:397:101: E501 Line too long (113 > 100)
    |
396 |             if ui_controls.get("llm_model_combo"):
397 |                 ui_controls["llm_model_combo"].setCurrentText(settings.get("default_llm_model", "gemma-3-1b-it"))
    |                                                                                                     ^^^^^^^^^^^^^ E501
398 |
399 |             if ui_controls.get("llm_quant_combo"):
    |

src_refactored\infrastructure\settings\settings_migration_service.py:400:101: E501 Line too long (111 > 100)
    |
399 |             if ui_controls.get("llm_quant_combo"):
400 |                 ui_controls["llm_quant_combo"].setCurrentText(settings.get("default_llm_quantization", "Full"))
    |                                                                                                     ^^^^^^^^^^^ E501
401 |
402 |             if ui_controls.get("llm_prompt_textbox"):
    |

src_refactored\infrastructure\settings\settings_migration_service.py:408:82: SyntaxError: Expected dedent, found end of file
    |
406 |         except Exception as e:
407 |             if self.progress_callback:
408 |                 self.progress_callback(txt=f"Error applying settings to UI: {e}")
    |                                                                                  ^
    |

src_refactored\infrastructure\settings\settings_validator.py:34:101: E501 Line too long (101 > 100)
   |
32 |             "selected_model": {
33 |                 "type": str,
34 |                 "allowed_values": ["whisper-turbo", "lite-whisper-turbo", "lite-whisper-turbo-fast"],
   |                                                                                                     ^ E501
35 |                 "required": True,
36 |             },
   |

src_refactored\infrastructure\settings\settings_validator.py:284:24: BLE001 Do not catch blind exception: `Exception`
    |
282 |                     elif "default" in self._validation_rules[key]:
283 |                         sanitized[key] = self._validation_rules[key]["default"]
284 |                 except Exception:
    |                        ^^^^^^^^^ BLE001
285 |                     # If validation fails, use default if available
286 |                     if "default" in self._validation_rules[key]:
    |

src_refactored\infrastructure\system\application_lifecycle_service.py:250:13: SyntaxError: Expected ',', found string
    |
248 |         return {
249 |             "handlers_count": len(self._cleanup_handlers)
250 |             "shutdown_registered": self._is_shutdown_registered,
    |             ^
251 |             "shutdown_in_progress": self._shutdown_in_progress,
252 |             "exit_code": self._exit_code,
    |

src_refactored\infrastructure\system\environment_service.py:139:13: SyntaxError: Expected ',', found string
    |
137 |             "python_executable": sys.executable,
138 |             "working_directory": os.getcwd()
139 |             "temp_directory": self.get_temp_directory()
    |             ^
140 |             "user_home": self.get_user_home_directory(),
141 |         }
    |

src_refactored\infrastructure\system\environment_service.py:140:13: SyntaxError: Expected ',', found string
    |
138 |             "working_directory": os.getcwd()
139 |             "temp_directory": self.get_temp_directory()
140 |             "user_home": self.get_user_home_directory(),
    |             ^
141 |         }
    |

src_refactored\infrastructure\system\environment_service.py:212:41: SyntaxError: Expected an expression or a ')'
    |
211 |         self._configured_loggers.clear()
212 |         self._suppressed_warnings.clear(,
    |                                         ^
213 |     )
    |

src_refactored\infrastructure\system\logging_service.py:299:32: SyntaxError: Expected an expression or a ')'
    |
297 |         log_dir = Path(directory) if directory else self._log_directory
298 |         if log_dir is None:
299 |             log_dir = Path.cwd(,
    |                                ^
300 |     ) / "logs"
    |

src_refactored\infrastructure\system\logging_service.py:434:57: SyntaxError: missing closing quote in string literal
    |
432 |             # Configure the file handler
433 |             file_handler = logging.FileHandler(log_file_path)
434 |             file_handler.setFormatter(logging.Formatter("[%(asctime)s] %(levelname)s -
    |                                                         ^
435 |     %(message)s"))
436 |             file_handler.setLevel(logging.INFO)
    |

src_refactored\infrastructure\system\logging_service.py:435:5: SyntaxError: Expected an expression or a ')'
    |
433 |             file_handler = logging.FileHandler(log_file_path)
434 |             file_handler.setFormatter(logging.Formatter("[%(asctime)s] %(levelname)s -
435 |     %(message)s"))
    |     ^
436 |             file_handler.setLevel(logging.INFO)
    |

src_refactored\infrastructure\system\logging_service.py:435:15: SyntaxError: Expected ',', found name
    |
433 |             file_handler = logging.FileHandler(log_file_path)
434 |             file_handler.setFormatter(logging.Formatter("[%(asctime)s] %(levelname)s -
435 |     %(message)s"))
    |               ^
436 |             file_handler.setLevel(logging.INFO)
    |

src_refactored\infrastructure\system\logging_service.py:435:16: SyntaxError: missing closing quote in string literal
    |
433 |             file_handler = logging.FileHandler(log_file_path)
434 |             file_handler.setFormatter(logging.Formatter("[%(asctime)s] %(levelname)s -
435 |     %(message)s"))
    |                ^
436 |             file_handler.setLevel(logging.INFO)
    |

src_refactored\infrastructure\system\logging_service.py:439:13: SyntaxError: Expected ',', found name
    |
438 |             # Create a stream handler and set its level to WARNING
439 |             stream_handler = StreamHandler()
    |             ^
440 |             stream_handler.setLevel(logging.WARNING)  # Only show warnings and errors in console
    |

src_refactored\infrastructure\system\logging_service.py:440:13: SyntaxError: Expected ',', found name
    |
438 |             # Create a stream handler and set its level to WARNING
439 |             stream_handler = StreamHandler()
440 |             stream_handler.setLevel(logging.WARNING)  # Only show warnings and errors in console
    |             ^
441 |
442 |             # Add both handlers to the custom logger
    |

src_refactored\infrastructure\system\logging_service.py:443:13: SyntaxError: Expected ',', found name
    |
442 |             # Add both handlers to the custom logger
443 |             logger.addHandler(file_handler)
    |             ^
444 |             logger.addHandler(stream_handler)
    |

src_refactored\infrastructure\system\logging_service.py:444:13: SyntaxError: Expected ',', found name
    |
442 |             # Add both handlers to the custom logger
443 |             logger.addHandler(file_handler)
444 |             logger.addHandler(stream_handler)
    |             ^
445 |
446 |         # Track this logger
    |

src_refactored\infrastructure\system\logging_service.py:447:9: SyntaxError: Expected ',', found name
    |
446 |         # Track this logger
447 |         self._configured_loggers[__name__] = logger
    |         ^
448 |         self._is_configured = True
    |

src_refactored\infrastructure\system\logging_service.py:448:9: SyntaxError: Expected ',', found name
    |
446 |         # Track this logger
447 |         self._configured_loggers[__name__] = logger
448 |         self._is_configured = True
    |         ^
449 |
450 |         return logger
    |

src_refactored\infrastructure\system\logging_service.py:448:9: SyntaxError: Duplicate keyword argument ""
    |
446 |         # Track this logger
447 |         self._configured_loggers[__name__] = logger
448 |         self._is_configured = True
    |         ^
449 |
450 |         return logger
    |

src_refactored\infrastructure\system\logging_service.py:448:35: SyntaxError: Expected ')', found NonLogicalNewline
    |
446 |         # Track this logger
447 |         self._configured_loggers[__name__] = logger
448 |         self._is_configured = True
    |                                   ^
449 |
450 |         return logger
    |

src_refactored\infrastructure\system\logging_service.py:448:35: SyntaxError: Expected ',', found NonLogicalNewline
    |
446 |         # Track this logger
447 |         self._configured_loggers[__name__] = logger
448 |         self._is_configured = True
    |                                   ^
449 |
450 |         return logger
    |

src_refactored\infrastructure\system\platform_service.py:207:1: SyntaxError: Unexpected indentation
    |
205 | config_home = (
206 |     os.environ.get("XDG_CONFIG_HOME", os.path.join(os.path.expanduser("~"), ".config")))
207 |         return os.path.join(config_home, app_name.lower())
    | ^
208 |
209 |     def get_platform_specific_data_dir(self, app_name: str,
    |

src_refactored\infrastructure\system\platform_service.py:209:1: SyntaxError: unindent does not match any outer indentation level
    |
207 |         return os.path.join(config_home, app_name.lower())
208 |
209 |     def get_platform_specific_data_dir(self, app_name: str,
    | ^
210 |     ) -> str:
211 |         """Get platform-specific data directory.
    |

src_refactored\infrastructure\system\platform_service.py:229:1: SyntaxError: Unexpected indentation
    |
227 | data_home = (
228 |     os.environ.get("XDG_DATA_HOME", os.path.join(os.path.expanduser("~"), ".local", "share")))
229 |         return os.path.join(data_home, app_name.lower())
    | ^
230 |
231 |     def get_platform_specific_cache_dir(self, app_name: str,
    |

src_refactored\infrastructure\system\platform_service.py:231:1: SyntaxError: unindent does not match any outer indentation level
    |
229 |         return os.path.join(data_home, app_name.lower())
230 |
231 |     def get_platform_specific_cache_dir(self, app_name: str,
    | ^
232 |     ) -> str:
233 |         """Get platform-specific cache directory.
    |

src_refactored\infrastructure\system\platform_service.py:251:1: SyntaxError: Unexpected indentation
    |
249 | cache_home = (
250 |     os.environ.get("XDG_CACHE_HOME", os.path.join(os.path.expanduser("~"), ".cache")))
251 |         return os.path.join(cache_home, app_name.lower())
    | ^
252 |
253 |     def get_executable_extension(self) -> str:
    |

src_refactored\infrastructure\system\platform_service.py:253:1: SyntaxError: unindent does not match any outer indentation level
    |
251 |         return os.path.join(cache_home, app_name.lower())
252 |
253 |     def get_executable_extension(self) -> str:
    | ^
254 |         """Get platform-specific executable extension.
    |

src_refactored\infrastructure\system\platform_service.py:263:1: SyntaxError: unindent does not match any outer indentation level
    |
261 |         return ""
262 |
263 |     def get_library_extension(self) -> str:
    | ^
264 |         """Get platform-specific library extension.
    |

src_refactored\infrastructure\system\platform_service.py:275:1: SyntaxError: unindent does not match any outer indentation level
    |
273 |         return ".so"
274 |
275 |     def get_path_separator(self) -> str:
    | ^
276 |         """Get platform-specific path separator.
    |

src_refactored\infrastructure\system\platform_service.py:283:1: SyntaxError: unindent does not match any outer indentation level
    |
281 |         return os.path.sep
282 |
283 |     def get_path_list_separator(self) -> str:
    | ^
284 |         """Get platform-specific path list separator (for PATH environment variable).
    |

src_refactored\infrastructure\system\platform_service.py:291:1: SyntaxError: unindent does not match any outer indentation level
    |
289 |         return os.path.pathsep
290 |
291 |     def normalize_path(self, path: str,
    | ^
292 |     ) -> str:
293 |         """Normalize a path for the current platform.
    |

src_refactored\infrastructure\system\platform_service.py:303:1: SyntaxError: unindent does not match any outer indentation level
    |
301 |         return os.path.normpath(path)
302 |
303 |     def _load_win32_modules(self) -> None:
    | ^
304 |         """Load Windows-specific modules if available."""
305 |         try:
    |

src_refactored\infrastructure\system\platform_service.py:317:5: SyntaxError: unindent does not match any outer indentation level
    |
315 |             pass
316 |
317 |     def get_missing_dependencies(self) -> dict[str, str]:
    |     ^
318 |         """Get information about missing platform-specific dependencies.
    |

src_refactored\infrastructure\system\platform_service.py:333:1: SyntaxError: unindent does not match any outer indentation level
    |
331 |         return missing
332 |
333 |     def validate_platform_requirements(self) -> dict[str, bool]:
    | ^
334 |         """Validate that platform-specific requirements are met.
    |

src_refactored\infrastructure\system\platform_service.py:341:13: SyntaxError: Expected ',', found string
    |
339 |         requirements = {
340 |             "platform_supported": self.is_windows() or self.is_linux() or self.is_macos()
341 |             "python_version_supported": sys.version_info >= (3, 8),
    |             ^
342 |         }
    |

src_refactored\infrastructure\system\platform_service.py:347:28: SyntaxError: Expected dedent, found end of file
    |
345 |             requirements["windows_modules_available"] = self.has_pywin32()
346 |
347 |         return requirements
    |                            ^
    |

src_refactored\infrastructure\system\single_instance_service.py:57:13: TRY300 Consider moving this statement to an `else` block
   |
55 |             self._socket.listen(1)
56 |             self._is_bound = True
57 |             return False  # No other instance running
   |             ^^^^^^^^^^^^ TRY300
58 |         except OSError:
59 |             # Port is already in use, another instance is running
   |

src_refactored\infrastructure\system\single_instance_service.py:85:9: S110 `try`-`except`-`pass` detected, consider logging the exception
   |
83 |                   win32gui.SetForegroundWindow(hwnd)
84 |                   return True
85 | /         except Exception:
86 | |             # Ignore errors in window activation
87 | |             pass
   | |________________^ S110
88 |
89 |           return False
   |

src_refactored\infrastructure\system\single_instance_service.py:85:16: BLE001 Do not catch blind exception: `Exception`
   |
83 |                 win32gui.SetForegroundWindow(hwnd)
84 |                 return True
85 |         except Exception:
   |                ^^^^^^^^^ BLE001
86 |             # Ignore errors in window activation
87 |             pass
   |

src_refactored\infrastructure\system\single_instance_service.py:104:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
102 |               try:
103 |                   self._socket.close()
104 | /             except Exception:
105 | |                 pass
    | |____________________^ S110
106 |               finally:
107 |                   self._socket = None
    |

src_refactored\infrastructure\system\single_instance_service.py:104:20: BLE001 Do not catch blind exception: `Exception`
    |
102 |             try:
103 |                 self._socket.close()
104 |             except Exception:
    |                    ^^^^^^^^^ BLE001
105 |                 pass
106 |             finally:
    |

src_refactored\infrastructure\system\single_instance_service.py:166:13: TRY300 Consider moving this statement to an `else` block
    |
164 |         try:
165 |             hwnd = win32gui.FindWindow(None, title)
166 |             return hwnd if hwnd else None
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
167 |         except Exception:
168 |             return None
    |

src_refactored\infrastructure\system\single_instance_service.py:167:16: BLE001 Do not catch blind exception: `Exception`
    |
165 |             hwnd = win32gui.FindWindow(None, title)
166 |             return hwnd if hwnd else None
167 |         except Exception:
    |                ^^^^^^^^^ BLE001
168 |             return None
    |

src_refactored\infrastructure\system\single_instance_service.py:186:13: TRY300 Consider moving this statement to an `else` block
    |
184 |             win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)
185 |             win32gui.SetForegroundWindow(hwnd)
186 |             return True
    |             ^^^^^^^^^^^ TRY300
187 |         except Exception:
188 |             return False
    |

src_refactored\infrastructure\system\single_instance_service.py:187:16: BLE001 Do not catch blind exception: `Exception`
    |
185 |             win32gui.SetForegroundWindow(hwnd)
186 |             return True
187 |         except Exception:
    |                ^^^^^^^^^ BLE001
188 |             return False
    |

src_refactored\infrastructure\system\subprocess_service.py:39:13: N806 Variable `CREATE_NO_WINDOW` in function should be lowercase
   |
37 |         if sys.platform == "win32":
38 |             # Suppress the console window on Windows
39 |             CREATE_NO_WINDOW = 0x08000000
   |             ^^^^^^^^^^^^^^^^ N806
40 |             kwargs["creationflags"] = kwargs.get("creationflags", 0) | CREATE_NO_WINDOW
   |

src_refactored\infrastructure\system\subprocess_service.py:56:13: N806 Variable `CREATE_NO_WINDOW` in function should be lowercase
   |
54 |         if sys.platform == "win32":
55 |             # Suppress the console window on Windows
56 |             CREATE_NO_WINDOW = 0x08000000
   |             ^^^^^^^^^^^^^^^^ N806
57 |             kwargs["creationflags"] = kwargs.get("creationflags", 0) | CREATE_NO_WINDOW
   |

src_refactored\infrastructure\system\subprocess_service.py:59:16: S603 `subprocess` call: check for execution of untrusted input
   |
57 |             kwargs["creationflags"] = kwargs.get("creationflags", 0) | CREATE_NO_WINDOW
58 |
59 |         return subprocess.run(*args, **kwargs, check=False)
   |                ^^^^^^^^^^^^^^ S603
60 |
61 |     def check_output_suppressed(self, *args, **kwargs) -> bytes:
   |

src_refactored\infrastructure\system\subprocess_service.py:73:13: N806 Variable `CREATE_NO_WINDOW` in function should be lowercase
   |
71 |         if sys.platform == "win32":
72 |             # Suppress the console window on Windows
73 |             CREATE_NO_WINDOW = 0x08000000
   |             ^^^^^^^^^^^^^^^^ N806
74 |             kwargs["creationflags"] = kwargs.get("creationflags", 0) | CREATE_NO_WINDOW
   |

src_refactored\infrastructure\system\subprocess_service.py:76:16: S603 `subprocess` call: check for execution of untrusted input
   |
74 |             kwargs["creationflags"] = kwargs.get("creationflags", 0) | CREATE_NO_WINDOW
75 |
76 |         return subprocess.check_output(*args, **kwargs)
   |                ^^^^^^^^^^^^^^^^^^^^^^^ S603
77 |
78 |     def call_suppressed(self, *args, **kwargs) -> int:
   |

src_refactored\infrastructure\system\subprocess_service.py:90:13: N806 Variable `CREATE_NO_WINDOW` in function should be lowercase
   |
88 |         if sys.platform == "win32":
89 |             # Suppress the console window on Windows
90 |             CREATE_NO_WINDOW = 0x08000000
   |             ^^^^^^^^^^^^^^^^ N806
91 |             kwargs["creationflags"] = kwargs.get("creationflags", 0) | CREATE_NO_WINDOW
   |

src_refactored\infrastructure\system\subprocess_service.py:93:16: S603 `subprocess` call: check for execution of untrusted input
   |
91 |             kwargs["creationflags"] = kwargs.get("creationflags", 0) | CREATE_NO_WINDOW
92 |
93 |         return subprocess.call(*args, **kwargs)
   |                ^^^^^^^^^^^^^^^ S603
94 |
95 |     @contextmanager
   |

src_refactored\infrastructure\system\subprocess_service.py:163:13: N806 Variable `CREATE_NO_WINDOW` in function should be lowercase
    |
161 |         flags = 0
162 |         if suppress_console:
163 |             CREATE_NO_WINDOW = 0x08000000
    |             ^^^^^^^^^^^^^^^^ N806
164 |             flags |= CREATE_NO_WINDOW
    |

src_refactored\infrastructure\system\subprocess_service.py:217:16: S603 `subprocess` call: check for execution of untrusted input
    |
215 |         run_kwargs = self.prepare_subprocess_kwargs(run_kwargs, suppress_console)
216 |
217 |         return subprocess.run(command, **run_kwargs, check=False)
    |                ^^^^^^^^^^^^^^ S603
218 |
219 |     def check_command_exists(self, command: str,
    |

src_refactored\infrastructure\system\subprocess_service.py:235:13: TRY300 Consider moving this statement to an `else` block
    |
233 |                 suppress_console=True,
234 |             )
235 |             return result.returncode == 0
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
236 |         except (subprocess.SubprocessError, FileNotFoundError):
237 |             return False
    |

src_refactored\infrastructure\system\tray_icon_service.py:131:53: SyntaxError: Expected ',', found ':'
    |
129 |     def show_message(self,
130 | title: str, message: str, icon_type: QSystemTrayIcon.MessageIcon = (
131 |     QSystemTrayIcon.MessageIcon.Information, timeout: int = 5000) -> None:)
    |                                                     ^
132 |         """Show a notification message from the tray icon.
    |

src_refactored\infrastructure\system\tray_icon_service.py:131:59: SyntaxError: Expected ',', found '='
    |
129 |     def show_message(self,
130 | title: str, message: str, icon_type: QSystemTrayIcon.MessageIcon = (
131 |     QSystemTrayIcon.MessageIcon.Information, timeout: int = 5000) -> None:)
    |                                                           ^
132 |         """Show a notification message from the tray icon.
    |

src_refactored\infrastructure\system\tray_icon_service.py:131:67: SyntaxError: Expected ')', found '->'
    |
129 |     def show_message(self,
130 | title: str, message: str, icon_type: QSystemTrayIcon.MessageIcon = (
131 |     QSystemTrayIcon.MessageIcon.Information, timeout: int = 5000) -> None:)
    |                                                                   ^
132 |         """Show a notification message from the tray icon.
    |

src_refactored\infrastructure\system\tray_icon_service.py:131:75: SyntaxError: Expected a simple statement
    |
129 |     def show_message(self,
130 | title: str, message: str, icon_type: QSystemTrayIcon.MessageIcon = (
131 |     QSystemTrayIcon.MessageIcon.Information, timeout: int = 5000) -> None:)
    |                                                                           ^
132 |         """Show a notification message from the tray icon.
    |

src_refactored\infrastructure\system\tray_icon_service.py:131:76: SyntaxError: Expected a statement
    |
129 |     def show_message(self,
130 | title: str, message: str, icon_type: QSystemTrayIcon.MessageIcon = (
131 |     QSystemTrayIcon.MessageIcon.Information, timeout: int = 5000) -> None:)
    |                                                                            ^
132 |         """Show a notification message from the tray icon.
    |

src_refactored\infrastructure\system\tray_icon_service.py:132:1: SyntaxError: Unexpected indentation
    |
130 | title: str, message: str, icon_type: QSystemTrayIcon.MessageIcon = (
131 |     QSystemTrayIcon.MessageIcon.Information, timeout: int = 5000) -> None:)
132 |         """Show a notification message from the tray icon.
    | ^
133 |         
134 |         Args:
    |

src_refactored\infrastructure\system\tray_icon_service.py:140:56: SyntaxError: Expected an expression or a ')'
    |
138 |             timeout: Message timeout in milliseconds
139 |         """
140 |         if self.tray_icon and self.tray_icon.isVisible(,
    |                                                        ^
141 |     ):
142 |             self.tray_icon.showMessage(title, message, icon_type, timeout)
    |

src_refactored\infrastructure\system\tray_icon_service.py:262:101: E501 Line too long (110 > 100)
    |
261 |         # Default behavior: show window on double-click or trigger
262 |         if reason in (QSystemTrayIcon.ActivationReason.DoubleClick, QSystemTrayIcon.ActivationReason.Trigger):
    |                                                                                                     ^^^^^^^^^^ E501
263 |             self._on_show_requested()
    |

src_refactored\infrastructure\system\tray_icon_service.py:280:55: SyntaxError: Expected a statement
    |
278 |             True if system tray is available, False otherwise
279 |         """
280 |         return QSystemTrayIcon.isSystemTrayAvailable()
    |                                                       ^
    |

src_refactored\infrastructure\system\window_activation_service.py:39:101: E501 Line too long (124 > 100)
   |
38 |     def __repr__(self) -> str:
39 |         return f"WindowInfo(hwnd={self.hwnd}, title='{self.title}', class_name='{self.class_name}', visible={self.visible})"
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ E501
   |

src_refactored\infrastructure\system\window_activation_service.py:89:13: S110 `try`-`except`-`pass` detected, consider logging the exception
   |
87 |                   window_info = WindowInfo(hwnd, title, class_name, visible)
88 |                   result_list.append(window_info)
89 | /             except Exception:
90 | |                 # Ignore errors for individual windows
91 | |                 pass
   | |____________________^ S110
92 |               return True
   |

src_refactored\infrastructure\system\window_activation_service.py:89:20: BLE001 Do not catch blind exception: `Exception`
   |
87 |                 window_info = WindowInfo(hwnd, title, class_name, visible)
88 |                 result_list.append(window_info)
89 |             except Exception:
   |                    ^^^^^^^^^ BLE001
90 |                 # Ignore errors for individual windows
91 |                 pass
   |

src_refactored\infrastructure\system\window_activation_service.py:94:9: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    |
 92 |               return True
 93 |
 94 | /         try:
 95 | |             win32gui.EnumWindows(enum_callback, windows)
 96 | |         except Exception:
 97 | |             # Return empty list if enumeration fails
 98 | |             pass
    | |________________^ SIM105
 99 |
100 |           return windows
    |
    = help: Replace with `contextlib.suppress(Exception)`

src_refactored\infrastructure\system\window_activation_service.py:96:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
 94 |           try:
 95 |               win32gui.EnumWindows(enum_callback, windows)
 96 | /         except Exception:
 97 | |             # Return empty list if enumeration fails
 98 | |             pass
    | |________________^ S110
 99 |
100 |           return windows
    |

src_refactored\infrastructure\system\window_activation_service.py:96:16: BLE001 Do not catch blind exception: `Exception`
   |
94 |         try:
95 |             win32gui.EnumWindows(enum_callback, windows)
96 |         except Exception:
   |                ^^^^^^^^^ BLE001
97 |             # Return empty list if enumeration fails
98 |             pass
   |

src_refactored\infrastructure\system\window_activation_service.py:118:20: BLE001 Do not catch blind exception: `Exception`
    |
116 |                     return window_title == title
117 |                 return title.lower() in window_title.lower()
118 |             except Exception:
    |                    ^^^^^^^^^ BLE001
119 |                 return False
    |

src_refactored\infrastructure\system\window_activation_service.py:138:17: TRY300 Consider moving this statement to an `else` block
    |
136 |             try:
137 |                 window_class = win32gui.GetClassName(hwnd)
138 |                 return window_class == class_name
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
139 |             except Exception:
140 |                 return False
    |

src_refactored\infrastructure\system\window_activation_service.py:139:20: BLE001 Do not catch blind exception: `Exception`
    |
137 |                 window_class = win32gui.GetClassName(hwnd)
138 |                 return window_class == class_name
139 |             except Exception:
    |                    ^^^^^^^^^ BLE001
140 |                 return False
    |

src_refactored\infrastructure\system\window_activation_service.py:167:20: BLE001 Do not catch blind exception: `Exception`
    |
165 |                     return window_title == title
166 |                 return title.lower() in window_title.lower()
167 |             except Exception:
    |                    ^^^^^^^^^ BLE001
168 |                 return False
    |

src_refactored\infrastructure\system\window_activation_service.py:191:13: TRY300 Consider moving this statement to an `else` block
    |
189 |             # Bring window to foreground
190 |             win32gui.SetForegroundWindow(hwnd)
191 |             return True
    |             ^^^^^^^^^^^ TRY300
192 |         except Exception:
193 |             return False
    |

src_refactored\infrastructure\system\window_activation_service.py:192:16: BLE001 Do not catch blind exception: `Exception`
    |
190 |             win32gui.SetForegroundWindow(hwnd)
191 |             return True
192 |         except Exception:
    |                ^^^^^^^^^ BLE001
193 |             return False
    |

src_refactored\infrastructure\system\window_activation_service.py:245:13: TRY300 Consider moving this statement to an `else` block
    |
243 |         try:
244 |             win32gui.ShowWindow(hwnd, show_cmd)
245 |             return True
    |             ^^^^^^^^^^^ TRY300
246 |         except Exception:
247 |             return False
    |

src_refactored\infrastructure\system\window_activation_service.py:246:16: BLE001 Do not catch blind exception: `Exception`
    |
244 |             win32gui.ShowWindow(hwnd, show_cmd)
245 |             return True
246 |         except Exception:
    |                ^^^^^^^^^ BLE001
247 |             return False
    |

src_refactored\infrastructure\system\window_activation_service.py:312:16: BLE001 Do not catch blind exception: `Exception`
    |
310 |         try:
311 |             return win32gui.IsWindowVisible(hwnd)
312 |         except Exception:
    |                ^^^^^^^^^ BLE001
313 |             return False
    |

src_refactored\infrastructure\system\window_activation_service.py:330:16: BLE001 Do not catch blind exception: `Exception`
    |
328 |         try:
329 |             return win32gui.GetWindowText(hwnd)
330 |         except Exception:
    |                ^^^^^^^^^ BLE001
331 |             return ""
    |

src_refactored\infrastructure\system\window_activation_service.py:348:16: BLE001 Do not catch blind exception: `Exception`
    |
346 |         try:
347 |             return win32gui.GetClassName(hwnd)
348 |         except Exception:
    |                ^^^^^^^^^ BLE001
349 |             return ""
    |

src_refactored\infrastructure\system\window_activation_service.py:370:16: BLE001 Do not catch blind exception: `Exception`
    |
368 |     )
369 |             return WindowInfo(hwnd, title, class_name, visible)
370 |         except Exception:
    |                ^^^^^^^^^ BLE001
371 |             return None
    |

src_refactored\infrastructure\system\window_activation_service.py:399:17: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
397 |                           if window_title == app_title:
398 |                               result_list.append(hwnd)
399 | /                 except Exception:
400 | |                     pass
    | |________________________^ S110
401 |                   return True
    |

src_refactored\infrastructure\system\window_activation_service.py:399:24: BLE001 Do not catch blind exception: `Exception`
    |
397 |                         if window_title == app_title:
398 |                             result_list.append(hwnd)
399 |                 except Exception:
    |                        ^^^^^^^^^ BLE001
400 |                     pass
401 |                 return True
    |

src_refactored\infrastructure\system\window_activation_service.py:410:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
408 |                   win32gui.SetForegroundWindow(hwnd_list[0])
409 |                   return True
410 | /         except Exception:
411 | |             pass
    | |________________^ S110
412 |
413 |           return False
    |

src_refactored\infrastructure\system\window_activation_service.py:410:16: BLE001 Do not catch blind exception: `Exception`
    |
408 |                 win32gui.SetForegroundWindow(hwnd_list[0])
409 |                 return True
410 |         except Exception:
    |                ^^^^^^^^^ BLE001
411 |             pass
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:178:35: G004 Logging statement uses f-string
    |
177 |         except Exception as e:
178 |             self.logger.exception(f"Error in drag enter: {e!s}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
179 |             event.ignore()
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:178:59: TRY401 Redundant exception object included in `logging.exception` call
    |
177 |         except Exception as e:
178 |             self.logger.exception(f"Error in drag enter: {e!s}")
    |                                                           ^ TRY401
179 |             event.ignore()
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:200:35: G004 Logging statement uses f-string
    |
199 |         except Exception as e:
200 |             self.logger.exception(f"Error in drag leave: {e!s}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
201 |
202 |     def _handle_drop(self, event: QDropEvent) -> None:
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:200:59: TRY401 Redundant exception object included in `logging.exception` call
    |
199 |         except Exception as e:
200 |             self.logger.exception(f"Error in drag leave: {e!s}")
    |                                                           ^ TRY401
201 |
202 |     def _handle_drop(self, event: QDropEvent) -> None:
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:258:47: G004 Logging statement uses f-string
    |
256 |                         handler(files)
257 |                     except Exception as e:
258 |                         self.logger.exception(f"Error in drop handler: {e!s}")
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
259 |                         errors.append(f"Handler error: {e!s}")
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:258:73: TRY401 Redundant exception object included in `logging.exception` call
    |
256 |                         handler(files)
257 |                     except Exception as e:
258 |                         self.logger.exception(f"Error in drop handler: {e!s}")
    |                                                                         ^ TRY401
259 |                         errors.append(f"Handler error: {e!s}")
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:282:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
281 |               # Check file extension
282 | /             if self.config.accepted_extensions:
283 | |                 if file_path.suffix.lower() not in self.config.accepted_extensions:
    | |___________________________________________________________________________________^ SIM102
284 |                       return False
    |
    = help: Combine `if` statements using `and`

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:292:13: TRY300 Consider moving this statement to an `else` block
    |
290 |                     return False
291 |
292 |             return True
    |             ^^^^^^^^^^^ TRY300
293 |
294 |         except Exception as e:
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:295:35: G004 Logging statement uses f-string
    |
294 |         except Exception as e:
295 |             self.logger.exception(f"Error checking file acceptability: {e!s}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
296 |             return False
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:295:73: TRY401 Redundant exception object included in `logging.exception` call
    |
294 |         except Exception as e:
295 |             self.logger.exception(f"Error checking file acceptability: {e!s}")
    |                                                                         ^ TRY401
296 |             return False
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:304:21: PERF401 Use `list.extend` to create a transformed list
    |
302 |             for file_path in directory.rglob("*"):
303 |                 if file_path.is_file() and self._is_acceptable_file(file_path):
304 |                     files.append(file_path)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ PERF401
305 |         except Exception as e:
306 |             self.logger.exception(f"Error collecting files from directory: {e!s}")
    |
    = help: Replace for loop with list.extend

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:306:35: G004 Logging statement uses f-string
    |
304 |                     files.append(file_path)
305 |         except Exception as e:
306 |             self.logger.exception(f"Error collecting files from directory: {e!s}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
307 |
308 |         return files
    |

src_refactored\infrastructure\system_integration\drag_drop_integration_service.py:306:77: TRY401 Redundant exception object included in `logging.exception` call
    |
304 |                     files.append(file_path)
305 |         except Exception as e:
306 |             self.logger.exception(f"Error collecting files from directory: {e!s}")
    |                                                                             ^ TRY401
307 |
308 |         return files
    |

src_refactored\infrastructure\system_integration\event_filter_service.py:67:9: PLR0911 Too many return statements (8 > 6)
   |
65 |     )
66 |
67 |     def install_filter(self, filter_id: str, target: QObject | None = None) -> Result[None]:
   |         ^^^^^^^^^^^^^^ PLR0911
68 |         """Install an event filter.
   |

src_refactored\infrastructure\system_integration\event_filter_service.py:161:9: N802 Function name `eventFilter` should be lowercase
    |
159 |             return Result.failure(error_msg)
160 |
161 |     def eventFilter(self, obj: QObject, event: QEvent,
    |         ^^^^^^^^^^^ N802
162 |     ) -> bool:
163 |         """Qt event filter implementation.
    |

src_refactored\infrastructure\system_integration\event_filter_service.py:199:13: TRY300 Consider moving this statement to an `else` block
    |
197 |                         return True
198 |
199 |             return False
    |             ^^^^^^^^^^^^ TRY300
200 |
201 |         except Exception as e:
    |

src_refactored\infrastructure\system_integration\event_filter_service.py:202:35: G004 Logging statement uses f-string
    |
201 |         except Exception as e:
202 |             self.logger.exception(f"Error in event filter: {e!s}")
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
203 |             return False
    |

src_refactored\infrastructure\system_integration\event_filter_service.py:202:61: TRY401 Redundant exception object included in `logging.exception` call
    |
201 |         except Exception as e:
202 |             self.logger.exception(f"Error in event filter: {e!s}")
    |                                                             ^ TRY401
203 |             return False
    |

src_refactored\infrastructure\system_integration\event_filter_service.py:229:38: ARG002 Unused method argument: `obj`
    |
227 |         return event_type in config.event_types
228 |
229 |     def _default_event_handler(self, obj: QObject, event: QEvent,
    |                                      ^^^ ARG002
230 |                               config: EventFilterConfig,
231 |     ) -> bool:
    |

src_refactored\infrastructure\system_integration\event_filter_service.py:229:52: ARG002 Unused method argument: `event`
    |
227 |         return event_type in config.event_types
228 |
229 |     def _default_event_handler(self, obj: QObject, event: QEvent,
    |                                                    ^^^^^ ARG002
230 |                               config: EventFilterConfig,
231 |     ) -> bool:
    |

src_refactored\infrastructure\system_integration\event_filter_service.py:230:31: ARG002 Unused method argument: `config`
    |
229 |     def _default_event_handler(self, obj: QObject, event: QEvent,
230 |                               config: EventFilterConfig,
    |                               ^^^^^^ ARG002
231 |     ) -> bool:
232 |         """Default event handler implementation.
    |

src_refactored\infrastructure\system_integration\geometry_management_service.py:83:101: E501 Line too long (105 > 100)
   |
82 |     def calculate_optimal_geometry(self,
83 | widget: QWidget, mode: GeometryMode, reference_geometry: WindowGeometry | None = None) -> WindowGeometry:
   |                                                                                                     ^^^^^ E501
84 |         """Calculate optimal geometry based on mode."""
85 |         ...
   |

src_refactored\infrastructure\system_integration\geometry_management_service.py:137:31: G004 Logging statement uses f-string
    |
136 |             self.geometry_changed.emit(widget_name, geometry)
137 |             self.logger.debug(f"Set geometry for {widget_name}: {geometry.width}x{geometry.height} at ({geometry.x}, {geometry.y})")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
138 |             return Result.success(None)
    |

src_refactored\infrastructure\system_integration\geometry_management_service.py:137:101: E501 Line too long (132 > 100)
    |
136 |             self.geometry_changed.emit(widget_name, geometry)
137 |             self.logger.debug(f"Set geometry for {widget_name}: {geometry.width}x{geometry.height} at ({geometry.x}, {geometry.y})")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
138 |             return Result.success(None)
    |

src_refactored\infrastructure\system_integration\geometry_management_service.py:161:13: TRY300 Consider moving this statement to an `else` block
    |
159 |                 self.central_widget_resized.emit(geometry.width, geometry.height)
160 |
161 |             return result
    |             ^^^^^^^^^^^^^ TRY300
162 |
163 |         except Exception as e:
    |

src_refactored\infrastructure\system_integration\geometry_management_service.py:169:9: PLR0911 Too many return statements (8 > 6)
    |
167 |             return Result.failure(error_msg)
168 |
169 |     def calculate_optimal_geometry(self,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0911
170 |         widget: QWidget, mode: GeometryMode, reference_geometry: WindowGeometry | None = None) -> Result[WindowGeometry]:
171 |         """Calculate optimal geometry based on mode."""
    |

src_refactored\infrastructure\system_integration\geometry_management_service.py:170:101: E501 Line too long (121 > 100)
    |
169 |     def calculate_optimal_geometry(self,
170 |         widget: QWidget, mode: GeometryMode, reference_geometry: WindowGeometry | None = None) -> Result[WindowGeometry]:
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^ E501
171 |         """Calculate optimal geometry based on mode."""
172 |         try:
    |

src_refactored\infrastructure\system_integration\geometry_management_service.py:190:101: E501 Line too long (112 > 100)
    |
188 |                     x = (screen_geometry.width() - current_geometry.width) // 2
189 |                     y = (screen_geometry.height() - current_geometry.height) // 2
190 |                     return Result.success(WindowGeometry(x, y, current_geometry.width, current_geometry.height))
    |                                                                                                     ^^^^^^^^^^^^ E501
191 |
192 |             elif mode == GeometryMode.FILL_PARENT:
    |

src_refactored\infrastructure\system_integration\geometry_management_service.py:260:101: E501 Line too long (101 > 100)
    |
259 |             if result.is_success:
260 |                 self.logger.debug("Handled resize event: {main_window.width()}x{main_window.height()\
    |                                                                                                     ^ E501
261 |     }")
    |

src_refactored\infrastructure\system_integration\geometry_management_service.py:263:13: TRY300 Consider moving this statement to an `else` block
    |
261 |     }")
262 |
263 |             return result
    |             ^^^^^^^^^^^^^ TRY300
264 |
265 |         except Exception as e:
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:57:9: SyntaxError: Expected ')', found name
   |
55 | self._delegated_methods: dict[str, dict[str, MethodInfo]] = (
56 |     {}  # class_name -> {method_name -> MethodInfo})
57 |         self._source_modules: dict[str, Any] = {}  # module_path -> module_object
   |         ^
58 |
59 |     def register_delegation_configuration(self, config: DelegationConfiguration,
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:59:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
   |
57 |         self._source_modules: dict[str, Any] = {}  # module_path -> module_object
58 |
59 |     def register_delegation_configuration(self, config: DelegationConfiguration,
   |     ^
60 |     ) -> Result[None]:
61 |         """Register a delegation configuration."""
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:62:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
   |
60 |     ) -> Result[None]:
61 |         """Register a delegation configuration."""
62 |         try:
   |         ^
63 |             if config.target_class_name not in self._delegated_methods:
64 |                 self._delegated_methods[config.target_class_name] = {}
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:63:13: SyntaxError: Expected a simple statement
   |
61 |         """Register a delegation configuration."""
62 |         try:
63 |             if config.target_class_name not in self._delegated_methods:
   |             ^
64 |                 self._delegated_methods[config.target_class_name] = {}
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:66:13: SyntaxError: Compound statements are not allowed on the same line as simple statements
   |
64 |                 self._delegated_methods[config.target_class_name] = {}
65 |
66 |             for method_info in config.methods:
   |             ^
67 |                 self._delegated_methods[config.target_class_name][method_info.name] = method_info
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:70:34: SyntaxError: Expected 'else', found ':'
   |
69 |             # Import source module if auto_import is enabled
70 |             if config.auto_import:
   |                                  ^
71 |                 import_result = self._import_source_module(config.source_module_path)
72 |                 if not import_result.is_success:
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:72:48: SyntaxError: Expected 'else', found ':'
   |
70 |             if config.auto_import:
71 |                 import_result = self._import_source_module(config.source_module_path)
72 |                 if not import_result.is_success:
   |                                                ^
73 |                     return Result.failure(f"Failed to import source module: {import_result.error()}"\
74 |     )
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:73:101: E501 Line too long (101 > 100)
   |
71 |                 import_result = self._import_source_module(config.source_module_path)
72 |                 if not import_result.is_success:
73 |                     return Result.failure(f"Failed to import source module: {import_result.error()}"\
   |                                                                                                     ^ E501
74 |     )
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:76:13: SyntaxError: Simple statements must be separated by newlines or semicolons
   |
74 |     )
75 |
76 |             self.logger.debug("Registered delegation configuration for {config.target_class_name} wi\
   |             ^
77 |     th {len(config.methods)} methods")
78 |             return Result.success(None)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:76:101: E501 Line too long (101 > 100)
   |
74 |     )
75 |
76 |             self.logger.debug("Registered delegation configuration for {config.target_class_name} wi\
   |                                                                                                     ^ E501
77 |     th {len(config.methods)} methods")
78 |             return Result.success(None)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:78:13: SyntaxError: Simple statements must be separated by newlines or semicolons
   |
76 |             self.logger.debug("Registered delegation configuration for {config.target_class_name} wi\
77 |     th {len(config.methods)} methods")
78 |             return Result.success(None)
   |             ^
79 |
80 |         except Exception as e:
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:80:9: SyntaxError: Expected a statement
   |
78 |             return Result.success(None)
79 |
80 |         except Exception as e:
   |         ^
81 |             error_msg = f"Failed to register delegation configuration: {e!s}"
82 |             self.logger.exception(error_msg)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:80:26: SyntaxError: Expected a statement
   |
78 |             return Result.success(None)
79 |
80 |         except Exception as e:
   |                          ^
81 |             error_msg = f"Failed to register delegation configuration: {e!s}"
82 |             self.logger.exception(error_msg)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:82:13: SyntaxError: Simple statements must be separated by newlines or semicolons
   |
80 |         except Exception as e:
81 |             error_msg = f"Failed to register delegation configuration: {e!s}"
82 |             self.logger.exception(error_msg)
   |             ^
83 |             return Result.failure(error_msg,
84 |     )
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:83:13: SyntaxError: Simple statements must be separated by newlines or semicolons
   |
81 |             error_msg = f"Failed to register delegation configuration: {e!s}"
82 |             self.logger.exception(error_msg)
83 |             return Result.failure(error_msg,
   |             ^
84 |     )
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:86:5: SyntaxError: Compound statements are not allowed on the same line as simple statements
   |
84 |     )
85 |
86 |     def delegate_method(self, target_instance: Any, method_info: MethodInfo,
   |     ^
87 |     ) -> Result[None]:
88 |         """Delegate a single method to target instance."""
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:89:9: SyntaxError: Compound statements are not allowed on the same line as simple statements
   |
87 |     ) -> Result[None]:
88 |         """Delegate a single method to target instance."""
89 |         try:
   |         ^
90 |             # Import source module if not already imported
91 |             if method_info.source_module not in self._source_modules:
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:91:13: SyntaxError: Expected a simple statement
   |
89 |         try:
90 |             # Import source module if not already imported
91 |             if method_info.source_module not in self._source_modules:
   |             ^
92 |                 import_result = self._import_source_module(method_info.source_module)
93 |                 if not import_result.is_success:
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:93:48: SyntaxError: Expected 'else', found ':'
   |
91 |             if method_info.source_module not in self._source_modules:
92 |                 import_result = self._import_source_module(method_info.source_module)
93 |                 if not import_result.is_success:
   |                                                ^
94 | error_msg = (
95 |     f"Failed to import source module {method_info.source_module}: {import_result.error()}
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:95:90: SyntaxError: f-string: unterminated string
   |
93 |                 if not import_result.is_success:
94 | error_msg = (
95 |     f"Failed to import source module {method_info.source_module}: {import_result.error()}
   |                                                                                          ^
96 |     )}"
97 |                     self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:96:5: SyntaxError: Expected an f-string element or the end of the f-string
   |
94 | error_msg = (
95 |     f"Failed to import source module {method_info.source_module}: {import_result.error()}
96 |     )}"
   |     ^
97 |                     self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
98 |                     return Result.failure(error_msg)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:96:6: SyntaxError: Expected an f-string element or the end of the f-string
   |
94 | error_msg = (
95 |     f"Failed to import source module {method_info.source_module}: {import_result.error()}
96 |     )}"
   |      ^
97 |                     self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
98 |                     return Result.failure(error_msg)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:96:7: SyntaxError: missing closing quote in string literal
   |
94 | error_msg = (
95 |     f"Failed to import source module {method_info.source_module}: {import_result.error()}
96 |     )}"
   |       ^
97 |                     self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
98 |                     return Result.failure(error_msg)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:96:8: SyntaxError: Expected FStringEnd, found newline
   |
94 | error_msg = (
95 |     f"Failed to import source module {method_info.source_module}: {import_result.error()}
96 |     )}"
   |        ^
97 |                     self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
98 |                     return Result.failure(error_msg)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:97:1: SyntaxError: Unexpected indentation
   |
95 |     f"Failed to import source module {method_info.source_module}: {import_result.error()}
96 |     )}"
97 |                     self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
   | ^
98 |                     return Result.failure(error_msg)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:97:101: E501 Line too long (112 > 100)
   |
95 |     f"Failed to import source module {method_info.source_module}: {import_result.error()}
96 |     )}"
97 |                     self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
   |                                                                                                     ^^^^^^^^^^^^ E501
98 |                     return Result.failure(error_msg)
   |

src_refactored\infrastructure\system_integration\method_delegation_service.py:100:1: SyntaxError: unindent does not match any outer indentation level
    |
 98 |                     return Result.failure(error_msg)
 99 |
100 |             source_module = self._source_modules[method_info.source_module]
    | ^
101 |
102 |             # Get source function
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:103:1: SyntaxError: Unexpected indentation
    |
102 |             # Get source function
103 |             if not hasattr(source_module, method_info.source_function):
    | ^
104 |                 error_msg
105 |  = (
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:105:2: SyntaxError: unindent does not match any outer indentation level
    |
103 |             if not hasattr(source_module, method_info.source_function):
104 |                 error_msg
105 |  = (
    |  ^
106 |     f"Source function {method_info.source_function} not found in module {method_info.source_module}")
107 |                 self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:106:101: E501 Line too long (101 > 100)
    |
104 |                 error_msg
105 |  = (
106 |     f"Source function {method_info.source_function} not found in module {method_info.source_module}")
    |                                                                                                     ^ E501
107 |                 self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
108 |                 return Result.failure(error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:107:1: SyntaxError: Unexpected indentation
    |
105 |  = (
106 |     f"Source function {method_info.source_function} not found in module {method_info.source_module}")
107 |                 self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
    | ^
108 |                 return Result.failure(error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:107:101: E501 Line too long (108 > 100)
    |
105 |  = (
106 |     f"Source function {method_info.source_function} not found in module {method_info.source_module}")
107 |                 self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
    |                                                                                                     ^^^^^^^^ E501
108 |                 return Result.failure(error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:110:1: SyntaxError: unindent does not match any outer indentation level
    |
108 |                 return Result.failure(error_msg)
109 |
110 |             source_function = getattr(source_module, method_info.source_function)
    | ^
111 |
112 |             # Apply delegation based on mode
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:113:1: SyntaxError: Unexpected indentation
    |
112 |             # Apply delegation based on mode
113 |             if method_info.delegation_mode == DelegationMode.DIRECT_ASSIGNMENT:
    | ^
114 |                 setattr(target_instance, method_info.name, source_function)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:126:101: E501 Line too long (108 > 100)
    |
124 |             else:
125 |                 error_msg = f"Unsupported delegation mode: {method_info.delegation_mode}"
126 |                 self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
    |                                                                                                     ^^^^^^^^ E501
127 |                 return Result.failure(error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:130:101: E501 Line too long (101 > 100)
    |
129 |             self.method_delegated.emit(method_info.name, target_instance.__class__.__name__)
130 |             self.logger.debug("Delegated method {method_info.name} to {target_instance.__class__.__n\
    |                                                                                                     ^ E501
131 |     ame__}")
132 |             return Result.success(None)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:134:1: SyntaxError: unindent does not match any outer indentation level
    |
132 |             return Result.success(None)
133 |
134 |         except Exception as e:
    | ^
135 |             error_msg = f"Failed to delegate method {method_info.name}: {e!s}"
136 |             self.logger.exception(error_msg,
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:134:9: SyntaxError: Expected a statement
    |
132 |             return Result.success(None)
133 |
134 |         except Exception as e:
    |         ^
135 |             error_msg = f"Failed to delegate method {method_info.name}: {e!s}"
136 |             self.logger.exception(error_msg,
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:134:26: SyntaxError: Expected a statement
    |
132 |             return Result.success(None)
133 |
134 |         except Exception as e:
    |                          ^
135 |             error_msg = f"Failed to delegate method {method_info.name}: {e!s}"
136 |             self.logger.exception(error_msg,
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:134:31: SyntaxError: Expected an expression
    |
132 |             return Result.success(None)
133 |
134 |         except Exception as e:
    |                               ^
135 |             error_msg = f"Failed to delegate method {method_info.name}: {e!s}"
136 |             self.logger.exception(error_msg,
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:135:1: SyntaxError: Unexpected indentation
    |
134 |         except Exception as e:
135 |             error_msg = f"Failed to delegate method {method_info.name}: {e!s}"
    | ^
136 |             self.logger.exception(error_msg,
137 |     )
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:138:101: E501 Line too long (104 > 100)
    |
136 |             self.logger.exception(error_msg,
137 |     )
138 |             self.delegation_failed.emit(method_info.name, target_instance.__class__.__name__, error_msg)
    |                                                                                                     ^^^^ E501
139 |             return Result.failure(error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:141:1: SyntaxError: unindent does not match any outer indentation level
    |
139 |             return Result.failure(error_msg)
140 |
141 |     def delegate_methods(self, target_instance: Any, config: DelegationConfiguration,
    | ^
142 |     ) -> Result[list[str]]:
143 |         """Delegate multiple methods to target instance."""
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:163:101: E501 Line too long (101 > 100)
    |
161 |                 self.logger.warning("Some method delegations failed: {failed_delegations}")
162 |
163 |             self.logger.info("Successfully delegated {len(successful_delegations)} methods to {targe\
    |                                                                                                     ^ E501
164 |     t_instance.__class__.__name__}")
165 |             return Result.success(successful_delegations)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:173:5: SyntaxError: unindent does not match any outer indentation level
    |
171 |     )
172 |
173 |     def validate_delegation(self, target_instance: Any, method_name: str,
    |     ^
174 |     ) -> Result[bool]:
175 |         """Validate that a method delegation is working correctly."""
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:191:57: SyntaxError: Expected an expression
    |
189 |             # Additional validation based on method type
190 |             class_name = target_instance.__class__.__name__
191 |             if class_name in self._delegated_methods and
    |                                                         ^
192 |     method_name in self._delegated_methods[class_name]:
193 |                 method_info = self._delegated_methods[class_name][method_name]
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:192:5: SyntaxError: unindent does not match any outer indentation level
    |
190 |             class_name = target_instance.__class__.__name__
191 |             if class_name in self._delegated_methods and
192 |     method_name in self._delegated_methods[class_name]:
    |     ^
193 |                 method_info = self._delegated_methods[class_name][method_name]
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:192:56: SyntaxError: Expected an expression
    |
190 |             class_name = target_instance.__class__.__name__
191 |             if class_name in self._delegated_methods and
192 |     method_name in self._delegated_methods[class_name]:
    |                                                        ^
193 |                 method_info = self._delegated_methods[class_name][method_name]
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:193:1: SyntaxError: Unexpected indentation
    |
191 |             if class_name in self._delegated_methods and
192 |     method_name in self._delegated_methods[class_name]:
193 |                 method_info = self._delegated_methods[class_name][method_name]
    | ^
194 |
195 |                 # Validate signature if required
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:202:13: SyntaxError: unindent does not match any outer indentation level
    |
200 |                         return Result.success(False)
201 |
202 |             self.delegation_validated.emit(method_name, True)
    |             ^
203 |             return Result.success(True)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:203:1: SyntaxError: Unexpected indentation
    |
202 |             self.delegation_validated.emit(method_name, True)
203 |             return Result.success(True)
    | ^
204 |
205 |         except Exception as e:
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:205:1: SyntaxError: unindent does not match any outer indentation level
    |
203 |             return Result.success(True)
204 |
205 |         except Exception as e:
    | ^
206 |             error_msg = f"Failed to validate delegation for {method_name}: {e!s}"
207 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:205:9: SyntaxError: Expected a statement
    |
203 |             return Result.success(True)
204 |
205 |         except Exception as e:
    |         ^
206 |             error_msg = f"Failed to validate delegation for {method_name}: {e!s}"
207 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:205:26: SyntaxError: Expected a statement
    |
203 |             return Result.success(True)
204 |
205 |         except Exception as e:
    |                          ^
206 |             error_msg = f"Failed to validate delegation for {method_name}: {e!s}"
207 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:205:31: SyntaxError: Expected an expression
    |
203 |             return Result.success(True)
204 |
205 |         except Exception as e:
    |                               ^
206 |             error_msg = f"Failed to validate delegation for {method_name}: {e!s}"
207 |             self.logger.exception(error_msg)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:206:1: SyntaxError: Unexpected indentation
    |
205 |         except Exception as e:
206 |             error_msg = f"Failed to validate delegation for {method_name}: {e!s}"
    | ^
207 |             self.logger.exception(error_msg)
208 |             return Result.failure(error_msg,
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:211:1: SyntaxError: unindent does not match any outer indentation level
    |
209 |     )
210 |
211 |     def get_delegated_methods(self, target_class_name: str,
    | ^
212 |     ) -> Result[list[str]]:
213 |         """Get list of delegated methods for a target class."""
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:227:5: SyntaxError: unindent does not match any outer indentation level
    |
225 |     )
226 |
227 |     def remove_delegation(self, target_instance: Any, method_name: str,
    |     ^
228 |     ) -> Result[None]:
229 |         """Remove a method delegation from target instance."""
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:233:101: E501 Line too long (101 > 100)
    |
231 |             if hasattr(target_instance, method_name):
232 |                 delattr(target_instance, method_name)
233 |                 self.logger.debug("Removed delegation for {method_name} from {target_instance.__clas\
    |                                                                                                     ^ E501
234 |     s__.__name__}")
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:244:5: SyntaxError: unindent does not match any outer indentation level
    |
242 |     )
243 |
244 |     def _import_source_module(self, module_path: str,
    |     ^
245 |     ) -> Result[Any]:
246 |         """Import source module dynamically."""
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:263:5: SyntaxError: unindent does not match any outer indentation level
    |
261 |     )
262 |
263 |     def _create_wrapper_function(self, source_function: Callable, target_instance: Any,
    |     ^
264 |     ) -> Callable:
265 |         """Create a wrapper function for method delegation."""
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:279:1: SyntaxError: unindent does not match any outer indentation level
    |
277 |         return wrapper
278 |
279 |     def _create_proxy_object(self, source_function: Callable, target_instance: Any,
    | ^
280 |     ) -> Any:
281 |         """Create a proxy object for method delegation."""
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:295:1: SyntaxError: unindent does not match any outer indentation level
    |
293 |         return MethodProxy(source_function, target_instance)
294 |
295 |     @classmethod
    | ^
296 |     def create_for_main_window(cls) -> "MethodDelegationService":
297 |         """Factory method to create service configured for main window."""
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:296:1: SyntaxError: Expected class, function definition or async function definition after decorator
    |
295 |     @classmethod
296 |     def create_for_main_window(cls) -> "MethodDelegationService":
    | ^
297 |         """Factory method to create service configured for main window."""
298 |         service = cls()
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:303:101: E501 Line too long (115 > 100)
    |
301 |         main_window_methods = [
302 |             MethodInfo("open_settings",
303 |             "src.ui.window_methods", "open_settings", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
304 |             MethodInfo("init_workers_and_signals",
305 |             "src.ui.window_methods", "init_workers_and_signals", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:304:13: SyntaxError: Expected ',', found name
    |
302 |             MethodInfo("open_settings",
303 |             "src.ui.window_methods", "open_settings", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
304 |             MethodInfo("init_workers_and_signals",
    |             ^
305 |             "src.ui.window_methods", "init_workers_and_signals", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
306 |             MethodInfo("init_listener",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:305:101: E501 Line too long (126 > 100)
    |
303 |             "src.ui.window_methods", "open_settings", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
304 |             MethodInfo("init_workers_and_signals",
305 |             "src.ui.window_methods", "init_workers_and_signals", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
306 |             MethodInfo("init_listener",
307 |             "src.ui.window_methods", "init_listener", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:306:13: SyntaxError: Expected ',', found name
    |
304 |             MethodInfo("init_workers_and_signals",
305 |             "src.ui.window_methods", "init_workers_and_signals", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
306 |             MethodInfo("init_listener",
    |             ^
307 |             "src.ui.window_methods", "init_listener", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
308 |             MethodInfo("init_llm_worker",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:307:101: E501 Line too long (115 > 100)
    |
305 |             "src.ui.window_methods", "init_workers_and_signals", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
306 |             MethodInfo("init_listener",
307 |             "src.ui.window_methods", "init_listener", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
308 |             MethodInfo("init_llm_worker",
309 |             "src.ui.window_methods", "init_llm_worker", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:308:13: SyntaxError: Expected ',', found name
    |
306 |             MethodInfo("init_listener",
307 |             "src.ui.window_methods", "init_listener", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
308 |             MethodInfo("init_llm_worker",
    |             ^
309 |             "src.ui.window_methods", "init_llm_worker", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
310 |             MethodInfo("handle_llm_error",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:309:101: E501 Line too long (117 > 100)
    |
307 |             "src.ui.window_methods", "init_listener", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
308 |             MethodInfo("init_llm_worker",
309 |             "src.ui.window_methods", "init_llm_worker", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^^^^ E501
310 |             MethodInfo("handle_llm_error",
311 |             "src.ui.window_methods", "handle_llm_error", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:310:13: SyntaxError: Expected ',', found name
    |
308 |             MethodInfo("init_llm_worker",
309 |             "src.ui.window_methods", "init_llm_worker", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
310 |             MethodInfo("handle_llm_error",
    |             ^
311 |             "src.ui.window_methods", "handle_llm_error", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
312 |             MethodInfo("handle_transcription",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:311:101: E501 Line too long (118 > 100)
    |
309 |             "src.ui.window_methods", "init_llm_worker", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
310 |             MethodInfo("handle_llm_error",
311 |             "src.ui.window_methods", "handle_llm_error", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^ E501
312 |             MethodInfo("handle_transcription",
313 |             "src.ui.window_methods", "handle_transcription", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:312:13: SyntaxError: Expected ',', found name
    |
310 |             MethodInfo("handle_llm_error",
311 |             "src.ui.window_methods", "handle_llm_error", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
312 |             MethodInfo("handle_transcription",
    |             ^
313 |             "src.ui.window_methods", "handle_transcription", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
314 |             MethodInfo("display_message",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:313:101: E501 Line too long (122 > 100)
    |
311 |             "src.ui.window_methods", "handle_llm_error", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
312 |             MethodInfo("handle_transcription",
313 |             "src.ui.window_methods", "handle_transcription", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^ E501
314 |             MethodInfo("display_message",
315 |             "src.ui.window_methods", "display_message", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:314:13: SyntaxError: Expected ',', found name
    |
312 |             MethodInfo("handle_transcription",
313 |             "src.ui.window_methods", "handle_transcription", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
314 |             MethodInfo("display_message",
    |             ^
315 |             "src.ui.window_methods", "display_message", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
316 |             MethodInfo("create_tray_icon",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:315:101: E501 Line too long (117 > 100)
    |
313 |             "src.ui.window_methods", "handle_transcription", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
314 |             MethodInfo("display_message",
315 |             "src.ui.window_methods", "display_message", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^^^^ E501
316 |             MethodInfo("create_tray_icon",
317 |             "src.ui.window_methods", "create_tray_icon", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:316:13: SyntaxError: Expected ',', found name
    |
314 |             MethodInfo("display_message",
315 |             "src.ui.window_methods", "display_message", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
316 |             MethodInfo("create_tray_icon",
    |             ^
317 |             "src.ui.window_methods", "create_tray_icon", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
318 |             MethodInfo("show_window",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:317:101: E501 Line too long (118 > 100)
    |
315 |             "src.ui.window_methods", "display_message", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
316 |             MethodInfo("create_tray_icon",
317 |             "src.ui.window_methods", "create_tray_icon", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^^^^^ E501
318 |             MethodInfo("show_window",
319 |             "src.ui.window_methods", "show_window", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:318:13: SyntaxError: Expected ',', found name
    |
316 |             MethodInfo("create_tray_icon",
317 |             "src.ui.window_methods", "create_tray_icon", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
318 |             MethodInfo("show_window",
    |             ^
319 |             "src.ui.window_methods", "show_window", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
320 |             MethodInfo("close_app",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:319:101: E501 Line too long (113 > 100)
    |
317 |             "src.ui.window_methods", "create_tray_icon", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
318 |             MethodInfo("show_window",
319 |             "src.ui.window_methods", "show_window", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^ E501
320 |             MethodInfo("close_app",
321 |             "src.ui.window_methods", "close_app", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:320:13: SyntaxError: Expected ',', found name
    |
318 |             MethodInfo("show_window",
319 |             "src.ui.window_methods", "show_window", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
320 |             MethodInfo("close_app",
    |             ^
321 |             "src.ui.window_methods", "close_app", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
322 |             MethodInfo("keyPressEvent",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:321:101: E501 Line too long (111 > 100)
    |
319 |             "src.ui.window_methods", "show_window", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
320 |             MethodInfo("close_app",
321 |             "src.ui.window_methods", "close_app", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^ E501
322 |             MethodInfo("keyPressEvent",
323 |             "src.ui.window_methods", "keyPressEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:322:13: SyntaxError: Expected ',', found name
    |
320 |             MethodInfo("close_app",
321 |             "src.ui.window_methods", "close_app", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
322 |             MethodInfo("keyPressEvent",
    |             ^
323 |             "src.ui.window_methods", "keyPressEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
324 |             MethodInfo("keyReleaseEvent",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:323:101: E501 Line too long (113 > 100)
    |
321 |             "src.ui.window_methods", "close_app", MethodType.INSTANCE_METHOD, DelegationMode.DIRECT_ASSIGNMENT)
322 |             MethodInfo("keyPressEvent",
323 |             "src.ui.window_methods", "keyPressEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^ E501
324 |             MethodInfo("keyReleaseEvent",
325 |             "src.ui.window_methods", "keyReleaseEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:324:13: SyntaxError: Expected ',', found name
    |
322 |             MethodInfo("keyPressEvent",
323 |             "src.ui.window_methods", "keyPressEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
324 |             MethodInfo("keyReleaseEvent",
    |             ^
325 |             "src.ui.window_methods", "keyReleaseEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
326 |             MethodInfo("eventFilter",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:325:101: E501 Line too long (115 > 100)
    |
323 |             "src.ui.window_methods", "keyPressEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
324 |             MethodInfo("keyReleaseEvent",
325 |             "src.ui.window_methods", "keyReleaseEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^^ E501
326 |             MethodInfo("eventFilter",
327 |             "src.ui.window_methods", "eventFilter", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:326:13: SyntaxError: Expected ',', found name
    |
324 |             MethodInfo("keyReleaseEvent",
325 |             "src.ui.window_methods", "keyReleaseEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
326 |             MethodInfo("eventFilter",
    |             ^
327 |             "src.ui.window_methods", "eventFilter", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
328 |             MethodInfo("resizeEvent",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:327:101: E501 Line too long (111 > 100)
    |
325 |             "src.ui.window_methods", "keyReleaseEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
326 |             MethodInfo("eventFilter",
327 |             "src.ui.window_methods", "eventFilter", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^ E501
328 |             MethodInfo("resizeEvent",
329 |             "src.ui.window_methods", "resizeEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:328:13: SyntaxError: Expected ',', found name
    |
326 |             MethodInfo("eventFilter",
327 |             "src.ui.window_methods", "eventFilter", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
328 |             MethodInfo("resizeEvent",
    |             ^
329 |             "src.ui.window_methods", "resizeEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
330 |             MethodInfo("dragEnterEvent",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:329:101: E501 Line too long (111 > 100)
    |
327 |             "src.ui.window_methods", "eventFilter", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
328 |             MethodInfo("resizeEvent",
329 |             "src.ui.window_methods", "resizeEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^ E501
330 |             MethodInfo("dragEnterEvent",
331 |             "src.ui.window_methods", "dragEnterEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:330:13: SyntaxError: Expected ',', found name
    |
328 |             MethodInfo("resizeEvent",
329 |             "src.ui.window_methods", "resizeEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
330 |             MethodInfo("dragEnterEvent",
    |             ^
331 |             "src.ui.window_methods", "dragEnterEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
332 |             MethodInfo("dropEvent",
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:331:101: E501 Line too long (114 > 100)
    |
329 |             "src.ui.window_methods", "resizeEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
330 |             MethodInfo("dragEnterEvent",
331 |             "src.ui.window_methods", "dragEnterEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^^^^^^ E501
332 |             MethodInfo("dropEvent",
333 |             "src.ui.window_methods", "dropEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:332:13: SyntaxError: Expected ',', found name
    |
330 |             MethodInfo("dragEnterEvent",
331 |             "src.ui.window_methods", "dragEnterEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
332 |             MethodInfo("dropEvent",
    |             ^
333 |             "src.ui.window_methods", "dropEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
334 |         ]
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:333:101: E501 Line too long (109 > 100)
    |
331 |             "src.ui.window_methods", "dragEnterEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
332 |             MethodInfo("dropEvent",
333 |             "src.ui.window_methods", "dropEvent", MethodType.EVENT_HANDLER, DelegationMode.DIRECT_ASSIGNMENT)
    |                                                                                                     ^^^^^^^^^ E501
334 |         ]
    |

src_refactored\infrastructure\system_integration\method_delegation_service.py:347:23: SyntaxError: Expected dedent, found end of file
    |
345 |         service.register_delegation_configuration(config)
346 |
347 |         return service
    |                       ^
    |

src_refactored\infrastructure\system_integration\worker_thread_management_service.py:55:101: E501 Line too long (101 > 100)
   |
53 |         try:
54 |             if not issubclass(worker_class, QObject):
55 |                 return Result.failure(f"Worker class {worker_class.__name__} must inherit from QObje\
   |                                                                                                     ^ E501
56 |     ct")
   |

src_refactored\infrastructure\system_integration\worker_thread_management_service.py:271:9: ERA001 Found commented-out code
    |
270 |         # Register common worker classes (would be imported from actual workers)
271 |         # service.register_worker_class("vad", VadWorker)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
272 |         # service.register_worker_class("model", ModelWorker)
273 |         # service.register_worker_class("listener", ListenerWorker)
    |
    = help: Remove commented-out code

src_refactored\infrastructure\system_integration\worker_thread_management_service.py:272:9: ERA001 Found commented-out code
    |
270 |         # Register common worker classes (would be imported from actual workers)
271 |         # service.register_worker_class("vad", VadWorker)
272 |         # service.register_worker_class("model", ModelWorker)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
273 |         # service.register_worker_class("listener", ListenerWorker)
274 |         # service.register_worker_class("llm", LLMWorker)
    |
    = help: Remove commented-out code

src_refactored\infrastructure\system_integration\worker_thread_management_service.py:273:9: ERA001 Found commented-out code
    |
271 |         # service.register_worker_class("vad", VadWorker)
272 |         # service.register_worker_class("model", ModelWorker)
273 |         # service.register_worker_class("listener", ListenerWorker)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
274 |         # service.register_worker_class("llm", LLMWorker)
    |
    = help: Remove commented-out code

src_refactored\infrastructure\system_integration\worker_thread_management_service.py:274:9: ERA001 Found commented-out code
    |
272 |         # service.register_worker_class("model", ModelWorker)
273 |         # service.register_worker_class("listener", ListenerWorker)
274 |         # service.register_worker_class("llm", LLMWorker)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src_refactored\infrastructure\transcription\model_cache_service.py:69:2: SyntaxError: unindent does not match any outer indentation level
   |
67 |         # Check for required ONNX files
68 |         encoder_name
69 |  = (
   |  ^
70 |     "encoder_model.onnx" if quantization.lower() == "full" else f"encoder_model_{quantization.lower()}.onnx")
71 |         decoder_name
   |

src_refactored\infrastructure\transcription\model_cache_service.py:70:101: E501 Line too long (109 > 100)
   |
68 |         encoder_name
69 |  = (
70 |     "encoder_model.onnx" if quantization.lower() == "full" else f"encoder_model_{quantization.lower()}.onnx")
   |                                                                                                     ^^^^^^^^^ E501
71 |         decoder_name
72 |  = (
   |

src_refactored\infrastructure\transcription\model_cache_service.py:71:1: SyntaxError: Unexpected indentation
   |
69 |  = (
70 |     "encoder_model.onnx" if quantization.lower() == "full" else f"encoder_model_{quantization.lower()}.onnx")
71 |         decoder_name
   | ^
72 |  = (
73 |     "decoder_model_merged.onnx" if quantization.lower() == "full" else f"decoder_model_merged_{quantization.lower()}.onnx")
   |

src_refactored\infrastructure\transcription\model_cache_service.py:72:1: SyntaxError: unindent does not match any outer indentation level
   |
70 |     "encoder_model.onnx" if quantization.lower() == "full" else f"encoder_model_{quantization.lower()}.onnx")
71 |         decoder_name
72 |  = (
   | ^
73 |     "decoder_model_merged.onnx" if quantization.lower() == "full" else f"decoder_model_merged_{quantization.lower()}.onnx")
   |

src_refactored\infrastructure\transcription\model_cache_service.py:72:2: SyntaxError: Expected a statement
   |
70 |     "encoder_model.onnx" if quantization.lower() == "full" else f"encoder_model_{quantization.lower()}.onnx")
71 |         decoder_name
72 |  = (
   |  ^
73 |     "decoder_model_merged.onnx" if quantization.lower() == "full" else f"decoder_model_merged_{quantization.lower()}.onnx")
   |

src_refactored\infrastructure\transcription\model_cache_service.py:73:101: E501 Line too long (123 > 100)
   |
71 |         decoder_name
72 |  = (
73 |     "decoder_model_merged.onnx" if quantization.lower() == "full" else f"decoder_model_merged_{quantization.lower()}.onnx")
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ E501
74 |
75 |         encoder_path = onnx_folder / encoder_name
   |

src_refactored\infrastructure\transcription\model_cache_service.py:75:1: SyntaxError: Unexpected indentation
   |
73 |     "decoder_model_merged.onnx" if quantization.lower() == "full" else f"decoder_model_merged_{quantization.lower()}.onnx")
74 |
75 |         encoder_path = onnx_folder / encoder_name
   | ^
76 |         decoder_path = onnx_folder / decoder_name
   |

src_refactored\infrastructure\transcription\model_cache_service.py:80:1: SyntaxError: unindent does not match any outer indentation level
   |
78 |         return encoder_path.exists() and decoder_path.exists()
79 |
80 |     def is_config_cached(self, model_type: str,
   | ^
81 |     ) -> bool:
82 |         """Check if model configuration files are cached.
   |

src_refactored\infrastructure\transcription\model_cache_service.py:102:1: SyntaxError: unindent does not match any outer indentation level
    |
100 |         return all((model_cache_path / config_file).exists() for config_file in config_files)
101 |
102 |     def load_model_config(self, model_type: str,
    | ^
103 |     ) -> dict[str, Any]:
104 |         """Load model configuration from cache.
    |

src_refactored\infrastructure\transcription\model_cache_service.py:135:1: SyntaxError: unindent does not match any outer indentation level
    |
133 |         return configs
134 |
135 |     def clear_model_cache(self, model_type: str | None = None) -> None:
    | ^
136 |         """Clear model cache.
    |

src_refactored\infrastructure\transcription\model_cache_service.py:155:5: SyntaxError: unindent does not match any outer indentation level
    |
153 |     )
154 |
155 |     def get_cache_size(self, model_type: str | None = None) -> int:
    |     ^
156 |         """Get the size of the cache in bytes.
    |

src_refactored\infrastructure\transcription\model_cache_service.py:178:1: SyntaxError: unindent does not match any outer indentation level
    |
176 |         return total_size
177 |
178 |     def list_cached_models(self) -> list[str]:
    | ^
179 |         """List all cached model types.
    |

src_refactored\infrastructure\transcription\model_cache_service.py:188:78: SyntaxError: Expected dedent, found end of file
    |
186 |             return []
187 |
188 |         return [item.name for item in models_path.iterdir() if item.is_dir()]
    |                                                                              ^
    |

src_refactored\infrastructure\transcription\model_download_service.py:57:13: SyntaxError: Expected an indented block after `try` statement
   |
55 |             bool: True if all downloads successful, False otherwise
56 |         """
57 |         try:
   |             ^
58 | repo_url = (
59 |     "https://huggingface.co/onnx-community/whisper-large-v3-turbo/resolve/main/onnx/")
   |

src_refactored\infrastructure\transcription\model_download_service.py:58:1: SyntaxError: Expected `except` or `finally` after `try` block
   |
56 |         """
57 |         try:
58 | repo_url = (
   | ^
59 |     "https://huggingface.co/onnx-community/whisper-large-v3-turbo/resolve/main/onnx/")
   |

src_refactored\infrastructure\transcription\model_download_service.py:62:1: SyntaxError: Unexpected indentation
   |
61 |             # Determine model files based on quality
62 |             encoder_name = f"encoder_model_{self.config.quality}.onnx"
   | ^
63 |             decoder_name = f"decoder_model_{self.config.quality}.onnx"
   |

src_refactored\infrastructure\transcription\model_download_service.py:97:1: SyntaxError: Expected a statement
   |
95 |             for config_file in config_files:
96 |                 config_path = self.cache_path / config_file
97 | config_url = (
   | ^
98 |     f"https://huggingface.co/onnx-community/whisper-large-v3-turbo/resolve/main/{config_file}")
99 |                 if not config_path.exists():
   |

src_refactored\infrastructure\transcription\model_download_service.py:99:1: SyntaxError: Unexpected indentation
    |
 97 | config_url = (
 98 |     f"https://huggingface.co/onnx-community/whisper-large-v3-turbo/resolve/main/{config_file}")
 99 |                 if not config_path.exists():
    | ^
100 |                     self.logger.info("Downloading config file: {config_file}",
101 |     )
    |

src_refactored\infrastructure\transcription\model_download_service.py:105:13: SyntaxError: unindent does not match any outer indentation level
    |
103 |                         return False
104 |
105 |             self.logger.info("All Whisper models downloaded successfully")
    |             ^
106 |             return True
    |

src_refactored\infrastructure\transcription\model_download_service.py:106:1: SyntaxError: Unexpected indentation
    |
105 |             self.logger.info("All Whisper models downloaded successfully")
106 |             return True
    | ^
107 |
108 |         except Exception as e:
    |

src_refactored\infrastructure\transcription\model_download_service.py:108:1: SyntaxError: unindent does not match any outer indentation level
    |
106 |             return True
107 |
108 |         except Exception as e:
    | ^
109 |             self.logger.exception(f"Failed to download Whisper models: {e}")
110 |             self.download_failed.emit("whisper_models", str(e))
    |

src_refactored\infrastructure\transcription\model_download_service.py:108:9: SyntaxError: Expected a statement
    |
106 |             return True
107 |
108 |         except Exception as e:
    |         ^
109 |             self.logger.exception(f"Failed to download Whisper models: {e}")
110 |             self.download_failed.emit("whisper_models", str(e))
    |

src_refactored\infrastructure\transcription\model_download_service.py:108:26: SyntaxError: Expected a statement
    |
106 |             return True
107 |
108 |         except Exception as e:
    |                          ^
109 |             self.logger.exception(f"Failed to download Whisper models: {e}")
110 |             self.download_failed.emit("whisper_models", str(e))
    |

src_refactored\infrastructure\transcription\model_download_service.py:108:31: SyntaxError: Expected an expression
    |
106 |             return True
107 |
108 |         except Exception as e:
    |                               ^
109 |             self.logger.exception(f"Failed to download Whisper models: {e}")
110 |             self.download_failed.emit("whisper_models", str(e))
    |

src_refactored\infrastructure\transcription\model_download_service.py:109:1: SyntaxError: Unexpected indentation
    |
108 |         except Exception as e:
109 |             self.logger.exception(f"Failed to download Whisper models: {e}")
    | ^
110 |             self.download_failed.emit("whisper_models", str(e))
111 |             return False
    |

src_refactored\infrastructure\transcription\model_download_service.py:113:1: SyntaxError: unindent does not match any outer indentation level
    |
111 |             return False
112 |
113 |     def download_vad_model(self) -> bool:
    | ^
114 |         """Download VAD (Voice Activity Detection) model.
    |

src_refactored\infrastructure\transcription\model_download_service.py:130:2: SyntaxError: unindent does not match any outer indentation level
    |
128 |     )
129 |             url
130 |  = (
    |  ^
131 |     "https://github.com/snakers4/silero-vad/blob/master/src/silero_vad/data/silero_vad_16k_op15.onnx?raw=true")
    |

src_refactored\infrastructure\transcription\model_download_service.py:133:1: SyntaxError: Unexpected indentation
    |
131 |     "https://github.com/snakers4/silero-vad/blob/master/src/silero_vad/data/silero_vad_16k_op15.onnx?raw=true")
132 |
133 |             return self._download_file_with_progress(url, model_path, filename)
    | ^
134 |
135 |         except Exception as e:
    |

src_refactored\infrastructure\transcription\model_download_service.py:135:1: SyntaxError: unindent does not match any outer indentation level
    |
133 |             return self._download_file_with_progress(url, model_path, filename)
134 |
135 |         except Exception as e:
    | ^
136 |             self.logger.exception(f"Failed to download VAD model: {e}")
137 |             self.download_failed.emit("vad_model", str(e))
    |

src_refactored\infrastructure\transcription\model_download_service.py:135:9: SyntaxError: Expected a statement
    |
133 |             return self._download_file_with_progress(url, model_path, filename)
134 |
135 |         except Exception as e:
    |         ^
136 |             self.logger.exception(f"Failed to download VAD model: {e}")
137 |             self.download_failed.emit("vad_model", str(e))
    |

src_refactored\infrastructure\transcription\model_download_service.py:135:26: SyntaxError: Expected a statement
    |
133 |             return self._download_file_with_progress(url, model_path, filename)
134 |
135 |         except Exception as e:
    |                          ^
136 |             self.logger.exception(f"Failed to download VAD model: {e}")
137 |             self.download_failed.emit("vad_model", str(e))
    |

src_refactored\infrastructure\transcription\model_download_service.py:135:31: SyntaxError: Expected an expression
    |
133 |             return self._download_file_with_progress(url, model_path, filename)
134 |
135 |         except Exception as e:
    |                               ^
136 |             self.logger.exception(f"Failed to download VAD model: {e}")
137 |             self.download_failed.emit("vad_model", str(e))
    |

src_refactored\infrastructure\transcription\model_download_service.py:136:1: SyntaxError: Unexpected indentation
    |
135 |         except Exception as e:
136 |             self.logger.exception(f"Failed to download VAD model: {e}")
    | ^
137 |             self.download_failed.emit("vad_model", str(e))
138 |             return False
    |

src_refactored\infrastructure\transcription\model_download_service.py:140:1: SyntaxError: unindent does not match any outer indentation level
    |
138 |             return False
139 |
140 |     def _download_file_with_progress(self, url: str, save_path: Path, filename: str,
    | ^
141 |     ) -> bool:
142 |         """Download a file with progress tracking and validation.
    |

src_refactored\infrastructure\transcription\model_download_service.py:245:5: SyntaxError: unindent does not match any outer indentation level
    |
243 |             return False
244 |
245 |     def _validate_downloaded_file(self, temp_path: Path, final_path: Path,
    |     ^
246 |     ) -> bool:
247 |         """Validate downloaded file based on its type.
    |

src_refactored\infrastructure\transcription\model_download_service.py:270:42: SyntaxError: Expected an expression or a ')'
    |
268 |                 try:
269 |                     with open(temp_path, encoding="utf-8") as f:
270 |                         content = f.read(,
    |                                          ^
271 |     )
272 |                         # Check for HTML content in JSON file
    |

src_refactored\infrastructure\transcription\model_download_service.py:274:101: E501 Line too long (102 > 100)
    |
272 |                         # Check for HTML content in JSON file
273 |                         if "<html" in content or "<!DOCTYPE" in content:
274 |                             self.logger.error("Downloaded file contains HTML, not JSON: {final_path}")
    |                                                                                                     ^^ E501
275 |                             return False
276 |                         # Validate JSON parsing
    |

src_refactored\infrastructure\transcription\model_download_service.py:279:101: E501 Line too long (105 > 100)
    |
277 |                         json.loads(content)
278 |                 except json.JSONDecodeError as e:
279 |                     self.logger.exception(f"Downloaded file is not valid JSON: {final_path}, error: {e}")
    |                                                                                                     ^^^^^ E501
280 |                     return False
    |

src_refactored\infrastructure\transcription\model_download_service.py:290:101: E501 Line too long (106 > 100)
    |
288 |     )
289 |                             if "<html" in content_peek or "<!DOCTYPE" in content_peek:
290 |                                 self.logger.error("Downloaded file contains HTML, not ONNX: {final_path}")
    |                                                                                                     ^^^^^^ E501
291 |                                 return False
292 |                     except Exception:
    |

src_refactored\infrastructure\transcription\model_download_service.py:301:5: SyntaxError: unindent does not match any outer indentation level
    |
299 |             return False
300 |
301 |     def _cleanup_temp_file(self, temp_path: Path,
    |     ^
302 |     ) -> None:
303 |         """Clean up temporary file if it exists."""
    |

src_refactored\infrastructure\transcription\model_download_service.py:310:5: SyntaxError: unindent does not match any outer indentation level
    |
308 |             self.logger.warning("Failed to cleanup temp file {temp_path}: {e}")
309 |
310 |     def get_model_status(self) -> dict[str, bool]:
    |     ^
311 |         """Get status of downloaded models.
    |

src_refactored\infrastructure\transcription\model_download_service.py:340:1: SyntaxError: unindent does not match any outer indentation level
    |
338 |         return status
339 |
340 |     def cleanup_incomplete_downloads(self) -> None:
    | ^
341 |         """Clean up any incomplete download files (.tmp files,
342 |     )."""
    |

src_refactored\infrastructure\transcription\model_download_service.py:349:61: SyntaxError: Expected dedent, found end of file
    |
347 |                     self.logger.info("Cleaned up incomplete download: {temp_file}")
348 |         except Exception as e:
349 |             self.logger.warning("Error during cleanup: {e}")
    |                                                             ^
    |

src_refactored\infrastructure\transcription\model_worker_service.py:27:101: E501 Line too long (121 > 100)
   |
26 |     error = pyqtSignal(str)
27 |     display_message_signal = pyqtSignal(object, object, object, object, object)  # txt, filename, percentage, hold, reset
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^ E501
28 |     initialized = pyqtSignal()
   |

src_refactored\infrastructure\transcription\model_worker_service.py:54:30: G004 Logging statement uses f-string
   |
52 |                 from logger import setup_logger
53 |                 logger = setup_logger()
54 |                 logger.debug(f"Initializing model type: {self.model_type} with quantization: {self.quantization}")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
55 |             except ImportError:
56 |                 pass
   |

src_refactored\infrastructure\transcription\model_worker_service.py:54:101: E501 Line too long (114 > 100)
   |
52 |                 from logger import setup_logger
53 |                 logger = setup_logger()
54 |                 logger.debug(f"Initializing model type: {self.model_type} with quantization: {self.quantization}")
   |                                                                                                     ^^^^^^^^^^^^^^ E501
55 |             except ImportError:
56 |                 pass
   |

src_refactored\infrastructure\transcription\model_worker_service.py:70:16: BLE001 Do not catch blind exception: `Exception`
   |
68 |             self.initialized.emit()
69 |             self.toggle_status()
70 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
71 |             error_msg = f"Failed to initialize model: {e}"
72 |             self.error.emit(error_msg)
   |

src_refactored\infrastructure\transcription\model_worker_service.py:133:38: G004 Logging statement uses f-string
    |
131 |                     # Check if we have the original filename stored on the BytesIO object
132 |                     if hasattr(file_path, "original_filename"):
133 |                         logger.debug(f"Transcribing memory buffer for: {file_path.original_filename}")
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
134 |                     else:
135 |                         logger.debug("Transcribing memory buffer")
    |

src_refactored\infrastructure\transcription\model_worker_service.py:133:101: E501 Line too long (102 > 100)
    |
131 |                     # Check if we have the original filename stored on the BytesIO object
132 |                     if hasattr(file_path, "original_filename"):
133 |                         logger.debug(f"Transcribing memory buffer for: {file_path.original_filename}")
    |                                                                                                     ^^ E501
134 |                     else:
135 |                         logger.debug("Transcribing memory buffer")
    |

src_refactored\infrastructure\transcription\model_worker_service.py:138:34: G004 Logging statement uses f-string
    |
136 |                 else:
137 |                     # Regular file path
138 |                     logger.debug(f"Transcribing file: {file_path}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
139 |             except ImportError:
140 |                 pass
    |

src_refactored\infrastructure\transcription\model_worker_service.py:149:13: TRY300 Consider moving this statement to an `else` block
    |
148 |               # Return results in a dictionary
149 | /             return {
150 | |                 "text": text,
151 | |                 "segments": segments,
152 | |             }
    | |_____________^ TRY300
153 |           except Exception as e:
154 |               try:
    |

src_refactored\infrastructure\transcription\model_worker_service.py:153:16: BLE001 Do not catch blind exception: `Exception`
    |
151 |                 "segments": segments,
152 |             }
153 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
154 |             try:
155 |                 from logger import setup_logger
    |

src_refactored\infrastructure\transcription\model_worker_service.py:157:34: G004 Logging statement uses f-string
    |
155 |                 from logger import setup_logger
156 |                 logger = setup_logger()
157 |                 logger.exception(f"Error transcribing file: {e!s}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
158 |             except ImportError:
159 |                 pass
    |

src_refactored\infrastructure\transcription\model_worker_service.py:157:62: TRY401 Redundant exception object included in `logging.exception` call
    |
155 |                 from logger import setup_logger
156 |                 logger = setup_logger()
157 |                 logger.exception(f"Error transcribing file: {e!s}")
    |                                                              ^ TRY401
158 |             except ImportError:
159 |                 pass
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:55:21: SLF001 Private member accessed: `_MEIPASS`
   |
53 |     try:
54 |         # PyInstaller creates a temp folder and stores path in _MEIPASS
55 |         base_path = sys._MEIPASS
   |                     ^^^^^^^^^^^^ SLF001
56 |     except AttributeError:
57 |         base_path = os.path.abspath(".",
   |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:57:21: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
55 |         base_path = sys._MEIPASS
56 |     except AttributeError:
57 |         base_path = os.path.abspath(".",
   |                     ^^^^^^^^^^^^^^^ PTH100
58 |     )
59 |     return os.path.join(base_path, relative_path)
   |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:59:12: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
57 |         base_path = os.path.abspath(".",
58 |     )
59 |     return os.path.join(base_path, relative_path)
   |            ^^^^^^^^^^^^ PTH118
   |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:129:28: G004 Logging statement uses f-string
    |
127 |         self._setup_model_configuration()
128 |
129 |         custom_logger.info(f"ONNXTranscriptionService initialized with quality: {quality.value}, model: {model_type}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
130 |
131 |     def _setup_model_configuration(self) -> None:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:129:101: E501 Line too long (118 > 100)
    |
127 |         self._setup_model_configuration()
128 |
129 |         custom_logger.info(f"ONNXTranscriptionService initialized with quality: {quality.value}, model: {model_type}")
    |                                                                                                     ^^^^^^^^^^^^^^^^^^ E501
130 |
131 |     def _setup_model_configuration(self) -> None:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:153:101: E501 Line too long (122 > 100)
    |
152 |         self.model_paths = {
153 |             name: model_dir / f"{name}_model{'_quantized' if self.quality == TranscriptionQuality.QUANTIZED else ''}.onnx"
    |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^ E501
154 |             for name in ["encoder", "decoder", "decoder_with_past"]
155 |         }
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:166:98: FBT003 Boolean positional value in function call
    |
165 |             if self.display_message_callback:
166 |                 self.display_message_callback("Initializing transcription service...", None, 10, False, False)
    |                                                                                                  ^^^^^ FBT003
167 |
168 |             # Download models if needed
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:166:101: E501 Line too long (110 > 100)
    |
165 |             if self.display_message_callback:
166 |                 self.display_message_callback("Initializing transcription service...", None, 10, False, False)
    |                                                                                                     ^^^^^^^^^^ E501
167 |
168 |             # Download models if needed
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:166:105: FBT003 Boolean positional value in function call
    |
165 |             if self.display_message_callback:
166 |                 self.display_message_callback("Initializing transcription service...", None, 10, False, False)
    |                                                                                                         ^^^^^ FBT003
167 |
168 |             # Download models if needed
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:181:89: FBT003 Boolean positional value in function call
    |
180 |             if self.display_message_callback:
181 |                 self.display_message_callback("Transcription service ready", None, 100, False, True)
    |                                                                                         ^^^^^ FBT003
182 |
183 |             self.model_initialized.emit()
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:181:96: FBT003 Boolean positional value in function call
    |
180 |             if self.display_message_callback:
181 |                 self.display_message_callback("Transcription service ready", None, 100, False, True)
    |                                                                                                ^^^^ FBT003
182 |
183 |             self.model_initialized.emit()
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:185:13: TRY300 Consider moving this statement to an `else` block
    |
183 |             self.model_initialized.emit()
184 |             custom_logger.info("ONNX transcription service initialized successfully")
185 |             return True
    |             ^^^^^^^^^^^ TRY300
186 |
187 |         except Exception as e:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:193:67: FBT003 Boolean positional value in function call
    |
192 |             if self.display_message_callback:
193 |                 self.display_message_callback(error_msg, None, 0, True, True)
    |                                                                   ^^^^ FBT003
194 |
195 |             return False
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:193:73: FBT003 Boolean positional value in function call
    |
192 |             if self.display_message_callback:
193 |                 self.display_message_callback(error_msg, None, 0, True, True)
    |                                                                         ^^^^ FBT003
194 |
195 |             return False
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:200:28: G004 Logging statement uses f-string
    |
198 |         """Initialize ONNX runtime sessions."""
199 |         providers = ort.get_available_providers()
200 |         custom_logger.info(f"Available ONNX providers: {providers}")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
201 |
202 |         for name, path in self.model_paths.items():
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:209:36: G004 Logging statement uses f-string
    |
207 |             try:
208 |                 self.sessions[name] = ort.InferenceSession(str(path), providers=providers)
209 |                 custom_logger.info(f"Loaded {name} model from {path}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
210 |             except Exception as e:
211 |                 msg = f"Failed to load {name} model: {e}"
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:210:20: BLE001 Do not catch blind exception: `Exception`
    |
208 |                 self.sessions[name] = ort.InferenceSession(str(path), providers=providers)
209 |                 custom_logger.info(f"Loaded {name} model from {path}")
210 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
211 |                 msg = f"Failed to load {name} model: {e}"
212 |                 raise RuntimeError(msg)
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:212:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
210 |             except Exception as e:
211 |                 msg = f"Failed to load {name} model: {e}"
212 |                 raise RuntimeError(msg)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^ B904
213 |
214 |     def _initialize_processors(self) -> None:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:222:16: BLE001 Do not catch blind exception: `Exception`
    |
220 |             )
221 |             custom_logger.info("Tokenizer and feature extractor initialized")
222 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
223 |             msg = f"Failed to initialize processors: {e}"
224 |             raise RuntimeError(msg)
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:224:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
222 |         except Exception as e:
223 |             msg = f"Failed to initialize processors: {e}"
224 |             raise RuntimeError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^^ B904
225 |
226 |     async def _download_models_if_needed(self,
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:239:32: G004 Logging statement uses f-string
    |
237 |         """Download file with progress tracking."""
238 |         try:
239 |             custom_logger.info(f"Downloading {name} from {url}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
240 |
241 |             response = requests.get(url, stream=True)
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:241:24: S113 Probable use of `requests` call without timeout
    |
239 |             custom_logger.info(f"Downloading {name} from {url}")
240 |
241 |             response = requests.get(url, stream=True)
    |                        ^^^^^^^^^^^^ S113
242 |             response.raise_for_status()
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:247:18: PTH123 `open()` should be replaced by `Path.open()`
    |
245 |             downloaded = 0
246 |
247 |             with open(save_path, "wb") as f:
    |                  ^^^^ PTH123
248 |                 for chunk in response.iter_content(chunk_size=8192):
249 |                     if chunk:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:258:101: E501 Line too long (101 > 100)
    |
257 |                             if self.progress_callback:
258 |                                 self.progress_callback(downloaded, total_size, f"Downloading {name}")
    |                                                                                                     ^ E501
259 |
260 |             custom_logger.info(f"Downloaded {name} successfully")
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:260:32: G004 Logging statement uses f-string
    |
258 |                                 self.progress_callback(downloaded, total_size, f"Downloading {name}")
259 |
260 |             custom_logger.info(f"Downloaded {name} successfully")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
261 |
262 |         except Exception as e:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:262:16: BLE001 Do not catch blind exception: `Exception`
    |
260 |             custom_logger.info(f"Downloaded {name} successfully")
261 |
262 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
263 |             if save_path.exists():
264 |                 save_path.unlink()  # Remove partial download
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:266:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
264 |                 save_path.unlink()  # Remove partial download
265 |             msg = f"Failed to download {name}: {e}"
266 |             raise RuntimeError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^^ B904
267 |
268 |     async def transcribe_async(self, request: TranscriptionRequest,
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:318:13: TRY300 Consider moving this statement to an `else` block
    |
316 |             self.last_transcription = transcription_text
317 |
318 |             return result
    |             ^^^^^^^^^^^^^ TRY300
319 |
320 |         except Exception as e:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:336:42: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
334 |             audio_segment = AudioSegment.from_file(audio_input)
335 |             audio_array = np.array(audio_segment.get_array_of_samples(), dtype=np.float32)
336 |             if audio_segment.channels == 2:
    |                                          ^ PLR2004
337 |                 audio_array = audio_array.reshape((-1, 2)).mean(axis=1)
338 |             audio_array = audio_array / np.max(np.abs(audio_array))
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:420:13: TRY300 Consider moving this statement to an `else` block
    |
418 |                 ))
419 |
420 |             return segments
    |             ^^^^^^^^^^^^^^^ TRY300
421 |
422 |         except Exception as e:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:423:37: G004 Logging statement uses f-string
    |
422 |         except Exception as e:
423 |             custom_logger.exception(f"Error generating segments: {e}")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
424 |             return [TranscriptionSegment(0.0, 30.0, transcription)]
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:423:67: TRY401 Redundant exception object included in `logging.exception` call
    |
422 |         except Exception as e:
423 |             custom_logger.exception(f"Error generating segments: {e}")
    |                                                                   ^ TRY401
424 |             return [TranscriptionSegment(0.0, 30.0, transcription)]
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:479:50: PLR2004 Magic value used in comparison, consider replacing `16000` with a constant variable
    |
477 |             try:
478 |                 with self.buffer_lock:
479 |                     if len(self.audio_buffer) >= 16000:  # 1 second of audio
    |                                                  ^^^^^ PLR2004
480 |                         # Get audio data
481 |                         audio_data = np.array(list(self.audio_buffer), dtype=np.float32)
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:504:41: G004 Logging statement uses f-string
    |
503 |             except Exception as e:
504 |                 custom_logger.exception(f"Error in streaming processing: {e}")
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
505 |                 break
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:504:75: TRY401 Redundant exception object included in `logging.exception` call
    |
503 |             except Exception as e:
504 |                 custom_logger.exception(f"Error in streaming processing: {e}")
    |                                                                           ^ TRY401
505 |                 break
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:573:13: TRY300 Consider moving this statement to an `else` block
    |
571 |             result = loop.run_until_complete(self.transcribe_async(request))
572 |             loop.close()
573 |             return result.text
    |             ^^^^^^^^^^^^^^^^^^ TRY300
574 |         except Exception as e:
575 |             custom_logger.exception(f"Legacy transcription failed: {e}")
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:575:37: G004 Logging statement uses f-string
    |
573 |             return result.text
574 |         except Exception as e:
575 |             custom_logger.exception(f"Legacy transcription failed: {e}")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
576 |             return f"[Transcription error: {e}]"
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:575:69: TRY401 Redundant exception object included in `logging.exception` call
    |
573 |             return result.text
574 |         except Exception as e:
575 |             custom_logger.exception(f"Legacy transcription failed: {e}")
    |                                                                     ^ TRY401
576 |             return f"[Transcription error: {e}]"
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:602:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
600 |         self.model_filename = model_filename
601 |         self.onnx_path = onnx_path or resource_path("cache/vad")
602 |         self.model_path = os.path.join(self.onnx_path, model_filename)
    |                           ^^^^^^^^^^^^ PTH118
603 |         self.progress_callback = progress_callback
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:625:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
623 |         try:
624 |             # Download model if needed
625 |             if not os.path.exists(self.model_path):
    |                    ^^^^^^^^^^^^^^ PTH110
626 |                 os.makedirs(self.onnx_path, exist_ok=True)
627 |                 self._download_model()
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:626:17: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
624 |             # Download model if needed
625 |             if not os.path.exists(self.model_path):
626 |                 os.makedirs(self.onnx_path, exist_ok=True)
    |                 ^^^^^^^^^^^ PTH103
627 |                 self._download_model()
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:642:37: G004 Logging statement uses f-string
    |
641 |         except Exception as e:
642 |             custom_logger.exception(f"Failed to initialize VAD service: {e}")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
643 |             raise
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:642:74: TRY401 Redundant exception object included in `logging.exception` call
    |
641 |         except Exception as e:
642 |             custom_logger.exception(f"Failed to initialize VAD service: {e}")
    |                                                                          ^ TRY401
643 |             raise
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:652:32: G004 Logging statement uses f-string
    |
651 |         try:
652 |             custom_logger.info(f"Downloading VAD model from {url}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
653 |             response = requests.get(url, stream=True)
654 |             response.raise_for_status()
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:653:24: S113 Probable use of `requests` call without timeout
    |
651 |         try:
652 |             custom_logger.info(f"Downloading VAD model from {url}")
653 |             response = requests.get(url, stream=True)
    |                        ^^^^^^^^^^^^ S113
654 |             response.raise_for_status()
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:659:18: PTH123 `open()` should be replaced by `Path.open()`
    |
657 |             downloaded = 0
658 |
659 |             with open(self.model_path, "wb") as f:
    |                  ^^^^ PTH123
660 |                 for chunk in response.iter_content(chunk_size=8192):
661 |                     if chunk:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:670:16: BLE001 Do not catch blind exception: `Exception`
    |
668 |             custom_logger.info("VAD model downloaded successfully")
669 |
670 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
671 |             if os.path.exists(self.model_path):
672 |                 os.unlink(self.model_path)
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:671:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
670 |         except Exception as e:
671 |             if os.path.exists(self.model_path):
    |                ^^^^^^^^^^^^^^ PTH110
672 |                 os.unlink(self.model_path)
673 |             msg = f"Failed to download VAD model: {e}"
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:672:17: PTH108 `os.unlink()` should be replaced by `Path.unlink()`
    |
670 |         except Exception as e:
671 |             if os.path.exists(self.model_path):
672 |                 os.unlink(self.model_path)
    |                 ^^^^^^^^^ PTH108
673 |             msg = f"Failed to download VAD model: {e}"
674 |             raise RuntimeError(msg)
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:674:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
672 |                 os.unlink(self.model_path)
673 |             msg = f"Failed to download VAD model: {e}"
674 |             raise RuntimeError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^^ B904
675 |
676 |     def reset_states(self) -> None:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:694:32: PLR2004 Magic value used in comparison, consider replacing `512` with a constant variable
    |
692 |             Speech probability (0.0 to 1.0)
693 |         """
694 |         if len(audio_chunk) != 512:
    |                                ^^^ PLR2004
695 |             # Pad or truncate to 512 samples
696 |             if len(audio_chunk) < 512:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:696:35: PLR2004 Magic value used in comparison, consider replacing `512` with a constant variable
    |
694 |         if len(audio_chunk) != 512:
695 |             # Pad or truncate to 512 samples
696 |             if len(audio_chunk) < 512:
    |                                   ^^^ PLR2004
697 |                 audio_chunk = np.pad(audio_chunk, (0, 512 - len(audio_chunk)))
698 |             else:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:751:13: TRY300 Consider moving this statement to an `else` block
    |
749 |             # Consider speech if more than 10% of chunks contain speech
750 |             speech_ratio = speech_chunks / total_chunks if total_chunks > 0 else 0
751 |             return speech_ratio > 0.1
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
752 |
753 |         except Exception as e:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:751:35: PLR2004 Magic value used in comparison, consider replacing `0.1` with a constant variable
    |
749 |             # Consider speech if more than 10% of chunks contain speech
750 |             speech_ratio = speech_chunks / total_chunks if total_chunks > 0 else 0
751 |             return speech_ratio > 0.1
    |                                   ^^^ PLR2004
752 |
753 |         except Exception as e:
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:754:37: G004 Logging statement uses f-string
    |
753 |         except Exception as e:
754 |             custom_logger.exception(f"Error checking speech in {file_path}: {e}")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
755 |             return False
    |

src_refactored\infrastructure\transcription\onnx_transcription_service.py:754:78: TRY401 Redundant exception object included in `logging.exception` call
    |
753 |         except Exception as e:
754 |             custom_logger.exception(f"Error checking speech in {file_path}: {e}")
    |                                                                              ^ TRY401
755 |             return False
    |

src_refactored\infrastructure\transcription\transcription_file_repository.py:58:14: PTH123 `open()` should be replaced by `Path.open()`
   |
56 |             content = transcription
57 |
58 |         with open(output_path, "w", encoding="utf-8") as f:
   |              ^^^^ PTH123
59 |             if output_format.lower() == "json":
60 |                 json.dump(content, f, indent=2, ensure_ascii=False)
   |

src_refactored\infrastructure\transcription\transcription_file_repository.py:95:30: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
93 |             content = {
94 |                 "audio_file": audio_file_path,
95 |                 "timestamp": datetime.now().isoformat(),
   |                              ^^^^^^^^^^^^^^ DTZ005
96 |                 "segments": segments,
97 |             }
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\transcription\transcription_file_repository.py:99:14: PTH123 `open()` should be replaced by `Path.open()`
    |
 97 |             }
 98 |
 99 |         with open(output_path, "w", encoding="utf-8") as f:
    |              ^^^^ PTH123
100 |             if output_format.lower() == "json":
101 |                 json.dump(content, f, indent=2, ensure_ascii=False)
    |

src_refactored\infrastructure\transcription\transcription_file_repository.py:129:18: PTH123 `open()` should be replaced by `Path.open()`
    |
128 |         if file_path.suffix.lower() == ".json":
129 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
130 |                 return json.load(f)
131 |         else:
    |

src_refactored\infrastructure\transcription\transcription_file_repository.py:132:18: PTH123 `open()` should be replaced by `Path.open()`
    |
130 |                 return json.load(f)
131 |         else:
132 |             with open(file_path, encoding="utf-8") as f:
    |                  ^^^^ PTH123
133 |                 content = f.read()
134 |             return {
    |

src_refactored\infrastructure\transcription\transcription_file_repository.py:158:101: E501 Line too long (101 > 100)
    |
156 |         transcription_files = []
157 |         for file_path in self.base_path.glob(pattern):
158 |             if file_path.is_file() and file_path.suffix.lower() in [".txt", ".srt", ".json", ".vtt"]:
    |                                                                                                     ^ E501
159 |                 transcription_files.append(str(file_path))
    |

src_refactored\infrastructure\transcription\transcription_file_repository.py:159:17: PERF401 Use a list comprehension to create a transformed list
    |
157 |         for file_path in self.base_path.glob(pattern):
158 |             if file_path.is_file() and file_path.suffix.lower() in [".txt", ".srt", ".json", ".vtt"]:
159 |                 transcription_files.append(str(file_path))
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
160 |
161 |         return sorted(transcription_files)
    |
    = help: Replace for loop with list comprehension

src_refactored\infrastructure\transcription\transcription_file_repository.py:192:26: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
190 |         return {
191 |             "audio_file": audio_file_path,
192 |             "timestamp": datetime.now().isoformat(),
    |                          ^^^^^^^^^^^^^^ DTZ005
193 |             "transcription": transcription,
194 |         }
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src_refactored\infrastructure\ui\event_system_service.py:125:17: G004 Logging statement uses f-string
    |
124 |               self._logger.debug(
125 | /                 f"Subscribed {observer.__class__.__name__} to {event_type.__name__} "
126 | |                 f"with ID {subscription.subscription_id}",
    | |_________________________________________________________^ G004
127 |               )
    |

src_refactored\infrastructure\ui\event_system_service.py:156:32: G004 Logging statement uses f-string
    |
155 |             self._metrics.active_subscriptions -= 1
156 |             self._logger.debug(f"Unsubscribed {subscription_id}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
157 |             return True
    |

src_refactored\infrastructure\ui\event_system_service.py:179:32: G004 Logging statement uses f-string
    |
177 |             self._processing_queue[event.priority].append(event)
178 |
179 |             self._logger.debug(f"Published event {event.event_type} with ID {event.event_id}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
180 |
181 |         # Emit PyQt signal
    |

src_refactored\infrastructure\ui\event_system_service.py:238:25: G004 Logging statement uses f-string
    |
236 |                   except Exception as e:
237 |                       self._logger.exception(
238 | /                         f"Error processing event {event.event_id} "
239 | |                         f"for subscription {subscription.subscription_id}: {e}",
    | |_______________________________________________________________________________^ G004
240 |                       )
241 |                       self._metrics.failed_events += 1
    |

src_refactored\infrastructure\ui\event_system_service.py:239:77: TRY401 Redundant exception object included in `logging.exception` call
    |
237 |                     self._logger.exception(
238 |                         f"Error processing event {event.event_id} "
239 |                         f"for subscription {subscription.subscription_id}: {e}",
    |                                                                             ^ TRY401
240 |                     )
241 |                     self._metrics.failed_events += 1
    |

src_refactored\infrastructure\ui\event_system_service.py:258:36: G004 Logging statement uses f-string
    |
257 |         except Exception as e:
258 |             self._logger.exception(f"Critical error processing event {event.event_id}: {e}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
259 |             event.status = EventStatus.FAILED
260 |             self._metrics.failed_events += 1
    |

src_refactored\infrastructure\ui\event_system_service.py:258:89: TRY401 Redundant exception object included in `logging.exception` call
    |
257 |         except Exception as e:
258 |             self._logger.exception(f"Critical error processing event {event.event_id}: {e}")
    |                                                                                         ^ TRY401
259 |             event.status = EventStatus.FAILED
260 |             self._metrics.failed_events += 1
    |

src_refactored\infrastructure\ui\event_system_service.py:288:32: G004 Logging statement uses f-string
    |
286 |         with self._lock:
287 |             self._command_handlers[command_type] = handler
288 |             self._logger.debug(f"Registered command handler for {command_type.__name__}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
289 |
290 |     def register_query_handler(
    |

src_refactored\infrastructure\ui\event_system_service.py:303:32: G004 Logging statement uses f-string
    |
301 |         with self._lock:
302 |             self._query_handlers[query_type] = handler
303 |             self._logger.debug(f"Registered query handler for {query_type.__name__}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
304 |
305 |     def send_command(self, command: ICommand,
    |

src_refactored\infrastructure\ui\event_system_service.py:329:32: G004 Logging statement uses f-string
    |
327 |         try:
328 |             result = handler.handle(command)
329 |             self._logger.debug(f"Executed command {command_type.__name__}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
330 |             return result
331 |         except Exception as e:
    |

src_refactored\infrastructure\ui\event_system_service.py:330:13: TRY300 Consider moving this statement to an `else` block
    |
328 |             result = handler.handle(command)
329 |             self._logger.debug(f"Executed command {command_type.__name__}")
330 |             return result
    |             ^^^^^^^^^^^^^ TRY300
331 |         except Exception as e:
332 |             self._logger.exception(f"Error executing command {command_type.__name__}: {e}",
    |

src_refactored\infrastructure\ui\event_system_service.py:332:36: G004 Logging statement uses f-string
    |
330 |             return result
331 |         except Exception as e:
332 |             self._logger.exception(f"Error executing command {command_type.__name__}: {e}",
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
333 |     )
334 |             raise
    |

src_refactored\infrastructure\ui\event_system_service.py:332:88: TRY401 Redundant exception object included in `logging.exception` call
    |
330 |             return result
331 |         except Exception as e:
332 |             self._logger.exception(f"Error executing command {command_type.__name__}: {e}",
    |                                                                                        ^ TRY401
333 |     )
334 |             raise
    |

src_refactored\infrastructure\ui\event_system_service.py:359:32: G004 Logging statement uses f-string
    |
357 |         try:
358 |             result = handler.handle(query)
359 |             self._logger.debug(f"Executed query {query_type.__name__}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
360 |             return result
361 |         except Exception as e:
    |

src_refactored\infrastructure\ui\event_system_service.py:360:13: TRY300 Consider moving this statement to an `else` block
    |
358 |             result = handler.handle(query)
359 |             self._logger.debug(f"Executed query {query_type.__name__}")
360 |             return result
    |             ^^^^^^^^^^^^^ TRY300
361 |         except Exception as e:
362 |             self._logger.exception(f"Error executing query {query_type.__name__}: {e}")
    |

src_refactored\infrastructure\ui\event_system_service.py:362:36: G004 Logging statement uses f-string
    |
360 |             return result
361 |         except Exception as e:
362 |             self._logger.exception(f"Error executing query {query_type.__name__}: {e}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
363 |             raise
    |

src_refactored\infrastructure\ui\event_system_service.py:362:84: TRY401 Redundant exception object included in `logging.exception` call
    |
360 |             return result
361 |         except Exception as e:
362 |             self._logger.exception(f"Error executing query {query_type.__name__}: {e}")
    |                                                                                    ^ TRY401
363 |             raise
    |

src_refactored\infrastructure\ui\file_dialog_service.py:108:101: E501 Line too long (114 > 100)
    |
107 |         self._media_filters = [
108 |             "Media Files (*.mp3 *.wav *.flac *.m4a *.aac *.ogg *.wma *.mp4 *.avi *.mkv *.mov *.wmv *.flv *.webm)",
    |                                                                                                     ^^^^^^^^^^^^^^ E501
109 |             "Audio Files (*.mp3 *.wav *.flac *.m4a *.aac *.ogg *.wma)",
110 |             "Video Files (*.mp4 *.avi *.mkv *.mov *.wmv *.flv *.webm)",
    |

src_refactored\infrastructure\ui\file_dialog_service.py:190:101: E501 Line too long (107 > 100)
    |
188 |                         return FileDialogResult(success=False, error_message=error_msg)
189 |
190 |                 result = FileDialogResult(success=True, files=[file_path], selected_filter=selected_filter)
    |                                                                                                     ^^^^^^^ E501
191 |                 self.files_selected.emit(result)
192 |                 return result
    |

src_refactored\infrastructure\ui\file_dialog_service.py:196:16: BLE001 Do not catch blind exception: `Exception`
    |
194 |             return FileDialogResult(success=False)
195 |
196 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
197 |             error_msg = f"Error opening file dialog: {e!s}"
198 |             return FileDialogResult(success=False, error_message=error_msg)
    |

src_refactored\infrastructure\ui\file_dialog_service.py:254:101: E501 Line too long (106 > 100)
    |
252 |                         return FileDialogResult(success=False, error_message=error_msg)
253 |
254 |                 result = FileDialogResult(success=True, files=file_paths, selected_filter=selected_filter)
    |                                                                                                     ^^^^^^ E501
255 |                 self.files_selected.emit(result)
256 |                 return result
    |

src_refactored\infrastructure\ui\file_dialog_service.py:260:16: BLE001 Do not catch blind exception: `Exception`
    |
258 |             return FileDialogResult(success=False)
259 |
260 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
261 |             error_msg = f"Error opening file dialog: {e!s}"
262 |             return FileDialogResult(success=False, error_message=error_msg)
    |

src_refactored\infrastructure\ui\file_dialog_service.py:309:101: E501 Line too long (107 > 100)
    |
307 |                         parent,
308 |                         "Confirm Overwrite",
309 |                         f"The file '{Path(file_path).name}' already exists.\nDo you want to overwrite it?",
    |                                                                                                     ^^^^^^^ E501
310 |                         QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
311 |                         QMessageBox.StandardButton.No,
    |

src_refactored\infrastructure\ui\file_dialog_service.py:327:101: E501 Line too long (107 > 100)
    |
325 |                         return FileDialogResult(success=False, error_message=error_msg)
326 |
327 |                 result = FileDialogResult(success=True, files=[file_path], selected_filter=selected_filter)
    |                                                                                                     ^^^^^^^ E501
328 |                 self.files_selected.emit(result)
329 |                 return result
    |

src_refactored\infrastructure\ui\file_dialog_service.py:333:16: BLE001 Do not catch blind exception: `Exception`
    |
331 |             return FileDialogResult(success=False)
332 |
333 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
334 |             error_msg = f"Error opening save dialog: {e!s}"
335 |             return FileDialogResult(success=False, error_message=error_msg)
    |

src_refactored\infrastructure\ui\file_dialog_service.py:373:16: BLE001 Do not catch blind exception: `Exception`
    |
371 |             return FileDialogResult(success=False)
372 |
373 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
374 |             error_msg = f"Error opening directory dialog: {e!s}"
375 |             return FileDialogResult(success=False, error_message=error_msg)
    |

src_refactored\infrastructure\ui\file_dialog_service.py:389:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
387 |               return directory
388 |
389 | /         if self._remember_last_directory and self._last_directory:
390 | |             if Path(self._last_directory).exists():
    | |___________________________________________________^ SIM102
391 |                   return self._last_directory
    |
    = help: Combine `if` statements using `and`

src_refactored\infrastructure\ui\message_display_service.py:78:13: TRY300 Consider moving this statement to an `else` block
   |
76 |     )
77 |             self._progress_opacity_effects[widget_id] = opacity_effect
78 |             return opacity_effect
   |             ^^^^^^^^^^^^^^^^^^^^^ TRY300
79 |         except RuntimeError:
80 |             # Progress bar has been deleted
   |

src_refactored\infrastructure\ui\message_display_service.py:178:39: FBT003 Boolean positional value in function call
    |
176 |         try:
177 |             # Block signals during update
178 |             progress_bar.blockSignals(True)
    |                                       ^^^^ FBT003
179 |
180 |             # Setup opacity effect if needed
    |

src_refactored\infrastructure\ui\message_display_service.py:193:39: FBT003 Boolean positional value in function call
    |
192 |             # Unblock signals
193 |             progress_bar.blockSignals(False)
    |                                       ^^^^^ FBT003
194 |
195 |             # Handle state changes
    |

src_refactored\infrastructure\ui\message_display_service.py:197:33: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
195 |             # Handle state changes
196 |             if on_state_change:
197 |                 if percentage < 100:
    |                                 ^^^ PLR2004
198 |                     on_state_change(True)  # Downloading
199 |                 else:
    |

src_refactored\infrastructure\ui\message_display_service.py:198:37: FBT003 Boolean positional value in function call
    |
196 |             if on_state_change:
197 |                 if percentage < 100:
198 |                     on_state_change(True)  # Downloading
    |                                     ^^^^ FBT003
199 |                 else:
200 |                     on_state_change(False)  # Completed
    |

src_refactored\infrastructure\ui\message_display_service.py:200:37: FBT003 Boolean positional value in function call
    |
198 |                     on_state_change(True)  # Downloading
199 |                 else:
200 |                     on_state_change(False)  # Completed
    |                                     ^^^^^ FBT003
201 |
202 |         except RuntimeError:
    |

src_refactored\infrastructure\ui\message_display_service.py:243:43: FBT003 Boolean positional value in function call
    |
241 |             try:
242 |                 # Block signals during reset
243 |                 progress_bar.blockSignals(True)
    |                                           ^^^^ FBT003
244 |
245 |                 fade_progress = QPropertyAnimation(progress_opacity, b"opacity")
    |

src_refactored\infrastructure\ui\message_display_service.py:287:43: FBT003 Boolean positional value in function call
    |
285 |                 progress_bar.setValue(0)
286 |                 progress_bar.setVisible(False)
287 |                 progress_bar.blockSignals(False)
    |                                           ^^^^^ FBT003
288 |
289 |             # Reset label
    |

src_refactored\infrastructure\ui\progress_ui_service.py:218:23: RUF034 Useless `if`-`else` condition
    |
216 |                   current_value=0.0,
217 |                   maximum_value=maximum_value,
218 |                   state=ProgressState.create_processing()
    |  _______________________^
219 | |                 if not indeterminate
220 | |                 else ProgressState.create_processing(),
    | |______________________________________________________^ RUF034
221 |                   message=message,
222 |               )
    |

src_refactored\infrastructure\ui\progress_ui_service.py:228:23: RUF034 Useless `if`-`else` condition
    |
226 |                   current_value=0.0,
227 |                   maximum_value=maximum_value,
228 |                   state=ProgressState.create_processing()
    |  _______________________^
229 | |                 if not indeterminate
230 | |                 else ProgressState.create_processing(),
    | |______________________________________________________^ RUF034
231 |                   message=message,
232 |               )
    |

src_refactored\infrastructure\ui\progress_ui_service.py:766:101: E501 Line too long (104 > 100)
    |
764 |         self.service.start_progress(progress_id, float(total_items), "Processing...")
765 |
766 |     def update_download_progress(self, progress_id: str, percentage: float, filename: str = "") -> None:
    |                                                                                                     ^^^^ E501
767 |         """Update download progress.
    |

src_refactored\infrastructure\ui\progress_ui_service.py:779:101: E501 Line too long (107 > 100)
    |
777 |         )
778 |
779 |     def update_transcription_progress(self, progress_id: str, percentage: float, status: str = "") -> None:
    |                                                                                                     ^^^^^^^ E501
780 |         """Update transcription progress.
    |

src_refactored\infrastructure\ui\state_management_service.py:207:101: E501 Line too long (101 > 100)
    |
205 |                                       transition_data, StateTransitionResult.BLOCKED,
206 |                                       "Transition not allowed")
207 |                 self.transition_failed.emit(from_state or "", target_state, "Transition not allowed")
    |                                                                                                     ^ E501
208 |                 return StateTransitionResult.BLOCKED
    |

src_refactored\infrastructure\ui\state_management_service.py:218:101: E501 Line too long (106 > 100)
    |
216 |                                       transition_data, StateTransitionResult.BLOCKED,
217 |                                       "Transition blocked by guard")
218 |                 self.transition_failed.emit(from_state or "", target_state, "Transition blocked by guard")
    |                                                                                                     ^^^^^^ E501
219 |                 return StateTransitionResult.BLOCKED
    |

src_refactored\infrastructure\ui\state_management_service.py:254:13: TRY300 Consider moving this statement to an `else` block
    |
252 |             self.state_changed.emit(from_state or "", target_state, self._state_data)
253 |
254 |             return StateTransitionResult.SUCCESS
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
255 |
256 |         except Exception as e:
    |

src_refactored\infrastructure\ui\state_management_service.py:256:16: BLE001 Do not catch blind exception: `Exception`
    |
254 |             return StateTransitionResult.SUCCESS
255 |
256 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
257 |             error_msg = f"Transition failed: {e!s}"
258 |             self._record_transition(from_state, target_state, trigger,
    |

src_refactored\infrastructure\ui\state_management_service.py:513:17: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    |
511 |           for action_name in state_def.entry_actions:
512 |               if action_name in self._entry_actions:
513 | /                 try:
514 | |                     self._entry_actions[action_name](state_name, self._state_data)
515 | |                 except Exception:
516 | |                     # Log error but don't fail transition
517 | |                     pass
    | |________________________^ SIM105
518 |
519 |       def _execute_exit_actions(self, state_name: str,
    |
    = help: Replace with `contextlib.suppress(Exception)`

src_refactored\infrastructure\ui\state_management_service.py:515:17: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
513 |                   try:
514 |                       self._entry_actions[action_name](state_name, self._state_data)
515 | /                 except Exception:
516 | |                     # Log error but don't fail transition
517 | |                     pass
    | |________________________^ S110
518 |
519 |       def _execute_exit_actions(self, state_name: str,
    |

src_refactored\infrastructure\ui\state_management_service.py:515:24: BLE001 Do not catch blind exception: `Exception`
    |
513 |                 try:
514 |                     self._entry_actions[action_name](state_name, self._state_data)
515 |                 except Exception:
    |                        ^^^^^^^^^ BLE001
516 |                     # Log error but don't fail transition
517 |                     pass
    |

src_refactored\infrastructure\ui\state_management_service.py:532:17: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    |
530 |           for action_name in state_def.exit_actions:
531 |               if action_name in self._exit_actions:
532 | /                 try:
533 | |                     self._exit_actions[action_name](state_name, self._state_data)
534 | |                 except Exception:
535 | |                     # Log error but don't fail transition
536 | |                     pass
    | |________________________^ SIM105
537 |
538 |       def _start_state_timer(self, state_name: str,
    |
    = help: Replace with `contextlib.suppress(Exception)`

src_refactored\infrastructure\ui\state_management_service.py:534:17: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
532 |                   try:
533 |                       self._exit_actions[action_name](state_name, self._state_data)
534 | /                 except Exception:
535 | |                     # Log error but don't fail transition
536 | |                     pass
    | |________________________^ S110
537 |
538 |       def _start_state_timer(self, state_name: str,
    |

src_refactored\infrastructure\ui\state_management_service.py:534:24: BLE001 Do not catch blind exception: `Exception`
    |
532 |                 try:
533 |                     self._exit_actions[action_name](state_name, self._state_data)
534 |                 except Exception:
    |                        ^^^^^^^^^ BLE001
535 |                     # Log error but don't fail transition
536 |                     pass
    |

src_refactored\infrastructure\ui_widgets\toggle_widget_service.py:59:9: N802 Function name `mousePressEvent` should be lowercase
   |
57 |         """)
58 |
59 |     def mousePressEvent(self, event: QMouseEvent,
   |         ^^^^^^^^^^^^^^^ N802
60 |     ) -> None:
61 |         """Handle mouse press events to make the toggle switch clickable.
   |

src_refactored\infrastructure\ui_widgets\toggle_widget_service.py:73:9: N802 Function name `paintEvent` should be lowercase
   |
71 |             super().mousePressEvent(event)
72 |
73 |     def paintEvent(self, event: QPaintEvent,
   |         ^^^^^^^^^^ N802
74 |     ) -> None:
75 |         """Handle paint events to update styling based on state.
   |

src_refactored\infrastructure\ui_widgets\toggle_widget_service.py:126:9: N802 Function name `isChecked` should be lowercase
    |
124 |         """)
125 |
126 |     def isChecked(self) -> bool:
    |         ^^^^^^^^^ N802
127 |         """Check if the toggle switch is in checked state.
    |

src_refactored\infrastructure\ui_widgets\toggle_widget_service.py:134:9: N802 Function name `setChecked` should be lowercase
    |
132 |         return self.value() == 1
133 |
134 |     def setChecked(self, checked: bool,
    |         ^^^^^^^^^^ N802
135 |     ) -> None:
136 |         """Set the checked state of the toggle switch.
    |

src_refactored\infrastructure\ui_widgets\toggle_widget_service.py:181:9: SLF001 Private member accessed: `_checked_color`
    |
179 |         """
180 |         # Store custom colors for dynamic styling
181 |         toggle._checked_color = checked_color
    |         ^^^^^^^^^^^^^^^^^^^^^ SLF001
182 |         toggle._unchecked_color = unchecked_color
    |

src_refactored\infrastructure\ui_widgets\toggle_widget_service.py:182:9: SLF001 Private member accessed: `_unchecked_color`
    |
180 |         # Store custom colors for dynamic styling
181 |         toggle._checked_color = checked_color
182 |         toggle._unchecked_color = unchecked_color
    |         ^^^^^^^^^^^^^^^^^^^^^^^ SLF001
183 |
184 |         # Override style methods with custom colors
    |

src_refactored\infrastructure\ui_widgets\toggle_widget_service.py:222:9: SLF001 Private member accessed: `_apply_checked_style`
    |
221 |         # Replace methods with custom implementations
222 |         toggle._apply_checked_style = apply_checked_style
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
223 |         toggle._apply_unchecked_style = apply_unchecked_style
    |

src_refactored\infrastructure\ui_widgets\toggle_widget_service.py:223:9: SLF001 Private member accessed: `_apply_unchecked_style`
    |
221 |         # Replace methods with custom implementations
222 |         toggle._apply_checked_style = apply_checked_style
223 |         toggle._apply_unchecked_style = apply_unchecked_style
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
    |

src_refactored\infrastructure\ui_widgets\widget_event_service.py:173:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
171 |           if mime_data.hasUrls():
172 |               file_path = mime_data.urls()[0].toLocalFile()
173 | /             if any(file_path.lower().endswith(ext) for ext in self.supported_file_types):
174 | |                 # Set cursor for supported widget types
175 | |                 if isinstance(widget, QLabel | QLineEdit | QPushButton | QGroupBox | QWidget):
    | |______________________________________________________________________________________________^ SIM102
176 |                       widget.setCursor(Qt.CursorShape.DragCopyCursor)
177 |                       event.acceptProposedAction()
    |
    = help: Combine `if` statements using `and`

src_refactored\infrastructure\ui_widgets\widget_event_service.py:235:9: PLR0911 Too many return statements (13 > 6)
    |
233 |             self.event_handlers[EventType.SHOW](widget, event)
234 |
235 |     def _get_key_name(self, event: QKeyEvent,
    |         ^^^^^^^^^^^^^ PLR0911
236 |     ) -> str | None:
237 |         """Get the printable name of a key.
    |

src_refactored\infrastructure\ui_widgets\widget_event_service.py:314:9: N802 Function name `eventFilter` should be lowercase
    |
312 |         widget.installEventFilter(self)
313 |
314 |     def eventFilter(self, obj: QObject, event: QEvent,
    |         ^^^^^^^^^^^ N802
315 |     ) -> bool:
316 |         """Qt event filter implementation.
    |

src_refactored\infrastructure\ui_widgets\widget_styling_service.py:17:22: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
16 |       # Default color scheme
17 |       DEFAULT_COLORS = {
   |  ______________________^
18 | |         "dialog_bg": "#141b1f",
19 | |         "section_bg": "#0c0e13",
20 | |         "text_color": "rgb(144, 164, 174)",
21 | |         "border_color": "rgb(78, 106, 129)",
22 | |         "divider_color": "rgba(78, 106, 129, 80)",
23 | |         "accent_color": "rgb(0, 122, 255)",
24 | |         "button_bg": "rgb(54, 71, 84)",
25 | |         "button_hover": "rgb(74, 91, 104)",
26 | |         "input_bg": "rgb(34, 51, 64)",
27 | |         "input_border": "rgb(78, 106, 129)",
28 | |     }
   | |_____^ RUF012
29 |
30 |       def __init__(self, custom_colors: dict[str, str] | None = None):
   |

src_refactored\infrastructure\worker\worker_imports_configuration.py:74:36: ARG002 Unused method argument: `worker_type`
   |
72 |         return worker_class(**init_params)
73 |
74 |     def supports_worker_type(self, worker_type: WorkerImportType,
   |                                    ^^^^^^^^^^^ ARG002
75 |     ) -> bool:
76 |         """Check if factory supports the given worker type.
   |

src_refactored\infrastructure\worker\worker_imports_configuration.py:114:13: TRY300 Consider moving this statement to an `else` block
    |
112 |             self._import_cache[cache_key] = worker_class
113 |
114 |             return worker_class
    |             ^^^^^^^^^^^^^^^^^^^ TRY300
115 |         except ImportError as e:
116 |             msg = f"Failed to import module {config.module_path}: {e}"
    |

src_refactored\infrastructure\worker\worker_imports_configuration.py:117:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
115 |         except ImportError as e:
116 |             msg = f"Failed to import module {config.module_path}: {e}"
117 |             raise ImportError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^ B904
118 |         except AttributeError as e:
119 |             msg = f"Class {config.class_name} not found in module {config.module_path}: {e}"
    |

src_refactored\infrastructure\worker\worker_imports_configuration.py:120:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
118 |         except AttributeError as e:
119 |             msg = f"Class {config.class_name} not found in module {config.module_path}: {e}"
120 |             raise AttributeError(msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

Found 5327 errors.
