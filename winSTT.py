# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import os
import torch
import keyboard
import threading
import time
from utils.utils import get_model
from listener import AudioToTextRecorder
# from logger import setup_logger

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        
        self.script_path = (os.path.dirname(os.path.abspath(__file__)))
        
        # self.logger = setup_logger()
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.setFixedSize(400, 300)
        
        icon = QtGui.QIcon(os.path.join(self.script_path, "Windows 1 Theta"))
        MainWindow.setWindowIcon(icon)
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(46, 52, 64))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 27, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(46, 52, 64))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 27, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 27, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 27, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Window, brush)
        MainWindow.setPalette(palette)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.line = QtWidgets.QFrame(parent=self.centralwidget)
        self.line.setGeometry(QtCore.QRect(80, 190, 241, 20))
        self.line.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.checkBox = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(10, 269, 175, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        self.checkBox.setFont(font)
        self.checkBox.setAcceptDrops(True)
        self.checkBox.setObjectName("checkBox")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(190, 269, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Roboto")
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.WinSTT = QtWidgets.QLabel(parent=self.centralwidget)
        self.WinSTT.setGeometry(QtCore.QRect(150, 10, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Codec Pro ExtraBold")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.WinSTT.setFont(font)
        self.WinSTT.setMouseTracking(True)
        self.WinSTT.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.WinSTT.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.WinSTT.setObjectName("WinSTT")
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(50, 210, 291, 20))
        font = QtGui.QFont()
        font.setFamily("Input")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.progressBar = QtWidgets.QProgressBar(parent=self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(60, 240, 281, 16))
        font = QtGui.QFont()
        font.setFamily("Input")
        self.progressBar.setFont(font)
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setVisible(False)
        self.graphicsView_2 = QtWidgets.QGraphicsView(parent=self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(0, 270, 411, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(8, 11, 14))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Active, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(8, 11, 14))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Inactive, QtGui.QPalette.ColorRole.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(20, 27, 31))
        brush.setStyle(QtCore.Qt.BrushStyle.SolidPattern)
        palette.setBrush(QtGui.QPalette.ColorGroup.Disabled, QtGui.QPalette.ColorRole.Base, brush)
        self.graphicsView_2.setPalette(palette)
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(160, 10, 21, 21))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap(os.path.join(self.script_path, "Windows 1 Theta.png")))
        self.label_2.setScaledContents(True)
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(230, 70, 101, 31))
        self.pushButton.setObjectName("pushButton")
        self.textEdit = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(70, 70, 110, 31))
        self.textEdit.setLineWidth(0)
        self.textEdit.setText("right ctrl")
        self.textEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("Current Key")
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(70, 140, 111, 31))
        self.comboBox.setObjectName("Model Type")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox_2 = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(230, 140, 101, 31))
        self.comboBox_2.setObjectName("Model size")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(360, 270, 31, 31))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap(os.path.join(self.script_path, "switch-on.png" if torch.cuda.is_available() else "switch-off.png")))
        self.label_4.setScaledContents(True)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(0, -5, 401, 51))
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap(os.path.join(self.script_path,"Untitled-1.png")))
        self.label_5.setScaledContents(True)
        self.label_5.setObjectName("label_5")
        self.label_5.raise_()
        self.graphicsView_2.raise_()
        self.line.raise_()
        self.checkBox.raise_()
        self.label.raise_()
        self.WinSTT.raise_()
        self.label_3.raise_()
        self.progressBar.raise_()
        self.label_2.raise_()
        self.pushButton.raise_()
        self.textEdit.raise_()
        self.comboBox.raise_()
        self.comboBox_2.raise_()
        self.label_4.raise_()
        
        self.listener = AudioToTextRecorder()
        self.start_sound = os.path.join(self.script_path, "splash.mp3")
        self.currently_hooked = None
        self.record_key_toggle = False
        
        self.pushButton.clicked.connect(self.toggle_and_set)

        self.comboBox_2.currentIndexChanged.connect(self.select_model_size)
        
        
        self.checkBox.clicked.connect(self.toggle_sound)
        
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.retranslateUi(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "WinSTT"))
        self.checkBox.setText(_translate("MainWindow", "Recording sound (Drag/Drop)"))
        self.checkBox.setChecked(True)
        self.label.setText(_translate("MainWindow", "Hardware Acceleration Status:"))
        self.WinSTT.setText(_translate("MainWindow", "STT"))
        self.label_3.setText(_translate("MainWindow", ""))
        self.pushButton.setText(_translate("MainWindow", "Record Key"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Faster-Whisper"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Insanely-Fast-Whisper"))
        self.comboBox.setCurrentText(self.listener.model_type)
        self.comboBox.setEnabled(True if torch.cuda.is_available() else False)
        self.comboBox_2.setItemText(0, _translate("MainWindow", "tiny.en"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "tiny"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "base.en"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "base"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "small.en"))
        self.comboBox_2.setItemText(5, _translate("MainWindow", "small"))
        self.comboBox_2.setItemText(6, _translate("MainWindow", "medium.en"))
        self.comboBox_2.setItemText(7, _translate("MainWindow", "medium"))
        self.comboBox_2.setItemText(8, _translate("MainWindow", "large"))
        self.comboBox_2.setItemText(9, _translate("MainWindow", "large-v2"))
        self.comboBox_2.setItemText(10, _translate("MainWindow", "large-v3"))
        self.comboBox_2.setCurrentText("small")
        
    def keyPressEvent(self, event: QtGui.QKeyEvent):
        if self.record_key_toggle:
            if self.currently_hooked != None:
                keyboard.unhook_all()
                
            key_text = keyboard.read_event(suppress=True).name
            self.currently_hooked = key_text
            self.textEdit.setReadOnly(False)
            self.textEdit.setPlainText(key_text)
            self.textEdit.setReadOnly(True)
            
        QtWidgets.QWidget.keyPressEvent(self, event)

    def toggle_and_set(self):
        if not self.record_key_toggle:
            self.record_key_toggle = True
            self.pushButton.setText("Stop")
        else:
            self.record_key_toggle = False
            self.listener.set_record_key(self.currently_hooked)
            self.currently_hooked = None
            self.pushButton.setText("Record Key")
            
    def select_model_size(self, model_size):
        self.label_3.setText("Downloading & Loading model, please wait...")
        self.progressBar.setVisible(True)
        self.listener.model_size = self.comboBox_2.currentText()
        self.comboBox_2.setEnabled(False)
        self.load_model_thread = threading.Thread(target=self.load_model)
        self.load_model_thread.start()
        total_steps = 100  # Adjust this value based on the total steps in your loading process
        for step in range(1, total_steps):  # Start from 1 to avoid division by zero
            progress_value = int((step / total_steps) ** 3 * 100)  # Adjust the power to control the slowing down effect
            self.progressBar.setValue(progress_value)
            time.sleep(0.05)
        
    def load_model(self):

        self.listener.model = get_model(self.listener.model_type, self.listener.model_size)
        self.progressBar.setVisible(False)
        self.comboBox_2.setEnabled(True)
        self.label_3.setText("")
        
    def toggle_sound(self):
        if self.checkBox.isChecked():
            self.listener.start_sound = self.start_sound
        else:
            self.listener.start_sound = ""
            
    def dragEnterEvent(self, event):
        mime_data = event.mimeData()

        # Check if the dragged data contains URLs
        if mime_data.hasUrls():
            url = mime_data.urls()[0].toLocalFile()
            if os.path.splitext(url)[-1] in ['.mp3', '.wav']:
                event.acceptProposedAction()
            else:
                QtWidgets.QMessageBox.warning(self, "Invalid File", "Please drop a .mp3 or .wav file.", QtWidgets.QMessageBox.StandardButton.Ok)
                
    def dropEvent(self, event):
        mime_data = event.mimeData()

        # Check if the dragged data contains URLs
        if mime_data.hasUrls():
            url = mime_data.urls()[0]
            file_path = url.toLocalFile()
            self.start_sound = url
            self.listener.start_sound = self.start_sound

class Window(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

app = QtWidgets.QApplication([])
window = Window()
window.show()
app.exec()