"""Audio Visualization Integration Ports (Domain Layer).

Framework-agnostic ports for visualization creation, data binding, rendering,
integration into containers, performance monitoring, progress tracking, and
logging. Adapters live outside the domain.
"""

from __future__ import annotations

from typing import Any, Protocol

from src_refactored.domain.ui_coordination.value_objects.window_operations import (
    RenderingMode,  # noqa: F401 (used by adapters/type hints)
)


class VisualizationValidationServiceProtocol(Protocol):
    def validate_visualization_config(self, config: Any) -> list[str]: ...
    def validate_data_binding_config(self, config: Any) -> list[str]: ...
    def validate_rendering_config(self, config: Any) -> list[str]: ...
    def validate_integration_compatibility(self, container: Any, config: Any) -> list[str]: ...


class VisualizationFactoryServiceProtocol(Protocol):
    def create_visualization_widget(self, config: Any, parent: Any) -> Any: ...
    def configure_visualization_properties(self, widget: Any, config: Any) -> bool: ...
    def get_supported_visualization_types(self) -> list[Any]: ...


class DataBindingServiceProtocol(Protocol):
    def setup_data_source(self, config: Any) -> Any: ...
    def bind_data_to_visualization(self, widget: Any, data_source: Any, config: Any) -> bool: ...
    def start_data_streaming(self, data_source: Any) -> bool: ...
    def stop_data_streaming(self, data_source: Any) -> bool: ...
    def get_data_metrics(self, data_source: Any) -> dict[str, float]: ...


class RenderingServiceProtocol(Protocol):
    def setup_rendering_context(self, widget: Any, config: Any) -> Any: ...
    def configure_rendering_pipeline(self, context: Any, config: Any) -> bool: ...
    def optimize_rendering_performance(self, context: Any) -> dict[str, Any]: ...
    def get_rendering_capabilities(self) -> dict[str, Any]: ...
    def get_performance_metrics(self, context: Any) -> dict[str, float]: ...


class IntegrationServiceProtocol(Protocol):
    def integrate_widget_into_container(self, widget: Any, container: Any, config: Any) -> bool: ...
    def configure_layout_properties(self, widget: Any, config: Any) -> bool: ...
    def setup_update_mechanism(self, widget: Any, update_mode: Any, interval_ms: int) -> Any: ...
    def validate_integration_success(self, widget: Any, container: Any) -> bool: ...


class PerformanceMonitoringServiceProtocol(Protocol):
    def start_performance_monitoring(self, widget: Any, session_id: str) -> bool: ...
    def get_performance_report(self, session_id: str) -> dict[str, Any]: ...
    def validate_performance_requirements(self, metrics: dict[str, float], requirements: dict[str, float]) -> list[str]: ...
    def stop_performance_monitoring(self, session_id: str) -> None: ...


class ProgressTrackingServiceProtocol(Protocol):
    def start_progress_session(self, session_id: str, total_phases: int) -> None: ...
    def update_progress(self, session_id: str, phase: Any, percentage: float) -> None: ...
    def complete_progress_session(self, session_id: str) -> None: ...


class LoggerServiceProtocol(Protocol):
    def log_info(self, message: str, context: dict[str, Any] | None = None) -> None: ...
    def log_warning(self, message: str, context: dict[str, Any] | None = None) -> None: ...
    def log_error(self, message: str, context: dict[str, Any] | None = None) -> None: ...


